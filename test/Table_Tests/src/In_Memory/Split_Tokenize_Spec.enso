from Standard.Base import all

import Standard.Test.Extensions

from Standard.Table import Table
from Standard.Table.Errors import Invalid_Value_Type, Column_Count_Exceeded, Duplicate_Output_Column_Names, No_Such_Column
from Standard.Test import Test, Test_Suite, Problems
from project.Util import all

spec =
    Test.group "Table.split" <|
        Test.specify "can do split_to_columns" <|
            cols = [["foo", [0, 1, 2]], ["bar", ["abc", "cbdbef", "ghbijbu"]]]
            t = Table.new cols
            expected_rows = [[0, "a", "c", Nothing], [1, "c", "d", "ef"], [2, "gh", "ij", "u"]]
            expected = Table.from_rows ["foo", "bar 1", "bar 2", "bar 3"] expected_rows
            t2 = t.split_to_columns "bar" "b"
            t2.should_equal expected

        Test.specify "can do split_to_rows" <|
            cols = [["foo", [0, 1, 2]], ["bar", ["abc", "cbdbef", "ghbijbu"]]]
            t = Table.new cols
            expected_rows = [[0, "a"], [0, "c"], [1, "c"], [1, "d"], [1, "ef"], [2, "gh"], [2, "ij"], [2, "u"]]
            expected = Table.from_rows ["foo", "bar"] expected_rows
            t2 = t.split_to_rows "bar" "b"
            t2.should_equal expected

        Test.specify "can do split_to_columns with some Nothings" <|
            cols = [["foo", [0, 1, 2, 3]], ["bar", ["abc", "cbdbef", Nothing, "ghbijbu"]]]
            t = Table.new cols
            expected_rows = [[0, "a", "c", Nothing], [1, "c", "d", "ef"], [2, Nothing, Nothing, Nothing], [3, "gh", "ij", "u"]]
            expected = Table.from_rows ["foo", "bar 1", "bar 2", "bar 3"] expected_rows
            t2 = t.split_to_columns "bar" "b"
            t2.should_equal expected

        Test.specify "can do split_to_rows with some Nothings" <|
            cols = [["foo", [0, 1, 2, 3]], ["bar", ["abc", "cbdbef", Nothing, "ghbijbu"]]]
            t = Table.new cols
            expected_rows = [[0, "a"], [0, "c"], [1, "c"], [1, "d"], [1, "ef"], [3, "gh"], [3, "ij"], [3, "u"]]
            expected = Table.from_rows ["foo", "bar"] expected_rows
            t2 = t.split_to_rows "bar" "b"
            t2.should_equal expected

        Test.specify "can do split_to_columns with one output column, no column suffix added" <|
            cols = [["foo", [0, 1, 2]], ["bar", ["abc", "cbdbef", "ghbijbu"]]]
            t = Table.new cols
            expected_rows = [[0, "abc"], [1, "cbdbef"], [2, "ghbijbu"]]
            expected = Table.from_rows ["foo", "bar"] expected_rows
            t2 = t.split_to_columns "bar" "q"
            t2.should_equal expected

    Test.group "Table.tokenize" <|
        Test.specify "can do tokenize_to_columns" <|
            cols = [["foo", [0, 1, 2]], ["bar", ["a12b34r5", "23", "2r4r55"]]]
            t = Table.new cols
            expected_rows = [[0, "12", "34", "5"], [1, "23", Nothing, Nothing], [2, "2", "4", "55"]]
            expected = Table.from_rows ["foo", "bar 1", "bar 2", "bar 3"] expected_rows
            t2 = t.tokenize_to_columns "bar" "\d+"
            t2.should_equal expected

        Test.specify "can do tokenize_to_rows" <|
            cols = [["foo", [0, 1, 2]], ["bar", ["a12b34r5", "23", "2r4r55"]]]
            t = Table.new cols
            expected_rows = [[0, "12"], [0, "34"], [0, "5"], [1, "23"], [2, "2"], [2, "4"], [2, "55"]]
            expected = Table.from_rows ["foo", "bar"] expected_rows
            t2 = t.tokenize_to_rows "bar" "\d+"
            t2.should_equal expected

        Test.specify "can do tokenize_to_columns with some nothings" <|
            cols = [["foo", [0, 1, 2, 3]], ["bar", ["a12b34r5", Nothing, "23", "2r4r55"]]]
            t = Table.new cols
            expected_rows = [[0, "12", "34", "5"], [1, Nothing, Nothing, Nothing], [2, "23", Nothing, Nothing], [3, "2", "4", "55"]]
            expected = Table.from_rows ["foo", "bar 1", "bar 2", "bar 3"] expected_rows
            t2 = t.tokenize_to_columns "bar" "\d+"
            t2.should_equal expected

        Test.specify "can do tokenize_to_rows with some Nothings" <|
            cols = [["foo", [0, 1, 2, 3]], ["bar", ["a12b34r5", Nothing, "23", "2r4r55"]]]
            t = Table.new cols
            expected_rows = [[0, "12"], [0, "34"], [0, "5"], [2, "23"], [3, "2"], [3, "4"], [3, "55"]]
            expected = Table.from_rows ["foo", "bar"] expected_rows
            t2 = t.tokenize_to_rows "bar" "\d+"
            t2.should_equal expected

        Test.specify "can do tokenize_to_columns with one output column, no column suffix needed" <|
            cols = [["foo", [0, 1, 2]], ["bar", ["a12b", "23", "2r"]]]
            t = Table.new cols
            expected_rows = [[0, "12"], [1, "23"], [2, "2"]]
            expected = Table.from_rows ["foo", "bar"] expected_rows
            t2 = t.tokenize_to_columns "bar" "\d+"
            t2.should_equal expected

        Test.specify "can do tokenize_to_rows with some rows that have no matches" <|
            cols = [["foo", [0, 1, 2, 3]], ["bar", ["a12b34r5", "23", "q", "2r4r55"]]]
            t = Table.new cols
            expected_rows = [[0, "12"], [0, "34"], [0, "5"], [1, "23"], [3, "2"], [3, "4"], [3, "55"]]
            expected = Table.from_rows ["foo", "bar"] expected_rows
            t2 = t.tokenize_to_rows "bar" "\d+"
            t2.should_equal expected

        Test.specify "can do tokenize_to_columns with groups" <|
            cols = [["foo", [0, 1]], ["bar", ["r a-1, b-12,qd-50", "ab-10:bc-20c"]]]
            t = Table.new cols
            expected_rows = [[0, "a1", "b12", "d50"], [1, "b10", "c20", Nothing]]
            expected = Table.from_rows ["foo", "bar 1", "bar 2", "bar 3"] expected_rows
            t2 = t.tokenize_to_columns "bar" "([a-z]).(\d+)"
            t2.should_equal expected

        Test.specify "can do tokenize_to_rows with groups" <|
            cols = [["foo", [0, 1]], ["bar", ["r a-1, b-12,qd-50", "ab-10:bc-20c"]]]
            t = Table.new cols
            expected_rows = [[0, "a1"], [0, "b12"], [0, "d50"], [1, "b10"], [1, "c20"]]
            expected = Table.from_rows ["foo", "bar"] expected_rows
            t2 = t.tokenize_to_rows "bar" "([a-z]).(\d+)"
            t2.should_equal expected

        Test.specify "can do tokenize_to_columns case-insensitively" <|
            cols = [["foo", [0, 1, 2]], ["bar", ["aBqcE", "qcBr", "cCb"]]]
            t = Table.new cols
            expected_rows = [[0, "B", "c", Nothing], [1, "c", "B", Nothing], [2, "c", "C", "b"]]
            expected = Table.from_rows ["foo", "bar 1", "bar 2", "bar 3"] expected_rows
            t2 = t.tokenize_to_columns "bar" "[bc]" case_sensitivity=Case_Sensitivity.Insensitive
            t2.should_equal expected

        Test.specify "can do tokenize_to_rows case-insensitively" <|
            cols = [["foo", [0, 1, 2]], ["bar", ["aBqcE", "qcBr", "cCb"]]]
            t = Table.new cols
            expected_rows = [[0, "B"], [0, "c"], [1, "c"], [1, "B"], [2, "c"], [2, "C"], [2, "b"]]
            expected = Table.from_rows ["foo", "bar"] expected_rows
            t2 = t.tokenize_to_rows "bar" "[bc]" case_sensitivity=Case_Sensitivity.Insensitive
            t2.should_equal expected

        Test.specify "can do tokenize_to_rows with at_least_one_row=True" <|
            input = Table.from_rows ["foo", "bar"] [[0, "a12b34r5"], [1, "qqq"], [2, "2r4r55"]]
            expected = Table.from_rows ["foo", "bar"] [[0, "12"], [0, "34"], [0, "5"], [1, Nothing], [2, "2"], [2, "4"], [2, "55"]]
            actual = input.tokenize_to_rows "bar" "\d+" at_least_one_row=True
            actual.should_equal expected

        Test.specify "can do tokenize_to_rows with at_least_one_row=True, with groups" <|
            input = Table.from_rows ["foo", "bar"] [[0, "a12b34r5"], [1, "qqq"], [2, "2r44r55"], [3, Nothing]]
            expected = Table.from_rows ["foo", "bar"] [[0, "12"], [0, "34"], [1, Nothing], [2, "44"], [2, "55"], [3, Nothing]]
            actual = input.tokenize_to_rows "bar" "(\d)(\d)" at_least_one_row=True
            actual.should_equal expected

    Test.group "Table.split/tokenize column count" <|
        Test.specify "should generate extra empty columns if column_count is set" <|
            cols = [["foo", [0, 1, 2]], ["bar", ["abc", "cbdbef", "ghbijbu"]]]
            t = Table.new cols
            expected_rows = [[0, "a", "c", Nothing, Nothing], [1, "c", "d", "ef", Nothing], [2, "gh", "ij", "u", Nothing]]
            expected = Table.from_rows ["foo", "bar 1", "bar 2", "bar 3", "bar 3"] expected_rows
            t2 = t.split_to_columns "bar" "b" column_count=4
            t2.should_equal expected
            t2.at "bar 3" . value_type . is_text . should_be_true

        Test.specify "split should limit columns and return problems when exceeding the column limit" <|
            cols = [["foo", [0, 1, 2]], ["bar", ["abc", "cbdbef", "ghbijbu"]]]
            t = Table.new cols
            expected_rows = [[0, "a", "c"], [1, "c", "d"], [2, "gh", "ij"]]
            expected = Table.from_rows ["foo", "bar 1", "bar 2"] expected_rows
            action = t.split_to_columns "bar" "b" column_count=2 on_problems=_
            tester = t-> t.should_equal expected
            problems = [Column_Count_Exceeded.Error 2 3]
            Problems.test_problem_handling action problems tester

        Test.specify "tokenize should limit columns and return problems when exceeding the column limit" <|
            cols = [["foo", [0, 1]], ["bar", ["r a-1, b-12,qd-50", "ab-10:bc-20c"]]]
            t = Table.new cols
            expected_rows = [[0, "a1", "b12", "d50"], [1, "b10", "c20", Nothing]]
            expected = Table.from_rows ["foo", "bar 1", "bar 2"] expected_rows
            action = t.tokenize_to_columns "bar" "([a-z]).(\d+)" column_count=2 on_problems=_
            tester = t-> t.should_equal expected
            problems = [Column_Count_Exceeded.Error 2 3]
            Problems.test_problem_handling action problems tester

        Test.specify "should generate extra empty columns if column_count is set (with rows in a different order)" <|
            cols = [["foo", [0, 1, 2]], ["bar", ["ghbijbu", "cbdbef", "abc"]]]
            t = Table.new cols
            expected_rows = [[0, "gh", "ij", "u", Nothing], [1, "c", "d", "ef", Nothing], [2, "a", "c", Nothing, Nothing]]
            expected = Table.from_rows ["foo", "bar 1", "bar 2", "bar 3", "bar 3"] expected_rows
            t2 = t.split_to_columns "bar" "b" column_count=4
            t2.should_equal expected
            t2.at "bar 3" . value_type . is_text . should_be_true

    Test.group "Table.split/tokenize errors" <|
        Test.specify "won't work on a non-text column" <|
            cols = [["foo", [0, 1]], ["bar", ["r a-1, b-12,qd-50", "ab-10:bc-20c"]]]
            t = Table.new cols
            t.split_to_columns "foo" "x" . should_fail_with Invalid_Value_Type
            t.split_to_rows "foo" "x" . should_fail_with Invalid_Value_Type
            t.tokenize_to_columns "foo" "x" . should_fail_with Invalid_Value_Type
            t.tokenize_to_rows "foo" "x" . should_fail_with Invalid_Value_Type

        Test.specify "won't work on a mixed column" <|
            cols = [["foo", [0, 1]], ["bar", [500, "ab-10:bc-20c"]]]
            t = Table.new cols
            t.split_to_columns "bar" "x" . should_fail_with Invalid_Value_Type
            t.split_to_rows "bar" "x" . should_fail_with Invalid_Value_Type
            t.tokenize_to_columns "bar" "x" . should_fail_with Invalid_Value_Type
            t.tokenize_to_rows "bar" "x" . should_fail_with Invalid_Value_Type

        Test.specify "*_to_columns handles missing input column" <|
            cols = [["foo", [0, 1]], ["bar", ["r a-1, b-12,qd-50", "ab-10:bc-20c"]]]
            t = Table.new cols
            t.tokenize_to_columns "invalid_name" "([a-z]).(\d+)" . should_fail_with No_Such_Column

        Test.specify "*_to_rows handles missing input column" <|
            cols = [["foo", [0, 1]], ["bar", ["r a-1, b-12,qd-50", "ab-10:bc-20c"]]]
            t = Table.new cols
            t.tokenize_to_rows "invalid_name" "([a-z]).(\d+)" . should_fail_with No_Such_Column

    Test.group "Table.split/tokenize name conflicts" <|
        Test.specify "split will make column names unique" <|
            cols = [["foo", [0, 1, 2]], ["bar", ["abc", "cbdbef", "ghbijbu"]], ["bar 1", ["a", "b", "c"]]]
            t = Table.new cols
            expected_rows = [[0, "a", "c", Nothing, "a"], [1, "c", "d", "ef", "b"], [2, "gh", "ij", "u", "c"]]
            expected = Table.from_rows ["foo", "bar 1 1", "bar 2", "bar 3", "bar 1"] expected_rows
            action = t.split_to_columns "bar" "b" on_problems=_
            tester = t-> t.should_equal expected
            problems = [Duplicate_Output_Column_Names.Error ["bar 1"]]
            Problems.test_problem_handling action problems tester

        Test.specify "tokenize will make column names unique" <|
            cols = [["foo", [0, 1, 2]], ["bar", ["a12b34r5", "23", "2r4r55"]], ["bar 1", ["a", "b", "c"]]]
            t = Table.new cols
            expected_rows = [[0, "12", "34", "5", "a"], [1, "23", Nothing, Nothing, "b"], [2, "2", "4", "55", "c"]]
            expected = Table.from_rows ["foo", "bar 1 1", "bar 2", "bar 3", "bar 1"] expected_rows
            action = t.tokenize_to_columns "bar" "\d+"  on_problems=_
            tester = t-> t.should_equal expected
            problems = [Duplicate_Output_Column_Names.Error ["bar 1"]]
            Problems.test_problem_handling action problems tester

    Test.group "Table.split/tokenize column order" <|
        Test.specify "preserves column order" <|
            cols = [["foo", [0, 1, 2]], ["bar", ["abc", "cbdbef", "ghbijbu"]], ["baz", [1, 2, 3]]]
            t = Table.new cols
            expected_rows = [[0, "a", "c", Nothing, 1], [1, "c", "d", "ef", 2], [2, "gh", "ij", "u", 3]]
            expected = Table.from_rows ["foo", "bar 1", "bar 2", "bar 3", "baz"] expected_rows
            t2 = t.split_to_columns "bar" "b"
            t2.should_equal expected

    Test.group "Table.parse_to_columns" <|
        Test.specify "can parse to columns" <|
            t = Table.from_rows ["foo", "bar", "baz"] [["x", "12 34p q56", "y"], ["xx", "a48 59b", "yy"]]
            expected = Table.from_rows ["foo", "bar 1", "bar 2", "baz"] [["x", 1, 2, "y"], ["x", 3, 4, "y"], ["x", 5, 6, "y"], ["xx", 4, 8, "yy"], ["xx", 5, 9, "yy"]]
            actual = t.parse_to_columns "bar" "(\d)(\d)"
            actual.should_equal expected

        Test.specify "no regex groups" <|
            t = Table.from_rows ["foo", "bar", "baz"] [["x", "12 34p q56", "y"], ["xx", "a48 59b", "yy"]]
            expected = Table.from_rows ["foo", "bar", "baz"] [["x", 12, "y"], ["x", 34, "y"], ["x", 56, "y"], ["xx", 48, "yy"], ["xx", 59, "yy"]]
            actual = t.parse_to_columns "bar" "\d\d"
            actual.should_equal expected

        Test.specify "named groups" <|
            t = Table.from_rows ["foo", "bar", "baz"] [["x", "12 34p q56", "y"], ["xx", "a48 59b", "yy"]]
            expected = Table.from_rows ["foo", "xomt", "biff", "baz"] [["x", 1, 2, "y"], ["x", 3, 4, "y"], ["x", 5, 6, "y"], ["xx", 4, 8, "yy"], ["xx", 5, 9, "yy"]]
            actual = t.parse_to_columns "bar" "(?<xomt>\d)(?<biff>\d)"
            actual.should_equal expected

        Test.specify "non-participating groups" <|
            t = Table.from_rows ["foo", "bar", "baz"] [["x", "q1", "y"], ["xx", "qp", "yy"]]
            expected = Table.from_rows ["foo", "bar 1", "bar 2", "bar 3", "baz"] [["x", "1", 1, Nothing, "y"], ["xx", "p", Nothing, "p", "yy"]]
            actual = t.parse_to_columns "bar" "q((\d)|([a-z]))"
            actual.should_equal expected

        Test.specify "case-insensitive" <|
            t = Table.from_rows ["foo", "bar", "baz"] [["x", "qq", "y"], ["xx", "qQ", "yy"]]
            expected = Table.from_rows ["foo", "bar 1", "baz"] [["x", "q", "y"], ["xx", "Q", "yy"]]
            actual = t.parse_to_columns "bar" "q(q)" case_sensitivity=Case_Sensitivity.Insensitive
            actual.should_equal expected

        Test.specify "no post-parsing" <|
            t = Table.from_rows ["foo", "bar", "baz"] [["x", "12 34p q56", "y"], ["xx", "a48 59b", "yy"]]
            expected = Table.from_rows ["foo", "bar 1", "bar 2", "baz"] [["x", "1", "2", "y"], ["x", "3", "4", "y"], ["x", "5", "6", "y"], ["xx", "4", "8", "yy"], ["xx", "5", "9", "yy"]]
            actual = t.parse_to_columns "bar" "(\d)(\d)" parse_values=False
            actual.should_equal expected

        Test.specify "column name clash" <|
            t = Table.from_rows ["foo", "bar", "bar 1"] [["x", "12 34p q56", "y"], ["xx", "a48 59b", "yy"]]
            expected = Table.from_rows ["foo", "bar 1 1", "bar 2", "bar 1"] [["x", 1, 2, "y"], ["x", 3, 4, "y"], ["x", 5, 6, "y"], ["xx", 4, 8, "yy"], ["xx", 5, 9, "yy"]]
            actual = t.parse_to_columns "bar" "(\d)(\d)"
            actual.should_equal expected

        Test.specify "column and group name clash" <|
            t = Table.from_rows ["foo", "bar", "baz"] [["x", "123", "y"]]
            expected = Table.from_rows ["foo", "bar", "baz 1", "quux", "baz"] [["x", 1, 2, 3, "y"]]
            actual = t.parse_to_columns "bar" "(?<bar>\d)(?<baz>\d)(?<quux>\d)"
            actual.should_equal expected

        Test.specify "empty table" <|
            t = Table.from_rows ["foo", "bar", "baz"] [["x", "a", "y"]] . take 0
            expected = Table.from_rows ["foo", "bar", "baz"] []
            actual = t.parse_to_columns "bar" "\d+"
            actual.should_equal expected

        Test.specify "empty table, with regex groups" <|
            t = Table.from_rows ["foo", "bar", "baz"] [["x", "a", "y"]] . take 0
            expected = Table.from_rows ["foo", "bar 1", "bar 2", "baz"] [["x", "a", "a", "y"]] . take 0
            actual = t.parse_to_columns "bar" "(\d)(\d)"
            actual.should_equal expected

        Test.specify "empty table, with named and unnamed regex groups" <|
            t = Table.from_rows ["foo", "bar", "baz"] [["x", "a", "y"]] . take 0
            expected = Table.from_rows ["foo", "quux", "bar 1", "foo 1", "bar 2", "baz"] [["x", "a", "a", "a", "a", "y"]] . take 0
            actual = t.parse_to_columns "bar" "(?<quux>)(\d)(?<foo>\d)(\d)"
            actual.should_equal expected

        Test.specify "input with no matches" <|
            t = Table.from_rows ["foo", "bar", "baz"] [["x", "a", "y"], ["xx", "q12", "yy"], ["xxx", "34r", "yyyy"]]
            expected = Table.from_rows ["foo", "bar", "baz"] [["x", Nothing, "y"], ["xx", 12, "yy"], ["xxx", 34, "yyyy"]]
            actual = t.parse_to_columns "bar" "\d+"
            actual.should_equal expected

            t2 = Table.new [["amount", ["$1.23B", "$1.3M", "$2.32M $3.43B", "None"]]]
            expected2 = Table.from_rows ["Raised", "Scale"] [[1.23, "B"], [1.3, "M"], [2.32, "M"], [3.43, "B"], [Nothing, Nothing]]
            actual2 = t2.parse_to_columns "amount" "\$(?<Raised>\d+(?:.\d+)?)(?<Scale>B|M)"
            actual2.should_equal expected2

        Test.specify "input with no matches, with regex groups" <|
            t = Table.from_rows ["foo", "bar", "baz"] [["x", "a", "y"]]
            expected = Table.from_rows ["foo", "bar 1", "bar 2", "baz"] [["x", Nothing, Nothing, "y"]]
            actual = t.parse_to_columns "bar" "(\d)(\d)"
            actual.should_equal expected

        Test.specify "input with no matches, with named and unnamed regex groups" <|
            t = Table.from_rows ["foo", "bar", "baz"] [["x", "a", "y"]]
            expected = Table.from_rows ["foo", "quux", "bar 1", "foo 1", "bar 2", "baz"] [["x", Nothing, Nothing, Nothing, Nothing, "y"]]
            actual = t.parse_to_columns "bar" "(?<quux>)(\d)(?<foo>\d)(\d)"
            actual.should_equal expected

main = Test_Suite.run_main spec
