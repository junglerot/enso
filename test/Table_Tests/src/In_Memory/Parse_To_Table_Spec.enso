from Standard.Base import all

import Standard.Base.Data.Text.Regex.Regex_Syntax_Error
import Standard.Base.Errors.Common.Type_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Table.Data.Table_Conversions
import Standard.Test.Extensions

from Standard.Table import Table
from Standard.Table.Data.Type.Value_Type import Bits, Value_Type
from Standard.Table.Errors import Invalid_Value_Type, Column_Count_Exceeded, Duplicate_Output_Column_Names, Missing_Input_Columns
from Standard.Test import Test, Test_Suite, Problems
from project.Util import all

spec =
    Test.group "Text.parse_to_table" <|
        Test.specify "text_to_table" <|
            expected = Table.from_rows ["Column"]
                                       [["a"], ["ab12"], ["bt100"], ["c12"], ["d20"], ["q"]]
            actual = "a 7 ab12 bt100 c12d20q 12".parse_to_table "[a-z]+\d*"
            actual.should_equal expected

        Test.specify "text_to_table with a regex" <|
            expected = Table.from_rows ["Column"]
                                       [["a"], ["ab12"], ["bt100"], ["c12"], ["d20"], ["q"]]
            actual = "a 7 ab12 bt100 c12d20q 12".parse_to_table "[a-z]+\d*".to_regex
            actual.should_equal expected

    Test.group "Text.parse_to_table with groups" <|
        Test.specify "with groups" <|
            expected = Table.from_rows ["Column 1", "Column 2"]
                                       [["ab", 12], ["bt", 100], ["c", 12], ["d", 20]]
            actual = "a 7 ab-12 bt-100 c-12d-20q q8 12".parse_to_table "([a-z]+)-(\d*)"
            actual.should_equal expected

        Test.specify "with named groups" <|
            expected = Table.from_rows ["letters", "Column 2"]
                                       [["ab", 12], ["bt", 100], ["c", 12], ["d", 20]]
            actual = "a 7 ab-12 bt-100 c-12d-20q q8 12".parse_to_table "(?<letters>[a-z]+)-(\d*)"
            actual.should_equal expected

    Test.group "Text.parse_to_table with case-insensitivity" <|
        Test.specify "case insensitivity" <|
            expected = Table.from_rows ["Column 1", "Column 2"]
                                       [["a", "B"], ["A", "b"], ["a", "b"], ["A", "B"]]
            actual = "xy aB Ab ab AB".parse_to_table "(a)(b)" case_sensitivity=Case_Sensitivity.Insensitive
            actual.should_equal expected

    Test.group "Text.parse_to_table parsing" <|
        Test.specify "parsing on" <|
            expected = Table.from_rows ["Column 1", "Column 2"]
                                       [["ab", 12], ["bt", 100], ["c", 12], ["d", 20]]
            actual = "a 7 ab-12 bt-100 c-12d-20q q8 12".parse_to_table "([a-z]+)-(\d*)"
            actual.should_equal expected
            actual.columns.map .value_type . should_equal [Value_Type.Char Nothing True, Value_Type.Integer Bits.Bits_64]

        Test.specify "parsing on, with a mixed column" <|
            expected = Table.from_rows ["Column 1", "Column 2"]
                                       [["ab", "12"], ["bt", "100"], ["c", "012"], ["d", "20"]]
            actual = "a 7 ab-12 bt-100 c-012d-20q q8 12".parse_to_table "([a-z]+)-(\d*)"
            actual.should_equal expected
            actual.columns.map .value_type . should_equal [Value_Type.Char Nothing True, Value_Type.Char Nothing True]

        Test.specify "parsing off" <|
            expected = Table.from_rows ["Column 1", "Column 2"]
                                       [["ab", "12"], ["bt", "100"], ["c", "12"], ["d", "20"]]
            actual = "a 7 ab-12 bt-100 c-12d-20q q8 12".parse_to_table "([a-z]+)-(\d*)" parse_values=False
            actual.should_equal expected
            actual.columns.map .value_type . should_equal [Value_Type.Char Nothing True, Value_Type.Char Nothing True]

    Test.group "Text.parse_to_table errors" <|
        Test.specify "Regex_Syntax_Error" <|
            "abc".parse_to_table "(a)(?<<" . should_fail_with Regex_Syntax_Error

        Test.specify "enpty pattern" <|
            "abc".parse_to_table "" . should_fail_with Illegal_Argument

        Test.specify "bad arg" <|
            Test.expect_panic_with (actual = "a 7 ab12 bt100 c12d20q 12".parse_to_table 12) Type_Error

main = Test_Suite.run_main spec
