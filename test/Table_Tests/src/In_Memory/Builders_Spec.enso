from Standard.Base import all

import Standard.Table.Internal.Java_Exports

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

type My
    Data x y

main = Test_Suite.run_main spec

spec = Test.group "[In-Memory] Storage Builders" <|
    Test.specify "should correctly incrementally build a table in presence of lots of null values" <|
        ## This test is introduced to avoid regressions related to a bug where
           the underlying array was not resized to big enough size after many
           null values were inserted to a builder.
        ## We rely on the inferred builder as it will then delegate to all the
           other ones, selecting the types automatically.
        elem = ['X', 42, 1.5, My.Data 1 2, Date.new 2022 8 27, Time_Of_Day.new 18 00, Date_Time.new 2022 8 27 11 22 25, "a", Nothing]
        elem.each e-> Test.with_clue "{"+e.to_text+"}: " <|
            builder = Java_Exports.make_inferred_builder 1
            vector = Vector.fill 10 e + Vector.fill 1000 Nothing + Vector.fill 5 e
            0.up_to 10 . each _->
                builder.append e
            builder.appendNulls 1000
            0.up_to 5 . each _->
                builder.append e
            storage = builder.seal
            column = Java_Exports.make_column "X" storage
            column.to_vector . should_equal vector
