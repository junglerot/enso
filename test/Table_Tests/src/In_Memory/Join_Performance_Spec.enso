from Standard.Base import all

from Standard.Table import all

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions
from project.Util import all

spec =
    Test.group "[In-Memory] Table.join performance" <|
        n = 10000
        Test.specify "should efficiently compute equality joins" <|
            vec = 0.up_to n . to_vector
            vec2 = 1.up_to n+1 . to_vector
            t1 = Table.new [["X", vec], ["Y", 0.up_to n . map (_ % 2)]]
            t2 = Table.new [["B", [0, 1]]]
            t3 = Table.new [["X", vec.reverse], ["Z", vec2]]

            r1 = Duration.time_execution <|
                t1.join t2 on=(Join_Condition.Equals "Y" "B")

            r2 = Duration.time_execution <|
                t1.join t3 on="X"
            t4 = r2.second . order_by ["X"]
            t4.at "X" . to_vector . should_equal <| vec
            t4.at "Z" . to_vector . should_equal <| vec2.reverse

            base_ms = r1.first.total_milliseconds
            expected_max_time_ms = base_ms * 5 + 100
            runtime_ms = r2.first.total_milliseconds
            if runtime_ms > expected_max_time_ms then
                Test.fail "Expected a join of "+n.to_text+"x"+n.to_text+" with linear result size to be efficient, but it took "+runtime_ms.to_text+"ms while a join of 2x"+n.to_text+" with the same result size took "+base_ms.to_text+"ms. The maximum time threshold for this operation to be deemed efficient has been estimated at "+expected_max_time_ms.to_text+"ms."

        Test.specify "should efficiently compute equality joins mixed with other secondary conditions" <|
            vec = 0.up_to n . to_vector
            vec2 = 1.up_to n+1 . to_vector
            t1 = Table.new [["X", vec], ["Y", 0.up_to n . map (_ % 2)], ["A", Vector.fill n "a"], ["B", Vector.fill n 9]]
            t2 = Table.new [["B", [0, 1]], ["A", ["A", "A"]], ["l", [0, 0]], ["u", [20, 20]]]
            t3 = Table.new [["X", vec.reverse], ["Z", vec2], ["A", Vector.fill n "a"], ["l", Vector.fill n 0], ["u", Vector.fill n 20]]

            secondary_conditions = [Join_Condition.Equals_Ignore_Case "A", Join_Condition.Between "B" "l" "u"]

            r1 = Duration.time_execution <|
                t1.join t2 on=secondary_conditions+[Join_Condition.Equals "Y" "B"]

            r2 = Duration.time_execution <|
                t1.join t3 on=secondary_conditions+[Join_Condition.Equals "X" "X"]
            t4 = r2.second . order_by ["X"]
            t4.at "X" . to_vector . should_equal <| vec
            t4.at "Z" . to_vector . should_equal <| vec2.reverse

            base_ms = r1.first.total_milliseconds
            expected_max_time_ms = base_ms * 5 + 100
            runtime_ms = r2.first.total_milliseconds
            if runtime_ms > expected_max_time_ms then
                Test.fail "Expected a join of "+n.to_text+"x"+n.to_text+" with linear result size to be efficient, but it took "+runtime_ms.to_text+"ms while a join of 2x"+n.to_text+" with the same result size took "+base_ms.to_text+"ms. The maximum time threshold for this operation to be deemed efficient has been estimated at "+expected_max_time_ms.to_text+"ms."

        Test.specify "should efficiently compute case-insensitive equality joins" <|
            unique_text_for_number prefix i =
                suffix = Text.from_utf_8 [97 + i%20]
                prefix + i.to_text + "-" + suffix
            lowers = 0.up_to n . map (unique_text_for_number "a")
            uppers = 0.up_to n . map (unique_text_for_number "A")
            t1 = Table.new [["X", lowers], ["Y", 0.up_to n . map i-> if i%2 == 0 then "a" else "b"], ["A", Vector.fill n 44], ["B", Vector.fill n 9], ["N", 0.up_to n . to_vector]]
            t2 = Table.new [["B", ["A", "B", "a"]], ["A", [44, 44, 44]], ["l", [0, 0, 0]], ["u", [20, 20, 20]]]
            t3 = Table.new [["X", uppers.reverse], ["Z", 1.up_to n+1 . to_vector], ["A", Vector.fill n 44], ["l", Vector.fill n 0], ["u", Vector.fill n 20]]

            secondary_conditions = [Join_Condition.Equals "A", Join_Condition.Between "B" "l" "u"]

            r1 = Duration.time_execution <|
                t1.join t2 on=[Join_Condition.Equals_Ignore_Case "Y" "B"]+secondary_conditions
            r1.second.row_count . should_equal (n + n/2)

            r2 = Duration.time_execution <|
                t1.join t3 on=[Join_Condition.Equals_Ignore_Case "X" "X"]+secondary_conditions
            t4 = r2.second . order_by "N"
            t4.row_count . should_equal n
            t4.at "X" . to_vector . should_equal lowers
            t4.at "Right X" . to_vector . should_equal uppers
            t4.at "Z" . to_vector . should_equal <| 1.up_to n+1 . to_vector . reverse

            base_ms = r1.first.total_milliseconds
            expected_max_time_ms = base_ms * 5 + 100
            runtime_ms = r2.first.total_milliseconds
            if runtime_ms > expected_max_time_ms then
                Test.fail "Expected a join of "+n.to_text+"x"+n.to_text+" with linear result size to be efficient, but it took "+runtime_ms.to_text+"ms while a join of 3x"+n.to_text+" with the same result size took "+base_ms.to_text+"ms. The maximum time threshold for this operation to be deemed efficient has been estimated at "+expected_max_time_ms.to_text+"ms."

        Test.specify "should efficiently compute Between joins" pending="TODO in task https://www.pivotaltracker.com/story/show/183913337" <|
            xs = 0.up_to n . map x-> x * 20
            ls = 0.up_to n . map x-> x * 20 - 20
            us = 0.up_to n . map x-> x * 20 + 5
            t1 = Table.new [["X", xs], ["A", Vector.fill n "a"], ["B", Vector.fill n 44]]
            # We set up the ranges so that each entry of `t1` will match 2, apart from the first entry matched only once.
            t2 = Table.new [["l", [0, 10]], ["u", [20 * n, 20 * n + 100]], ["A", ["a", "A"]], ["B", [44, 44]]]
            # Here also, each range from `t3` will match 2 entries of `t1`, apart from the first one.
            t3 = Table.new [["l", ls], ["u", us], ["A", Vector.fill n "A"], ["B", Vector.fill n 44]]

            conditions = [Join_Condition.Equals_Ignore_Case "A", Join_Condition.Between "X" "l" "u", Join_Condition.Equals "B"]

            r1 = Duration.time_execution <|
                t1.join t2 on=conditions
            r1.second.row_count . should_equal (2*n - 1)

            r2 = Duration.time_execution <|
                t1.join t3 on=conditions
            t4 = r2.second . order_by ["X", "l"]
            t4.row_count . should_equal (2*n - 1)

            t4.at "X" . to_vector . should_equal ((xs.flat_map x-> [x, x]) . drop (Last 1))
            t4.at "l" . to_vector . should_equal (ls.zip (ls.drop 1) . flatten)+[ls.last]

            base_ms = r1.first.total_milliseconds
            expected_max_time_ms = base_ms * 5 + 100
            runtime_ms = r2.first.total_milliseconds
            if runtime_ms > expected_max_time_ms then
                Test.fail "Expected a join of "+n.to_text+"x"+n.to_text+" with linear result size to be efficient, but it took "+runtime_ms.to_text+"ms while a join of 2x"+n.to_text+" with the same result size took "+base_ms.to_text+"ms. The maximum time threshold for this operation to be deemed efficient has been estimated at "+expected_max_time_ms.to_text+"ms."

main = Test_Suite.run_main spec
