from Standard.Base import all

import project.Util

import Standard.Base.Errors.Common.Arithmetic_Error
import Standard.Base.Errors.Common.Index_Out_Of_Bounds
import Standard.Base.Errors.Common.Type_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Test.Extensions

from Standard.Table import Column, Value_Type, Auto
import Standard.Table.Data.Type.Value_Type.Bits
from Standard.Table.Errors import Invalid_Value_Type, Invalid_Column_Names

from Standard.Test_New import all

main =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter


add_specs suite_builder =
    suite_builder.group "Columns" group_builder->
        test_column = Column.from_vector "Test" [1, 3, 5, 2, 4, 6]
        empty_column = Column.from_vector "Test" []

        group_builder.specify "should allow getting specific elements" <|
            test_column.at 0 . should_equal 1
            test_column.at 2 . should_equal 5
            test_column.at 5 . should_equal 6
            test_column.at 6 . should_fail_with Index_Out_Of_Bounds
            empty_column.at 0 . should_fail_with Index_Out_Of_Bounds

        group_builder.specify "should be able to take the first n elements" <|
            expected_1 = Column.from_vector "Test" [1, 3, 5]
            expected_2 = Column.from_vector "Test" [1, 3, 5, 2, 4, 6]
            expected_3 = Column.from_vector "Test" []
            test_column.take (First 3) . to_vector . should_equal expected_1.to_vector
            test_column.take (First 7) . to_vector . should_equal expected_2.to_vector
            test_column.take (First 0) . to_vector . should_equal expected_3.to_vector

        group_builder.specify "should be able to take the first n elements by Integer" <|
            expected_1 = Column.from_vector "Test" [1, 3, 5]
            expected_2 = Column.from_vector "Test" [1, 3, 5, 2, 4, 6]
            expected_3 = Column.from_vector "Test" []
            test_column.take 3 . to_vector . should_equal expected_1.to_vector
            test_column.take 7 . to_vector . should_equal expected_2.to_vector
            test_column.take 0 . to_vector . should_equal expected_3.to_vector

        group_builder.specify "should be able to take the last n elements" <|
            expected_1 = Column.from_vector "Test" [2, 4, 6]
            expected_2 = Column.from_vector "Test" [1, 3, 5, 2, 4, 6]
            expected_3 = Column.from_vector "Test" []
            test_column.take (Last 3) . to_vector . should_equal expected_1.to_vector
            test_column.take (Last 7) . to_vector . should_equal expected_2.to_vector
            test_column.take (Last 0) . to_vector . should_equal expected_3.to_vector

        group_builder.specify "should be able to get the first element" <|
            test_column.first . should_equal 1
            empty_column.first.should_fail_with Index_Out_Of_Bounds

        group_builder.specify "should be able to get the last element" <|
            test_column.last . should_equal 6
            empty_column.last.should_fail_with Index_Out_Of_Bounds

        group_builder.specify "should be able to be reversed" <|
            expected_1 = Column.from_vector "Test" [6, 4, 2, 5, 3, 1]
            test_column.reverse.to_vector . should_equal expected_1.to_vector
            empty_column.reverse.to_vector . should_equal empty_column.to_vector

        group_builder.specify "should allow to count duplicate value occurrences" <|
            c_1 = Column.from_vector "c 1" [0, 1, 2, 2, 1, 0, 2]
            c_1.duplicate_count.to_vector.should_equal [0, 0, 0, 1, 1, 1, 2]

            c_2 = Column.from_vector "c 2" ["foo", "bar", "foo", "baz", "bar"]
            c_2.duplicate_count.to_vector.should_equal [0, 0, 1, 0, 1]

        group_builder.specify "should result in correct Storage if operation allows it" <|
            another = Column.from_vector "Test" [10, 20, 30, 40, 50, 60]
            (test_column + 1).value_type . should_equal Value_Type.Integer
            (test_column - 1).value_type . should_equal Value_Type.Integer
            (test_column * 2).value_type . should_equal Value_Type.Integer
            (test_column * 1.5).value_type . should_equal Value_Type.Float
            (test_column + another).value_type . should_equal Value_Type.Integer

        group_builder.specify "should forward dataflow error if constructed from one" <|
            foo x =
                if x == 1 then Error.throw "X" else x
            col = Column.from_vector "Test" [foo 0, foo 1, foo 2]
            col . should_fail_with Text
            col.catch . should_equal "X"

        group_builder.specify "should not allow invalid column names" <|
            c1 = Column.from_vector "" [1, 2, 3]
            c1.should_fail_with Invalid_Column_Names

            Test.expect_panic_with (Column.from_vector Nothing [1, 2, 3]) Type_Error

            c3 = Column.from_vector '\0' [1, 2, 3]
            c3.should_fail_with Invalid_Column_Names

            c4 = Column.from_vector 'foo\0bar' [1, 2, 3]
            c4.should_fail_with Invalid_Column_Names

        group_builder.specify "will coerce integers to decimals by default, to get a numeric column" <|
            c1 = Column.from_vector "X" [1, 2.0]
            c1.value_type . should_equal Value_Type.Float
            c1.at 0 . should_be_a Float
            c1.at 1 . should_be_a Float
            c1.at 0 . is_a Integer . should_be_false

        group_builder.specify "will preserve the types if the column is Mixed, regardless of ordering" <|
            run_test vector =
                Test.with_clue vector.pretty+": " <|
                     c = Column.from_vector "X" vector
                     c.value_type . should_equal Value_Type.Mixed
                     c.to_vector . should_equal vector
                     Problems.assume_no_problems c

                     # Verify that types of the values are preserved.
                     c.to_vector.zip vector got-> expected->
                        Test.with_clue "(type of "+got.pretty+") " <|
                            (Meta.type_of got) . should_equal (Meta.type_of expected)
                            got.to_text . should_equal expected.to_text

            ## Testing various permutations to ensure that the behaviour is
               invariant to the order of the values.
               (It used to differ depending on the order.)
            big = (2^100)+1
            medium = (2^62)-1
            run_test ["a", 1, 2.0]
            run_test [1, 2.0, "a"]
            run_test [2.0, 1, "a"]
            run_test [2.5, 1, "a"]
            run_test [10, 1.5, "a"]
            run_test ["a", 1.5, 10]
            run_test [big, 1.5, "a"]
            run_test [1.5, big, "a"]
            run_test [2, big, 1.5, "a"]
            run_test [2, big, 1.5, "a"]
            run_test [1.5, big, 2, "a"]
            run_test [Nothing, 1.5, medium, 2, "a"]
            run_test [medium, 1.5, "a"]
            run_test [Nothing, medium, 1.5, "a"]

            big_test_vector x y =
                a = Vector.fill 40 [x, 1.5, 2, y, x+123, y+123, y+5, 2.5]
                b = Vector.fill 100 [Nothing]
                c = Vector.fill 500 [2, 1.5, x]
                d = Vector.fill 5 [2, "a", 2, 2.5]
                (a+b+c+d).flatten
            run_test (big_test_vector medium big)
            run_test (big_test_vector 123 456)

        group_builder.specify "should allow to set a specific type at construction" <|
            c1 = Column.from_vector "X" [1, 2] Value_Type.Float
            c1.value_type . should_equal Value_Type.Float
            c1.at 0 . should_be_a Float
            c1.at 1 . should_be_a Float
            c1.to_vector . should_equal [1.0, 2.0]

            # Even if we have only integers, we force the value_type to be reported as Mixed.
            c2 = Column.from_vector "X" [1, 2] Value_Type.Mixed
            c2.value_type . should_equal Value_Type.Mixed
            c2.at 0 . should_be_a Integer
            c2.at 1 . should_be_a Integer
            c2.to_vector . should_equal [1, 2]

            c3 = Column.from_vector "X" [1, 2] Auto
            c3.value_type . should_equal Value_Type.Integer
            c3.to_vector . should_equal [1, 2]

            c3_1 = Column.from_vector "X" [1, 2] (Value_Type.Integer Bits.Bits_16)
            c3_1.value_type . should_equal (Value_Type.Integer Bits.Bits_16)
            c3_1.to_vector . should_equal [1, 2]

            c3_2 = Column.from_vector "X" [1, 2] Value_Type.Byte
            c3_2.value_type . should_equal Value_Type.Byte
            c3_2.to_vector . should_equal [1, 2]

            c4 = Column.from_vector "X" ["a", 42] Value_Type.Mixed
            c4.value_type . should_equal Value_Type.Mixed
            c4.to_vector . should_equal ["a", 42]

            # By default Auto will yield simply Value_Type.Char with variable length and no limit.
            c5 = Column.from_vector "X" ["aaa", "bbb"] Auto
            c5.value_type . should_equal Value_Type.Char

            # But we can narrow down to a more specific type.
            c6 = Column.from_vector "X" ["aaa", "bbb"] (Value_Type.Char size=3 variable_length=False)
            c6.value_type . should_equal (Value_Type.Char size=3 variable_length=False)

            c7 = Column.from_vector "X" ["aaa", "b"] (Value_Type.Char size=3 variable_length=True)
            c7.value_type . should_equal (Value_Type.Char size=3 variable_length=True)
            c7.to_vector . should_equal ["aaa", "b"]

            c8 = Column.from_vector "X" ["aaa", 42, Date.new 2022 08 22] Value_Type.Mixed
            c8.value_type . should_equal Value_Type.Mixed
            c8.to_vector . should_equal ["aaa", 42, Date.new 2022 08 22]

            c9 = Column.from_vector "X" [Time_Of_Day.new 10 11 12, Time_Of_Day.new 11 30] Value_Type.Time
            c9.value_type . should_equal Value_Type.Time
            c9.to_vector . should_equal [Time_Of_Day.new 10 11 12, Time_Of_Day.new 11 30]

        group_builder.specify "will fail if unexpected values are encountered for the requested type" <|
            r1 = Column.from_vector "X" ["a", 2] Value_Type.Char
            r1.should_fail_with Invalid_Value_Type
            r1.catch.to_display_text.should_contain "Expected type Char (variable length, max_size=unlimited), but got a value 2 of type Integer (16 bits)"

            r2 = Column.from_vector "X" ["aaa", "b"] (Value_Type.Char size=3 variable_length=False)
            r2.should_fail_with Invalid_Value_Type
            r2.catch.to_display_text.should_contain "Expected type Char (fixed length, size=3), but got a value b of type Char (fixed length, size=1)"

            r3 = Column.from_vector "X" ["aaa", 42] Value_Type.Char
            r3.should_fail_with Invalid_Value_Type
            r3.catch.to_display_text.should_contain "Expected type Char (variable length, max_size=unlimited), but got a value 42 of type Integer (16 bits)"

            r4 = Column.from_vector "X" [12, Time_Of_Day.new 10 11 12] Value_Type.Integer
            r4.should_fail_with Invalid_Value_Type
            r4.catch.to_display_text.should_contain "Expected type Integer (64 bits), but got a value 10:11:12 of type Time"

            r5 = Column.from_vector "X" [12, Date_Time.new 2023 08 22 18 17 zone=Time_Zone.utc] Value_Type.Integer
            r5.should_fail_with Invalid_Value_Type
            # Split, because depending on the platform the date time may get a `[UTC]` suffix or not.
            r5.catch.to_display_text.should_contain "Expected type Integer (64 bits), but got a value 2023-08-22 18:17:00"
            r5.catch.to_display_text.should_contain "of type Date_Time (with timezone)"


            r6 = Column.from_vector "X" [12, Date.new 2023 08 22] Value_Type.Byte
            r6.should_fail_with Invalid_Value_Type
            r6.catch.to_display_text.should_contain "Expected type Byte, but got a value 2023-08-22 of type Date"

            r7 = Column.from_vector "X" [Date.new 2023 08 22, 42] Value_Type.Date
            r7.should_fail_with Invalid_Value_Type
            r7.catch.to_display_text.should_contain "Expected type Date, but got a value 42 of type Integer (16 bits)"

            r8 = Column.from_vector "X" [100, 1000*1000*1000] Value_Type.Byte
            r8.should_fail_with Invalid_Value_Type
            r8.catch.to_display_text.should_contain "Expected type Byte, but got a value 1000000000 of type Integer (32 bits)"

            r9 = Column.from_vector "X" [100, 1.5] Value_Type.Integer
            r9.should_fail_with Invalid_Value_Type
            r9.catch.to_display_text.should_contain "Expected type Integer (64 bits), but got a value 1.5 of type Float"

        group_builder.specify "will not allow to construct a column with Char size=0" <|
            r1 = Column.from_vector "X" [] (Value_Type.Char size=0 variable_length=False)
            r1.should_fail_with Illegal_Argument

            r2 = Column.from_vector "X" [] (Value_Type.Char size=0 variable_length=True)
            r2.should_fail_with Illegal_Argument

    suite_builder.group "Rounding" group_builder->
        group_builder.specify "should be able to round a column of decimals" <|
            Column.from_vector "foo" [1.2, 2.3, 2.5, 3.6] . round . should_equal (Column.from_vector "round([foo])" [1, 2, 3, 4])
            Column.from_vector "foo" [1.25, 2.33, 3.57] . round 1 . should_equal <| Column.from_vector "round([foo])" [1.3, 2.3, 3.6]
            Column.from_vector "foo" [12.0, 24.0, 25.0, 29.0] . round -1 . should_equal <| Column.from_vector "round([foo])" [10, 20, 30, 30]
            Column.from_vector "foo" [1.5, 2.5, 3.5] . round use_bankers=True . should_equal <| Column.from_vector "round([foo])" [2, 2, 4]

            Column.from_vector "foo" [-1.2, -2.3, -2.5, -3.6] . round . should_equal (Column.from_vector "round([foo])" [-1, -2, -3, -4])
            Column.from_vector "foo" [-1.25, -2.33, -2.45, -3.57] . round 1 . should_equal <| Column.from_vector "round([foo])" [-1.3, -2.3, -2.5, -3.6]
            Column.from_vector "foo" [-12.0, -24.0, -25.0, -29.0] . round -1 . should_equal <| Column.from_vector "round([foo])" [-10, -20, -30, -30]

        group_builder.specify "decimal rounding should return the correct column type" <|
            col = Column.from_vector "foo" [1.21, 2.34, 3.68]
            col . round -1 . value_type . should_equal Value_Type.Integer
            col . round . value_type . should_equal Value_Type.Integer
            col . round 1 . value_type . should_equal Value_Type.Float

        group_builder.specify "should be able to round a column of integers" <|
            Column.from_vector "foo" [12, 24, 25, 29] . round . should_equal <| Column.from_vector "round([foo])" [12, 24, 25, 29]
            Column.from_vector "foo" [12, 24, 25, 29] . round -1 . should_equal <| Column.from_vector "round([foo])" [10, 20, 30, 30]
            Column.from_vector "foo" [15, 25, 35] . round -1 use_bankers=True . should_equal <| Column.from_vector "round([foo])" [20, 20, 40]

        group_builder.specify "integer rounding should return the correct column type" <|
            col = Column.from_vector "foo" [12, 24, 25, 29]
            col . round 1 . value_type . should_equal Value_Type.Integer
            col . round 0 . value_type . should_equal Value_Type.Integer
            col . round -1 . value_type . should_equal Value_Type.Integer

        group_builder.specify "rounding should not attach a warning by default" <|
            Problems.assume_no_problems <| Column.from_vector "foo" [12, 24, 25, 29] . round 1

        group_builder.specify "should report out-of-range values as warnings" <|
            col = Column.from_vector "foo" [12, 23, 99999999999999999]
            expected = Column.from_vector "round([foo])" [10, 20, Nothing]
            actual = col.round -1
            actual . should_equal expected
            Warning.get_all actual . map .value . should_equal [Illegal_Argument.Error "Error: `round` can only accept values between -99999999999999 and 99999999999999 (inclusive), but was 99999999999999999 (at rows [2])."]

        group_builder.specify "should throw an error on decimal places out of range" <|
            col = Column.from_vector "foo" [12, 23, 99999999999999999]
            col.round decimal_places=-1200 . should_fail_with Illegal_Argument

        group_builder.specify "should handle type errors" <|
            col = Column.from_vector "foo" [12, 23, 45]
            Test.expect_panic_with (col.round use_bankers="string") Type_Error
            Test.expect_panic_with (col.round decimal_places="string") Type_Error

    suite_builder.group "truncate" group_builder->
        group_builder.specify "should be able to truncate a column of floats" <|
            Column.from_vector "foo" [1.25, 2.33, 3.57] . truncate . should_equal <| Column.from_vector "truncate([foo])" [1, 2, 3]
            Column.from_vector "foo" [1.25, 2.33, 3.57] . truncate . value_type . should_equal Value_Type.Integer

        group_builder.specify "should also work on ints" <|
            Column.from_vector "foo" [1, 2, 3] . truncate . should_equal <| Column.from_vector "truncate([foo])" [1, 2, 3]
            Column.from_vector "foo" [1, 2, 3] . truncate . value_type . should_equal Value_Type.Integer

        group_builder.specify "Should error on input of the wrong type" <|
            Column.from_vector "foo" ["asdf", "zxcv", "qwer"] . truncate . should_fail_with Invalid_Value_Type

    suite_builder.group "ceil" group_builder->
        group_builder.specify "should be able to take the ceil of a column of floats" <|
            Column.from_vector "foo" [1.25, 2.33, 3.57] . ceil . should_equal <| Column.from_vector "ceil([foo])" [2, 3, 4]
            Column.from_vector "foo" [1.25, 2.33, 3.57] . ceil . value_type . should_equal Value_Type.Integer

        group_builder.specify "should also work on ints" <|
            Column.from_vector "foo" [1, 2, 3] . ceil . should_equal <| Column.from_vector "ceil([foo])" [1, 2, 3]
            Column.from_vector "foo" [1, 2, 3] . ceil . value_type . should_equal Value_Type.Integer

        group_builder.specify "Should error on input of the wrong type" <|
            Column.from_vector "foo" ["asdf", "zxcv", "qwer"] . ceil . should_fail_with Invalid_Value_Type

    suite_builder.group "floor" group_builder->
        group_builder.specify "should be able to take the floor of a column of floats" <|
            Column.from_vector "foo" [1.25, 2.33, 3.57] . floor . should_equal <| Column.from_vector "floor([foo])" [1, 2, 3]
            Column.from_vector "foo" [1.25, 2.33, 3.57] . floor . value_type . should_equal Value_Type.Integer

        group_builder.specify "should also work on ints" <|
            Column.from_vector "foo" [1, 2, 3] . floor . should_equal <| Column.from_vector "floor([foo])" [1, 2, 3]
            Column.from_vector "foo" [1, 2, 3] . floor . value_type . should_equal Value_Type.Integer

        group_builder.specify "Should error on input of the wrong type" <|
            Column.from_vector "foo" ["asdf", "zxcv", "qwer"] . floor . should_fail_with Invalid_Value_Type

    suite_builder.group "round/truncate/ceil/floor" group_builder->
        do_op n op =
            col = Column.from_vector "x" [n]
            result = op col
            result.to_vector.at 0
        do_round n dp=0 use_bankers=False = do_op n (_.round dp use_bankers)

        group_builder.specify "round returns the correct type" <|
            do_round 231.2 1 . should_be_a Float
            do_round 231.2 0 . should_be_a Integer
            do_round 231.2 . should_be_a Integer
            do_round 231.2 -1 . should_be_a Integer

        group_builder.specify "round returns the correct type" <|
            do_round 231 1 . should_be_a Integer
            do_round 231 0 . should_be_a Integer
            do_round 231 . should_be_a Integer
            do_round 231 -1 . should_be_a Integer

        group_builder.specify "nan/inf" <|
            ops = [.truncate, .ceil, .floor, .round]
            ops.map op->
                col = Column.from_vector "x" [2.1, 0.0, Number.nan, Number.positive_infinity, Number.negative_infinity, Nothing, 12.1]
                result = op col
                result.to_vector . drop 2 . take 4 . should_equal [Nothing, Nothing, Nothing, Nothing]
                warnings = Warning.get_all result . map .value
                warnings . should_contain <| Arithmetic_Error.Error 'Value is -Infinity (at rows [4]).'
                warnings . should_contain <| Arithmetic_Error.Error 'Value is Infinity (at rows [3]).'
                warnings . should_contain <| Arithmetic_Error.Error 'Value is NaN (at rows [2]).'

    suite_builder.group "Date_Time truncate" group_builder->
        group_builder.specify "should be able to truncate a column of Date_Times" <|
            c = Column.from_vector "foo" [Date_Time.new 2020 10 24 1 2 3, Date_Time.new 2020 10 24 1 2 3]
            truncated = c.truncate
            truncated . should_equal <| Column.from_vector "truncate([foo])" [Date.new 2020 10 24, Date.new 2020 10 24]
            truncated . value_type . should_equal Value_Type.Date
