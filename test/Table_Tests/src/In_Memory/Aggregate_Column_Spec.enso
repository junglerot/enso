from Standard.Base import all hiding First, Last
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Table import Table
from Standard.Table.Data.Aggregate_Column.Aggregate_Column import all

import Standard.Table.Internal.Aggregate_Column_Helper
import Standard.Table.Internal.Java_Problems
import Standard.Table.Internal.Problem_Builder.Problem_Builder

from Standard.Test_New import all

type Data
    Value ~data
    
    simple_table self = self.data.at 0
    empty_table self = self.data.at 1

    setup = Data.Value <|
        simple_table = Table.new [["count", [1, 2, Nothing, 3, Nothing]], ["is_valid", [Nothing, False, True, False, Nothing]], ["float", [3.4, 1, 5.6, 2.1, Nothing]], ["text", ["A", "", Nothing, "B,C", Nothing]]]
        empty_table  = Table.new [["count", []], ["is_valid", []], ["text", []]]
        [simple_table, empty_table]


add_specs suite_builder = suite_builder.group "Aggregate Columns" group_builder->

    test_name = "Test Column"

    test_aggregator table col expected_name expected_result epsilon=False =
        problem_builder = Problem_Builder.new
        resolved = Aggregate_Column_Helper.resolve_aggregate table problem_builder col
        name = if resolved.new_name != "" then resolved.new_name else
            Aggregate_Column_Helper.default_aggregate_column_name resolved
        name . should_equal expected_name

        result =
            acc = Aggregate_Column_Helper.java_aggregator "Name" resolved
            indexes = Vector.new table.row_count v->v
            Java_Problems.with_problem_aggregator Problem_Behavior.Report_Warning java_problem_aggregator->
                Illegal_Argument.handle_java_exception <|
                    acc.aggregate indexes java_problem_aggregator

        if epsilon != False then ((result - expected_result).abs < epsilon).should_be_true else
            result.should_equal expected_result

    data = Data.setup

    group_builder.specify "should be able to count a set" <|
        test_aggregator data.simple_table (Count) "Count" data.simple_table.row_count
        test_aggregator data.simple_table (Count test_name) test_name data.simple_table.row_count
        test_aggregator data.empty_table (Count test_name) test_name data.empty_table.row_count

    group_builder.specify "should be able to count missing values in a set" <|
        test_aggregator data.simple_table (Count_Nothing 0) "Count Nothing count" 2
        test_aggregator data.simple_table (Count_Nothing 0 test_name) test_name 2
        test_aggregator data.simple_table (Count_Nothing "text" test_name) test_name 2
        test_aggregator data.empty_table (Count_Nothing 0 test_name) test_name data.empty_table.row_count

    group_builder.specify "should be able to count non missing values in a set" <|
        test_aggregator data.simple_table (Count_Not_Nothing 0) "Count Not Nothing count" 3
        test_aggregator data.simple_table (Count_Not_Nothing 0 test_name) test_name 3
        test_aggregator data.simple_table (Count_Not_Nothing "text" test_name) test_name 3
        test_aggregator data.empty_table (Count_Not_Nothing 0 test_name) test_name data.empty_table.row_count

    group_builder.specify "should be able to count empties in a set of Texts" <|
        test_aggregator data.simple_table (Count_Empty -1) "Count Empty text" 3
        test_aggregator data.simple_table (Count_Empty -1 test_name) test_name 3
        test_aggregator data.simple_table (Count_Empty "text" test_name) test_name 3
        # TODO [RW] Re-enable this once #6281 is implemented.
        # test_aggregator data.empty_table (Count_Empty 0 test_name) test_name data.empty_table.row_count

    group_builder.specify "should be able to count non empties in a set of Texts" <|
        test_aggregator data.simple_table (Count_Not_Empty -1) "Count Not Empty text" 2
        test_aggregator data.simple_table (Count_Not_Empty -1 test_name) test_name 2
        test_aggregator data.simple_table (Count_Not_Empty "text" test_name) test_name 2
        # TODO [RW] Re-enable this once #6281 is implemented.
        # test_aggregator data.empty_table (Count_Not_Empty 0 test_name) test_name data.empty_table.row_count

    group_builder.specify "should be able to total a set of values" <|
        test_aggregator data.simple_table (Sum -2) "Sum float" 12.1
        test_aggregator data.simple_table (Sum -2 test_name) test_name 12.1
        test_aggregator data.simple_table (Sum "float" test_name) test_name 12.1
        # TODO [RW] Re-enable this once #6281 is implemented.
        # test_aggregator data.empty_table (Sum 0 test_name) test_name Nothing

    group_builder.specify "should be able to average a set of values" <|
        test_aggregator data.simple_table (Average -2) "Average float" 3.025 0.000001
        test_aggregator data.simple_table (Average -2 test_name) test_name 3.025 0.000001
        test_aggregator data.simple_table (Average "float" test_name) test_name 3.025 0.000001
        # TODO [RW] Re-enable this once #6281 is implemented.
        # test_aggregator data.empty_table (Average 0 test_name) test_name Nothing

    group_builder.specify "should be able to compute standard deviation a set of values" <|
        test_aggregator data.simple_table (Standard_Deviation -2) "Standard Deviation float" 1.977161 0.000001
        test_aggregator data.simple_table (Standard_Deviation -2 test_name) test_name 1.977161 0.000001
        test_aggregator data.simple_table (Standard_Deviation "float" test_name) test_name 1.977161 0.000001
        # TODO [RW] Re-enable this once #6281 is implemented.
        # test_aggregator data.empty_table (Standard_Deviation 0 test_name) test_name Nothing

    group_builder.specify "should be able to compute standard deviation of a population a set of values" <|
        test_aggregator data.simple_table (Standard_Deviation -2 population=True) "Standard Deviation float" 1.712271 0.000001
        test_aggregator data.simple_table (Standard_Deviation -2 test_name population=True) test_name 1.712271 0.000001
        test_aggregator data.simple_table (Standard_Deviation "float" test_name population=True) test_name 1.712271 0.000001
        # TODO [RW] Re-enable this once #6281 is implemented.
        # test_aggregator data.empty_table (Standard_Deviation 0 test_name population=True) test_name Nothing

    group_builder.specify "should be able to compute median a set of values" <|
        test_aggregator data.simple_table (Median -2) "Median float" 2.75 0.000001
        test_aggregator data.simple_table (Median -2 test_name) test_name 2.75 0.000001
        test_aggregator data.simple_table (Median "float" test_name) test_name 2.75 0.000001
        # TODO [RW] Re-enable this once #6281 is implemented.
        # test_aggregator data.empty_table (Median 0 test_name) test_name Nothing

    group_builder.specify "should be able to compute first of a set of values including missing" <|
        test_aggregator data.simple_table (First 1 ignore_nothing=False) "First is_valid" Nothing
        test_aggregator data.simple_table (First 1 test_name ignore_nothing=False) test_name Nothing
        test_aggregator data.simple_table (First "is_valid" test_name ignore_nothing=False) test_name Nothing
        test_aggregator data.empty_table (First 0 test_name ignore_nothing=False) test_name Nothing

    group_builder.specify "should be able to compute first of a set of values excluding missing" <|
        test_aggregator data.simple_table (First 1) "First is_valid" False
        test_aggregator data.simple_table (First 1 test_name) test_name False
        test_aggregator data.simple_table (First "is_valid" test_name) test_name False
        test_aggregator data.empty_table (First 0 test_name) test_name Nothing

    group_builder.specify "should be able to compute last of a set of values including missing" <|
        test_aggregator data.simple_table (Last 1 ignore_nothing=False) "Last is_valid" Nothing
        test_aggregator data.simple_table (Last 1 test_name ignore_nothing=False) test_name Nothing
        test_aggregator data.simple_table (Last "is_valid" test_name ignore_nothing=False) test_name Nothing
        test_aggregator data.empty_table (Last 0 test_name ignore_nothing=False) test_name Nothing

    group_builder.specify "should be able to compute last of a set of values excluding missing" <|
        test_aggregator data.simple_table (Last 1) "Last is_valid" False
        test_aggregator data.simple_table (Last 1 test_name) test_name False
        test_aggregator data.simple_table (Last "is_valid" test_name) test_name False
        test_aggregator data.empty_table (Last 0 test_name) test_name Nothing

    group_builder.specify "should be able to concatenate a set of values excluding missing" <|
        test_aggregator data.simple_table (Concatenate -1 "" ',' '[' ']' '"') "Concatenate text" '[A,"",,"B,C",]'
        test_aggregator data.simple_table (Concatenate -1 test_name) test_name 'AB,C'
        test_aggregator data.simple_table (Concatenate "text" test_name ',') test_name 'A,,,B,C,'
        # TODO [RW] Re-enable this once #6281 is implemented.
        # test_aggregator data.empty_table (Concatenate 0 test_name) test_name Nothing

    group_builder.specify "should be able to count distinct items on a single set of values" <|
        test_aggregator data.simple_table (Count_Distinct 0) "Count Distinct count" 4
        test_aggregator data.simple_table (Count_Distinct 0 test_name) test_name 4
        test_aggregator data.simple_table (Count_Distinct "count" test_name) test_name 4
        test_aggregator data.empty_table (Count_Distinct 0 test_name) test_name 0
        test_aggregator data.simple_table (Count_Distinct "float" test_name ignore_nothing=False) test_name 5
        test_aggregator data.simple_table (Count_Distinct "float" test_name ignore_nothing=True) test_name 4

    group_builder.specify "should be able to count distinct items on a multiple sets of values" <|
        test_aggregator data.simple_table (Count_Distinct [0, 1]) "Count Distinct count is_valid" 5
        test_aggregator data.simple_table (Count_Distinct ["is_valid", "float"]) "Count Distinct is_valid float" 5
        test_aggregator data.simple_table (Count_Distinct ["is_valid", "float"] ignore_nothing=True) "Count Distinct is_valid float" 4

    group_builder.specify "should be able to get the minimum of a set of values" <|
        test_aggregator data.simple_table (Minimum -2) "Minimum float" 1
        test_aggregator data.simple_table (Minimum -2 test_name) test_name 1
        test_aggregator data.simple_table (Minimum "float" test_name) test_name 1
        test_aggregator data.empty_table (Minimum 0 test_name) test_name Nothing

    group_builder.specify "should be able to get the maximum of a set of values" <|
        test_aggregator data.simple_table (Maximum -2) "Maximum float" 5.6
        test_aggregator data.simple_table (Maximum -2 test_name) test_name 5.6
        test_aggregator data.simple_table (Maximum "float" test_name) test_name 5.6
        test_aggregator data.empty_table (Maximum 0 test_name) test_name Nothing

    group_builder.specify "should be able to get the shortest of a set of texts" <|
        test_aggregator data.simple_table (Shortest -1) "Shortest text" ""
        test_aggregator data.simple_table (Shortest -1 test_name) test_name ""
        test_aggregator data.simple_table (Shortest "text" test_name) test_name ""
        # TODO [RW] Re-enable this once #6281 is implemented.
        # test_aggregator data.empty_table (Shortest 0 test_name) test_name Nothing

    group_builder.specify "should be able to get the longest of a set of texts" <|
        test_aggregator data.simple_table (Longest -1) "Longest text" "B,C"
        test_aggregator data.simple_table (Longest -1 test_name) test_name "B,C"
        test_aggregator data.simple_table (Longest "text" test_name) test_name "B,C"
        # TODO [RW] Re-enable this once #6281 is implemented.
        # test_aggregator data.empty_table (Longest 0 test_name) test_name Nothing

    group_builder.specify "should be able to get the mode of a set of numbers" <|
        mode_table  = Table.new [["tests", [1,2,3,4,2,4,1,2,3,4,2,1,3,5,2,1,2,4,5,2,1,2,3,5,6,1,2,2]]]
        test_aggregator mode_table (Mode -1) "Mode tests" 2
        test_aggregator mode_table (Mode -1 test_name) test_name 2
        test_aggregator data.empty_table (Mode 0 test_name) test_name Nothing

    group_builder.specify "should be able to get the percentile of a set of numbers" <|
        percentile_table  = Table.new [["tests", [67,23,56,93,36,47,45,1,88,44,49,13,74,76,4,97,49,81,81,37]]]
        test_aggregator percentile_table (Percentile 0 0) "0%-ile tests" 1
        test_aggregator percentile_table (Percentile 0 -1 test_name) test_name 1
        test_aggregator percentile_table (Percentile 0.15 0) "15%-ile tests" 21.5
        test_aggregator percentile_table (Percentile 0.25 0) "25%-ile tests" 36.75
        test_aggregator percentile_table (Percentile 0.66 0) "66%-ile tests" 70.78
        test_aggregator data.empty_table (Mode 0 test_name) test_name Nothing

main =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter

