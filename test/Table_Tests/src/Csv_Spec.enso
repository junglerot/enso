from Standard.Base import all

import Standard.Table
import Standard.Table.Data.Column
from Standard.Table.Data.Column_Selector as Column_Selector_Module import By_Index
import Standard.Table.IO.File_Format
import Standard.Test
from project.Util import all

spec =
    c_1 = ["a", ["1", "4", "7", "10"]]
    c_2 = ["b", [2, Nothing, 8, 11]]
    c_3 = ["c", [Nothing, 6, 9, 12]]
    expected_table = Table.new [c_1, c_2, c_3]

    Test.group "Table.from Text" <|
        Test.specify "should create a table from a textual CSV" <|
            file_contents = (enso_project.data / "simple_empty.csv") . read_text
            table = Table.Table.from file_contents (format = File_Format.Delimited ",")
            table.should_equal expected_table

    Test.group "File.read (Delimited)" <|
        Test.specify "should create a table from a CSV in a file" <|
            file = (enso_project.data / "simple_empty.csv")
            table = file.read
            table.should_equal expected_table

        Test.specify "should correctly infer types of varied-type columns" <|
            varied_column = (enso_project.data / "varied_column.csv") . read
            c_1 = ["Column_1", ["2005-02-25", "2005-02-28", "4", "2005-03-02", Nothing, "2005-03-04", "2005-03-07", "2005-03-08"]]
            # We can re-enable this once date support is improved.
            #c_2 = ["Column_2", ["2005-02-25", "2005-02-28", "2005-03-01", Nothing, "2005-03-03", "2005-03-04", "2005-03-07", "2005-03-08"]]
            c_3 = ["Column_3", [1, 2, 3, 4, 5, Nothing, 7, 8]]
            c_4 = ["Column_4", [1, 2, 3, 4, 5, 6, 7, 8]]
            c_5 = ["Column_5", [1.0, 2.0, 3.0, 4.0, 5.0, 6.25, 7.0, 8.0]]
            c_6 = ["Column_6", ['1', '2', '3', '4', '5', '6.25', '7', 'osiem']]

            expected = Table.new [c_1, c_3, c_4, c_5, c_6]
            varied_column.select_columns (By_Index [0, 2, 3, 4, 5]) . should_equal expected

        Test.specify "should handle duplicated columns" <|
            csv = """
                name,x,y,x,y
                foo,10,20,30,20
            t = Table.Table.from csv (format = File_Format.Delimited ",")
            t.columns.map .name . should_equal ['name', 'x', 'y', 'x_1', 'y_1']

    Test.group 'Writing' <|
        Test.specify 'should properly serialize simple tables' <|
            varied_column = (enso_project.data / "varied_column.csv") . read
            res = Text.from varied_column format=(File_Format.Delimited ",")
            exp = normalize_lines <| '''
                Column_1,Column_2,Column_3,Column_4,Column_5,Column_6
                2005-02-25,2005-02-25,1,1,1.0,1
                2005-02-28,2005-02-28,2,2,2.0,2
                4,2005-03-01,3,3,3.0,3
                2005-03-02,,4,4,4.0,4
                ,2005-03-03,5,5,5.0,5
                2005-03-04,2005-03-04,,6,6.25,6.25
                2005-03-07,2005-03-07,7,7,7.0,7
                2005-03-08,2005-03-08,8,8,8.0,osiem
            res.should_equal exp

        Test.specify 'should properly handle quoting of records and allow specifying separators' <|
            c1 = ['name', ['Robert");DROP TABLE Students;--', 'This;Name;;Is""Strange', 'Marcin,,']]
            c2 = ['grade', [10, 20, 'hello;world']]
            t = Table.new [c1, c2]

            expected = normalize_lines <| """
                name;grade
                "Robert"");DROP TABLE Students;--";10
                "This;Name;;Is""""Strange";20
                Marcin,,;"hello;world"

            res = Text.from t format=(File_Format.Delimited ";")
            res.should_equal expected

        Test.specify 'should allow forced quoting of records'
            c1 = ['name', ['Robert");DROP TABLE Students;--', 'This;Name;;Is""Strange', 'Marcin,,']]
            c2 = ['grade', [10, 20, 'hello;world']]
            t = Table.new [c1, c2]

            expected = normalize_lines <| """
                "name","grade"
                "Robert"");DROP TABLE Students;--",10
                "This;Name;;Is""""Strange",20
                "Marcin,,","hello;world"

            res = Text.from t format=(File_Format.Delimited "," . with_quotes always_quote=True)
            res.should_equal expected


        Test.specify 'should write CSV to a file' <|
            varied_column = (enso_project.data / "varied_column.csv") . read
            out = enso_project.data / 'out.csv'
            out.delete_if_exists
            varied_column.write out
            exp = normalize_lines <| '''
                Column_1,Column_2,Column_3,Column_4,Column_5,Column_6
                2005-02-25,2005-02-25,1,1,1.0,1
                2005-02-28,2005-02-28,2,2,2.0,2
                4,2005-03-01,3,3,3.0,3
                2005-03-02,,4,4,4.0,4
                ,2005-03-03,5,5,5.0,5
                2005-03-04,2005-03-04,,6,6.25,6.25
                2005-03-07,2005-03-07,7,7,7.0,7
                2005-03-08,2005-03-08,8,8,8.0,osiem
            out.read_text.should_equal exp
            out.delete_if_exists


main = Test.Suite.run_main spec
