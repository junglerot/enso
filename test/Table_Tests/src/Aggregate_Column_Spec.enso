from Standard.Base import all

import Standard.Table.Data.Table
from Standard.Table.Data.Aggregate_Column import all

import Standard.Test

spec = Test.group "Aggregate Columns" <|
    simple_table = Table.new [["count", [1, 2, Nothing, 3, Nothing]], ["is_valid", [Nothing, False, True, False, Nothing]], ["float", [1, 2.1, 3.4, 5.6, Nothing]], ["text", ["A", "", Nothing, "B,C", Nothing]]]
    text_col = simple_table.at "text"
    bool_col = simple_table.at "is_valid"
    float_col = simple_table.at "float"
    int_col = simple_table.at "count"
    empty_table  = Table.new [["count", []], ["is_valid", []], ["text", []]]

    test_name = "Test Column"

    test_aggregator table col expected_name expected_result epsilon=False =
        col.column_name table . should_equal expected_name

        acc = col.make_aggregator table
        folded_value = 0.up_to table.row_count . fold col.initial_value acc
        result = col.evaluate folded_value

        if epsilon != False then ((result - expected_result).abs < epsilon).should_be_true else
            result.should_equal expected_result

    Test.specify "should be able to count a set" <|
        test_aggregator simple_table (Count Nothing) "Count" simple_table.row_count
        test_aggregator simple_table (Count test_name) test_name simple_table.row_count
        test_aggregator empty_table (Count test_name) test_name empty_table.row_count

    Test.specify "should be able to count missing values in a set" <|
        test_aggregator simple_table (Count_Nothing 0) "Count Nothing count" 2
        test_aggregator simple_table (Count_Nothing 0 test_name) test_name 2
        test_aggregator simple_table (Count_Nothing "text" test_name) test_name 2
        test_aggregator simple_table (Count_Nothing text_col test_name) test_name 2
        test_aggregator empty_table (Count_Nothing 0 test_name) test_name empty_table.row_count

    Test.specify "should be able to count non missing values in a set" <|
        test_aggregator simple_table (Count_Not_Nothing 0) "Count Not Nothing count" 3
        test_aggregator simple_table (Count_Not_Nothing 0 test_name) test_name 3
        test_aggregator simple_table (Count_Not_Nothing "text" test_name) test_name 3
        test_aggregator simple_table (Count_Not_Nothing text_col test_name) test_name 3
        test_aggregator empty_table (Count_Not_Nothing 0 test_name) test_name empty_table.row_count

    Test.specify "should be able to count empties in a set of Texts" <|
        test_aggregator simple_table (Count_Empty -1) "Count Empty text" 3
        test_aggregator simple_table (Count_Empty -1 test_name) test_name 3
        test_aggregator simple_table (Count_Empty "text" test_name) test_name 3
        test_aggregator simple_table (Count_Empty text_col test_name) test_name 3
        test_aggregator empty_table (Count_Empty 0 test_name) test_name empty_table.row_count

    Test.specify "should be able to count non empties in a set of Texts" <|
        test_aggregator simple_table (Count_Not_Empty -1) "Count Not Empty text" 2
        test_aggregator simple_table (Count_Not_Empty -1 test_name) test_name 2
        test_aggregator simple_table (Count_Not_Empty "text" test_name) test_name 2
        test_aggregator simple_table (Count_Not_Empty text_col test_name) test_name 2
        test_aggregator empty_table (Count_Not_Empty 0 test_name) test_name empty_table.row_count

    Test.specify "should be able to total a set of values" <|
        test_aggregator simple_table (Sum -2) "Sum float" 12.1
        test_aggregator simple_table (Sum -2 test_name) test_name 12.1
        test_aggregator simple_table (Sum "float" test_name) test_name 12.1
        test_aggregator simple_table (Sum float_col test_name) test_name 12.1
        test_aggregator empty_table (Sum 0 test_name) test_name Nothing

    Test.specify "should be able to average a set of values" <|
        test_aggregator simple_table (Average -2) "Average float" 3.025 0.000001
        test_aggregator simple_table (Average -2 test_name) test_name 3.025 0.000001
        test_aggregator simple_table (Average "float" test_name) test_name 3.025 0.000001
        test_aggregator simple_table (Average float_col test_name) test_name 3.025 0.000001
        test_aggregator empty_table (Average 0 test_name) test_name Nothing

    Test.specify "should be able to compute standard deviation a set of values" <|
        test_aggregator simple_table (Standard_Deviation -2) "Standard Deviation float" 1.977161 0.000001
        test_aggregator simple_table (Standard_Deviation -2 test_name) test_name 1.977161 0.000001
        test_aggregator simple_table (Standard_Deviation "float" test_name) test_name 1.977161 0.000001
        test_aggregator simple_table (Standard_Deviation float_col test_name) test_name 1.977161 0.000001
        test_aggregator empty_table (Standard_Deviation 0 test_name) test_name Nothing

    Test.specify "should be able to compute standard deviation of a population a set of values" <|
        test_aggregator simple_table (Standard_Deviation -2 population=True) "Standard Deviation float" 1.712271 0.000001
        test_aggregator simple_table (Standard_Deviation -2 test_name population=True) test_name 1.712271 0.000001
        test_aggregator simple_table (Standard_Deviation "float" test_name population=True) test_name 1.712271 0.000001
        test_aggregator simple_table (Standard_Deviation float_col test_name population=True) test_name 1.712271 0.000001
        test_aggregator empty_table (Standard_Deviation 0 test_name population=True) test_name Nothing

    Test.specify "should be able to compute median a set of values" <|
        test_aggregator simple_table (Median -2) "Median float" 2.75 0.000001
        test_aggregator simple_table (Median -2 test_name) test_name 2.75 0.000001
        test_aggregator simple_table (Median "float" test_name) test_name 2.75 0.000001
        test_aggregator simple_table (Median float_col test_name) test_name 2.75 0.000001
        test_aggregator empty_table (Median 0 test_name) test_name Nothing

    Test.specify "should be able to compute first of a set of values including missing" <|
        test_aggregator simple_table (First 1 ignore_nothing=False) "First is_valid" Nothing
        test_aggregator simple_table (First 1 test_name ignore_nothing=False) test_name Nothing
        test_aggregator simple_table (First "is_valid" test_name ignore_nothing=False) test_name Nothing
        test_aggregator simple_table (First bool_col test_name ignore_nothing=False) test_name Nothing
        test_aggregator empty_table (First 0 test_name ignore_nothing=False) test_name Nothing

    Test.specify "should be able to compute first of a set of values excluding missing" <|
        test_aggregator simple_table (First 1) "First is_valid" False
        test_aggregator simple_table (First 1 test_name) test_name False
        test_aggregator simple_table (First "is_valid" test_name) test_name False
        test_aggregator simple_table (First bool_col test_name) test_name False
        test_aggregator empty_table (First 0 test_name) test_name Nothing

    Test.specify "should be able to compute last of a set of values including missing" <|
        test_aggregator simple_table (Last 1 ignore_nothing=False) "Last is_valid" Nothing
        test_aggregator simple_table (Last 1 test_name ignore_nothing=False) test_name Nothing
        test_aggregator simple_table (Last "is_valid" test_name ignore_nothing=False) test_name Nothing
        test_aggregator simple_table (Last bool_col test_name ignore_nothing=False) test_name Nothing
        test_aggregator empty_table (Last 0 test_name ignore_nothing=False) test_name Nothing

    Test.specify "should be able to compute last of a set of values excluding missing" <|
        test_aggregator simple_table (Last 1) "Last is_valid" False
        test_aggregator simple_table (Last 1 test_name) test_name False
        test_aggregator simple_table (Last "is_valid" test_name) test_name False
        test_aggregator simple_table (Last bool_col test_name) test_name False
        test_aggregator empty_table (Last 0 test_name) test_name Nothing

    Test.specify "should be able to concatenate a set of values excluding missing" <|
        test_aggregator simple_table (Concatenate -1 Nothing ',' '[' ']' '"') "Concatenate text" '[A,"",,"B,C",]'
        test_aggregator simple_table (Concatenate -1 test_name) test_name 'AB,C'
        test_aggregator simple_table (Concatenate "text" test_name ',') test_name 'A,,,B,C,'
        test_aggregator simple_table (Concatenate text_col test_name) test_name 'AB,C'
        test_aggregator empty_table (Concatenate 0 test_name) test_name Nothing

    Test.specify "should be able to count distinct items on a single set of values" <|
        test_aggregator simple_table (Count_Distinct 0) "Count Distinct count" 4
        test_aggregator simple_table (Count_Distinct 0 test_name) test_name 4
        test_aggregator simple_table (Count_Distinct "count" test_name) test_name 4
        test_aggregator simple_table (Count_Distinct int_col test_name) test_name 4
        test_aggregator empty_table (Count_Distinct 0 test_name) test_name 0

    Test.specify "should be able to count distinct items on a multiple sets of values" <|
        test_aggregator simple_table (Count_Distinct [0, 1]) "Count Distinct count is_valid" 5

main = Test.Suite.run_main here.spec
