from Standard.Base import all
from Standard.Table import all

import Standard.Table.Data.Sort_Column_Selector
import Standard.Table.Data.Sort_Column
from Standard.Table.Data.Table as Table_Internal import Empty_Error
from Standard.Table.Errors as Table_Errors import Invalid_Output_Column_Names, Duplicate_Output_Column_Names, No_Input_Columns_Selected, Missing_Input_Columns
import Standard.Table.Data.Storage

import Standard.Visualization

import Standard.Test
import Standard.Test.Problems

import project.Common_Table_Spec

type My x y

My.== self that = case that of
    My x1 y1 -> (self.x + self.y) == (x1 + y1)
    _ -> False

My.compare_to self that = self.x+self.y . compare_to that.x+that.y

My.frobnicate self = case self of
    My x1 y1 -> My y1 x1

spec =
    Test.group "JSON construction" <|
        geo_json = Json.parse <| '''
            {
              "type": "FeatureCollection",
              "features": [
                { "type": "Feature", "properties": { "foo": 1, "bar": "value2"}, "geometry": { "type": "Point", "coordinates": [ -118.58, 34.19 ] } },
                { "type": "Feature", "properties": { "foo": 2, "baz": 3}, "geometry": { "type": "Point", "coordinates": [ 10.11, 4.88, 19 ] } }
              ]
            }
        Test.specify "should allow converting a JSON array into a table" <|
            r_1 = Json.from_pairs [['foo', 20], ['bar', 'baz'], ['baz', False]]
            r_2 = Json.from_pairs [['bar', 'xyz'], ['baz', True]]
            r_3 = Json.from_pairs [['baz', False], ['foo', 13]]
            t = [r_1, r_2, r_3].to_json.to_table ['foo', 'bar', 'baz']
            t.columns.map .name . should_equal ['foo', 'bar', 'baz']
            t.at 'foo' . to_vector . should_equal [20, Nothing, 13]
            t.at 'bar' . to_vector . should_equal ['baz', 'xyz', Nothing]
            t.at 'baz' . to_vector . should_equal [False, True, False]

        Test.specify "should allow converting a GeoJSON array of features into a table" <|
            fields = ['foo', 'bar', 'baz', 'longitude', 'elevation']
            t = geo_json.get "features" . to_table fields
            t.columns.map .name . should_equal fields
            t.at 'foo' . to_vector . should_equal [1, 2]
            t.at 'bar' . to_vector . should_equal ['value2', Nothing]
            t.at 'baz' . to_vector . should_equal [Nothing, 3]
            t.at 'longitude' . to_vector . should_equal [-118.58, 10.11]
            t.at 'elevation' . to_vector . should_equal [Nothing, 19]

        Test.specify "should allow converting a GeoJSON object into a table with provided fields" <|
            fields = ['foo', 'bar', 'longitude']
            t = geo_json.to_table fields
            t.columns.map .name . should_equal fields
            t.at 'foo' . to_vector . should_equal [1, 2]
            t.at 'bar' . to_vector . should_equal ['value2', Nothing]
            t.at 'longitude' . to_vector . should_equal [-118.58, 10.11]

        Test.specify "should allow converting a GeoJSON object into a table containing all available fields" <|
            fields = ['bar', 'baz', 'elevation', 'foo',  'latitude', 'longitude']
            t = geo_json.to_table
            t.columns.map .name . should_equal fields
            t.at 'foo' . to_vector . should_equal [1, 2]
            t.at 'bar' . to_vector . should_equal ['value2', Nothing]
            t.at 'baz' . to_vector . should_equal [Nothing, 3]
            t.at 'longitude' . to_vector . should_equal [-118.58, 10.11]
            t.at 'latitude' . to_vector . should_equal [34.19, 4.88]
            t.at 'elevation' . to_vector . should_equal [Nothing, 19]

    Test.group 'Construction' <|
        Test.specify 'should allow creating a table from rows' <|
            header = ['foo', 'bar']
            rows = [[1, False], [2, True], [3, False]]
            r = Table.from_rows header rows

            r.at 'foo' . to_vector . should_equal [1, 2, 3]
            r.at 'bar' . to_vector . should_equal [False, True, False]

    Test.group "Vector conversion" <|
        Test.specify "should allow converting columns to valid vectors" <|
            col_1 = Column.from_vector 'x' [1, 2, 3]
            col_1.to_vector.reduce (+) . should_equal 6

            col_2 = Column.from_vector 'y' [My 1 2, My 2 3]
            col_2.to_vector.map (my -> my.x + my.y) . should_equal [3, 5]

            col_3 = Column.from_vector 'z' [False, True, False]
            col_3.to_vector.map .not . should_equal [True, False, True]

    Test.group "Mapping Operations" <|
        Test.specify "should allow mapping a function over a column" <|
            c_str = Column.from_vector 'x' ['a', 'b', Nothing, 'b']
            c_str.map (+ "x") . to_vector . should_equal ['ax', 'bx', Nothing, 'bx']
            c_int = Column.from_vector 'x' [1, 2, 1, 5, 1]
            c_int.map (+ 1) . to_vector . should_equal [2, 3, 2, 6, 2]
            c_dec = Column.from_vector 'x' [1.9, 2.0, 1.2, 5.6, 1.9]
            c_dec.map (+ 1.5) . to_vector . should_equal [3.4, 3.5, 2.7, 7.1, 3.4]
            c_bool = Column.from_vector 'x' [True, False, Nothing, True, False]
            c_bool.map (_.to_text) . to_vector . should_equal ["True", "False", Nothing, "True", "False"]
            c_any = Column.from_vector 'x' [My 1 6, My 6 3, My 2 5, My 3 4, My 200 300]
            c_any.map (_.frobnicate) . to_vector . should_equal [My 6 1, My 3 6, My 5 2, My 4 3, My 300 200]

        Test.specify "should allow zipping columns with a custom function" <|
            b = Column.from_vector 'w' [6.3, 3.1, 5.2, 4.6, 8.0]
            a = Column.from_vector 'z' ['foo', 'bar', 'baz', 'spam', 'eggs']
            c = a.zip b x-> y-> x + y.to_text
            c.to_vector.should_equal ['foo6.3', 'bar3.1', 'baz5.2', 'spam4.6', 'eggs8.0']

            x = Column.from_vector 'a' [1, Nothing, 2, Nothing]
            y = Column.from_vector 'b' [0, 0, 0, 0]
            r = x.zip y skip_missing=False x-> y-> if x == 1 then x else y
            r.to_vector.should_equal [1, 0, 0, 0]

        Test.specify "should handle vectorized equality and fall back on non-vectorized if needed" <|
            c_str = Column.from_vector 'x' ['a', 'b', Nothing, 'b']
            (c_str == 'b').to_vector.should_equal [False, True, Nothing, True]
            c_int = Column.from_vector 'x' [1, 2, 1, 5, 1]
            (c_int == 1).to_vector.should_equal [True, False, True, False, True]
            c_dec = Column.from_vector 'x' [1.9, 2.0, 1.2, 5.6, 1.9]
            (c_dec == 1.9).to_vector.should_equal [True, False, False, False, True]
            c_bool = Column.from_vector 'x' [True, False, Nothing, True, False]
            (c_bool == False).to_vector.should_equal [False, True, Nothing, False, True]
            c_any = Column.from_vector 'x' [My 1 6, My 6 3, My 2 5, My 3 4, My 200 300]
            (c_any == My 7 0).to_vector.should_equal [True, False, True, True, False]

        Test.specify "should switch between maps and zips based on argument type" <|
            a = Column.from_vector 'x' [0, 1, 7, 3, 6]
            b = Column.from_vector 'w' [6.3, 3.1, 5.2, Nothing, 8]
            (a + 3.2).to_vector.should_equal [3.2, 4.2, 10.2, 6.2, 9.2]
            (a + b).to_vector.should_equal [6.3, 4.1, 12.2, Nothing, 14]
            gt_const = a > 5
            gt_const.to_vector.should_equal [False, False, True, False, True]
            gt_b = a > b
            gt_b.to_vector.should_equal [False, False, True, Nothing, False]
            both = gt_const && gt_b
            both.to_vector.should_equal [False, False, True, Nothing, False]

        Test.specify "should handle Text operations" <|
            a = Column.from_vector 'a' ["abab", "abc", Nothing, "bca", "acca"]
            nils = [Nothing, Nothing, Nothing, Nothing, Nothing]

            a.starts_with "ab" . to_vector . should_equal [True, True, Nothing, False, False]
            b = Column.from_vector 'b' ["ba", "ab", "d", Nothing, "ac"]
            a.starts_with b . to_vector . should_equal [False, True, Nothing, Nothing, True]
            a.starts_with Nothing . to_vector . should_equal nils

            a.ends_with "ca" . to_vector . should_equal [False, False, Nothing, True, True]
            c = Column.from_vector 'c' ["ab", "b", "d", Nothing, "cc"]
            a.ends_with c . to_vector . should_equal [True, False, Nothing, Nothing, False]
            a.ends_with Nothing . to_vector . should_equal nils

            a.contains "c" . to_vector . should_equal [False, True, Nothing, True, True]
            a.contains c . to_vector . should_equal [True, True, Nothing, Nothing, True]
            a.contains Nothing . to_vector . should_equal nils

    Test.group "Masking Tables" <|
        Test.specify "should allow selecting table rows based on a boolean column" <|
            df = (enso_project.data / "simple_empty.csv").read
            r = df.where (Column.from_vector 'x' [True, False, False, True])
            r.at "a" . to_vector . should_equal ["1", "10"]
            r.at "b" . to_vector . should_equal [2, 11]
            r.at "c" . to_vector . should_equal [Nothing, 12]
        Test.specify "should treat NA values in the mask as false and extend the mask with NAs" <|
            df = (enso_project.data / "simple_empty.csv").read
            r = df.where (Column.from_vector 'x' [Nothing, True, False])
            r.at "a" . to_vector . should_equal ["4"]
            r.at "b" . to_vector . should_equal [Nothing]
            r.at "c" . to_vector . should_equal [6]
        Test.specify "should work correctly if a mask is bigger than the table itself" <|
            df = (enso_project.data / "simple_empty.csv").read
            r = df.where (Column.from_vector 'x' [True, False, False, False, True])
            r.at "a" . to_vector . should_equal ["1"]
            r.at "b" . to_vector . should_equal [2]
            r.at "c" . to_vector . should_equal [Nothing]

    Test.group "Masking Columns" <|
        Test.specify "should allow selecting column rows based on a boolean column" <|
            df = (enso_project.data / "simple_empty.csv").read
            mask = Column.from_vector 'x' [True, False, False, True]
            df.at "a" . where mask . to_vector . should_equal ["1", "10"]
            df.at "c" . where mask . to_vector . should_equal [Nothing, 12]

        Test.specify "should work correctly if a mask is bigger than the column itself" <|
            col = Column.from_vector "col" [1, 2]
            mask = Column.from_vector 'x' [True, False, False, True]
            col.where mask . to_vector . should_equal [1]

    Test.group "Joining Tables" <|
        a_0 = ['x', [0, 1, 7, 3, 6]]
        a_1 = ['y', ["foo", "bar", "baz", "spam", "eggs"]]
        a = Table.new [a_0, a_1]
        b_0 = ['w', [6, 3, 5, 5, 3, 3]]
        b_1 = ['z', ["foo", "foo", "bar", "spam", "bar", "eggs"]]
        b = Table.new [b_0, b_1]

        Test.specify "should allow joining tables index-on-index" <|
            r_1 = a.set_index 'x' . join (b.set_index 'w')
            r_1.at 'y' . to_vector . should_equal ['foo', 'bar', 'baz', 'spam', 'spam', 'spam', 'eggs']
            r_1.at 'z' . to_vector . should_equal [Nothing, Nothing, Nothing, 'foo', 'bar', 'eggs', 'foo']
            r_2 = a.set_index 'y' . join (b.set_index 'z') drop_unmatched=True
            r_2.at 'x' . to_vector . should_equal [0, 0, 1, 1, 3, 6]
            r_2.at 'w' . to_vector . should_equal [6, 3, 5, 3, 5, 3]

        Test.specify "should allow joining tables column-on-index" <|
            r_1 = a.join (b.set_index 'w') on='x'
            r_1.at 'y' . to_vector . should_equal ['foo', 'bar', 'baz', 'spam', 'spam', 'spam', 'eggs']
            r_1.at 'z' . to_vector . should_equal [Nothing, Nothing, Nothing, 'foo', 'bar', 'eggs', 'foo']
            r_2 = a.join (b.set_index 'z') drop_unmatched=True on='y'
            r_2.at 'x' . to_vector . should_equal [0, 0, 1, 1, 3, 6]
            r_2.at 'w' . to_vector . should_equal [6, 3, 5, 3, 5, 3]

        Test.specify "should allow joining tables on the default index" <|
            x = Table.new [['x', [1, 2, 4, 6]]]
            y = Table.new [['y', [8, 9]]]
            r_1 = x.join y
            r_1.at 'x' . to_vector . should_equal [1, 2, 4, 6]
            r_1.at 'y' . to_vector . should_equal [8, 9, Nothing, Nothing]

            r_2 = x.join y drop_unmatched=True
            r_2.at 'x' . to_vector . should_equal [1, 2]
            r_2.at 'y' . to_vector . should_equal [8, 9]

        Test.specify "should append suffixes to disambiguate column names" <|
            x = Table.new [['x', [1, 2, 4, 6]]]
            y = Table.new [['x', [8, 9]]]
            r_1 = x.join y
            r_1.columns.map .name . should_equal ['x_left', 'x_right']

            r_2 = x.join y left_suffix='_old' right_suffix='_new'
            r_2.columns.map .name . should_equal ['x_old', 'x_new']

    Test.group "Filling Missing Values" <|
        Test.specify "should coerce non-coercible types to Object" <|
            strs = Column.from_vector 'x' ["a", Nothing, "b", Nothing]
            strs_filled = strs.fill_missing False
            strs_filled.to_vector . should_equal ["a", False, "b", False]
            strs_filled.storage_type . should_equal Storage.Any

            ints = Column.from_vector 'x' [1, Nothing, 2, Nothing]
            ints_filled = ints.fill_missing "X"
            ints_filled.to_vector . should_equal [1, "X", 2, "X"]
            ints_filled.storage_type . should_equal Storage.Any

            bools = Column.from_vector 'x' [True, False, Nothing]
            bools_filled = bools.fill_missing "X"
            bools_filled.to_vector . should_equal [True, False, "X"]
            bools_filled.storage_type . should_equal Storage.Any

        Test.specify "should coerce long and double types to double" <|
            ints = Column.from_vector 'x' [1, Nothing, 2, Nothing]
            ints_filled = ints.fill_missing 0.5
            ints_filled.to_vector . should_equal [1.0, 0.5, 2.0, 0.5]
            ints_filled.storage_type . should_equal Storage.Decimal

            decimals = Column.from_vector 'x' [0.5, Nothing, Nothing, 0.25]
            decimals_filled = decimals.fill_missing 42
            decimals_filled.to_vector . should_equal [0.5, 42.0, 42.0, 0.25]
            decimals_filled.storage_type . should_equal Storage.Decimal

        Test.specify "should keep String, Boolean, Long and Double type" <|
            strs = Column.from_vector 'x' ["a", Nothing, "b", Nothing]
            strs_filled = strs.fill_missing "X"
            strs_filled.to_vector . should_equal ["a", "X", "b", "X"]
            strs_filled.storage_type . should_equal Storage.Text

            bools = Column.from_vector 'x' [True, False, Nothing]
            bools_filled = bools.fill_missing False
            bools_filled.to_vector . should_equal [True, False, False]
            bools_filled.storage_type . should_equal Storage.Boolean

            ints = Column.from_vector 'x' [1, Nothing, 2, Nothing]
            ints_filled = ints.fill_missing 42
            ints_filled.to_vector . should_equal [1, 42, 2, 42]
            ints_filled.storage_type . should_equal Storage.Integer

            decimals = Column.from_vector 'x' [0.5, Nothing, Nothing, 0.25]
            decimals_filled = decimals.fill_missing 1.0
            decimals_filled.to_vector . should_equal [0.5, 1.0, 1.0, 0.25]
            decimals_filled.storage_type . should_equal Storage.Decimal

    Test.group "Counting Values" <|
        Test.specify "should count missing and non-missing values" <|
            col = Column.from_vector 'x' [1, Nothing, 2]
            col.length . should_equal 3
            col.count . should_equal 2
            col.count_missing . should_equal 1

    Test.group "Dropping Missing Values" <|
        Test.specify "should drop missing rows in a Column" <|
            col = Column.from_vector 'x' [1, Nothing, 2, Nothing]
            col.drop_missing.to_vector . should_equal [1, 2]

        Test.specify "should drop rows that contain at least one missing column in a Table" <|
            t = Table.new [["a", [1, Nothing, 3, 4]], ["b", [1, 2, Nothing, "x"]]]
            d = t.drop_missing_rows
            d.at "a" . to_vector . should_equal [1, 4]
            d.at "b" . to_vector . should_equal [1, "x"]

        Test.specify "should drop columns that contain at least one missing row in a Table" <|
            a = ["a", [1, Nothing, 3, 4]]
            b = ["b", [1, 2, Nothing, "x"]]
            c = ["c", [10, 20, 30, 40]]
            t = Table.new [a, b, c]
            d = t.drop_missing_columns
            d.columns.map .name . should_equal ["c"]
            d.at "c" . to_vector . should_equal [10, 20, 30, 40]

    Test.group "Info" <|
        Test.specify "should return Table information" <|
            a = ["strs", ["a", "b", Nothing, "a"]]
            b = ["ints", [1, 2, Nothing, Nothing]]
            c = ["objs", [1, "a", "c", Any]]
            r = Table.new [a, b, c]
            i = r.info
            i.index . to_vector . should_equal ["strs", "ints", "objs"]
            i.at "Items Count" . to_vector . should_equal [3, 2, 4]
            i.at "Storage Type" . to_vector . should_equal [Storage.Text, Storage.Integer, Storage.Any]

    Test.group "Column-wide statistics" <|
        Test.specify 'should allow computing basic column-wide stats' <|
            price = Column.from_vector 'price' [0.4, 3.5, Nothing, 6.7, Nothing, 97, Nothing]
            price.sum.should_equal 107.6
            price.min.should_equal 0.4
            price.max.should_equal 97
            price.mean.should_equal 26.9

    Test.group "Sorting Tables" <|
        df = (enso_project.data / "clothes.csv").read

        Test.specify "should allow sorting by a single column name" <|
            r_1 = df.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name "Quantity"])
            r_1.at 'Id' . to_vector . should_equal [2,4,1,3,5,6]

            r_3 = df.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name "Rating" Sort_Direction.Descending])
            r_3.at 'Id' . to_vector . should_equal [3,1,4,5,2,6]

        Test.specify 'should allow sorting by multiple column names' <|
            r_1 = df.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name 'Quantity', Sort_Column.Name 'Rating'])
            r_1.at 'Id' . to_vector . should_equal [2,4,1,3,6,5]

            r_2 = df.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name 'Rating' Sort_Direction.Descending, Sort_Column.Name 'Quantity' Sort_Direction.Descending])
            r_2.at 'Id' . to_vector . should_equal [3,1,4,5,6,2]

        Test.specify 'should allow sorting with specific by-column rules' <|
            r_1 = df.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name "Quantity", Sort_Column.Name "Price" Sort_Direction.Descending])
            r_1.at 'Id' . to_vector . should_equal [4,2,3,1,6,5]

        Test.specify 'should respect defined comparison operations for custom types' <|
            c_1 = ['id', [1, 2, 3, 4, 5, 6]]
            c_2 = ['val', [My 1 2, My 3 4, My 2 1, My 5 2, My 7 0, My 4 -1]]
            df = Table.new [c_1, c_2]
            r = df.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name 'val'])
            r.at 'id' . to_vector . should_equal [1,3,6,2,4,5]

        Test.specify 'should return warnings and errors when passed a non-existent column' <|
            action = df.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name 'foobar']) on_problems=_
            tester table =
                table.at 'Id' . to_vector . should_equal [1,2,3,4,5,6]
            problems = [Missing_Input_Columns [Sort_Column.Name 'foobar'], No_Input_Columns_Selected]
            Problems.test_problem_handling action problems tester

        Test.specify 'should correctly reorder all kinds of columns and leave the original columns untouched' <|
            ord = [0, 3, 2, 4, 1]
            ints = [1, 2, 3, 4, 5]
            reals = [1.3, 4.6, 3.2, 5.2, 1.6]
            bools = [False, False, True, True, False]
            texts = ["foo", "foo", "bar", "baz", "spam"]
            objs = [Cons 1 2, Cons 2 3, Cons 6 7, Cons 8 9, Cons 10 30]

            df = Table.new [['ord', ord], ['ints', ints], ['reals', reals], ['bools', bools], ['texts', texts], ['objs', objs]]
            r = df.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name 'ord'])

            r.at 'ints' . to_vector . should_equal [1, 5, 3, 2, 4]
            df.at 'ints' . to_vector . should_equal ints

            r.at 'reals' . to_vector . should_equal [1.3, 1.6, 3.2, 4.6, 5.2]
            df.at 'reals' . to_vector . should_equal reals

            r.at 'bools' . to_vector . should_equal [False, False, True, False, True]
            df.at 'bools' . to_vector . should_equal bools

            r.at 'texts' . to_vector . should_equal ['foo', 'spam', 'bar', 'foo', 'baz']
            df.at 'texts' . to_vector . should_equal texts

            r.at 'objs' . to_vector . should_equal [Cons 1 2, Cons 10 30, Cons 6 7, Cons 2 3, Cons 8 9]
            df.at 'objs' . to_vector . should_equal objs


    Test.group "Sorting Columns" <|
        Test.specify 'should sort columns with specified ordering and missing placement' <|
            c = Column.from_vector 'foo' [1, 7, Nothing, 4, 8, Nothing]

            r_1 = c.sort
            r_1.to_vector.should_equal [1,4,7,8,Nothing,Nothing]

            r_2 = c.sort order=Sort_Direction.Descending
            r_2.to_vector.should_equal [8,7,4,1,Nothing,Nothing]

            r_3 = c.sort order=Sort_Direction.Descending missing_last=False
            r_3.to_vector.should_equal [Nothing,Nothing,8,7,4,1]

        Test.specify 'should respect defined comparison operations for custom types' <|
            c = Column.from_vector 'foo'  [My 1 2, My 3 4, My 2 1, My 5 2, My 7 0, My 4 -1]
            r = c.sort
            r.to_vector.should_equal [My 1 2, My 2 1, My 4 -1, My 3 4, My 5 2, My 7 0]

        Test.specify 'should allow passing a custom comparator' <|
            c = Column.from_vector 'foo' [My 1 2, My 2 5, My 3 4, My 6 3, Nothing, My 1 0]
            cmp a b = (a.x-a.y).abs . compare_to (b.x-b.y).abs
            r = c.sort comparator=cmp
            r.to_vector.should_equal [My 1 2, My 3 4, My 1 0, My 2 5, My 6 3, Nothing]

    Test.group "Concatenating Tables" <|
        Test.specify 'should concat tables with the same schema' <|
            c_1_1 = ['foo', [1, 2, 3, 4]]
            c_1_2 = ['bar', ['baz', 'quux', 'spam', 'eggs']]
            t_1 = Table.new [c_1_1, c_1_2]

            c_2_1 = ['foo', [5, 6, 7]]
            c_2_2 = ['bar', [False, True, False]]
            t_2 = Table.new [c_2_1, c_2_2]

            r = t_1.concat t_2

            r.columns.length.should_equal 2
            r.at 'foo' . to_vector . should_equal [1, 2, 3, 4, 5, 6, 7]
            r.at 'bar' . to_vector . should_equal ['baz', 'quux', 'spam', 'eggs', False, True, False]

        Test.specify 'should missing-pad unmatched columns' <|
            c_1_1 = ['foo', [1, 2, 3, 4]]
            c_1_2 = ['bar', ['baz', 'quux', 'spam', 'eggs']]
            t_1 = Table.new [c_1_1, c_1_2]

            c_2_1 = ['foo', [5, 6, 7]]
            c_2_2 = ['baz', [False, True, False]]
            t_2 = Table.new [c_2_1, c_2_2]

            r = t_1.concat t_2

            r.columns.length.should_equal 3
            r.at 'foo' . to_vector . should_equal [1, 2, 3, 4, 5, 6, 7]
            r.at 'bar' . to_vector . should_equal ['baz', 'quux', 'spam', 'eggs', Nothing, Nothing, Nothing]
            r.at 'baz' . to_vector . should_equal [Nothing, Nothing, Nothing, Nothing, False, True, False]

        Test.specify 'should concatenate indexes' <|
            i_1 = ['ix', [1, 2, 3]]
            c_1 = ['col', [5, 6, 7]]

            i_2 = ['ix_2', [False, True]]
            c_2 = ['col', [7, 8]]

            t_1 = Table.new [i_1, c_1] . set_index 'ix'
            t_2 = Table.new [i_2, c_2] . set_index 'ix_2'

            r = t_1.concat t_2

            r.index.to_vector.should_equal [1, 2, 3, False, True]

    Test.group "Index" <|
        t = Table.new [['ix', [1, 2, 3]], ['c1', [4, 5, 6]]] . set_index 'ix'
        c = Column.from_vector "name" ["a", "b", "c"]
        Test.specify "should be accessible by `at` like other columns" <|
            c = t.at 'ix'
            i = t.index
            c.to_vector . should_equal i.to_vector

        Test.specify "should be able to be set by column" <|
            with_index = t.set_index c
            with_index.index.to_vector . should_equal c.to_vector

    Test.group "Slicing Tables" <|
        Test.specify 'should allow taking first n rows' <|
            i_1 = ['ix', [1, 2, 3]]
            c_1 = ['col', [5, 6, 7]]
            c_2 = ['col2', ["a", Nothing, "c"]]
            c_3 = ['col3', [False, True, Nothing]]
            t_1 = Table.new [i_1, c_1, c_2, c_3] . set_index 'ix'

            t_1.take_start 10 . at 'col' . to_vector . should_equal (t_1.at 'col' . to_vector)

            t_2 = t_1.take_start 2
            t_2.index.to_vector . should_equal (t_1.index.to_vector . take_start 2)
            t_2.at 'col' . to_vector . should_equal (t_1.at 'col' . to_vector . take_start 2)
            t_2.at 'col2' . to_vector . should_equal (t_1.at 'col2' . to_vector . take_start 2)
            t_2.at 'col3' . to_vector . should_equal (t_1.at 'col3' . to_vector . take_start 2)

            t_1.at 'col' . take_start 2 . to_vector . should_equal (t_1.at 'col' . to_vector . take_start 2)

        Test.specify "should allow taking the last n rows" <|
            i_1 = ['ix', [1, 2, 3]]
            c_1 = ['col1', [5, 6, 7]]
            c_2 = ['col2', ["a", Nothing, "c"]]
            c_3 = ['col3', [False, True, Nothing]]
            t_1 = Table.new [i_1, c_1, c_2, c_3] . set_index 'ix'

            t_1.take_end 10 . at 'col1' . to_vector . should_equal (t_1.at 'col1' . to_vector)

            t_2 = t_1.take_end 2
            t_2.index.to_vector . should_equal (t_1.index.to_vector . take_end 2)
            t_2.at 'col1' . to_vector . should_equal (t_1.at 'col1' . to_vector . take_end 2)
            t_2.at 'col2' . to_vector . should_equal (t_1.at 'col2' . to_vector . take_end 2)
            t_2.at 'col3' . to_vector . should_equal (t_1.at 'col3' . to_vector . take_end 2)

        Test.specify "should allow getting the first / head row" <|
            i_1 = ['ix', [1, 2, 3]]
            c_1 = ['col1', [5, 6, 7]]
            c_2 = ['col2', ["a", Nothing, "c"]]
            c_3 = ['col3', [False, True, Nothing]]
            t_1 = Table.new [i_1, c_1, c_2, c_3] . set_index 'ix'
            expected_i_1 = ['ix', [1]]
            expected_c_1 = ['col1', [5]]
            expected_c_2 = ['col2', ["a"]]
            expected_c_3 = ['col3', [False]]
            expected_head = Table.new [expected_i_1, expected_c_1, expected_c_2, expected_c_3] . set_index 'ix'

            t_2 = t_1.first

            t_2.index.to_vector . should_equal expected_head.index.to_vector
            t_2.at 'col1' . to_vector . should_equal (expected_head.at 'col1' . to_vector)
            t_2.at 'col2' . to_vector . should_equal (expected_head.at 'col2' . to_vector)
            t_2.at 'col3' . to_vector . should_equal (expected_head.at 'col3' . to_vector)

            empty_ix = ['ix', []]
            empty_col = ['col_1', []]
            empty_table = Table.new [empty_ix, empty_col] . set_index 'ix'

            empty_table.first.should_fail_with Empty_Error

        Test.specify "should allow getting the last row" <|
            i_1 = ['ix', [1, 2, 3]]
            c_1 = ['col1', [5, 6, 7]]
            c_2 = ['col2', ["a", Nothing, "c"]]
            c_3 = ['col3', [False, True, Nothing]]
            t_1 = Table.new [i_1, c_1, c_2, c_3] . set_index 'ix'
            expected_i_1 = ['ix', [3]]
            expected_c_1 = ['col1', [7]]
            expected_c_2 = ['col2', ["c"]]
            expected_c_3 = ['col3', [Nothing]]
            expected_last = Table.new [expected_i_1, expected_c_1, expected_c_2, expected_c_3] . set_index 'ix'

            t_2 = t_1.last

            t_2.index.to_vector . should_equal expected_last.index.to_vector
            t_2.at 'col1' . to_vector . should_equal (expected_last.at 'col1' . to_vector)
            t_2.at 'col2' . to_vector . should_equal (expected_last.at 'col2' . to_vector)
            t_2.at 'col3' . to_vector . should_equal (expected_last.at 'col3' . to_vector)

            empty_ix = ['ix', []]
            empty_col = ['col_1', []]
            empty_table = Table.new [empty_ix, empty_col] . set_index 'ix'

            empty_table.last.should_fail_with Empty_Error

        Test.specify "should allow reversing the table" <|
            i_1 = ['ix', [1, 2, 3]]
            c_1 = ['col1', [5, 6, 7]]
            c_2 = ['col2', ["a", Nothing, "c"]]
            c_3 = ['col3', [False, True, Nothing]]
            t_1 = Table.new [i_1, c_1, c_2, c_3] . set_index 'ix'

            expected_i_1 = ['ix', [3, 2, 1]]
            expected_c_1 = ['col1', [7, 6, 5]]
            expected_c_2 = ['col2', ["c", Nothing, "a"]]
            expected_c_3 = ['col3', [Nothing, True, False]]
            expected = Table.new [expected_i_1, expected_c_1, expected_c_2, expected_c_3] . set_index 'ix'

            t_2 = t_1.reverse

            t_2.index.to_vector . should_equal expected.index.to_vector
            t_2.at 'col1' . to_vector . should_equal (expected.at 'col1' . to_vector)
            t_2.at 'col2' . to_vector . should_equal (expected.at 'col2' . to_vector)
            t_2.at 'col3' . to_vector . should_equal (expected.at 'col3' . to_vector)

    Test.group "Visualizing tables" <|
        Test.specify "should specify default visualizations correctly" <|
            c_1_1 = ['x', [1, 2, 3]]
            c_1_2 = ['Y', [5.3, 56.2, 6.3]]
            t_1 = Table.new [c_1_1, c_1_2]
            t_1.default_visualization.should_equal Visualization.Id.scatter_plot

            c_2_1 = ['LaTituDe', [5,3,2]]
            c_2_2 = ['longitude', [6,7,8]]
            t_2 = Table.new [c_2_1, c_2_2]
            t_2.default_visualization.should_equal Visualization.Id.geo_map

            c_3_1 = ['latitude', [5,2,5]]
            c_3_2 = ['Y', [2,4,2]]
            c_3_3 = ['name', ["foo", "bar", "baz"]]
            t_3 = Table.new [c_3_1, c_3_2, c_3_3]
            t_3.default_visualization.should_equal Visualization.Id.table

    selection = Common_Table_Spec.Test_Selection supports_case_sensitive_columns=True order_by=True natural_ordering=True case_insensitive_ordering=True order_by_unicode_normalization_by_default=True
    Common_Table_Spec.spec "[In-Memory] " table_builder=Table.new test_selection=selection

    Test.group "Use First Row As Names" <|
        expect_column_names names table =
            table.columns . map .name . should_equal names frames_to_skip=2

        Test.specify "should work happily with mixed types" <|
            c_0 = ['A', ["H", "B", "C"]]
            c_1 = ['B', [Date.new 1980, Date.new 1979, Date.new 2000]]
            c_2 = ['x', [1, 2, 3]]
            c_3 = ['Y', [5.3, 56.2, 6.3]]
            c_4 = ['Z', [True, False, True]]
            table = Table.new [c_0, c_1, c_2, c_3, c_4]
            expect_column_names ["H", "1980-01-01", "1", "5.3", "True"] <| table.use_first_row_as_names

        Test.specify "should correctly handle problems: invalid names ''" <|
            c_0 = ['A', ["", "B", "C"]]
            c_2 = ['x', [1, 2, 3]]
            table = Table.new [c_0, c_2]
            action = table.use_first_row_as_names on_problems=_
            tester = expect_column_names ["Column_1", "1"]
            problems = [Invalid_Output_Column_Names [""]]
            Problems.test_problem_handling action problems tester

        Test.specify "should correctly handle problems: invalid names Nothing" <|
            c_0 = ['A', ["A", "B", "C"]]
            c_2 = ['x', [Nothing, 2, 3]]
            table = Table.new [c_0, c_2]
            action = table.use_first_row_as_names on_problems=_
            tester = expect_column_names ["A", "Column_1"]
            problems = [Invalid_Output_Column_Names [Nothing]]
            Problems.test_problem_handling action problems tester

        Test.specify "should correctly handle problems: duplicate names" <|
            c_0 = ['A', ["A", "B", "C"]]
            c_1 = ['B', ["A", "B", "C"]]
            c_2 = ['x', ["A", "B", "C"]]
            c_3 = ['C', ["A", "B", "C"]]
            table = Table.new [c_0, c_1, c_2, c_3]
            action = table.use_first_row_as_names on_problems=_
            tester = expect_column_names ["A", "A_1", "A_2", "A_3"]
            problems = [Duplicate_Output_Column_Names ["A", "A", "A"]]
            Problems.test_problem_handling action problems tester

main = Test.Suite.run_main spec
