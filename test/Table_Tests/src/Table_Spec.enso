from Base import all
from Table import all
import Table.Data.Storage
import Test

type My x y

My.== that = case that of
    My x1 y1 -> (this.x + this.y) == (x1 + y1)
    _ -> False

My.frobnicate = case this of
    My x1 y1 -> My y1 x1

spec =
    describe "Parsing" <|
        it "should parse a simple numeric table" <|
            simple_empty = (Enso_Project.data / "simple_empty.csv") . read_csv
            c_1_data = [1, 4, 7, 10]
            c_2_data = [2, Nothing, 8, 11]
            c_3_data = [Nothing, 6, 9, 12]

            c_1 = Json.from_pairs [["name", "a"], ["data", c_1_data]]
            c_2 = Json.from_pairs [["name", "b"], ["data", c_2_data]]
            c_3 = Json.from_pairs [["name", "c"], ["data", c_3_data]]

            expected = Json.from_pairs [["columns", [c_1, c_2, c_3]]]

            simple_empty.to_json.should equal expected
        it "should correctly infer types of varied-type columns" <|
            varied_column = (Enso_Project.data / "varied_column.csv") . read_csv has_header=False
            c_1_data = ["2005-02-25", "2005-02-28", "4", "2005-03-02", Nothing, "2005-03-04", "2005-03-07", "2005-03-08"]
            c_2_data = ["2005-02-25", "2005-02-28", "2005-03-01", Nothing, "2005-03-03", "2005-03-04", "2005-03-07", "2005-03-08"]
            c_3_data = [1, 2, 3, 4, 5, Nothing, 7, 8]
            c_4_data = [1, 2, 3, 4, 5, 6, 7, 8]
            c_5_data = [1.0, 2.0, 3.0, 4.0, 5.0, 6.25, 7.0, 8.0]
            c_6_data = ['1', '2', '3', '4', '5', '6.25', '7', 'osiem']

            c_1 = Json.from_pairs [["name", "C0"], ["data", c_1_data]]
            c_2 = Json.from_pairs [["name", "C1"], ["data", c_2_data]]
            c_3 = Json.from_pairs [["name", "C2"], ["data", c_3_data]]
            c_4 = Json.from_pairs [["name", "C3"], ["data", c_4_data]]
            c_5 = Json.from_pairs [["name", "C4"], ["data", c_5_data]]
            c_6 = Json.from_pairs [["name", "C5"], ["data", c_6_data]]

            expected = Json.from_pairs [["columns", [c_1, c_2, c_3, c_4, c_5, c_6]]]
            varied_column.to_json.should equal expected

    describe "JSON serialization" <|
        it "should serialize all column types to correct JSON" <|
            c_1 = [1, 2, 3, Nothing]
            c_2 = [1.2, 3.4, 5.6, 7.8]
            c_3 = [Nothing, 'foo', 'bar', 'baz']
            c_4 = [True, False, True, True]
            c_5 = [My 1 2, My True False, My 6.3 6.4, [1, 2, 3]]

            t = Table.new [['a', c_1], ['b', c_2], ['c', c_3], ['d', c_4], ['e', c_5]]

            j_c_1 = Json.from_pairs [["name", "a"], ["data", c_1]]
            j_c_2 = Json.from_pairs [["name", "b"], ["data", c_2]]
            j_c_3 = Json.from_pairs [["name", "c"], ["data", c_3]]
            j_c_4 = Json.from_pairs [["name", "d"], ["data", c_4]]
            j_c_5 = Json.from_pairs [["name", "e"], ["data", c_5]]

            expected = Json.from_pairs [["columns", [j_c_1, j_c_2, j_c_3, j_c_4, j_c_5]]]

            t.to_json.should_equal expected

    describe "JSON construction" <|
        it "should allow converting a JSON array into a table" <|
            r_1 = Json.from_pairs [['foo', 20], ['bar', 'baz'], ['baz', False]]
            r_2 = Json.from_pairs [['bar', 'xyz'], ['baz', True]]
            r_3 = Json.from_pairs [['baz', False], ['foo', 13]]
            t = [r_1, r_2, r_3].to_json.to_table ['foo', 'bar', 'baz']
            t.columns.map name . should_equal ['foo', 'bar', 'baz']
            t.at 'foo' . to_vector . should_equal [20, Nothing, 13]
            t.at 'bar' . to_vector . should_equal ['baz', 'xyz', Nothing]
            t.at 'baz' . to_vector . should_equal [False, True, False]

    describe "Mapping Operations" <|
        it "should allow mapping a function over a column" <|
            c_str = Column.from_vector 'x' ['a', 'b', Nothing, 'b']
            c_str.map (+ "x") . to_vector . should_equal ['ax', 'bx', Nothing, 'bx']
            c_int = Column.from_vector 'x' [1, 2, 1, 5, 1]
            c_int.map (+ 1) . to_vector . should_equal [2, 3, 2, 6, 2]
            c_dec = Column.from_vector 'x' [1.9, 2.0, 1.2, 5.6, 1.9]
            c_dec.map (+ 1.5) . to_vector . should_equal [3.4, 3.5, 2.7, 7.1, 3.4]
            c_bool = Column.from_vector 'x' [True, False, Nothing, True, False]
            c_bool.map (_.to_text) . to_vector . should_equal ["True", "False", Nothing, "True", "False"]
            c_any = Column.from_vector 'x' [My 1 6, My 6 3, My 2 5, My 3 4, My 200 300]
            c_any.map (_.frobnicate) . to_vector . should_equal [My 6 1, My 3 6, My 5 2, My 4 3, My 300 200]

        it "should allow zipping columns with a custom function" <|
            b = Column.from_vector 'w' [6.3, 3.1, 5.2, 4.6, 8.0]
            a = Column.from_vector 'z' ['foo', 'bar', 'baz', 'spam', 'eggs']
            c = a.zip b x-> y-> x + y.to_text
            c.to_vector.should_equal ['foo6.3', 'bar3.1', 'baz5.2', 'spam4.6', 'eggs8.0']

        it "should handle vectorized equality and fall back on non-vectorized if needed" <|
            c_str = Column.from_vector 'x' ['a', 'b', Nothing, 'b']
            (c_str == 'b').to_vector.should_equal [False, True, Nothing, True]
            c_int = Column.from_vector 'x' [1, 2, 1, 5, 1]
            (c_int == 1).to_vector.should_equal [True, False, True, False, True]
            c_dec = Column.from_vector 'x' [1.9, 2.0, 1.2, 5.6, 1.9]
            (c_dec == 1.9).to_vector.should_equal [True, False, False, False, True]
            c_bool = Column.from_vector 'x' [True, False, Nothing, True, False]
            (c_bool == False).to_vector.should_equal [False, True, Nothing, False, True]
            c_any = Column.from_vector 'x' [My 1 6, My 6 3, My 2 5, My 3 4, My 200 300]
            (c_any == My 7 0).to_vector.should_equal [True, False, True, True, False]

        it "should switch between maps and zips based on argument type" <|
            a = Column.from_vector 'x' [0, 1, 7, 3, 6]
            b = Column.from_vector 'w' [6.3, 3.1, 5.2, Nothing, 8]
            (a + 3.2).to_vector.should_equal [3.2, 4.2, 10.2, 6.2, 9.2]
            (a + b).to_vector.should_equal [6.3, 4.1, 12.2, Nothing, 14]
            gt_const = a > 5
            gt_const.to_vector.should_equal [False, False, True, False, True]
            gt_b = a > b
            gt_b.to_vector.should_equal [False, False, True, Nothing, False]
            both = gt_const && gt_b
            both.to_vector.should_equal [False, False, True, Nothing, False]

    describe "Masking Tables" <|
        it "should allow selecting table rows based on a boolean column" <|
            df = (Enso_Project.data / "simple_empty.csv").read_csv
            r = df.where (Column.from_vector 'x' [True, False, False, True])
            r.at "a" . to_vector . should_equal [1, 10]
            r.at "b" . to_vector . should_equal [2, 11]
            r.at "c" . to_vector . should_equal [Nothing, 12]
        it "should treat NA values in the mask as false and extend the mask with NAs" <|
            df = (Enso_Project.data / "simple_empty.csv").read_csv
            r = df.where (Column.from_vector 'x' [Nothing, True, False])
            r.at "a" . to_vector . should_equal [4]
            r.at "b" . to_vector . should_equal [Nothing]
            r.at "c" . to_vector . should_equal [6]

    describe "Joining Tables" <|
        a_0 = ['x', [0, 1, 7, 3, 6]]
        a_1 = ['y', ["foo", "bar", "baz", "spam", "eggs"]]
        a = Table.new [a_0, a_1]
        b_0 = ['w', [6, 3, 5, 5, 3, 3]]
        b_1 = ['z', ["foo", "foo", "bar", "spam", "bar", "eggs"]]
        b = Table.new [b_0, b_1]

        it "should allow joining tables index-on-index" <|
            r_1 = a.set_index 'x' . join (b.set_index 'w')
            r_1.at 'y' . to_vector . should_equal ['foo', 'bar', 'baz', 'spam', 'spam', 'spam', 'eggs']
            r_1.at 'z' . to_vector . should_equal [Nothing, Nothing, Nothing, 'foo', 'bar', 'eggs', 'foo']
            r_2 = a.set_index 'y' . join (b.set_index 'z') drop_unmatched=True
            r_2.at 'x' . to_vector . should_equal [0, 0, 1, 1, 3, 6]
            r_2.at 'w' . to_vector . should_equal [6, 3, 5, 3, 5, 3]

        it "should allow joining tables column-on-index" <|
            r_1 = a.join (b.set_index 'w') on='x'
            r_1.at 'y' . to_vector . should_equal ['foo', 'bar', 'baz', 'spam', 'spam', 'spam', 'eggs']
            r_1.at 'z' . to_vector . should_equal [Nothing, Nothing, Nothing, 'foo', 'bar', 'eggs', 'foo']
            r_2 = a.join (b.set_index 'z') drop_unmatched=True on='y'
            r_2.at 'x' . to_vector . should_equal [0, 0, 1, 1, 3, 6]
            r_2.at 'w' . to_vector . should_equal [6, 3, 5, 3, 5, 3]

        it "should allow joining tables on the default index" <|
            x = Table.new [['x', [1, 2, 4, 6]]]
            y = Table.new [['y', [8, 9]]]
            r_1 = x.join y
            r_1.at 'x' . to_vector . should_equal [1, 2, 4, 6]
            r_1.at 'y' . to_vector . should_equal [8, 9, Nothing, Nothing]

            r_2 = x.join y drop_unmatched=True
            r_2.at 'x' . to_vector . should_equal [1, 2]
            r_2.at 'y' . to_vector . should_equal [8, 9]

        it "should append suffixes to disambiguate column names" <|
            x = Table.new [['x', [1, 2, 4, 6]]]
            y = Table.new [['x', [8, 9]]]
            r_1 = x.join y
            r_1.columns.map name . should_equal ['x_left', 'x_right']

            r_2 = x.join y left_suffix='_old' right_suffix='_new'
            r_2.columns.map name . should_equal ['x_old', 'x_new']

    describe "Filling Missing Values" <|
        it "should coerce non-coercible types to Object" <|
            strs = Column.from_vector 'x' ["a", Nothing, "b", Nothing]
            strs_filled = strs.fill_missing False
            strs_filled.to_vector . should_equal ["a", False, "b", False]
            strs_filled.storage_type . should_equal Storage.Any

            ints = Column.from_vector 'x' [1, Nothing, 2, Nothing]
            ints_filled = ints.fill_missing "X"
            ints_filled.to_vector . should_equal [1, "X", 2, "X"]
            ints_filled.storage_type . should_equal Storage.Any

            bools = Column.from_vector 'x' [True, False, Nothing]
            bools_filled = bools.fill_missing "X"
            bools_filled.to_vector . should_equal [True, False, "X"]
            bools_filled.storage_type . should_equal Storage.Any

        it "should coerce long and double types to double" <|
            ints = Column.from_vector 'x' [1, Nothing, 2, Nothing]
            ints_filled = ints.fill_missing 0.5
            ints_filled.to_vector . should_equal [1.0, 0.5, 2.0, 0.5]
            ints_filled.storage_type . should_equal Storage.Decimal

            decimals = Column.from_vector 'x' [0.5, Nothing, Nothing, 0.25]
            decimals_filled = decimals.fill_missing 42
            decimals_filled.to_vector . should_equal [0.5, 42.0, 42.0, 0.25]
            decimals_filled.storage_type . should_equal Storage.Decimal

        it "should keep String, Boolean, Long and Double type" <|
            strs = Column.from_vector 'x' ["a", Nothing, "b", Nothing]
            strs_filled = strs.fill_missing "X"
            strs_filled.to_vector . should_equal ["a", "X", "b", "X"]
            strs_filled.storage_type . should_equal Storage.Text

            bools = Column.from_vector 'x' [True, False, Nothing]
            bools_filled = bools.fill_missing False
            bools_filled.to_vector . should_equal [True, False, False]
            bools_filled.storage_type . should_equal Storage.Boolean

            ints = Column.from_vector 'x' [1, Nothing, 2, Nothing]
            ints_filled = ints.fill_missing 42
            ints_filled.to_vector . should_equal [1, 42, 2, 42]
            ints_filled.storage_type . should_equal Storage.Integer

            decimals = Column.from_vector 'x' [0.5, Nothing, Nothing, 0.25]
            decimals_filled = decimals.fill_missing 1.0
            decimals_filled.to_vector . should_equal [0.5, 1.0, 1.0, 0.25]
            decimals_filled.storage_type . should_equal Storage.Decimal
