from Standard.Base import all
import Standard.Base.Errors.File_Error.File_Error
import Standard.Base.Runtime.Context

from Standard.Table import all
import Standard.Table.Errors.Invalid_JSON_Format

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

import project.Util


spec = Test.group 'Various File Format support on Table' <| Context.Output.with_enabled <|
    t1 = Table.new [["X", [1, 2, 3]]]
    transient = enso_project.data / "transient"
    simple_empty = enso_project.data/'simple_empty.csv' . read

    Test.specify "should be able to be written as CSV, Excel" <|
        f1 = transient / "test2.csv"
        f2 = transient / "test3.xlsx"
        [f1, f2].each f->
            f.delete_if_exists
            t1.write f . should_succeed
            f.exists.should_be_true
            f.delete

    Test.specify "should be able to be written as JSON using Table.write" <|
        f1 = transient / "test1.json"
        f1.delete_if_exists
        t1.write f1 . should_succeed
        f1.exists.should_be_true
        f1.delete

    Test.specify 'should write JSON tables' <|
        simple_empty = enso_project.data/'simple_empty.csv' . read
        out = transient / 'out.json'
        out.delete_if_exists
        simple_empty.write out . should_equal out
        Table.from_objects (Json.parse out.read_text) ['a', 'b', 'c'] . should_equal simple_empty
        out.delete_if_exists

    Test.specify 'should append to JSON tables' <|
        out = transient / 'out.json'
        out.delete_if_exists
        simple_empty.write out . should_equal out
        simple_empty.write out on_existing_file=Existing_File_Behavior.Append . should_equal out
        Table.from_objects (Json.parse out.read_text) ['a', 'b', 'c'] . row_count . should_equal 2*simple_empty.row_count
        out.delete_if_exists

    Test.specify 'should fail to append to JSON non-arrays' <|
        out = transient / 'out.json'
        out.delete_if_exists
        '1'.write out
        simple_empty.write out on_existing_file=Existing_File_Behavior.Append . should_fail_with Invalid_JSON_Format
        out.delete_if_exists

        '"Hello World"'.write out
        simple_empty.write out on_existing_file=Existing_File_Behavior.Append . should_fail_with Invalid_JSON_Format
        out.delete_if_exists

        '{}'.write out
        simple_empty.write out on_existing_file=Existing_File_Behavior.Append . should_fail_with Invalid_JSON_Format
        out.delete_if_exists

    Test.specify "should fail gracefully when provided with an unsupported format" <|
        f1 = (transient / "test4.unknown-format")
        f1.delete_if_exists
        r1 = t1.write f1
        r1.should_fail_with File_Error
        r1.catch.should_be_a File_Error.Unsupported_Output_Type
        r1.catch.format . should_equal f1
        r1.catch.to_display_text . should_equal "Values of type Table cannot be written as format test4.unknown-format."

        f2 = (transient / "test5.txt")
        f2.delete_if_exists
        my_format = Plain_Text Encoding.ascii
        r2 = t1.write f2 my_format
        r2.should_fail_with File_Error
        r2.catch.should_be_a File_Error.Unsupported_Output_Type
        r2.catch.format . should_equal my_format

main = Test_Suite.run_main spec
