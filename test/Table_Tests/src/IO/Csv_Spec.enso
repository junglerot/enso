from Standard.Base import all

from Standard.Table import all

from Standard.Test import Test, Test_Suite, Problems
import Standard.Test.Extensions

from project.Util import all

spec =
    c_1 = ["a", ["1", "4", "7", "10"]]
    c_2 = ["b", [2, Nothing, 8, 11]]
    c_3 = ["c", [Nothing, 6, 9, 12]]
    expected_table = Table.new [c_1, c_2, c_3]

    Test.group "Table.from Text" <|
        Test.specify "should create a table from a textual CSV" <|
            file_contents = (enso_project.data / "simple_empty.csv") . read_text
            table = Table.from file_contents (format = Delimited ",")
            table.should_equal expected_table

    Test.group "File.read (Delimited)" <|
        Test.specify "should create a table from a CSV in a file" <|
            file = (enso_project.data / "simple_empty.csv")
            table = file.read
            table.should_equal expected_table

        Test.specify "should correctly infer types of varied-type columns" <|
            varied_column = (enso_project.data / "varied_column.csv") . read
            c_1 = ["Column 1", ["2005-02-25", "2005-02-28", "4", "2005-03-02", Nothing, "2005-03-04", "2005-03-07", "2005-03-08"]]
            # We can re-enable this once date support is improved.
            #c_2 = ["Column 2", ["2005-02-25", "2005-02-28", "2005-03-01", Nothing, "2005-03-03", "2005-03-04", "2005-03-07", "2005-03-08"]]
            c_3 = ["Column 3", [1, 2, 3, 4, 5, Nothing, 7, 8]]
            c_4 = ["Column 4", [1, 2, 3, 4, 5, 6, 7, 8]]
            c_5 = ["Column 5", [1.0, 2.0, 3.0, 4.0, 5.0, 6.25, 7.0, 8.0]]
            c_6 = ["Column 6", ['1', '2', '3', '4', '5', '6.25', '7', 'osiem']]

            expected = Table.new [c_1, c_3, c_4, c_5, c_6]
            varied_column.select_columns [0, 2, 3, 4, 5] . should_equal expected

        Test.specify "should handle duplicated columns" <|
            csv = """
                name,x,y,x,y
                foo,10,20,30,20
            t = Table.from csv (format = Delimited ",")
            t.columns.map .name . should_equal ['name', 'x', 'y', 'x 1', 'y 1']

    Test.group 'Writing' <|
        Test.specify 'should properly serialize simple tables' <|
            varied_column = (enso_project.data / "varied_column.csv") . read
            res = Text.from varied_column format=(Delimited ",")
            exp = normalize_lines <| '''
                Column 1,Column 2,Column 3,Column 4,Column 5,Column 6
                2005-02-25,2005-02-25,1,1,1.0,1
                2005-02-28,2005-02-28,2,2,2.0,2
                4,2005-03-01,3,3,3.0,3
                2005-03-02,,4,4,4.0,4
                ,2005-03-03,5,5,5.0,5
                2005-03-04,2005-03-04,,6,6.25,6.25
                2005-03-07,2005-03-07,7,7,7.0,7
                2005-03-08,2005-03-08,8,8,8.0,osiem
            res.should_equal exp

        Test.specify 'should properly handle quoting of records and allow specifying separators' <|
            c1 = ['name', ['Robert");DROP TABLE Students;--', 'This;Name;;Is""Strange', 'Marcin,,']]
            c2 = ['grade', [10, 20, 'hello;world']]
            t = Table.new [c1, c2]

            expected = normalize_lines <| """
                name;grade
                "Robert"");DROP TABLE Students;--";10
                "This;Name;;Is""""Strange";20
                Marcin,,;"hello;world"

            res = Text.from t format=(Delimited ";")
            res.should_equal expected

        Test.specify 'should allow forced quoting of records' <|
            c1 = ['name', ['Robert");DROP TABLE Students;--', 'This;Name;;Is""Strange', 'Marcin,,']]
            c2 = ['grade', [10, 20, 'hello;world']]
            t = Table.new [c1, c2]

            expected = normalize_lines <| """
                "name","grade"
                "Robert"");DROP TABLE Students;--",10
                "This;Name;;Is""""Strange",20
                "Marcin,,","hello;world"

            res = Text.from t format=(Delimited "," . with_quotes always_quote=True)
            res.should_equal expected


        Test.specify 'should write CSV to a file' <|
            varied_column = (enso_project.data / "varied_column.csv") . read
            out = enso_project.data / "transient" / "out.csv"
            out.delete_if_exists
            varied_column.write out
            exp = normalize_lines <| '''
                Column 1,Column 2,Column 3,Column 4,Column 5,Column 6
                2005-02-25,2005-02-25,1,1,1.0,1
                2005-02-28,2005-02-28,2,2,2.0,2
                4,2005-03-01,3,3,3.0,3
                2005-03-02,,4,4,4.0,4
                ,2005-03-03,5,5,5.0,5
                2005-03-04,2005-03-04,,6,6.25,6.25
                2005-03-07,2005-03-07,7,7,7.0,7
                2005-03-08,2005-03-08,8,8,8.0,osiem
            out.read_text.should_equal exp
            out.delete_if_exists

    Test.group "Integration" <|
        Test.specify "should be able to round-trip a table with all kinds of weird characters to CSV and back" <|
            names = ['Śłąęźż");DROP TABLE Students;--', 'This;Name;;Is""Strange', 'Marcin,,', '\'', 'a\n\nb', 'a\tc', Nothing, Nothing, Nothing, '42', '💁👌🎍😍', '', 'null?\0?', 'FFFD', '\uFFFD', '\r\n', 'a\r\nb\n\rc\rd\ne', 'what about these # ?? // /* hmm */ is it included?', 'and the rare \v vertical tab?']
            d = Date_Time.new 2015 10 29 23 55 49
            t = Table.new [['name', names], ['header\nspanning\nmultiple\nlines', names.map_with_index ix-> _-> ix*10], ['dates', names.map_with_index ix-> _-> d + Duration.new hours=3*ix]]
            out = enso_project.data / 'transient' / 'integrate.csv'
            out.delete_if_exists

            Problems.assume_no_problems <|
                t.write out
            t2 = out.read
            t2.should_equal t

            t3 = out.read (Delimited ',' . with_comments)
            t3.should_equal t

            out.delete_if_exists

            out2 = enso_project.data / 'transient' / 'integrate.tsv'
            out2.delete_if_exists

            t.write out2 . should_equal out2

            t4 = out2.read
            t4.should_equal t

            out2.delete_if_exists

main = Test_Suite.run_main spec
