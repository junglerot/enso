from Standard.Base import all

from Standard.Table import Table, Column

from Standard.Test import Test
import Standard.Test.Extensions
import Standard.Test.Test_Result.Test_Result

polyglot java import org.enso.base_test_helpers.FileSystemHelper

Table.should_equal : Any -> Integer -> Test_Result
Table.should_equal self expected frames_to_skip=0 =
    loc = Meta.get_source_location 1+frames_to_skip
    case expected of
        _ : Table ->
            tables_equal t0 t1 =
                same_headers = (t0.columns.map .name) == (t1.columns.map .name)
                same_columns = (t0.columns.map .to_vector) == (t1.columns.map .to_vector)
                same_headers && same_columns
            equal = tables_equal self expected
            if equal.not then
                msg = 'Tables differ at '+loc+'.\nActual:\n' + self.display + '\nExpected:\n' + expected.display
                Test.fail msg
        _ -> Test.fail "Got a Table, but expected a "+expected.to_display_text+' (at '+loc+').'

Column.should_equal : Any -> Integer -> Test_Result
Column.should_equal self expected frames_to_skip=0 =
    loc = Meta.get_source_location 1+frames_to_skip
    case expected of
        _ : Column ->
            if self.name != expected.name then
                Test.fail "Expected column name "+expected.name+", but got "+self.name+" (at "+loc+")."
            if self.length != expected.length then
                Test.fail "Expected column length "+expected.length.to_text+", but got "+self.length.to_text+" (at "+loc+")."
            self.to_vector.should_equal expected.to_vector
        _ -> Test.fail "Got a Column, but expected a "+expected.to_display_text+' (at '+loc+').'

normalize_lines string line_separator=Line_Ending_Style.Unix.to_text newline_at_end=True =
    case newline_at_end of
        True -> string.lines.join line_separator suffix=line_separator
        False -> string.lines.join line_separator

set_writable file writable =
    path = file.absolute.path
    FileSystemHelper.setWritable path writable
