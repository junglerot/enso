from Standard.Base import all

import Standard.Table.Internal.Unique_Name_Strategy.Unique_Name_Strategy

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

spec =
    Test.group 'Unique_Name_Strategy Helper' <|
        Test.specify 'should change an empty name to "Column"' <|
            strategy = Unique_Name_Strategy.new
            strategy.make_valid_name "" . should_equal "Column"
            strategy.make_valid_name "FOO" . should_equal "FOO"
            strategy.make_valid_name "Column" . should_equal "Column"
            strategy.invalid_names.length . should_equal 1

        Test.specify 'should change Nothing to "Column"' <|
            strategy = Unique_Name_Strategy.new
            strategy.make_valid_name Nothing . should_equal "Column"
            strategy.invalid_names.length . should_equal 1

        Test.specify 'should not rename unique names' <|
            strategy = Unique_Name_Strategy.new
            strategy.make_unique "A" . should_equal "A"
            strategy.make_unique "B" . should_equal "B"
            strategy.make_unique "C" . should_equal "C"
            strategy.renames.length . should_equal 0
            strategy.invalid_names.length . should_equal 0

        Test.specify 'should rename duplicates names' <|
            strategy = Unique_Name_Strategy.new
            strategy.make_unique "A" . should_equal "A"
            strategy.make_unique "A" . should_equal "A 1"
            strategy.make_unique "A" . should_equal "A 2"
            strategy.renames.length . should_equal 2
            strategy.invalid_names.length . should_equal 0

        Test.specify 'should preserve existing suffix' <|
            strategy = Unique_Name_Strategy.new
            strategy.make_unique "A" . should_equal "A"
            strategy.make_unique "A 1" . should_equal "A 1"
            strategy.make_unique "A" . should_equal "A 2"
            strategy.make_unique "A 1" . should_equal "A 1 1"
            strategy.renames.length . should_equal 2
            strategy.invalid_names.length . should_equal 0

        Test.specify "should always add a counter when renaming invalid names" <|
            strategy = Unique_Name_Strategy.new
            strategy.make_unique "" . should_equal "Column 1"
            strategy.make_unique "" . should_equal "Column 2"
            strategy.make_unique Nothing . should_equal "Column 3"
            strategy.make_unique "Foo" . should_equal "Foo"
            strategy.make_unique "Column" . should_equal "Column"
            strategy.make_unique "" . should_equal "Column 4"

        Test.specify 'should work as in examples' <|
            unique_name_strategy = Unique_Name_Strategy.new
            unique_names = ["A", "B", "A", ""] . map unique_name_strategy.make_unique
            duplicates = unique_name_strategy.renames
            invalid = unique_name_strategy.invalid_names
            duplicates.should_equal ["A"]
            invalid.should_equal [""]
            unique_names.should_equal ["A", "B", "A 1", "Column 1"]

            strategy_1 = Unique_Name_Strategy.new
            strategy_1.make_unique "A" . should_equal "A"
            strategy_1.make_unique "A" . should_equal "A 1"

    Test.group "Unique_Name_Strategy.combine_with_prefix" <|
        Test.specify "should work as in examples" <|
            strategy = Unique_Name_Strategy.new
            first = ["A", "B", "second_A"]
            second = ["A", "B", "second_A 1", "C"]
            unique_second = strategy.combine_with_prefix first second "second_"
            unique_second . should_equal ["second_A 2", "second_B", "second_A 1", "C"]
            strategy.invalid_names . should_equal []
            strategy.renames . should_equal ["second_A"]

        Test.specify "should work with no prefix" <|
            first = ["A", "B"]
            second = ["B", "A", "C"]
            strategy = Unique_Name_Strategy.new
            r = strategy.combine_with_prefix first second ""
            r . should_equal ["B 1", "A 1", "C"]

        Test.specify "should work for empty input" <|
            Unique_Name_Strategy.new.combine_with_prefix [] [] "" . should_equal []
            Unique_Name_Strategy.new.combine_with_prefix ["a"] [] "" . should_equal []
            Unique_Name_Strategy.new.combine_with_prefix [] ["a"] "" . should_equal ["a"]

        Test.specify "should find the first free spot" <|
            Unique_Name_Strategy.new.combine_with_prefix ["A", "A 1", "A 2"] ["A"] "" . should_equal ["A 3"]
            Unique_Name_Strategy.new.combine_with_prefix ["A", "A 1", "A 2"] ["A 4", "A 6", "A 100", "A", "A 3"] "" . should_equal ["A 4", "A 6", "A 100", "A 5", "A 3"]

            Unique_Name_Strategy.new.combine_with_prefix ["A", "A 1", "A 2"] ["A"] "P_" . should_equal ["P_A"]
            Unique_Name_Strategy.new.combine_with_prefix ["A", "A 1", "A 2", "P_A"] ["A"] "P_" . should_equal ["P_A 1"]
            Unique_Name_Strategy.new.combine_with_prefix ["A", "A 1", "A 2", "P_A 1"] ["A"] "P_" . should_equal ["P_A"]
            Unique_Name_Strategy.new.combine_with_prefix ["A", "A 1", "A 2", "P_A 1"] ["A", "P_A", "P_A 2"] "P_" . should_equal ["P_A 3", "P_A", "P_A 2"]

        Test.specify "will add a prefix/suffix, not increment an existing counter" <|
            first = ["A", "A 1", "A 2", "A 3"]
            Unique_Name_Strategy.new.combine_with_prefix first ["A 2"] "P_" . should_equal ["P_A 2"]
            Unique_Name_Strategy.new.combine_with_prefix first ["A 2"] "" . should_equal ["A 2 1"]
            Unique_Name_Strategy.new.combine_with_prefix first+["P_A 2"] ["A 2"] "P_" . should_equal ["P_A 2 1"]

        Test.specify "should prioritize existing names when renaming conflicts and rename only ones that are clashing with the other list" <|
            first = ["A", "B"]
            second = ["B", "A", "B 1", "C", "B 2", "B_4"]
            strategy = Unique_Name_Strategy.new
            r = strategy.combine_with_prefix first second ""
            r . should_equal ["B 3", "A 1", "B 1", "C", "B 2", "B_4"]
            strategy.invalid_names . should_equal []
            strategy.renames . should_equal ["B", "A"]

            r2 = Unique_Name_Strategy.new.combine_with_prefix first second "P_"
            r2 . should_equal ["P_B", "P_A", "B 1", "C", "B 2", "B_4"]

            third = ["B", "A", "P_B", "X", "P_B 1", "P_B 2"]
            r3 = Unique_Name_Strategy.new.combine_with_prefix first third "P_"
            r3 . should_equal ["P_B 3", "P_A", "P_B", "X", "P_B 1", "P_B 2"]

main = Test_Suite.run_main spec
