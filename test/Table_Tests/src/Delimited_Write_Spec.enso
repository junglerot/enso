from Standard.Base import all
from Standard.Base.Error.Problem_Behavior import all
import Standard.Base.System.File.Existing_File_Behavior
from Standard.Base.Data.Text.Encoding as Encoding_Module import Encoding, Encoding_Error
import Standard.Base.Data.Time.Date
import Standard.Base.Data.Time.Time_Of_Day
import Standard.Base.System

import Standard.Table
import Standard.Table.Data.Column
from Standard.Table.Errors import all
import Standard.Table.Io.File_Read
from Standard.Table.Io.File_Format import Delimited
from Standard.Table.Data.Data_Formatter as Data_Formatter_Module import Data_Formatter
import Standard.Table.Io.Quote_Style
from Standard.Table.Io.Line_Ending_Style import all
import Standard.Table.Data.Match_Columns
import Standard.Table.Data.Column_Name_Mapping
from Standard.Table.Errors as Table_Errors import Column_Count_Mismatch, Column_Name_Mismatch

import Standard.Test
import Standard.Test.Problems

from project.Util import all

type My_Type
    type My_Type x

    to_text : Text
    to_text = "[[[My Type :: " + self.x.to_text + "]]]"

spec =
    line_ending_pairs = [[Unix_Line_Endings, '\n'], [Windows_Line_Endings, '\r\n'], [Classic_Mac_Line_Endings, '\r']]
    system_separator = if System.os == "windows" then '\r\n' else '\n'
    Test.group "Delimited File Writing" <|
        Test.specify "should correctly write a simple table" <|
            table = Table.new [["A", [1,2,3]], ["B", [1.0,1.5,2.2]], ["C", ["x","y","z"]], ["D", ["a", 2, My_Type 10]]]
            file = (enso_project.data / "transient" / "written.csv")
            file.delete_if_exists
            table.write file on_problems=Report_Error . should_succeed
            expected_text = normalize_lines <| """
                A,B,C,D
                1,1.0,x,a
                2,1.5,y,2
                3,2.2,z,[[[My Type :: 10]]]
            text = File.read_text file
            text.should_equal expected_text
            file.delete

        Test.specify "should allow to specify line ending style" <|
            table = Table.new [["a", ["b", "c"]], ["d", ["e", "f"]]]
            lines = ["a,d", "b,e", "c,f"]
            line_ending_pairs.each setting->
                style=setting.first
                separator=setting.second
                file = (enso_project.data / "transient" / "endings.csv")
                table.write file (File_Format.Delimited ',' line_endings=style) on_problems=Report_Error . should_succeed
                text = File.read_text file
                text.should_equal (lines.join separator suffix=separator)
                file.delete

        Test.specify "should be able to write an empty table" <|
            table = Table.new []
            file = (enso_project.data / "transient" / "empty.csv")
            file.delete_if_exists
            table.write file on_problems=Report_Error . should_succeed
            text = File.read_text file
            text.should_equal ''
            file.delete

        Test.specify 'should quote values that contain the delimiter or quotes, in the [,""] variant' <|
            data_formatter = Data_Formatter decimal_point=","
            table = Table.new [['The Column "Name"', ["foo","'bar'",'"baz"', 'one, two, three']], ["Hello, Column?", [1.0, 1000000.5, 2.2, -1.5]]]
            file = (enso_project.data / "transient" / "quotes1.csv")
            file.delete_if_exists
            table.write file (File_Format.Delimited "," value_formatter=data_formatter) on_problems=Report_Error . should_succeed
            expected_text = normalize_lines <| """
                "The Column ""Name""","Hello, Column?"
                foo,"1,0"
                'bar',"1000000,5"
                """baz""","2,2"
                "one, two, three","-1,5"
            text = File.read_text file
            text.should_equal expected_text
            file.delete

        Test.specify 'should quote values that contain the delimiter or quotes, in the [;\\\"] variant' <|
            data_formatter = Data_Formatter thousand_separator="'"
            table = Table.new [['"A"', ["foo",'!"baz" ', 'one, two, three', "a;b; c ", "a\b"]], ["B", [1000000.5, 1000.0, 0.0, -1.2, Nothing]]]
            file = (enso_project.data / "transient" / "quotes2.csv")
            file.delete_if_exists
            table.write file (File_Format.Delimited ";" value_formatter=data_formatter . with_quotes quote='"' quote_escape='\\') on_problems=Report_Error . should_succeed
            expected_text = normalize_lines <| """
                "\"A\"";B
                foo;1'000'000.5
                "!\"baz\" ";1'000.0
                one, two, three;0.0
                "a;b; c ";-1.2
                "a\\b";
            text = File.read_text file
            text.should_equal expected_text
            file.delete

        Test.specify "should quote values that contain the delimiter or quotes, in the [\t''] variant" <|
            data_formatter = Data_Formatter thousand_separator="'"
            table = Table.new [['"A"', [Nothing,"The 'thing'.", 'one, "two", three', 'a\tb']], ["B\C", [1000000.5, 1000.0, Nothing, -1.2]]]
            file = (enso_project.data / "transient" / "quotes3.csv")
            file.delete_if_exists
            table.write file (File_Format.Delimited '\t' value_formatter=data_formatter . with_quotes quote='\'' quote_escape='\'') on_problems=Report_Error . should_succeed
            expected_text = normalize_lines <| '''
                "A"\tB\\C
                \t'1''000''000.5'
                'The ''thing''.'\t'1''000.0'
                one, "two", three\t
                'a\tb'\t-1.2
            text = File.read_text file
            text.should_equal expected_text
            file.delete

        Test.specify "should correctly distinguish empty text from a missing value" <|
            table = Table.new [["A", [1,Nothing,3]], ["B", [Nothing,"","abc"]]]
            file = (enso_project.data / "transient" / "empty_vs_null.csv")
            file.delete_if_exists
            table.write file on_problems=Report_Error . should_succeed
            expected_text = normalize_lines <| """
                A,B
                1,
                ,""
                3,abc
            text = File.read_text file
            text.should_equal expected_text
            file.delete

        Test.specify 'should not quote values if quoting is disabled' <|
            format = File_Format.Delimited "," value_formatter=(Data_Formatter decimal_point=",") . without_quotes
            table = Table.new [['The Column "Name"', ["foo","'bar'",'"baz"', 'one, two, three']], ["Hello, Column?", [1.0, 1000000.5, 2.2, -1.5]]]
            file = (enso_project.data / "transient" / "quote_disabled.csv")
            file.delete_if_exists
            table.write file format on_problems=Report_Error . should_succeed
            expected_text = normalize_lines <| """
                The Column "Name",Hello, Column?
                foo,1,0
                'bar',1000000,5
                "baz",2,2
                one, two, three,-1,5
            text = File.read_text file
            text.should_equal expected_text
            file.delete

        Test.specify 'should allow to always quote text and custom values, but for non-text primitves only if absolutely necessary' <|
            format = File_Format.Delimited "," value_formatter=(Data_Formatter thousand_separator='"' date_formats=["E, d MMM y"]) . with_quotes always_quote=True quote_escape='\\'
            table = Table.new [['The Column "Name"', ["foo","'bar'",'"baz"', 'one, two, three']], ["B", [1.0, 1000000.5, 2.2, -1.5]], ["C", ["foo", My_Type 44, (Date.new 2022 06 21 . internal_local_date), 42]], ["D", [1,2,3,4000]], ["E", [Nothing, (Time_Of_Day.new 13 55 . internal_local_time), Nothing, Nothing]]]
            file = (enso_project.data / "transient" / "quote_always.csv")
            file.delete_if_exists
            table.write file format on_problems=Report_Error . should_succeed
            expected_text = normalize_lines <| """
                "The Column \"Name\"","B","C","D","E"
                "foo",1.0,"foo",1,
                "'bar'","1\"000\"000.5","[[[My Type :: 44]]]",2,13:55:00
                "\"baz\"",2.2,"Tue, 21 Jun 2022",3,
                "one, two, three",-1.5,42,"4\"000",
            text = File.read_text file
            text.should_equal expected_text
            file.delete

        Test.specify "should correctly handle alternative encodings" <|
            table = Table.new [["ąęćś", [0]], ["ß", ["żółw 🐢"]]]
            file = (enso_project.data / "transient" / "utf16.csv")
            file.delete_if_exists
            table.write file (File_Format.Delimited "," encoding=Encoding.utf_16_be) on_problems=Report_Error . should_succeed
            expected_text = normalize_lines <| """
                ąęćś,ß
                0,żółw 🐢
            text = File.read_text file encoding=Encoding.utf_16_be
            text.should_equal expected_text
            file.delete

        Test.specify "should correctly handle encoding errors" <|
            table = Table.new [["A", [0, 1]], ["B", ["słówka", "🐢"]]]
            file = (enso_project.data / "transient" / "ascii.csv")
            file.delete_if_exists
            result = table.write file (File_Format.Delimited "," encoding=Encoding.ascii)
            expected_text = normalize_lines <| """
                A,B
                0,s??wka
                1,?
            text = File.read_text file encoding=Encoding.ascii
            text.should_equal expected_text
            result . should_equal Nothing
            sep_length = System.default_line_separator.codepoints.length
            positions = [6 + sep_length, 7 + sep_length, 13 + 2*sep_length]
            msg = "Encoding issues at codepoints " +
                positions.map .to_text . join separator=", " suffix="."
            Warning.get_all result . map .value . should_equal [Encoding_Error msg]
            file.delete

        Test.specify "should allow only text columns if no formatter is specified" <|
            format = File_Format.Delimited "," value_formatter=Nothing
            table_1 = Table.new [["A", ["x", "y"]], ["B", ["z", "w"]]]
            file_1 = (enso_project.data / "transient" / "textonly.csv")
            file_1.delete_if_exists
            result_1 = table_1.write file_1 format on_problems=Report_Error . should_succeed
            expected_text = normalize_lines <| """
                A,B
                x,z
                y,w
            text_1 = File.read_text file_1
            text_1.should_equal expected_text
            result_1 . should_equal Nothing

            table_2 = Table.new [["A", [1, 2]], ["B", ["z", "w"]]]
            file_2 = (enso_project.data / "transient" / "non-text_but_no_formatter.csv")
            file_2.delete_if_exists
            result_2 = table_2.write file_2 format
            result_2 . should_fail_with Illegal_Argument_Error
            text_2 = File.read_text file_2
            text_2.should_equal ""

            file_1.delete
            file_2.delete

        Test.specify "should create a new file in append mode if it didn't exist" <|
            table = Table.new [["A", [1,2,3]], ["B", [1.0,1.5,2.2]], ["C", ["x","y","z"]]]
            file = (enso_project.data / "transient" / "append_nonexistent.csv")
            file.delete_if_exists
            table.write file on_existing_file=Existing_File_Behavior.Append on_problems=Report_Error . should_succeed
            got_table = file.read
            got_table.should_equal table
            file.delete

        Test.specify "should correctly append to an empty file" <|
            table = Table.new [["A", [1,2,3]], ["B", [1.0,1.5,2.2]], ["C", ["x","y","z"]]]
            file = (enso_project.data / "transient" / "append_empty.csv")
            file.delete_if_exists
            "".write file
            table.write file on_existing_file=Existing_File_Behavior.Append on_problems=Report_Error . should_succeed
            got_table = file.read
            got_table.should_equal table
            file.delete

        Test.specify "should append to a file, matching columns by name (headers=Infer)" <|
            existing_table = Table.new [["A", [1,2]], ["B", [1.0,1.5]], ["C", ["x","y"]]]
            appending_table = Table.new [["B", [33,44]], ["A", [Nothing, 0]], ["C", ["a","BB"]]]
            file = (enso_project.data / "transient" / "append_by_name.csv")
            file.delete_if_exists
            existing_table.write file on_existing_file=Existing_File_Behavior.Overwrite on_problems=Report_Error . should_succeed
            appending_table.write file on_existing_file=Existing_File_Behavior.Append on_problems=Report_Error . should_succeed
            got_table = file.read
            expected_table = Table.new [["A", [1,2,Nothing,0]], ["B", [1.0,1.5,33,44]], ["C", ["x","y","a","BB"]]]
            got_table.should_equal expected_table
            file.delete

        Test.specify "should append to a file, matching columns by name (headers=True)" <|
            existing_table = Table.new [["0", [1,2]], ["B1", [1.0,1.5]], ["C", ["x","y"]]]
            appending_table = Table.new [["B1", [33,44]], ["0", [Nothing, 0]], ["C", ["a","BB"]]]
            file = (enso_project.data / "transient" / "append_by_name_2.csv")
            file.delete_if_exists
            existing_table.write file on_existing_file=Existing_File_Behavior.Overwrite on_problems=Report_Error . should_succeed
            format = File_Format.Delimited "," . with_headers
            appending_table.write file format on_existing_file=Existing_File_Behavior.Append on_problems=Report_Error . should_succeed
            got_table = file.read format
            expected_table = Table.new [["0", [1,2,Nothing,0]], ["B1", [1.0,1.5,33,44]], ["C", ["x","y","a","BB"]]]
            got_table.should_equal expected_table
            file.delete

        Test.specify "should fail when appending and matching columns by name but column names are not available in the file (headers=Infer)" <|
            existing_table = Table.new [["A", [1,2]], ["B", [1.0,1.5]], ["C", ["x","y"]]]
            appending_table = Table.new [["B", [33,44]], ["A", [Nothing, 0]], ["C", ["a","BB"]]]
            file = (enso_project.data / "transient" / "append_no_header.csv")
            file.delete_if_exists
            no_header_format = File_Format.Delimited "," . without_headers
            existing_table.write file no_header_format on_existing_file=Existing_File_Behavior.Overwrite
            appending_table.write file on_existing_file=Existing_File_Behavior.Append . should_fail_with Illegal_Argument_Error
            file.delete

        Test.specify "should fail when appending and matching columns by name but headers are disabled (headers=False)" <|
            existing_table = Table.new [["A", [1,2]], ["B", [1.0,1.5]], ["C", ["x","y"]]]
            appending_table = Table.new [["B", [33,44]], ["A", [Nothing, 0]], ["C", ["a","BB"]]]
            file = (enso_project.data / "transient" / "append_no_header.csv")
            file.delete_if_exists
            no_header_format = File_Format.Delimited "," . without_headers
            existing_table.write file on_existing_file=Existing_File_Behavior.Overwrite
            appending_table.write file no_header_format on_existing_file=Existing_File_Behavior.Append . should_fail_with Illegal_Argument_Error
            file.delete

        Test.specify "should fail on column mismatch when appending to a file by name" <|
            existing_table = Table.new [["A", [1,2]], ["B", [1.0,1.5]]]
            appending_table = Table.new [["B", [33,44]], ["X", [Nothing, 0]]]
            file = (enso_project.data / "transient" / "append_no_header.csv")
            file.delete_if_exists
            existing_table.write file on_existing_file=Existing_File_Behavior.Overwrite
            result = appending_table.write file on_existing_file=Existing_File_Behavior.Append
            result . should_fail_with Column_Name_Mismatch
            result.catch.missing . should_equal ["A"]
            result.catch.extras . should_equal ["X"]
            result.catch.to_display_text . should_equal "Columns mismatch. Missing from new data: [A] Extras in new data: [X]"
            file.delete

        Test.specify "should append to a file, matching columns by position" <|
            existing_table = Table.new [["A", [1,2]], ["B", [1.0,1.5]], ["C", ["x","y"]]]
            appending_table = Table.new [["AA", [33,44]], ["", [Nothing, 0]], ["hmmm", ["a","BB"]]]

            test_append initial_file_format append_format expected_table =
                file = (enso_project.data / "transient" / "append_by_position.csv")
                file.delete_if_exists
                existing_table.write file initial_file_format on_existing_file=Existing_File_Behavior.Overwrite on_problems=Report_Error . should_succeed
                appending_table.write file append_format match_columns=Match_Columns.By_Position on_existing_file=Existing_File_Behavior.Append on_problems=Report_Error . should_succeed
                read_format = initial_file_format
                got_table = file.read read_format
                got_table.should_equal expected_table
                file.delete

            base_format = File_Format.Delimited ","
            no_headers = base_format . without_headers
            with_headers = base_format . with_headers

            expected_table_with_headers = Table.new [["A", [1,2,33,44]], ["B", [1.0,1.5,Nothing,0]], ["C", ["x","y","a","BB"]]]
            expected_table_without_headers = expected_table_with_headers.rename_columns (Column_Name_Mapping.By_Position ["Column_1", "Column_2", "Column_3"])

            test_append initial_file_format=with_headers append_format=no_headers expected_table_with_headers
            test_append initial_file_format=with_headers append_format=base_format expected_table_with_headers
            test_append initial_file_format=no_headers append_format=base_format expected_table_without_headers
            test_append initial_file_format=no_headers append_format=no_headers expected_table_without_headers

        Test.specify "should fail on column count mismatch when appending to a file by position" <|
            existing_table = Table.new [["A", [1,2]], ["B", [1.0,1.5]], ["C", ["x","y"]]]
            appending_table_1 = Table.new [["B", [33,44]], ["X", [Nothing, 0]]]
            appending_table_2 = Table.new [["B", [33,44]], ["X", [Nothing, 0]], ["Y", ["a","BB"]], ["Z", [Nothing, 0]]]
            file = (enso_project.data / "transient" / "append_mismatch.csv")
            file.delete_if_exists
            existing_table.write file on_existing_file=Existing_File_Behavior.Overwrite

            result_1 = appending_table_1.write file match_columns=Match_Columns.By_Position on_existing_file=Existing_File_Behavior.Append
            result_1 . should_fail_with Column_Count_Mismatch
            result_1.catch.expected . should_equal 3
            result_1.catch.actual . should_equal 2
            result_1.catch.to_display_text . should_equal "Expected 3 columns, got 2."

            result_2 = appending_table_2.write file match_columns=Match_Columns.By_Position on_existing_file=Existing_File_Behavior.Append
            result_2 . should_fail_with Column_Count_Mismatch
            result_2.catch.expected . should_equal 3
            result_2.catch.actual . should_equal 4
            result_2.catch.to_display_text . should_equal "Expected 3 columns, got 4."

            file.delete

        Test.specify "should use the same line ending style as existing data when appending" <|
            initial_table = Table.new [["a", [1, 2]], ["d", ["e", "f"]]]
            table_to_append = Table.new [["a", ["x", "y"]], ["d", ["z", "w"]]]
            expected_lines = ["a,d", "1,e", "2,f", "x,z", "y,w"]
            line_ending_pairs.each setting->
                style=setting.first
                separator=setting.second
                file = (enso_project.data / "transient" / "endings.csv")
                initial_table.write file (File_Format.Delimited ',' line_endings=style) on_problems=Report_Error . should_succeed
                table_to_append.write file on_existing_file=Existing_File_Behavior.Append on_problems=Report_Error . should_succeed
                text = File.read_text file
                text.should_equal (expected_lines.join separator suffix=separator)
                file.delete

        Test.specify "should use the system default line ending style when appending to an empty or nonexistent file" <|
            empty_file = (enso_project.data / "transient" / "empty.csv")
            "".write empty_file
            nonexistent_file = (enso_project.data / "transient" / "nonexistent.csv")
            nonexistent_file.delete_if_exists

            table_to_append = Table.new [["a", ["x", "y"]], ["d", ["z", "w"]]]
            table_to_append.write nonexistent_file on_existing_file=Existing_File_Behavior.Append on_problems=Report_Error . should_succeed
            table_to_append.write empty_file on_existing_file=Existing_File_Behavior.Append on_problems=Report_Error . should_succeed

            expected_lines = ["a,d", "x,z", "y,w"]
            expected_text = (expected_lines.join system_separator suffix=system_separator)
            File.read_text empty_file . should_equal expected_text
            File.read_text nonexistent_file . should_equal expected_text

        Test.specify "should use the existing line ending style when appending to a file consisting of only comments" <|
            initial_lines = ["# comment 1", "# comment 2"]
            table_to_append = Table.new [["a", ["x", "y"]], ["b", ["z", "w"]]]
            expected_lines = initial_lines + ["a,b", "x,z", "y,w"]
            file = (enso_project.data / "transient" / "endings_comments_only.csv")
            line_ending_pairs.each setting->
                separator=setting.second
                file.delete_if_exists
                (initial_lines.join separator suffix=separator).write file
                format = File_Format.Delimited ',' . with_comments
                table_to_append.write file format on_existing_file=Existing_File_Behavior.Append on_problems=Report_Error . should_succeed
                text = File.read_text file
                expected_text = expected_lines.join separator suffix=separator
                text.should_equal expected_text
                file.delete

        Test.specify "should fail if explicitly provided line endings do not match line endings in the file when appending" <|
            initial_table = Table.new [["a", [1, 2]]]
            table_to_append = Table.new [["a", ["x", "y"]]]
            file = (enso_project.data / "transient" / "endings_mismatch.csv")
            file.delete_if_exists
            initial_table.write file (File_Format.Delimited ',' line_endings=Classic_Mac_Line_Endings)
            result = table_to_append.write file (File_Format.Delimited ',' line_endings=Unix_Line_Endings) on_existing_file=Existing_File_Behavior.Append match_columns=Match_Columns.By_Position
            result . should_fail_with Illegal_Argument_Error
            result.catch.message . should_equal "The explicitly provided line endings ('\n') do not match the line endings in the file ('\r')."
            file.delete

main = Test.Suite.run_main spec
