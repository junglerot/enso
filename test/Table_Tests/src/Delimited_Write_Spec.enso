from Standard.Base import all
import Standard.Base.Error.Problem_Behavior
from Standard.Base.Data.Text.Encoding as Encoding_Module import Encoding, Encoding_Error

import Standard.Table
import Standard.Table.Data.Column
from Standard.Table.Error import all

import Standard.Base.Data.Time.Date
import Standard.Base.Data.Time.Time_Of_Day

import Standard.Table.Io.File_Read
from Standard.Table.Io.File_Format import Delimited
from Standard.Table.Data.Data_Formatter as Data_Formatter_Module import Data_Formatter
import Standard.Table.Io.Quote_Style

import Standard.Test
import Standard.Test.Problems

import project.Util

type My_Type
    type My_Type x

    to_text : Text
    to_text = "[[[My Type :: " + self.x.to_text + "]]]"

spec =
    Test.group "Delimited File Writing" <|
        Test.specify "should correctly write a simple table" <|
            table = Table.new [["A", [1,2,3]], ["B", [1.0,1.5,2.2]], ["C", ["x","y","z"]], ["D", ["a", 2, My_Type 10]]]
            file = (enso_project.data / "transient" / "written.csv")
            file.delete_if_exists
            table.write file
            expected_text = """
                A,B,C,D
                1,1.0,x,a
                2,1.5,y,2
                3,2.2,z,[[[My Type :: 10]]]
            text = File.read_text file
            text.should_equal expected_text+'\n'

        Test.specify 'should quote values that contain the delimiter or quotes, in the [,""] variant' <|
            data_formatter = Data_Formatter decimal_point=","
            table = Table.new [['The Column "Name"', ["foo","'bar'",'"baz"', 'one, two, three']], ["Hello, Column?", [1.0, 1000000.5, 2.2, -1.5]]]
            file = (enso_project.data / "transient" / "quotes1.csv")
            file.delete_if_exists
            table.write file (File_Format.Delimited "," value_formatter=data_formatter)
            expected_text = """
                "The Column ""Name""","Hello, Column?"
                foo,"1,0"
                'bar',"1000000,5"
                """baz""","2,2"
                "one, two, three","-1,5"
            text = File.read_text file
            text.should_equal expected_text+'\n'

        Test.specify 'should quote values that contain the delimiter or quotes, in the [;\\\"] variant' <|
            data_formatter = Data_Formatter thousand_separator="'"
            table = Table.new [['"A"', ["foo",'!"baz" ', 'one, two, three', "a;b; c ", "a\b"]], ["B", [1000000.5, 1000.0, 0.0, -1.2, Nothing]]]
            file = (enso_project.data / "transient" / "quotes2.csv")
            file.delete_if_exists
            table.write file (File_Format.Delimited ";" value_formatter=data_formatter . with_quotes quote='"' quote_escape='\\')
            expected_text = """
                "\"A\"";B
                foo;1'000'000.5
                "!\"baz\" ";1'000.0
                one, two, three;0.0
                "a;b; c ";-1.2
                "a\\b";
            text = File.read_text file
            text.should_equal expected_text+'\n'

        Test.specify "should quote values that contain the delimiter or quotes, in the [\t''] variant" <|
            data_formatter = Data_Formatter thousand_separator="'"
            table = Table.new [['"A"', [Nothing,"The 'thing'.", 'one, "two", three', 'a\tb']], ["B\C", [1000000.5, 1000.0, Nothing, -1.2]]]
            file = (enso_project.data / "transient" / "quotes3.csv")
            file.delete_if_exists
            table.write file (File_Format.Delimited '\t' value_formatter=data_formatter . with_quotes quote='\'' quote_escape='\'')
            expected_text = '''
                "A"\tB\\C
                \t'1''000''000.5'
                'The ''thing''.'\t'1''000.0'
                one, "two", three\t
                'a\tb'\t-1.2
            text = File.read_text file
            text.should_equal expected_text+'\n'

        Test.specify "should correctly distinguish empty text from a missing value" <|
            table = Table.new [["A", [1,Nothing,3]], ["B", [Nothing,"","abc"]]]
            file = (enso_project.data / "transient" / "empty_vs_null.csv")
            file.delete_if_exists
            table.write file
            expected_text = """
                A,B
                1,
                ,""
                3,abc
            text = File.read_text file
            text.should_equal expected_text+'\n'

        Test.specify 'should not quote values if quoting is disabled' <|
            format = File_Format.Delimited "," value_formatter=(Data_Formatter decimal_point=",") . without_quotes
            table = Table.new [['The Column "Name"', ["foo","'bar'",'"baz"', 'one, two, three']], ["Hello, Column?", [1.0, 1000000.5, 2.2, -1.5]]]
            file = (enso_project.data / "transient" / "quote_disabled.csv")
            file.delete_if_exists
            table.write file format
            expected_text = """
                The Column "Name",Hello, Column?
                foo,1,0
                'bar',1000000,5
                "baz",2,2
                one, two, three,-1,5
            text = File.read_text file
            text.should_equal expected_text+'\n'

        Test.specify 'should allow to always quote text and custom values, but for non-text primitves only if absolutely necessary' <|
            format = File_Format.Delimited "," value_formatter=(Data_Formatter thousand_separator='"' date_formats=["E, d MMM y"]) . with_quotes always_quote=True quote_escape='\\'
            table = Table.new [['The Column "Name"', ["foo","'bar'",'"baz"', 'one, two, three']], ["B", [1.0, 1000000.5, 2.2, -1.5]], ["C", ["foo", My_Type 44, (Date.new 2022 06 21 . internal_local_date), 42]], ["D", [1,2,3,4000]], ["E", [Nothing, (Time_Of_Day.new 13 55 . internal_local_time), Nothing, Nothing]]]
            file = (enso_project.data / "transient" / "quote_always.csv")
            file.delete_if_exists
            table.write file format
            expected_text = """
                "The Column \"Name\"","B","C","D","E"
                "foo",1.0,"foo",1,
                "'bar'","1\"000\"000.5","[[[My Type :: 44]]]",2,13:55:00
                "\"baz\"",2.2,"Tue, 21 Jun 2022",3,
                "one, two, three",-1.5,42,"4\"000",
            text = File.read_text file
            text.should_equal expected_text+'\n'

        Test.specify "should correctly handle alternative encodings" <|
            table = Table.new [["ąęćś", [0]], ["ß", ["żółw 🐢"]]]
            file = (enso_project.data / "transient" / "utf16.csv")
            file.delete_if_exists
            table.write file (File_Format.Delimited "," encoding=Encoding.utf_16_be)
            expected_text = """
                ąęćś,ß
                0,żółw 🐢
            text = File.read_text file encoding=Encoding.utf_16_be
            text.should_equal expected_text+'\n'

        Test.specify "should correctly handle encoding errors" <|
            table = Table.new [["A", [0, 1]], ["B", ["słówka", "🐢"]]]
            file = (enso_project.data / "transient" / "ascii.csv")
            file.delete_if_exists
            result = table.write file (File_Format.Delimited "," encoding=Encoding.ascii)
            expected_text = """
                A,B
                0,s??wka
                1,?
            text = File.read_text file encoding=Encoding.ascii
            text.should_equal expected_text+'\n'
            result . should_equal Nothing
            Warning.get_all result . map .value . should_equal [Encoding_Error "Encoding issues at characters 7, 8, 15."]

        Test.specify "should allow only text columns if no formatter is specified" <|
            format = File_Format.Delimited "," value_formatter=Nothing
            table_1 = Table.new [["A", ["x", "y"]], ["B", ["z", "w"]]]
            file_1 = (enso_project.data / "transient" / "textonly.csv")
            file_1.delete_if_exists
            result_1 = table_1.write file_1 format
            expected_text = """
                A,B
                x,z
                y,w
            text_1 = File.read_text file_1
            text_1.should_equal expected_text+'\n'
            result_1 . should_equal Nothing

            table_2 = Table.new [["A", [1, 2]], ["B", ["z", "w"]]]
            file_2 = (enso_project.data / "transient" / "non-text_but_no_formatter.csv")
            file_2.delete_if_exists
            result_2 = table_2.write file_2 format
            result_2 . should_fail_with Illegal_Argument_Error
            text_2 = File.read_text file_2
            text_2.should_equal ""

main = Test.Suite.run_main spec
