from Standard.Base import all
from Standard.Table import Column
import Standard.Table.Data.Column as Column_Module
import Standard.Table.Data.Storage.Storage
import Standard.Examples

import Standard.Test

polyglot java import org.enso.table.data.column.storage.Storage as Java_Storage

spec = Test.group "Columns" <|
    test_column = Column.from_vector "Test" [1, 3, 5, 2, 4, 6]
    empty_column = Column.from_vector "Test" []

    Test.specify "should correctly map storage types" <|
        Column_Module.storage_types.at Java_Storage.Type.LONG . should_equal Storage.Integer
        Column_Module.storage_types.at Java_Storage.Type.DOUBLE . should_equal Storage.Decimal
        Column_Module.storage_types.at Java_Storage.Type.STRING . should_equal Storage.Text
        Column_Module.storage_types.at Java_Storage.Type.BOOL . should_equal Storage.Boolean
        Column_Module.storage_types.at Java_Storage.Type.OBJECT . should_equal Storage.Any
        Column_Module.storage_types.at Java_Storage.Type.DATE . should_equal Storage.Date
        Column_Module.storage_types.at Java_Storage.Type.TIME_OF_DAY . should_equal Storage.Time_Of_Day
        Column_Module.storage_types.at Java_Storage.Type.DATE_TIME . should_equal Storage.Date_Time

    Test.specify "should allow getting specific elements" <|
        test_column.at 0 . should_equal 1
        test_column.at 2 . should_equal 5
        test_column.at 5 . should_equal 6
        test_column.at 6 . should_fail_with Index_Out_Of_Bounds_Error_Data
        empty_column.at 0 . should_fail_with Index_Out_Of_Bounds_Error_Data

    Test.specify "should be able to take the first n elements" <|
        expected_1 = Column.from_vector "Test" [1, 3, 5]
        expected_2 = Column.from_vector "Test" [1, 3, 5, 2, 4, 6]
        expected_3 = Column.from_vector "Test" []
        test_column.take (First 3) . to_vector . should_equal expected_1.to_vector
        test_column.take (First 7) . to_vector . should_equal expected_2.to_vector
        test_column.take (First 0) . to_vector . should_equal expected_3.to_vector

    Test.specify "should be able to take the last n elements" <|
        expected_1 = Column.from_vector "Test" [2, 4, 6]
        expected_2 = Column.from_vector "Test" [1, 3, 5, 2, 4, 6]
        expected_3 = Column.from_vector "Test" []
        test_column.take (Last 3) . to_vector . should_equal expected_1.to_vector
        test_column.take (Last 7) . to_vector . should_equal expected_2.to_vector
        test_column.take (Last 0) . to_vector . should_equal expected_3.to_vector

    Test.specify "should be able to get the first / head element" <|
        test_column.first . should_equal 1
        test_column.head . should_equal 1
        empty_column.first.should_fail_with Column_Module.Empty_Error
        empty_column.head.should_fail_with Column_Module.Empty_Error

    Test.specify "should be able to get the last element" <|
        test_column.last . should_equal 6
        empty_column.last.should_fail_with Column_Module.Empty_Error

    Test.specify "should be able to be reversed" <|
        expected_1 = Column.from_vector "Test" [6, 4, 2, 5, 3, 1]
        test_column.reverse.to_vector . should_equal expected_1.to_vector
        empty_column.reverse.to_vector . should_equal empty_column.to_vector

    Test.specify "should allow to fill missing values from another column" <|
        nulled = Column.from_vector "col" [0, Nothing, 4, 5, Nothing, Nothing]
        defaults = Column.from_vector "def" [1, 2, 10, 20, Nothing, 30]
        r = nulled.fill_missing defaults
        r.to_vector . should_equal [0, 2, 4, 5, Nothing, 30]

    Test.specify "should allow to count duplicate value occurences" <|
        c_1 = Column.from_vector "c_1" [0, 1, 2, 2, 1, 0, 2]
        c_1.duplicate_count.to_vector.should_equal [0, 0, 0, 1, 1, 1, 2]

        c_2 = Column.from_vector "c_2" ["foo", "bar", "foo", "baz", "bar"]
        c_2.duplicate_count.to_vector.should_equal [0, 0, 1, 0, 1]

    Test.specify "should allow setting their index" <|
        col = Examples.decimal_column.set_index Examples.integer_column
        col.index.to_vector . should_equal Examples.integer_column.to_vector

    Test.specify "should allow computing variance and standard deviation" <|
        const = Column.from_vector 'const' [1, 1, 1, 1, 1]
        const.variance . should_equal 0
        const.standard_deviation.should_equal 0

        rand = Column.from_vector 'random' [10.0, 4.2, 6.8, 6.2, 7.2]
        rand.variance . should_equal 4.372
        rand.variance degrees_of_freedom_correction=0 . should_equal 3.4976
        rand.standard_deviation . should_equal 2.090932806 epsilon=(10 ^ -6)
        rand.standard_deviation degrees_of_freedom_correction=0 . should_equal 1.870187156 epsilon=(10 ^ -6)

    Test.specify "should allow computing the RÂ² score of a prediction" <|
        sample = Column.from_vector 'sample' [1,2,3,4,5]
        mean_pred = Column.from_vector 'mean' [3,3,3,3,3]
        perfect_pred = Column.from_vector 'perfect' [1,2,3,4,5]
        bad_pred = Column.from_vector 'bad' [5,4,3,2,1]

        sample.r_squared mean_pred . should_equal 0
        sample.r_squared perfect_pred . should_equal 1
        sample.r_squared bad_pred . should_equal -3

main = Test.Suite.run_main spec
