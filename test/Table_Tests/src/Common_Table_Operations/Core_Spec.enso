from Standard.Base import all
from Standard.Base.Errors.Common import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Table import all
from Standard.Table.Errors import all
import Standard.Table.Data.Expression.Expression_Error

from Standard.Database import all
from Standard.Database.Errors import Integrity_Error

from Standard.Test_New import all


from project.Common_Table_Operations.Util import run_default_backend

main = run_default_backend add_specs

type Data
    Value ~data

    connection self = self.data.at 0
    table self = self.data.at 1

    setup create_connection_fn table_builder = Data.Value <|
        connection = create_connection_fn Nothing
        table =
            col1 = ["foo", [1,2,3]]
            col2 = ["bar", [4,5,6]]
            col3 = ["Baz", [7,8,9]]
            col4 = ["foo 1", [10,11,12]]
            col5 = ["foo 2", [13,14,15]]
            col6 = ["ab.+123", [16,17,18]]
            col7 = ["abcd123", [19,20,21]]
            table_builder [col1, col2, col3, col4, col5, col6, col7] connection=connection
        [connection, table]

    teardown self =
        self.connection.close


type Rows_Data
    Value ~data

    connection self = self.data.at 0
    table self = self.data.at 1

    setup create_connection_fn table_builder = Rows_Data.Value <|
        connection = create_connection_fn Nothing
        table = table_builder [["X", [1, 2, 3, 4]], ["Y", [5, 6, 7, 8]], ["Z", ["A", "B", "C", "D"]]] connection=connection
        [connection, table]

    teardown self =
        self.connection.close


type Read_Data
    Value ~data

    connection self = self.data.at 0
    t_big self = self.data.at 1
    t_small self = self.data.at 2

    setup create_connection_fn table_builder = Read_Data.Value <|
        connection = create_connection_fn Nothing
        t_big = table_builder [["X", (0.up_to 1500)]] connection=connection
        t_small = table_builder [["X", (0.up_to 10)]] connection=connection
        [connection, t_big, t_small]

    teardown self =
        self.connection.close


add_specs suite_builder setup =
    prefix = setup.prefix
    create_connection_fn = setup.create_connection_func

    suite_builder.group prefix+"Table.at" group_builder->
        data = Data.setup create_connection_fn setup.table_builder

        group_builder.teardown <|
            data.teardown

        group_builder.specify "should allow selecting columns by name" <|
            column_1 = data.table.at "bar"
            column_1.name . should_equal "bar"
            column_1.to_vector . should_equal [4, 5, 6]

            data.table.at "nonexistent column name" . should_fail_with No_Such_Column

        group_builder.specify "should allow selecting columns by index" <|
            column_1 = data.table.at
            column_1.name . should_equal "foo"
            column_1.to_vector . should_equal [1, 2, 3]

            column_2 = data.table.at 2
            column_2.name . should_equal "Baz"
            column_2.to_vector . should_equal [7, 8, 9]

            column_3 = data.table.at -1
            column_3.name . should_equal "abcd123"
            column_3.to_vector . should_equal [19, 20, 21]

            column_4 = data.table.first_column
            column_4.name . should_equal "foo"
            column_4.to_vector . should_equal [1, 2, 3]

            column_5 = data.table.second_column
            column_5.name . should_equal "bar"
            column_5.to_vector . should_equal [4, 5, 6]

            column_6 = data.table.last_column
            column_6.name . should_equal "abcd123"
            column_6.to_vector . should_equal [19, 20, 21]

            data.table.at 100 . should_fail_with Index_Out_Of_Bounds

        group_builder.specify "should fail with Type Error is not an Integer or Text" <|
            data.table.at (Pair.new 1 2) . should_fail_with Illegal_Argument
            data.table.at (Pair.new 1 2) . catch . to_display_text . should_equal "Illegal Argument: expected 'selector' to be either a Text or an Integer, but got Pair."

    suite_builder.group prefix+"Table.get" group_builder->
        data = Data.setup create_connection_fn setup.table_builder

        group_builder.teardown <|
            data.teardown

        group_builder.specify "should allow selecting columns by name" <|
            column_1 = data.table.get "bar"
            column_1.name . should_equal "bar"
            column_1.to_vector . should_equal [4, 5, 6]

            data.table.get "nonexistent column name" . should_equal Nothing
            data.table.get "nonexistent column name" column_1 . name . should_equal "bar"

        group_builder.specify "should allow selecting columns by index" <|
            column_1 = data.table.get
            column_1.name . should_equal "foo"
            column_1.to_vector . should_equal [1, 2, 3]

            column_2 = data.table.get 2
            column_2.name . should_equal "Baz"
            column_2.to_vector . should_equal [7, 8, 9]

            column_3 = data.table.get -1
            column_3.name . should_equal "abcd123"
            column_3.to_vector . should_equal [19, 20, 21]

            data.table.get 100 . should_equal Nothing
            data.table.get 100 column_1 . name . should_equal "foo"

        group_builder.specify "should fail with Type Error is not an Integer or Text" <|
            data.table.get (Pair.new 1 2) . should_fail_with Illegal_Argument
            data.table.get (Pair.new 1 2) . catch . to_display_text . should_equal "Illegal Argument: expected 'selector' to be either a Text or an Integer, but got Pair."

    suite_builder.group prefix+"Table.set" group_builder->
        data = Data.setup create_connection_fn setup.table_builder

        group_builder.teardown <|
            data.teardown

        table_builder cols =
            setup.table_builder cols connection=data.connection

        group_builder.specify "should allow adding a column" <|
            bar2 = data.table.get "bar" . rename "bar2"
            t2 = data.table.set bar2
            t2.column_names . should_equal ["foo", "bar", "Baz", "foo 1", "foo 2", "ab.+123", "abcd123", "bar2"]
            t2.get "bar2" . to_vector . should_equal [4, 5, 6]

            t3 = t2.set bar2 "bar3"
            t3.column_names . should_equal ["foo", "bar", "Baz", "foo 1", "foo 2", "ab.+123", "abcd123", "bar2", "bar3"]

        group_builder.specify "should not allow illegal column names" <|
            data.table.set (data.table.get "bar") new_name='a\0b' . should_fail_with Invalid_Column_Names

        group_builder.specify "should allow replacing a column" <|
            foo = data.table.get "bar" . rename "foo"
            t2 = data.table.set foo
            t2.column_names . should_equal ["foo", "bar", "Baz", "foo 1", "foo 2", "ab.+123", "abcd123"]
            t2.get "foo" . to_vector . should_equal [4, 5, 6]

            t3 = t2.set foo "bar3"
            t3.column_names . should_equal ["foo", "bar", "Baz", "foo 1", "foo 2", "ab.+123", "abcd123", "bar3"]

        group_builder.specify "should allow adding a column" <|
            bar2 = data.table.get "bar" . rename "bar2"
            data.table.set bar2 set_mode=Set_Mode.Update . should_fail_with Missing_Column

            foo = data.table.get "bar" . rename "foo"
            data.table.set foo set_mode=Set_Mode.Add . should_fail_with Existing_Column

        group_builder.specify "should not affect existing columns that depended on the old column being replaced" <|
            t1 = table_builder [["X", [1,2,3]]]
            t2 = t1.set (t1.at "X" * 100) new_name="Y"
            t3 = t2.set "[X] + 10" new_name="Z"
            t4 = t3.set "[X] + 1000" new_name="X"

            t4.at "X" . to_vector . should_equal [1001, 1002, 1003]
            t4.at "Y" . to_vector . should_equal [100, 200, 300]
            t4.at "Z" . to_vector . should_equal [11, 12, 13]

        group_builder.specify "should gracefully handle expression failures" <|
            t1 = table_builder [["X", [1,2,3]]]
            t1.set "[unknown] + 10" new_name="Z" . should_fail_with No_Such_Column
            t1.set "[[[[" . should_fail_with Expression_Error
            t1.set "[[[[" . catch . should_be_a Expression_Error.Syntax_Error

        group_builder.specify "should forward expression problems" <|
            t1 = table_builder [["X", [1.5, 2.0, 0.0]]]

            r1 = t1.set "([X] == 2) || ([X] + 0.5 == 2)" on_problems=Problem_Behavior.Ignore
            Problems.assume_no_problems r1
            r1.at -1 . to_vector . should_equal [True, True, False]

            r2 = t1.set "([X] == 2) || ([X] + 0.5 == 2)" on_problems=Problem_Behavior.Report_Warning
            Problems.expect_warning Floating_Point_Equality r2
            r2.at -1 . to_vector . should_equal [True, True, False]

            err3 = t1.set "([X] == 2) || ([X] + 0.5 == 2)" on_problems=Problem_Behavior.Report_Error
            err3.should_fail_with Floating_Point_Equality

            # These errors currently only work in in-memory.
            if setup.is_database.not then
                action2 = t1.set "3 / [X]" new_name="Z" on_problems=_
                tester2 table =
                    table.at "Z" . to_vector . should_equal [2.0, 1.5, Number.positive_infinity]
                problems2 = [Arithmetic_Error.Error "Division by zero (at rows [2])."]
                Problems.test_problem_handling action2 problems2 tester2

        group_builder.specify "should gracefully handle columns from different backends" <|
            t1 = table_builder [["A", [1, 2, 3]]]
            alternative_connection = Database.connect (SQLite In_Memory)
            t0 = (Table.new [["X", [3, 2, 1]]]).select_into_database_table alternative_connection "T0" temporary=True
            c0 = t0.at "X"

            r1 = t1.set c0
            case setup.is_database of
                True ->  r1.should_fail_with Integrity_Error
                False -> r1.should_fail_with Illegal_Argument

    suite_builder.group prefix+"Table.column_names" group_builder->
        data = Data.setup create_connection_fn setup.table_builder

        group_builder.teardown <|
            data.teardown

        table_builder cols =
            setup.table_builder cols connection=data.connection

        group_builder.specify "should return the names of all columns" <|
            data.table.column_names . should_equal ["foo", "bar", "Baz", "foo 1", "foo 2", "ab.+123", "abcd123"]

        group_builder.specify "should allow weird column names in all backends" <|
            columns = weird_names.map_with_index ix-> name->
                [name, [100+ix, 2, 3]]
            table = table_builder columns
            table.column_names . should_equal weird_names

            weird_names.map_with_index ix-> name->
                table.at name . to_vector . should_equal [100+ix, 2, 3]

    suite_builder.group prefix+"Table.column_count" group_builder->
        data = Data.setup create_connection_fn setup.table_builder

        group_builder.teardown <|
            data.teardown

        group_builder.specify "should allow getting the column count" <|
            data.table.column_count . should_equal 7

    suite_builder.group prefix+"Table.rows" group_builder->
        data = Rows_Data.setup create_connection_fn setup.table_builder

        group_builder.teardown <|
            data.teardown

        group_builder.specify "should allow to get a Vector of Table rows" <|
            rows = data.table.rows
            rows.length . should_equal 4

            first_row = rows.first
            first_row . length . should_equal 3
            first_row.at "X" . should_equal 1
            first_row.at "Y" . should_equal 5
            first_row.at "Z" . should_equal "A"

            first_row.get "X" . should_equal 1
            first_row.get "Y" . should_equal 5
            first_row.get "Z" . should_equal "A"
            first_row.get "T" . should_equal Nothing
            first_row.get "T" "???" . should_equal "???"

            last_row = rows.at -1
            last_row . length . should_equal 3
            last_row.at 0 . should_equal 4
            last_row.at 1 . should_equal 8
            last_row.at 2 . should_equal "D"
            last_row.at -1 . should_equal "D"

            last_row.get 0 . should_equal 4
            last_row.get 1 . should_equal 8
            last_row.get 2 . should_equal "D"
            last_row.get -1 . should_equal "D"
            last_row.get 3 . should_equal Nothing
            last_row.get 3 "???" . should_equal "???"

            rows.map .to_vector . should_equal [[1, 5, "A"], [2, 6, "B"], [3, 7, "C"], [4, 8, "D"]]

        group_builder.specify "should let you get the first row" <|
            first_row = data.table.first_row
            first_row . length . should_equal 3
            first_row.at "X" . should_equal 1
            first_row.at "Y" . should_equal 5
            first_row.at "Z" . should_equal "A"

        group_builder.specify "should let you get the second row" <|
            second_row = data.table.second_row
            second_row . length . should_equal 3
            second_row.at "X" . should_equal 2
            second_row.at "Y" . should_equal 6
            second_row.at "Z" . should_equal "B"

        group_builder.specify "should let you get the last row" <|
            last_row = data.table.last_row
            last_row . length . should_equal 3
            last_row.at "X" . should_equal 4
            last_row.at "Y" . should_equal 8
            last_row.at "Z" . should_equal "D"

        group_builder.specify "should fetch rows up to the specified limit" <|
            data.table.rows max_rows=2 . map .to_vector . should_equal [[1, 5, "A"], [2, 6, "B"]]

        group_builder.specify "should correctly handle errors" <|
            data.table.rows.at 5 . should_fail_with Index_Out_Of_Bounds
            err = data.table.rows.at -6
            err.should_fail_with Index_Out_Of_Bounds
            err.catch . should_equal (Index_Out_Of_Bounds.Error -6 4)

            data.table.rows (max_rows=2) . at 2 . should_fail_with Index_Out_Of_Bounds
            data.table.rows . at 0 . at -4 . should_fail_with Index_Out_Of_Bounds
            data.table.rows . at 0 . at "unknown" . should_fail_with No_Such_Column


    suite_builder.group prefix+"Table.read" group_builder->
        data = Read_Data.setup create_connection_fn setup.table_builder

        group_builder.teardown <|
            data.teardown

        has_default_row_limit = setup.is_database

        group_builder.specify "should have a row limit by default and warn about it" <|
            data.t_big.row_count . should_equal 1500
            data.t_small.row_count . should_equal 10

            t1 = data.t_big.read
            case has_default_row_limit of
                True ->
                    t1.row_count . should_equal 1000
                    w1 = Problems.expect_only_warning Not_All_Rows_Downloaded t1
                    w1.max_rows . should_equal 1000
                False ->
                    t1.row_count . should_equal 1500
                    Problems.assume_no_problems t1

            t2 = data.t_small.read
            t2.row_count . should_equal 10
            Problems.assume_no_problems t2

        group_builder.specify "should allow to set the row limit" <|
            t1 = data.t_big.read max_rows=23
            t1.row_count . should_equal 23
            w1 = Problems.expect_only_warning Not_All_Rows_Downloaded t1
            w1.max_rows . should_equal 23
            w1.to_display_text . should_contain "some rows have been dropped"

            t2 = data.t_big.read max_rows=1500
            t2.row_count . should_equal 1500
            Problems.assume_no_problems t2

            t3 = data.t_small.read max_rows=1
            t3.row_count . should_equal 1
            w3 = Problems.expect_only_warning Not_All_Rows_Downloaded t3
            w3.max_rows . should_equal 1

        group_builder.specify "should allow to have no row limit" <|
            t1 = data.t_big.read max_rows=Nothing
            t1.row_count . should_equal 1500
            Problems.assume_no_problems t1

        group_builder.specify "should allow to turn off the warning" <|
            t1 = data.t_big.read warn_if_more_rows=False
            t1.row_count . should_equal (if has_default_row_limit then 1000 else 1500)
            Problems.assume_no_problems t1

            t2 = data.t_big.read max_rows=123 warn_if_more_rows=False
            t2.row_count . should_equal 123
            Problems.assume_no_problems t2

            t3 = data.t_big.read max_rows=12300 warn_if_more_rows=False
            t3.row_count . should_equal 1500
            Problems.assume_no_problems t3

        group_builder.specify "should also work as Column.read" <|
            c1 = data.t_big.at "X"
            c1.length . should_equal 1500

            r2 = c1.read
            case has_default_row_limit of
                True ->
                    r2.length . should_equal 1000
                    w2 = Problems.expect_only_warning Not_All_Rows_Downloaded r2
                    w2.max_rows . should_equal 1000
                False ->
                    r2.length . should_equal 1500
                    Problems.assume_no_problems r2

            # to_vector always downloads the whole column, even if its large
            c1.to_vector.length . should_equal 1500

            r3 = c1.read max_rows=10
            r3.length . should_equal 10
            Problems.expect_only_warning Not_All_Rows_Downloaded r3

            r4 = c1.read max_rows=Nothing
            r4.length . should_equal 1500
            Problems.assume_no_problems r4

            r5 = c1.read max_rows=3 warn_if_more_rows=False
            r5.length . should_equal 3
            Problems.assume_no_problems r5

        if setup.is_database then group_builder.specify "should allow similar API on Connection.read" <|
            data.connection.query data.t_big.name . row_count . should_equal 1500

            t1 = data.connection.read data.t_big.name
            t1.row_count . should_equal 1000
            w1 = Problems.expect_only_warning Not_All_Rows_Downloaded t1
            w1.max_rows . should_equal 1000

            t2 = data.connection.read data.t_big.name limit=42
            t2.row_count . should_equal 42
            w2 = Problems.expect_only_warning Not_All_Rows_Downloaded t2
            w2.max_rows . should_equal 42

            t3 = data.connection.read data.t_big.name limit=Nothing
            t3.row_count . should_equal 1500
            Problems.assume_no_problems t3

            t4 = data.connection.read data.t_big.name warn_if_more_rows=False
            t4.row_count . should_equal 1000
            Problems.assume_no_problems t4

# A set of potentially problematic column names.
weird_names = ['whitespace and \t others', 'foo "the bar" baz', "a 'X' c", "emoji? 😎 yep", "😊💡🎉🌻", "Polskie znaki - np. ąęćśó", 'acce\u0301nt a\u0301cuté', 'SELECT \'A\',"B" FROM t;--', '"', "'", '”', 'one " quote', 'double "" quote', 'even \nnewlines could go here', 'and\r\nthat\rtoo', 'foo ” bar', 'foo ”the” bar', 'x”; --']
