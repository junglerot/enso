from Standard.Base import all
import Standard.Base.Error.Common.Index_Out_Of_Bounds
import Standard.Base.Error.Illegal_Argument.Illegal_Argument

from Standard.Table import Set_Mode
from Standard.Table.Errors import all
import Standard.Table.Data.Expression.Expression_Error

from Standard.Test import Test
import Standard.Test.Extensions

from project.Common_Table_Operations.Util import run_default_backend

main = run_default_backend spec

spec setup =
    prefix = setup.prefix
    table_builder = setup.table_builder
    table_fn =
        col1 = ["foo", [1,2,3]]
        col2 = ["bar", [4,5,6]]
        col3 = ["Baz", [7,8,9]]
        col4 = ["foo_1", [10,11,12]]
        col5 = ["foo_2", [13,14,15]]
        col6 = ["ab.+123", [16,17,18]]
        col7 = ["abcd123", [19,20,21]]
        table_builder [col1, col2, col3, col4, col5, col6, col7]
    table = table_fn

    Test.group prefix+"Table.at" <|
        Test.specify "should allow selecting columns by name" <|
            column_1 = table.at "bar"
            column_1.name . should_equal "bar"
            column_1.to_vector . should_equal [4, 5, 6]

            table.at "nonexistent column name" . should_fail_with No_Such_Column.Error

        Test.specify "should allow selecting columns by index" <|
            column_1 = table.at
            column_1.name . should_equal "foo"
            column_1.to_vector . should_equal [1, 2, 3]

            column_2 = table.at 2
            column_2.name . should_equal "Baz"
            column_2.to_vector . should_equal [7, 8, 9]

            column_3 = table.at -1
            column_3.name . should_equal "abcd123"
            column_3.to_vector . should_equal [19, 20, 21]

            table.at 100 . should_fail_with Index_Out_Of_Bounds.Error

        Test.specify "should fail with Type Error is not an Integer or Text" <|
            table.at (Pair.new 1 2) . should_fail_with Illegal_Argument.Error
            table.at (Pair.new 1 2) . catch . to_display_text . should_equal "Illegal Argument: expected 'selector' to be either a Text or an Integer, but got Pair.Value."

    Test.group prefix+"Table.get" <|
        Test.specify "should allow selecting columns by name" <|
            column_1 = table.get "bar"
            column_1.name . should_equal "bar"
            column_1.to_vector . should_equal [4, 5, 6]

            table.get "nonexistent column name" . should_equal Nothing
            table.get "nonexistent column name" column_1 . name . should_equal "bar"

        Test.specify "should allow selecting columns by index" <|
            column_1 = table.get
            column_1.name . should_equal "foo"
            column_1.to_vector . should_equal [1, 2, 3]

            column_2 = table.get 2
            column_2.name . should_equal "Baz"
            column_2.to_vector . should_equal [7, 8, 9]

            column_3 = table.get -1
            column_3.name . should_equal "abcd123"
            column_3.to_vector . should_equal [19, 20, 21]

            table.get 100 . should_equal Nothing
            table.get 100 column_1 . name . should_equal "foo"

        Test.specify "should fail with Type Error is not an Integer or Text" <|
            table.get (Pair.new 1 2) . should_fail_with Illegal_Argument.Error
            table.get (Pair.new 1 2) . catch . to_display_text . should_equal "Illegal Argument: expected 'selector' to be either a Text or an Integer, but got Pair.Value."

    Test.group prefix+"Table.set" <|
        Test.specify "should allow adding a column" <|
            bar2 = table.get "bar" . rename "bar2"
            t2 = table.set bar2
            t2.column_names . should_equal ["foo", "bar", "Baz", "foo_1", "foo_2", "ab.+123", "abcd123", "bar2"]
            t2.get "bar2" . to_vector . should_equal [4, 5, 6]

            t3 = t2.set bar2 "bar3"
            t3.column_names . should_equal ["foo", "bar", "Baz", "foo_1", "foo_2", "ab.+123", "abcd123", "bar2", "bar3"]

        Test.specify "should allow replacing a column" <|
            foo = table.get "bar" . rename "foo"
            t2 = table.set foo
            t2.column_names . should_equal ["foo", "bar", "Baz", "foo_1", "foo_2", "ab.+123", "abcd123"]
            t2.get "foo" . to_vector . should_equal [4, 5, 6]

            t3 = t2.set foo "bar3"
            t3.column_names . should_equal ["foo", "bar", "Baz", "foo_1", "foo_2", "ab.+123", "abcd123", "bar3"]

        Test.specify "should allow adding a column" <|
            bar2 = table.get "bar" . rename "bar2"
            table.set bar2 set_mode=Set_Mode.Update . should_fail_with Missing_Column.Error

            foo = table.get "bar" . rename "foo"
            table.set foo set_mode=Set_Mode.Add . should_fail_with Existing_Column.Error

        Test.specify "should not affect existing columns that depended on the old column being replaced" <|
            t1 = table_builder [["X", [1,2,3]]]
            t2 = t1.set (t1.at "X" * 100) new_name="Y"
            t3 = t2.set "[X] + 10" new_name="Z"
            t4 = t3.set "[X] + 1000" new_name="X"

            t4.at "X" . to_vector . should_equal [1001, 1002, 1003]
            t4.at "Y" . to_vector . should_equal [100, 200, 300]
            t4.at "Z" . to_vector . should_equal [11, 12, 13]

        Test.specify "should gracefully handle expression failures" <|
            t1 = table_builder [["X", [1,2,3]]]
            t1.set "[unknown] + 10" new_name="Z" . should_fail_with No_Such_Column
            t1.set "[[[[" . should_fail_with Expression_Error.Syntax_Error

    Test.group prefix+"Table.column_names" <|
        Test.specify "should return the names of all columns" <|
            table.column_names . should_equal ["foo", "bar", "Baz", "foo_1", "foo_2", "ab.+123", "abcd123"]

    Test.group prefix+"Table.column_count" <|
        Test.specify "should allow getting the column count" <|
            table.column_count . should_equal 7

    Test.group prefix+"Table.rows" <|
        table = table_builder [["X", [1, 2, 3, 4]], ["Y", [5, 6, 7, 8]], ["Z", ["A", "B", "C", "D"]]]
        Test.specify "should allow to get a Vector of Table rows" <|
            rows = table.rows
            rows.length . should_equal 4

            first_row = rows.first
            first_row . length . should_equal 3
            first_row.at "X" . should_equal 1
            first_row.at "Y" . should_equal 5
            first_row.at "Z" . should_equal "A"

            last_row = rows.at -1
            last_row . length . should_equal 3
            last_row.at 0 . should_equal 4
            last_row.at 1 . should_equal 8
            last_row.at 2 . should_equal "D"
            last_row.at -1 . should_equal "D"

            rows.map .to_vector . should_equal [[1, 5, "A"], [2, 6, "B"], [3, 7, "C"], [4, 8, "D"]]

        Test.specify "should fetch rows up to the specified limit" <|
            table.rows max_rows=2 . map .to_vector . should_equal [[1, 5, "A"], [2, 6, "B"]]

        Test.specify "should correctly handle errors" <|
            table.rows.at 5 . should_fail_with Index_Out_Of_Bounds.Error
            err = table.rows.at -6
            err.should_fail_with Index_Out_Of_Bounds.Error
            err.catch . should_equal (Index_Out_Of_Bounds.Error -6 4)

            table.rows (max_rows=2) . at 2 . should_fail_with Index_Out_Of_Bounds.Error
            table.rows . at 0 . at -4 . should_fail_with Index_Out_Of_Bounds.Error
            table.rows . at 0 . at "unknown" . should_fail_with No_Such_Column.Error
