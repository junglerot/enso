from Standard.Base import all
import Standard.Base.Errors.Common.Arithmetic_Error
import Standard.Base.Errors.Common.Index_Out_Of_Bounds
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State

import Standard.Table.Data.Type.Value_Type.Value_Type
import Standard.Table.Data.Expression.Expression_Error
from Standard.Table.Errors import all

from Standard.Database.Errors import SQL_Error

from Standard.Test import Test, Problems
import Standard.Test.Extensions

from project.Common_Table_Operations.Util import run_default_backend

main = run_default_backend spec

## Currently these tests rely on filtering preserving the insertion ordering
   within tables. This is not necessarily guaranteed by RDBMS, so we may adapt
   this in the future. For now we implicitly assume the ordering is preserved,
   as that seems to be the case.
spec setup =
    prefix = setup.prefix
    table_builder = setup.table_builder
    test_selection = setup.test_selection

    Test.group prefix+"Table.filter" <|
        Test.specify "by integer comparisons" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["X", [100, 3, Nothing, 4, 12]], ["Y", [100, 4, 2, Nothing, 11]]]
            t1 = t.filter "X" (Filter_Condition.Less than=10)
            t1.at "ix" . to_vector . should_equal [2, 4]
            t1.at "X" . to_vector . should_equal [3, 4]
            t.filter "X" (Filter_Condition.Less than=4) . at "X" . to_vector . should_equal [3]
            t.filter "X" (Filter_Condition.Equal_Or_Less than=4) . at "X" . to_vector . should_equal [3, 4]
            t.filter "X" (Filter_Condition.Greater than=4) . at "X" . to_vector . should_equal [100, 12]
            t.filter "X" (Filter_Condition.Equal_Or_Greater than=4) . at "X" . to_vector . should_equal [100, 4, 12]
            t.filter "X" (Filter_Condition.Between 4 100) . at "X" . to_vector . should_equal [100, 4, 12]
            t2 = t.filter "X" (Filter_Condition.Equal to=100)
            t2 . at "X" . to_vector . should_equal [100]
            t2 . at "ix" . to_vector . should_equal [1]

            t.filter "X" (Filter_Condition.Equal to=123) . at "X" . to_vector . should_equal []
            v = t.filter "X" (Filter_Condition.Equal to="SOME TEXT :)") . at "X" . to_vector
            ## We do not do typechecking at Enso level here, as it is
               DB-dependent if such mixing is allowed, so we will rely on an SQL
               error.
            case test_selection.allows_mixed_type_comparisons of
                True -> v.should_equal []
                False -> v.should_fail_with SQL_Error

            t.filter "X" (Filter_Condition.Equal to=(t.at "Y")) . at "X" . to_vector . should_equal [100]
            t.filter "X" (Filter_Condition.Less than=(t.at "Y")) . at "X" . to_vector . should_equal [3]
            t.filter "X" (Filter_Condition.Equal_Or_Less than=(t.at "Y")) . at "X" . to_vector . should_equal [100, 3]
            t.filter "X" (Filter_Condition.Equal_Or_Greater than=(t.at "Y")) . at "X" . to_vector . should_equal [100, 12]
            t.filter "X" (Filter_Condition.Greater than=(t.at "Y")) . at "X" . to_vector . should_equal [12]
            t.filter "Y" (Filter_Condition.Between (t.at "ix") 100) . at "Y" . to_vector . should_equal [100, 4, 11]

        Test.specify "Not_Equal test cases" pending="Specification needs clarifying, see: https://github.com/enso-org/enso/issues/5241#issuecomment-1480167927" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["X", [100, 3, Nothing, 4, 12]], ["Y", [100, 4, 2, Nothing, 11]]]
            t3 = t.filter "X" (Filter_Condition.Not_Equal to=100)
            t3 . at "X" . to_vector . should_equal [3, Nothing, 4, 12]
            t3 . at "ix" . to_vector . should_equal [2, 3, 4, 5]
            t.filter "X" (Filter_Condition.Not_Equal to=(t.at "Y")) . at "X" . to_vector . should_equal [3, Nothing, 4, 12]

        Test.specify "by text comparisons" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["X", ["abb", "baca", "b", Nothing, "c"]], ["Y", ["a", "b", "b", "c", "c"]]]
            t1 = t.filter "X" (Filter_Condition.Less than="c")
            t1.at "ix" . to_vector . should_equal [1, 2, 3]
            t1.at "X" . to_vector . should_equal ["abb", "baca", "b"]
            t.filter "X" (Filter_Condition.Equal_Or_Less than="b") . at "X" . to_vector . should_equal ["abb", "b"]
            t.filter "X" (Filter_Condition.Greater than="b") . at "X" . to_vector . should_equal ["baca", "c"]
            t.filter "X" (Filter_Condition.Equal_Or_Greater than="b") . at "X" . to_vector . should_equal ["baca", "b", "c"]
            t.filter "X" (Filter_Condition.Between "b" "c") . at "X" . to_vector . should_equal ["baca", "b", "c"]
            t.filter "X" (Filter_Condition.Equal to="baca") . at "X" . to_vector . should_equal ["baca"]
            v = t.filter "X" (Filter_Condition.Equal to=52) . at "X" . to_vector
            case test_selection.allows_mixed_type_comparisons of
                True -> v.should_equal []
                False -> v.should_fail_with SQL_Error

            t.filter "X" (Filter_Condition.Greater than=(t.at "Y")) . at "X" . to_vector . should_equal ["abb", "baca"]
            t.filter "X" (Filter_Condition.Equal_Or_Greater than=(t.at "Y")) . at "X" . to_vector . should_equal ["abb", "baca", "b", "c"]
            t.filter "X" (Filter_Condition.Equal_Or_Less than=(t.at "Y")) . at "X" . to_vector . should_equal ["b", "c"]
            t.filter "X" (Filter_Condition.Less than=(t.at "Y")) . at "X" . to_vector . should_equal []
            t.filter "X" (Filter_Condition.Equal to=(t.at "Y")) . at "X" . to_vector . should_equal ["b", "c"]
            t.filter "X" (Filter_Condition.Between (t.at "Y") "bzzzz") . at "X" . to_vector . should_equal ["abb", "baca", "b"]

        Test.specify "by text search (contains, starts_with, ends_with, not_contains)" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["X", ["abb", "bacb", "banana", Nothing, "nana"]], ["Y", ["a", "B", "d", "c", "a"]], ["Z", ["aaaaa", "bbbbb", "[ab]", "[ab]aaaa", "[ab]ccc"]]]

            t.filter "X" (Filter_Condition.Starts_With "ba") . at "X" . to_vector . should_equal ["bacb", "banana"]
            t.filter "X" (Filter_Condition.Starts_With "BA" Case_Sensitivity.Sensitive) . at "X" . to_vector . should_equal []
            t.filter "X" (Filter_Condition.Starts_With "BA" Case_Sensitivity.Insensitive) . at "X" . to_vector . should_equal ["bacb", "banana"]
            t.filter "X" (Filter_Condition.Ends_With "na") . at "X" . to_vector . should_equal ["banana", "nana"]
            t.filter "X" (Filter_Condition.Ends_With "NA" Case_Sensitivity.Sensitive) . at "X" . to_vector . should_equal []
            t.filter "X" (Filter_Condition.Ends_With "NA" Case_Sensitivity.Insensitive) . at "X" . to_vector . should_equal ["banana", "nana"]
            t.filter "X" (Filter_Condition.Contains "ac") . at "X" . to_vector . should_equal ["bacb"]
            t.filter "X" (Filter_Condition.Contains "AC" Case_Sensitivity.Sensitive) . at "X" . to_vector . should_equal []
            t.filter "X" (Filter_Condition.Contains "AC" Case_Sensitivity.Insensitive) . at "X" . to_vector . should_equal ["bacb"]
            t.filter "X" (Filter_Condition.Not_Contains "ac") . at "X" . to_vector . should_equal ["abb", "banana", "nana"]
            t.filter "X" (Filter_Condition.Not_Contains "AC" Case_Sensitivity.Sensitive) . at "X" . to_vector . should_equal ["abb", "bacb", "banana", "nana"]
            t.filter "X" (Filter_Condition.Not_Contains "AC" Case_Sensitivity.Insensitive) . at "X" . to_vector . should_equal ["abb", "banana", "nana"]

            t.filter "X" (Filter_Condition.Starts_With (t.at "Y")) . at "X" . to_vector . should_equal ["abb"]
            t.filter "X" (Filter_Condition.Starts_With (t.at "Y") Case_Sensitivity.Sensitive) . at "X" . to_vector . should_equal ["abb"]
            t.filter "X" (Filter_Condition.Starts_With (t.at "Y") Case_Sensitivity.Insensitive) . at "X" . to_vector . should_equal ["abb", "bacb"]
            t.filter "X" (Filter_Condition.Ends_With (t.at "Y")) . at "X" . to_vector . should_equal ["nana"]
            t.filter "X" (Filter_Condition.Ends_With (t.at "Y") Case_Sensitivity.Sensitive) . at "X" . to_vector . should_equal ["nana"]
            t.filter "X" (Filter_Condition.Ends_With (t.at "Y") Case_Sensitivity.Insensitive) . at "X" . to_vector . should_equal ["bacb", "nana"]
            t.filter "X" (Filter_Condition.Contains (t.at "Y")) . at "X" . to_vector . should_equal ["abb", "nana"]
            t.filter "X" (Filter_Condition.Contains (t.at "Y") Case_Sensitivity.Sensitive) . at "X" . to_vector . should_equal ["abb", "nana"]
            t.filter "X" (Filter_Condition.Contains (t.at "Y") Case_Sensitivity.Insensitive) . at "X" . to_vector . should_equal ["abb", "bacb", "nana"]
            t.filter "X" (Filter_Condition.Not_Contains (t.at "Y")) . at "X" . to_vector . should_equal ["bacb", "banana"]
            t.filter "X" (Filter_Condition.Not_Contains (t.at "Y") Case_Sensitivity.Sensitive) . at "X" . to_vector . should_equal ["bacb", "banana"]
            t.filter "X" (Filter_Condition.Not_Contains (t.at "Y") Case_Sensitivity.Insensitive) . at "X" . to_vector . should_equal ["banana"]

        Test.specify "by text search (like, not_like)" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["X", ["abb", "bacb", "banana", Nothing, "nana"]], ["Y", ["a", "B", "d", "c", "a"]], ["Z", ["aaaaa", "bbbbb", "[ab]", "[ab]aaaa", "[ab]ccc"]]]

            t.filter "X" (Filter_Condition.Like "%an%") . at "X" . to_vector . should_equal ["banana", "nana"]
            t.filter "X" (Filter_Condition.Like "_a%") . at "X" . to_vector . should_equal ["bacb", "banana", "nana"]
            t.filter "X" (Filter_Condition.Like "%b") . at "X" . to_vector . should_equal ["abb", "bacb"]
            t.filter "X" (Filter_Condition.Like "nana") . at "X" . to_vector . should_equal ["nana"]
            t.filter "Z" (Filter_Condition.Like "[ab]_%") . at "Z" . to_vector . should_equal ["[ab]aaaa", "[ab]ccc"]

            t.filter "X" (Filter_Condition.Not_Like "%b") . at "X" . to_vector . should_equal ["banana", "nana"]
            t.filter "Z" (Filter_Condition.Not_Like "[ab]%") . at "Z" . to_vector . should_equal ["aaaaa", "bbbbb"]

        Test.specify "text operations should also match newlines" <|
            t = table_builder [["X", ['a\n\n\n', 'a\n', 'a\n\n\nb', 'a\nb', 'caa\nbb']]]
            t.filter "X" (Filter_Condition.Like 'a_') . at "X" . to_vector . should_equal ['a\n']
            t.filter "X" (Filter_Condition.Like 'a%') . at "X" . to_vector . should_equal ['a\n\n\n', 'a\n', 'a\n\n\nb', 'a\nb']
            t.filter "X" (Filter_Condition.Like 'a_b') . at "X" . to_vector . should_equal ['a\nb']
            t.filter "X" (Filter_Condition.Like '%\nb') . at "X" . to_vector . should_equal ['a\n\n\nb', 'a\nb']

            t.filter "X" (Filter_Condition.Contains '\nb') . at "X" . to_vector . should_equal ['a\n\n\nb', 'a\nb', 'caa\nbb']
            t.filter "X" (Filter_Condition.Ends_With '\nb') . at "X" . to_vector . should_equal ['a\n\n\nb', 'a\nb']
            t.filter "X" (Filter_Condition.Ends_With '\n') . at "X" . to_vector . should_equal ['a\n\n\n', 'a\n']
            t.filter "X" (Filter_Condition.Starts_With 'c') . at "X" . to_vector . should_equal ['caa\nbb']
            t.filter "X" (Filter_Condition.Not_Contains '\nb') . at "X" . to_vector . should_equal ['a\n\n\n', 'a\n']

        if test_selection.supports_unicode_normalization then
            t = table_builder [["X", ['śnieg', 's\u0301nieg', 'X', Nothing, 'połać', 'połac\u0301']]]
            Test.specify "text operations should support Unicode normalization" <|
                t.filter "X" (Filter_Condition.Starts_With 'ś') . at "X" . to_vector . should_equal ['śnieg', 's\u0301nieg']
                t.filter "X" (Filter_Condition.Contains 'ś') . at "X" . to_vector . should_equal ['śnieg', 's\u0301nieg']
                t.filter "X" (Filter_Condition.Ends_With 'ś') . at "X" . to_vector . should_equal []
                t.filter "X" (Filter_Condition.Ends_With 'ć') . at "X" . to_vector . should_equal ['połać', 'połac\u0301']
                t.filter "X" (Filter_Condition.Not_Contains 'ś') . at "X" . to_vector . should_equal ['X', 'połać', 'połac\u0301']

                # This should be replaced with the disabled test below, once the related bug is fixed.
                t.filter "X" (Filter_Condition.Like 'ś%') . at "X" . to_vector . should_equal ['śnieg']

            # This test is split off just to mark is as pending, once resolved it can be merged with the one above.
            Test.specify "text operations should support Unicode normalization (like)" pending='There is a bug with Java Regex in Unicode normalized mode (CANON_EQ) with quoting.\nhttps://bugs.java.com/bugdatabase/view_bug.do?bug_id=8032926' <|
                t.filter "X" (Filter_Condition.Like 'ś%') . at "X" . to_vector . should_equal ['śnieg', 's\u0301nieg']

        Test.specify "by empty text" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["X", ["abb", "", " ", Nothing, "nana"]]]
            t.filter "X" Filter_Condition.Is_Empty . at "X" . to_vector . should_equal ["", Nothing]
            t.filter "X" Filter_Condition.Not_Empty . at "X" . to_vector . should_equal ["abb", " ", "nana"]

        Test.specify "should check types for text operations" <|
            t = table_builder [["ix", [1, 2, 3, 4]], ["X", [Nothing, "A", "", " "]]]
            check_problem result =
                result.should_fail_with Invalid_Value_Type
                result.catch.expected . should_equal "Char"

            check_problem (t.filter "X" (Filter_Condition.Starts_With (t.at "ix")))
            check_problem (t.filter "X" (Filter_Condition.Ends_With (t.at "ix")))
            check_problem (t.filter "X" (Filter_Condition.Contains (t.at "ix")))
            check_problem (t.filter "X" (Filter_Condition.Like (t.at "ix")))
            check_problem (t.filter "X" (Filter_Condition.Not_Like (t.at "ix")))
            check_problem (t.filter "X" (Filter_Condition.Not_Contains (t.at "ix")))

            check_problem (t.filter "ix" (Filter_Condition.Starts_With "A"))
            check_problem (t.filter "ix" (Filter_Condition.Ends_With "A"))
            check_problem (t.filter "ix" (Filter_Condition.Contains "A"))
            check_problem (t.filter "ix" (Filter_Condition.Like "A"))
            check_problem (t.filter "ix" (Filter_Condition.Not_Like "A"))
            check_problem (t.filter "ix" (Filter_Condition.Not_Contains "A"))

            check_problem (t.filter "ix" Filter_Condition.Is_Empty)
            check_problem (t.filter "ix" Filter_Condition.Not_Empty)

            check_scalar_type_error_handling action =
                action.should_fail_with Invalid_Value_Type

            check_scalar_type_error_handling (t.filter "X" (Filter_Condition.Starts_With 42))
            check_scalar_type_error_handling (t.filter "X" (Filter_Condition.Ends_With 42))
            check_scalar_type_error_handling (t.filter "X" (Filter_Condition.Contains 42))
            check_scalar_type_error_handling (t.filter "X" (Filter_Condition.Like 42))
            check_scalar_type_error_handling (t.filter "X" (Filter_Condition.Not_Like 42))
            check_scalar_type_error_handling (t.filter "X" (Filter_Condition.Not_Contains 42))

        Test.specify "by nulls" <|
            t = table_builder [["ix", [1, 2, 3, 4]], ["X", [Nothing, 1, Nothing, 4]]]
            t1 = t.filter "X" Filter_Condition.Is_Nothing
            t1.at "ix" . to_vector . should_equal [1, 3]
            t1.at "X" . to_vector . should_equal [Nothing, Nothing]

            t2 = t.filter "X" Filter_Condition.Not_Nothing
            t2.at "ix" . to_vector . should_equal [2, 4]
            t2.at "X" . to_vector . should_equal [1, 4]

        Test.specify "by an Is_In check" <|
            t = table_builder [["ix", [1, 2, 3, Nothing, 5, 6]], ["X", ["a", "b", "ccc", "X", "f", "2"]]]
            t1 = table_builder [["txt", ["X", "a", "c", Nothing]], ["int", [Nothing, 2, 5, 4]], ["bool", [True, Nothing, Nothing, True]]]

            t.filter "X" (Filter_Condition.Is_In (t1.at "txt")) . at "X" . to_vector . should_equal ["a", "X"]
            t.filter "X" (Filter_Condition.Is_In (t1.at "txt" . to_vector)) . at "X" . to_vector . should_equal ["a", "X"]
            t.filter "X" (Filter_Condition.Not_In (t1.at "txt")) . at "X" . to_vector . should_equal ["b", "ccc", "f", "2"]
            t.filter "X" (Filter_Condition.Not_In (t1.at "txt" . to_vector)) . at "X" . to_vector . should_equal ["b", "ccc", "f", "2"]
            t.filter "X" (Filter_Condition.Is_In ["ccc"]) . at "X" . to_vector . should_equal ["ccc"]
            t.filter "X" (Filter_Condition.Is_In []) . at "X" . to_vector . should_equal []
            t.filter "X" (Filter_Condition.Not_In []) . at "X" . to_vector . should_equal ["a", "b", "ccc", "X", "f", "2"]

            if test_selection.allows_mixed_type_comparisons then
                mixed = t.filter "X" (Filter_Condition.Is_In (t1.at "int")) . at "X" . to_vector
                # Some backends (e.g. SQLite) allow to coerce integer and text types when doing mixed type comparisons.
                ((mixed == []) || (mixed == ["2"])).should_be_true

            t.filter "ix" (Filter_Condition.Is_In (t1.at "int")) . at "ix" . to_vector . should_equal [2, Nothing, 5]
            t.filter "ix" (Filter_Condition.Is_In (t1.at "int" . to_vector)) . at "ix" . to_vector . should_equal [2, Nothing, 5]
            t.filter "ix" (Filter_Condition.Is_In [2, 5, 4]) . at "ix" . to_vector . should_equal [2, 5]
            t.filter "ix" (Filter_Condition.Is_In [Nothing]) . at "ix" . to_vector . should_equal [Nothing]
            t.filter "ix" (Filter_Condition.Not_In [Nothing]) . at "ix" . to_vector . should_equal [1, 2, 3, 5, 6]
            t.filter "ix" (Filter_Condition.Not_In [1, 3]) . at "ix" . to_vector . should_equal [2, Nothing, 5, 6]

            v1 = t.filter "X" (Filter_Condition.Is_In ["c", "f", "b", "b", "b", 15, Nothing]) . at "X" . to_vector
            case test_selection.allows_mixed_type_comparisons of
                True -> v1.should_equal ["b", "f"]
                False -> v1.should_fail_with SQL_Error
            v2 = t.filter "ix" (Filter_Condition.Is_In ["c", 3, 2, "a"]) . at "ix" . to_vector
            case test_selection.allows_mixed_type_comparisons of
                True -> v2.should_equal [2, 3]
                False -> v2.should_fail_with SQL_Error

            t2 = table_builder [["A", [True, False, True]], ["B", [False, False, False]], ["C", [True, False, Nothing]]]
            t2.filter "A" (Filter_Condition.Is_In (t1.at "bool")) . at "A" . to_vector . should_equal [True, True]
            t2.filter "A" (Filter_Condition.Is_In (t1.at "bool" . to_vector)) . at "A" . to_vector . should_equal [True, True]
            t2.filter "B" (Filter_Condition.Is_In [True, Nothing]) . at "B" . to_vector . should_equal []
            t2.filter "C" (Filter_Condition.Is_In [True, Nothing]) . at "C" . to_vector . should_equal [True, Nothing]
            t2.filter "A" (Filter_Condition.Is_In [False]) . at "A" . to_vector . should_equal [False]
            t2.filter "B" (Filter_Condition.Is_In [False]) . at "B" . to_vector . should_equal [False, False, False]
            t2.filter "C" (Filter_Condition.Is_In [False, False]) . at "C" . to_vector . should_equal [False]

        Test.specify "by a boolean mask" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["b", [True, False, Nothing, True, True]]]
            t.filter "b" . at "ix" . to_vector . should_equal [1, 4, 5]
            t.filter "b" Filter_Condition.Is_False . at "ix" . to_vector . should_equal [2]

        Test.specify "should correctly mask all kinds of columns" <|
            t = table_builder [["ints", [1, 2, 3, Nothing, 4]], ["floats", [4.0, Nothing, 3.0, 2.0, 1.0]], ["bools", [False, False, True, Nothing, False]], ["strings", ["a", Nothing, "b", "c", "d"]], ["mask", [False, True, True, True, Nothing]]]
            t2 = t.filter "mask"
            t2.at "ints" . to_vector . should_equal [2, 3, Nothing]
            t2.at "floats" . to_vector . should_equal [Nothing, 3.0, 2.0]
            t2.at "bools" . to_vector . should_equal [False, True, Nothing]
            t2.at "strings" . to_vector . should_equal [Nothing, "b", "c"]
            t2.at "mask" . to_vector . should_equal [True, True, True]

        Test.specify "should check types of boolean operations" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["b", [True, False, Nothing, True, True]]]
            check_problem result =
                result.should_fail_with Invalid_Value_Type
                result.catch.expected . should_equal Value_Type.Boolean

            check_problem <| t.filter "ix" Filter_Condition.Is_True
            check_problem <| t.filter "ix" Filter_Condition.Is_False
            
        Test.specify "by a custom expression built from table's columns" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["X", [10, 20, 13, 4, 5]], ["Y", [0, -100, 8, 2, 5]]]
            t.filter (t.at "X" + t.at "Y" > 9) . at "ix" . to_vector . should_equal [1, 3, 5]

        Test.specify "should handle selection errors: unknown column name" <|
            t = table_builder [["X", [10, 20, 13, 4, 5]]]
            t.filter "unknown column" . should_fail_with No_Such_Column
            t.filter "unknown column" . catch . should_equal (No_Such_Column.Error "unknown column")

        Test.specify "should handle selection errors: out of bounds index" <|
            t = table_builder [["X", [10, 20, 13, 4, 5]]]
            t.filter 4 . should_fail_with Index_Out_Of_Bounds
            t.filter 4 . catch . should_equal (Index_Out_Of_Bounds.Error 4 1)

        Test.specify "should report issues: floating point equality" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["X", [10.0, 2.0001, 2.0, 4.5, 2.0]]]

            r1 = t.filter "X" (Filter_Condition.Equal 2) on_problems=Problem_Behavior.Ignore
            r1.at "ix" . to_vector . should_equal [3, 5]
            Problems.assume_no_problems r1

            r2 = t.filter "X" (Filter_Condition.Equal 2) on_problems=Problem_Behavior.Report_Warning
            r2.at "ix" . to_vector . should_equal [3, 5]
            Problems.expect_warning Floating_Point_Equality r2

            r3 = t.filter "X" (Filter_Condition.Equal 2) on_problems=Problem_Behavior.Report_Error
            r3.should_fail_with Floating_Point_Equality

            r4 = t.filter "X" (Filter_Condition.Not_Equal 2)
            r4.at "ix" . to_vector . should_equal [1, 2, 4]
            Problems.expect_warning Floating_Point_Equality r4

        Test.specify "already existing warnings should not be escalated to errors in error handling mode" <|
            t1 = table_builder [["X", [1.5, 2.0, 0.0]], ["ix", [1, 2, 3]]]
            c1 = Warning.attach (Illegal_State.Error "FOO") (t1.evaluate_expression "3.0 + [X]")
            Problems.expect_warning Illegal_State c1

            t2 = t1.set c1 new_name="Y"
            Problems.expect_warning Illegal_State t2

            r1 = t2.filter "Y" (Filter_Condition.Equal 5)
            Problems.expect_warning Illegal_State r1
            Problems.expect_warning Floating_Point_Equality r1
            r1.at "ix" . to_vector . should_equal [2]

            i1 = t2.filter "Y" (Filter_Condition.Equal 5) on_problems=Problem_Behavior.Ignore
            Problems.expect_warning Illegal_State i1
            Problems.not_expect_warning Floating_Point_Equality i1
            i1.at "ix" . to_vector . should_equal [2]

            err1 = t2.filter "Y" (Filter_Condition.Equal 5) on_problems=Problem_Behavior.Report_Error
            err1.should_fail_with Floating_Point_Equality

            r2 = t2.filter "Y" (Filter_Condition.Not_Equal 5)
            Problems.expect_warning Illegal_State r2
            Problems.expect_warning Floating_Point_Equality r2
            r2.at "ix" . to_vector . should_equal [1, 3]

            i2 = t2.filter "Y" (Filter_Condition.Not_Equal 5) on_problems=Problem_Behavior.Ignore
            Problems.expect_warning Illegal_State i2
            Problems.not_expect_warning Floating_Point_Equality i2
            i2.at "ix" . to_vector . should_equal [1, 3]

            err2 = t2.filter "Y" (Filter_Condition.Not_Equal 5) on_problems=Problem_Behavior.Report_Error
            err2.should_fail_with Floating_Point_Equality

    Test.group prefix+"Table.filter_by_expression" <|
        Test.specify "by a boolean column" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["b", [True, False, Nothing, True, True]]]
            t.filter_by_expression "[b]" . at "ix" . to_vector . should_equal [1, 4, 5]
            t.filter_by_expression "![b]" . at "ix" . to_vector . should_equal [2]

        Test.specify "by an integer comparison" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["b", [True, False, Nothing, True, True]]]
            t.filter_by_expression "[ix]==3" . at "ix" . to_vector . should_equal [3]
            t.filter_by_expression "[ix]>2" . at "ix" . to_vector . should_equal [3, 4, 5]

        Test.specify "fail gracefully" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["b", [True, False, Nothing, True, True]]]
            t.filter_by_expression "[ix" . should_fail_with Expression_Error
            t.filter_by_expression "[ix" . catch . should_be_a Expression_Error.Syntax_Error
            t.filter_by_expression "Starts_With([b])" . should_fail_with Expression_Error
            t.filter_by_expression "Starts_With([b])" . catch . should_be_a Expression_Error.Argument_Mismatch
            t.filter_by_expression "[missing]" . should_fail_with No_Such_Column
            t.filter_by_expression "[ix]" . should_fail_with Invalid_Value_Type

            ## This used to raise Expression_Error.Argument_Mismatch, but now we
               cannot detect that.

               Argument_Mismatch is detected by applying all arguments to the
               function, if there are too many it will fail with
               `Type error: expected a function` which was being detected.
               But it first runs the code of the function with as many arguments
               as it needed, thus if the function fails, its error overrides the
               arity error.
            t.filter_by_expression "is_empty([b],False)" . should_fail_with Invalid_Value_Type
            # If we provide good type for the first argument, then the error will be again as expected.
            t.filter_by_expression "is_empty('', 42)" . should_fail_with Expression_Error
            t.filter_by_expression "is_empty('', 42)" . catch . should_be_a Expression_Error.Argument_Mismatch

        Test.specify "should report issues: floating point equality" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["X", [10.0, 2.0001, 2.0, 4.5, -2.0]]]
            r1 = t.filter_by_expression "[X] * [X] == 4.0" on_problems=Problem_Behavior.Ignore
            Problems.assume_no_problems r1
            r1.at "ix" . to_vector . should_equal [3, 5]

            r2 = t.filter_by_expression "[X] * [X] == 4.0" on_problems=Problem_Behavior.Report_Warning

            r2.at "ix" . to_vector . should_equal [3, 5]
            Problems.expect_warning Floating_Point_Equality r2

            r3 = t.filter_by_expression "[X] * [X] == 4.0" on_problems=Problem_Behavior.Report_Error
            r3.should_fail_with Floating_Point_Equality

            r4 = t.filter_by_expression "[X] * [X] != 4.0"
            r4.at "ix" . to_vector . should_equal [1, 2, 4]
            Problems.expect_warning Floating_Point_Equality r4

        db_pending = if setup.is_database then "Arithmetic error handling is currently not implemented for the Database backend."
        Test.specify "should report issues: arithmetic error" pending=db_pending <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["X", [2.0, 2.0, 0.0, 1.0, 2.0]]]
            action = t.filter_by_expression "8.0 / [X] <= 4.0" on_problems=_
            tester table =
                table . at "ix" . to_vector . should_equal [1, 2, 5]
            problems = [Arithmetic_Error.Error "Division by zero (at rows [2])."]
            Problems.test_problem_handling action problems tester
