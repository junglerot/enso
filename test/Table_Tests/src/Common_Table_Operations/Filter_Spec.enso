from Standard.Base import all
import Standard.Base.Error.Common.Index_Out_Of_Bounds
import Standard.Base.Error.Common.Type_Error

import Standard.Table.Data.Value_Type.Value_Type
from Standard.Table.Errors import all

from Standard.Database.Errors import SQL_Error

from Standard.Test import Test, Problems
import Standard.Test.Extensions

from project.Common_Table_Operations.Util import run_default_backend

main = run_default_backend spec

## Currently these tests rely on filtering preserving the insertion ordering
   within tables. This is not necessarily guaranteed by RDBMS, so we may adapt
   this in the future. For now we implicitly assume the ordering is preserved,
   as that seems to be the case.
spec setup =
    prefix = setup.prefix
    table_builder = setup.table_builder
    test_selection = setup.test_selection

    check_empty expected_column_names table =
        table.columns.map .name . should_equal expected_column_names
        expected_column_names.each x->
            table.at x . to_vector . should_equal []
        table.row_count . should_equal 0

    Test.group prefix+"Table.filter" <|
        Test.specify "by integer comparisons" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["X", [100, 3, Nothing, 4, 12]], ["Y", [100, 4, 2, Nothing, 11]]]
            t1 = t.filter "X" (Filter_Condition.Less than=10)
            t1.at "ix" . to_vector . should_equal [2, 4]
            t1.at "X" . to_vector . should_equal [3, 4]
            t.filter "X" (Filter_Condition.Less than=4) . at "X" . to_vector . should_equal [3]
            t.filter "X" (Filter_Condition.Equal_Or_Less than=4) . at "X" . to_vector . should_equal [3, 4]
            t.filter "X" (Filter_Condition.Greater than=4) . at "X" . to_vector . should_equal [100, 12]
            t.filter "X" (Filter_Condition.Equal_Or_Greater than=4) . at "X" . to_vector . should_equal [100, 4, 12]
            t.filter "X" (Filter_Condition.Between 4 100) . at "X" . to_vector . should_equal [100, 4, 12]
            t2 = t.filter "X" (Filter_Condition.Equal to=100)
            t2 . at "X" . to_vector . should_equal [100]
            t2 . at "ix" . to_vector . should_equal [1]
            t.filter "X" (Filter_Condition.Equal to=123) . at "X" . to_vector . should_equal []
            v = t.filter "X" (Filter_Condition.Equal to="SOME TEXT :)") . at "X" . to_vector
            case test_selection.allows_mixed_type_comparisons of
                True -> v.should_equal []
                False -> v.should_fail_with SQL_Error.Error

            t.filter "X" (Filter_Condition.Equal to=(t.at "Y")) . at "X" . to_vector . should_equal [100]
            t.filter "X" (Filter_Condition.Less than=(t.at "Y")) . at "X" . to_vector . should_equal [3]
            t.filter "X" (Filter_Condition.Equal_Or_Less than=(t.at "Y")) . at "X" . to_vector . should_equal [100, 3]
            t.filter "X" (Filter_Condition.Equal_Or_Greater than=(t.at "Y")) . at "X" . to_vector . should_equal [100, 12]
            t.filter "X" (Filter_Condition.Greater than=(t.at "Y")) . at "X" . to_vector . should_equal [12]
            t.filter "Y" (Filter_Condition.Between (t.at "ix") 100) . at "Y" . to_vector . should_equal [100, 4, 11]

        Test.specify "by text comparisons" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["X", ["abb", "baca", "b", Nothing, "c"]], ["Y", ["a", "b", "b", "c", "c"]]]
            t1 = t.filter "X" (Filter_Condition.Less than="c")
            t1.at "ix" . to_vector . should_equal [1, 2, 3]
            t1.at "X" . to_vector . should_equal ["abb", "baca", "b"]
            t.filter "X" (Filter_Condition.Equal_Or_Less than="b") . at "X" . to_vector . should_equal ["abb", "b"]
            t.filter "X" (Filter_Condition.Greater than="b") . at "X" . to_vector . should_equal ["baca", "c"]
            t.filter "X" (Filter_Condition.Equal_Or_Greater than="b") . at "X" . to_vector . should_equal ["baca", "b", "c"]
            t.filter "X" (Filter_Condition.Between "b" "c") . at "X" . to_vector . should_equal ["baca", "b", "c"]
            t.filter "X" (Filter_Condition.Equal to="baca") . at "X" . to_vector . should_equal ["baca"]
            v = t.filter "X" (Filter_Condition.Equal to=52) . at "X" . to_vector
            case test_selection.allows_mixed_type_comparisons of
                True -> v.should_equal []
                False -> v.should_fail_with SQL_Error.Error

            t.filter "X" (Filter_Condition.Greater than=(t.at "Y")) . at "X" . to_vector . should_equal ["abb", "baca"]
            t.filter "X" (Filter_Condition.Equal_Or_Greater than=(t.at "Y")) . at "X" . to_vector . should_equal ["abb", "baca", "b", "c"]
            t.filter "X" (Filter_Condition.Equal_Or_Less than=(t.at "Y")) . at "X" . to_vector . should_equal ["b", "c"]
            t.filter "X" (Filter_Condition.Less than=(t.at "Y")) . at "X" . to_vector . should_equal []
            t.filter "X" (Filter_Condition.Equal to=(t.at "Y")) . at "X" . to_vector . should_equal ["b", "c"]
            t.filter "X" (Filter_Condition.Between (t.at "Y") "bzzzz") . at "X" . to_vector . should_equal ["abb", "baca", "b"]

        Test.specify "by text search (contains, starts_with, ends_with, like)" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["X", ["abb", "baca", "banana", Nothing, "nana"]], ["Y", ["a", "b", "b", "c", "a"]], ["Z", ["aaaaa", "bbbbb", "[ab]", "[ab]aaaa", "[ab]ccc"]]]

            t.filter "X" (Filter_Condition.Starts_With "ba") on_problems=Report_Error . at "X" . to_vector . should_equal ["baca", "banana"]
            t.filter "X" (Filter_Condition.Ends_With "na") on_problems=Report_Error . at "X" . to_vector . should_equal ["banana", "nana"]
            t.filter "X" (Filter_Condition.Contains "ac") on_problems=Report_Error . at "X" . to_vector . should_equal ["baca"]

            t.filter "X" (Filter_Condition.Starts_With (t.at "Y")) on_problems=Report_Error . at "X" . to_vector . should_equal ["abb", "baca", "banana"]
            t.filter "X" (Filter_Condition.Ends_With (t.at "Y")) on_problems=Report_Error . at "X" . to_vector . should_equal ["nana"]
            t.filter "X" (Filter_Condition.Contains (t.at "Y")) on_problems=Report_Error . at "X" . to_vector . should_equal ["abb", "baca", "banana", "nana"]

            t.filter "X" (Filter_Condition.Like "%an%") on_problems=Report_Error . at "X" . to_vector . should_equal ["banana", "nana"]
            t.filter "X" (Filter_Condition.Like "_a%") on_problems=Report_Error . at "X" . to_vector . should_equal ["baca", "banana", "nana"]
            t.filter "X" (Filter_Condition.Like "%b") on_problems=Report_Error . at "X" . to_vector . should_equal ["abb"]
            t.filter "X" (Filter_Condition.Like "nana") on_problems=Report_Error . at "X" . to_vector . should_equal ["nana"]
            t.filter "Z" (Filter_Condition.Like "[ab]_%") on_problems=Report_Error . at "Z" . to_vector . should_equal ["[ab]aaaa", "[ab]ccc"]

            t.filter "X" (Filter_Condition.Not_Like "%b") on_problems=Report_Error . at "X" . to_vector . should_equal ["baca", "banana", "nana"]
            t.filter "Z" (Filter_Condition.Not_Like "[ab]%") on_problems=Report_Error . at "Z" . to_vector . should_equal ["aaaaa", "bbbbb"]

        Test.specify "text operations should also match newlines" <|
            t = table_builder [["X", ['a\n\n\n', 'a\n', 'a\n\n\nb', 'a\nb', 'caa\nbb']]]
            t.filter "X" (Filter_Condition.Like 'a_') on_problems=Report_Error . at "X" . to_vector . should_equal ['a\n']
            t.filter "X" (Filter_Condition.Like 'a%') on_problems=Report_Error . at "X" . to_vector . should_equal ['a\n\n\n', 'a\n', 'a\n\n\nb', 'a\nb']
            t.filter "X" (Filter_Condition.Like 'a_b') on_problems=Report_Error . at "X" . to_vector . should_equal ['a\nb']
            t.filter "X" (Filter_Condition.Like '%\nb') on_problems=Report_Error . at "X" . to_vector . should_equal ['a\n\n\nb', 'a\nb']

            t.filter "X" (Filter_Condition.Contains '\nb') on_problems=Report_Error . at "X" . to_vector . should_equal ['a\n\n\nb', 'a\nb', 'caa\nbb']
            t.filter "X" (Filter_Condition.Ends_With '\nb') on_problems=Report_Error . at "X" . to_vector . should_equal ['a\n\n\nb', 'a\nb']
            t.filter "X" (Filter_Condition.Ends_With '\n') on_problems=Report_Error . at "X" . to_vector . should_equal ['a\n\n\n', 'a\n']
            t.filter "X" (Filter_Condition.Starts_With 'c') on_problems=Report_Error . at "X" . to_vector . should_equal ['caa\nbb']

        if test_selection.supports_unicode_normalization then
            t = table_builder [["X", ['śnieg', 's\u0301nieg', 'X', Nothing, 'połać', 'połac\u0301']]]
            Test.specify "text operations should support Unicode normalization" <|
                t.filter "X" (Filter_Condition.Starts_With 'ś') on_problems=Report_Error . at "X" . to_vector . should_equal ['śnieg', 's\u0301nieg']
                t.filter "X" (Filter_Condition.Contains 'ś') on_problems=Report_Error . at "X" . to_vector . should_equal ['śnieg', 's\u0301nieg']
                t.filter "X" (Filter_Condition.Ends_With 'ś') on_problems=Report_Error . at "X" . to_vector . should_equal []
                t.filter "X" (Filter_Condition.Ends_With 'ć') on_problems=Report_Error . at "X" . to_vector . should_equal ['połać', 'połac\u0301']

                # This should be replaced with the disabled test below, once the related bug is fixed.
                t.filter "X" (Filter_Condition.Like 'ś%') on_problems=Report_Error . at "X" . to_vector . should_equal ['śnieg']

            # This test is split off just to mark is as pending, once resolved it can be merged with the one above.
            Test.specify "text operations should support Unicode normalization (like)" pending='There is a bug with Java Regex in Unicode normalized mode (CANON_EQ) with quoting.\nhttps://bugs.java.com/bugdatabase/view_bug.do?bug_id=8032926' <|
                t.filter "X" (Filter_Condition.Like 'ś%') on_problems=Report_Error . at "X" . to_vector . should_equal ['śnieg', 's\u0301nieg']

        Test.specify "by empty text" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["X", ["abb", "", " ", Nothing, "nana"]]]
            t.filter "X" Filter_Condition.Is_Empty on_problems=Report_Error . at "X" . to_vector . should_equal ["", Nothing]
            t.filter "X" Filter_Condition.Not_Empty on_problems=Report_Error . at "X" . to_vector . should_equal ["abb", " ", "nana"]

        Test.specify "should check types for text operations" <|
            t = table_builder [["ix", [1, 2, 3, 4]], ["X", [Nothing, "A", "", " "]]]
            check_column_type_error_handling action =
                tester = check_empty ["ix", "X"]
                check_problem problem =
                    problem.should_be_a Invalid_Value_Type.Error
                    problem.expected . should_equal Value_Type.Char
                warnings_tester warnings =
                    (warnings.length >= 1).should_be_true
                    check_problem warnings.first
                error_tester result = check_problem result.catch
                Problems.test_advanced_problem_handling action error_tester warnings_tester tester
            check_column_type_error_handling (t.filter "X" (Filter_Condition.Starts_With (t.at "ix")) on_problems=_)
            check_column_type_error_handling (t.filter "X" (Filter_Condition.Ends_With (t.at "ix")) on_problems=_)
            check_column_type_error_handling (t.filter "X" (Filter_Condition.Contains (t.at "ix")) on_problems=_)
            check_column_type_error_handling (t.filter "X" (Filter_Condition.Like (t.at "ix")) on_problems=_)
            check_column_type_error_handling (t.filter "X" (Filter_Condition.Not_Like (t.at "ix")) on_problems=_)

            check_column_type_error_handling (t.filter "ix" (Filter_Condition.Starts_With "A") on_problems=_)
            check_column_type_error_handling (t.filter "ix" (Filter_Condition.Ends_With "A") on_problems=_)
            check_column_type_error_handling (t.filter "ix" (Filter_Condition.Contains "A") on_problems=_)
            check_column_type_error_handling (t.filter "ix" (Filter_Condition.Like "A") on_problems=_)
            check_column_type_error_handling (t.filter "ix" (Filter_Condition.Not_Like "A") on_problems=_)

            check_column_type_error_handling (t.filter "ix" Filter_Condition.Is_Empty on_problems=_)
            check_column_type_error_handling (t.filter "ix" Filter_Condition.Not_Empty on_problems=_)

            check_scalar_type_error_handling name action =
                tester = check_empty ["ix", "X"]
                problems = [Type_Error.Error Text Integer name]
                Problems.test_problem_handling action problems tester
            check_scalar_type_error_handling "prefix" (t.filter "X" (Filter_Condition.Starts_With 42) on_problems=_)
            check_scalar_type_error_handling "suffix" (t.filter "X" (Filter_Condition.Ends_With 42) on_problems=_)
            check_scalar_type_error_handling "substring" (t.filter "X" (Filter_Condition.Contains 42) on_problems=_)
            check_scalar_type_error_handling "pattern" (t.filter "X" (Filter_Condition.Like 42) on_problems=_)
            check_scalar_type_error_handling "pattern" (t.filter "X" (Filter_Condition.Not_Like 42) on_problems=_)

        Test.specify "by nulls" <|
            t = table_builder [["ix", [1, 2, 3, 4]], ["X", [Nothing, 1, Nothing, 4]]]
            t1 = t.filter "X" (Filter_Condition.Is_Nothing) on_problems=Report_Error
            t1.at "ix" . to_vector . should_equal [1, 3]
            t1.at "X" . to_vector . should_equal [Nothing, Nothing]

            t2 = t.filter "X" (Filter_Condition.Not_Nothing) on_problems=Report_Error
            t2.at "ix" . to_vector . should_equal [2, 4]
            t2.at "X" . to_vector . should_equal [1, 4]

        Test.specify "by an Is_In check" <|
            t = table_builder [["ix", [1, 2, 3, Nothing, 5, 6]], ["X", ["a", "b", "ccc", "X", "f", "2"]]]
            t1 = table_builder [["txt", ["X", "a", "c", Nothing]], ["int", [Nothing, 2, 5, 4]], ["bool", [True, Nothing, Nothing, True]]]

            t.filter "X" (Filter_Condition.Is_In (t1.at "txt")) on_problems=Report_Error . at "X" . to_vector . should_equal ["a", "X"]
            t.filter "X" (Filter_Condition.Is_In (t1.at "txt" . to_vector)) on_problems=Report_Error . at "X" . to_vector . should_equal ["a", "X"]
            t.filter "X" (Filter_Condition.Not_In (t1.at "txt")) on_problems=Report_Error . at "X" . to_vector . should_equal ["b", "ccc", "f", "2"]
            t.filter "X" (Filter_Condition.Not_In (t1.at "txt" . to_vector)) on_problems=Report_Error . at "X" . to_vector . should_equal ["b", "ccc", "f", "2"]
            t.filter "X" (Filter_Condition.Is_In ["ccc"]) on_problems=Report_Error . at "X" . to_vector . should_equal ["ccc"]
            t.filter "X" (Filter_Condition.Is_In []) on_problems=Report_Error . at "X" . to_vector . should_equal []
            t.filter "X" (Filter_Condition.Not_In []) on_problems=Report_Error . at "X" . to_vector . should_equal ["a", "b", "ccc", "X", "f", "2"]

            if test_selection.allows_mixed_type_comparisons then
                mixed = t.filter "X" (Filter_Condition.Is_In (t1.at "int")) on_problems=Report_Error . at "X" . to_vector
                # Some backends (e.g. SQLite) allow to coerce integer and text types when doing mixed type comparisons.
                ((mixed == []) || (mixed == ["2"])).should_be_true

            t.filter "ix" (Filter_Condition.Is_In (t1.at "int")) on_problems=Report_Error . at "ix" . to_vector . should_equal [2, Nothing, 5]
            t.filter "ix" (Filter_Condition.Is_In (t1.at "int" . to_vector)) on_problems=Report_Error . at "ix" . to_vector . should_equal [2, Nothing, 5]
            t.filter "ix" (Filter_Condition.Is_In [2, 5, 4]) on_problems=Report_Error . at "ix" . to_vector . should_equal [2, 5]
            t.filter "ix" (Filter_Condition.Is_In [Nothing]) on_problems=Report_Error . at "ix" . to_vector . should_equal [Nothing]
            t.filter "ix" (Filter_Condition.Not_In [Nothing]) on_problems=Report_Error . at "ix" . to_vector . should_equal [1, 2, 3, 5, 6]
            t.filter "ix" (Filter_Condition.Not_In [1, 3]) on_problems=Report_Error . at "ix" . to_vector . should_equal [2, Nothing, 5, 6]

            v1 = t.filter "X" (Filter_Condition.Is_In ["c", "f", "b", "b", "b", 15, Nothing]) on_problems=Report_Error . at "X" . to_vector
            case test_selection.allows_mixed_type_comparisons of
                True -> v1.should_equal ["b", "f"]
                False -> v1.should_fail_with SQL_Error.Error
            v2 = t.filter "ix" (Filter_Condition.Is_In ["c", 3, 2, "a"]) on_problems=Report_Error . at "ix" . to_vector
            case test_selection.allows_mixed_type_comparisons of
                True -> v2.should_equal [2, 3]
                False -> v2.should_fail_with SQL_Error.Error

            t2 = table_builder [["A", [True, False, True]], ["B", [False, False, False]], ["C", [True, False, Nothing]]]
            t2.filter "A" (Filter_Condition.Is_In (t1.at "bool")) . at "A" . to_vector . should_equal [True, True]
            t2.filter "A" (Filter_Condition.Is_In (t1.at "bool" . to_vector)) . at "A" . to_vector . should_equal [True, True]
            t2.filter "B" (Filter_Condition.Is_In [True, Nothing]) . at "B" . to_vector . should_equal []
            t2.filter "C" (Filter_Condition.Is_In [True, Nothing]) . at "C" . to_vector . should_equal [True, Nothing]
            t2.filter "A" (Filter_Condition.Is_In [False]) . at "A" . to_vector . should_equal [False]
            t2.filter "B" (Filter_Condition.Is_In [False]) . at "B" . to_vector . should_equal [False, False, False]
            t2.filter "C" (Filter_Condition.Is_In [False, False]) . at "C" . to_vector . should_equal [False]

        Test.specify "by a boolean mask" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["b", [True, False, Nothing, True, True]]]
            t.filter "b" on_problems=Report_Error . at "ix" . to_vector . should_equal [1, 4, 5]
            t.filter "b" Filter_Condition.Is_False on_problems=Report_Error . at "ix" . to_vector . should_equal [2]

        Test.specify "should correctly reorder all kinds of columns" <|
            t = table_builder [["ints", [1, 2, 3, Nothing, 4]], ["floats", [4.0, Nothing, 3.0, 2.0, 1.0]], ["bools", [False, False, True, Nothing, False]], ["strings", ["a", Nothing, "b", "c", "d"]], ["mask", [False, True, True, True, Nothing]]]
            t2 = t.filter "mask" on_problems=Report_Error
            t2.at "ints" . to_vector . should_equal [2, 3, Nothing]
            t2.at "floats" . to_vector . should_equal [Nothing, 3.0, 2.0]
            t2.at "bools" . to_vector . should_equal [False, True, Nothing]
            t2.at "strings" . to_vector . should_equal [Nothing, "b", "c"]
            t2.at "mask" . to_vector . should_equal [True, True, True]

        Test.specify "should check types of boolean operations" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["b", [True, False, Nothing, True, True]]]
            tester = check_empty ["ix", "b"]
            check_problem problem =
                problem.should_be_a Invalid_Value_Type.Error
                problem.expected . should_equal Value_Type.Boolean
            warnings_tester warnings =
                (warnings.length >= 1).should_be_true
                check_problem warnings.first
            error_tester result = check_problem result.catch
            Problems.test_advanced_problem_handling (t.filter "ix" Filter_Condition.Is_True on_problems=_) error_tester warnings_tester tester
            Problems.test_advanced_problem_handling (t.filter "ix" Filter_Condition.Is_False on_problems=_) error_tester warnings_tester tester

        Test.specify "by a custom expression built from table's columns" <|
            t = table_builder [["ix", [1, 2, 3, 4, 5]], ["X", [10, 20, 13, 4, 5]], ["Y", [0, -100, 8, 2, 5]]]
            t.filter (t.at "X" + t.at "Y" > 9) on_problems=Report_Error . at "ix" . to_vector . should_equal [1, 3, 5]

        Test.specify "should handle selection errors: unknown column name" <|
            t = table_builder [["X", [10, 20, 13, 4, 5]]]
            action = t.filter "unknown column" on_problems=_
            tester table =
                table.at "X" . to_vector . should_equal (t.at "X" . to_vector)
            problems = [No_Such_Column.Error "unknown column"]
            Problems.test_problem_handling action problems tester

        Test.specify "should handle selection errors: out of bounds index" <|
            t = table_builder [["X", [10, 20, 13, 4, 5]]]
            action = t.filter 4 on_problems=_
            tester table =
                table.at "X" . to_vector . should_equal (t.at "X" . to_vector)
            problems = [Index_Out_Of_Bounds.Error 4 1]
            Problems.test_problem_handling action problems tester

