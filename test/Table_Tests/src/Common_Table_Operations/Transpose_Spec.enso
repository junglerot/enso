from Standard.Base import all

from Standard.Table.Errors import all

from Standard.Test_New import all


from project.Common_Table_Operations.Util import run_default_backend


type Data
    Value ~connection

    setup create_connection_fn = Data.Value <|
        create_connection_fn Nothing

    teardown self =
        self.connection.close


add_specs suite_builder setup =
    prefix = setup.prefix
    create_connection_fn = setup.create_connection_func
    db_todo = if setup.is_database.not then Nothing else "Table.transpose is not implemented yet in Database."
    suite_builder.group prefix+"Table.transpose" pending=db_todo group_builder->
        data = Data.setup create_connection_fn

        group_builder.teardown <|
            data.teardown

        table_builder cols =
            setup.table_builder cols connection=data.connection

        group_builder.specify "should transpose all columns by default" <|
            t = table_builder [["Key", ["x", "y", "z"]], ["Value", [1, 2, 3]], ["Another", [10, Nothing, 20]], ["Yet Another", [Nothing, "Hello", "World"]]]
            t1 = t.transpose
            t1.row_count . should_equal 12
            t1.column_count . should_equal 2
            t1.at "Name" . to_vector . should_equal ["Key", "Value", "Another", "Yet Another", "Key", "Value", "Another", "Yet Another", "Key", "Value", "Another", "Yet Another"]
            t1.at "Value" . to_vector . should_equal ["x", 1, 10, Nothing, "y", 2, Nothing, "Hello", "z", 3, 20, "World"]

        group_builder.specify "should allow custom names" <|
            t = table_builder [["Key", ["x", "y", "z"]], ["Value", [1, 2, 3]], ["Another", [10, Nothing, 20]], ["Yet Another", [Nothing, "Hello", "World"]]]
            t1 = t.transpose attribute_column_name="Key" value_column_name="Object"
            t1.row_count . should_equal 12
            t1.column_count . should_equal 2
            t1.at "Key" . to_vector . should_equal ["Key", "Value", "Another", "Yet Another", "Key", "Value", "Another", "Yet Another", "Key", "Value", "Another", "Yet Another"]
            t1.at "Object" . to_vector . should_equal ["x", 1, 10, Nothing, "y", 2, Nothing, "Hello", "z", 3, 20, "World"]

        group_builder.specify "should allow id fields" <|
            t = table_builder [["Key", ["x", "y", "z"]], ["Value", [1, 2, 3]], ["Another", [10, Nothing, 20]], ["Yet Another", [Nothing, "Hello", "World"]]]
            t1 = t.transpose ["Key"]
            t1.row_count . should_equal 9
            t1.column_names . should_equal ["Key", "Name", "Value"]
            t1.at "Key" . to_vector . should_equal ["x", "x", "x", "y", "y", "y", "z", "z", "z"]
            t1.at "Name" . to_vector . should_equal ["Value", "Another", "Yet Another", "Value", "Another", "Yet Another", "Value", "Another", "Yet Another"]
            t1.at "Value" . to_vector . should_equal [1, 10, Nothing, 2, Nothing, "Hello", 3, 20, "World"]

        group_builder.specify "should allow single id field" <|
            t = table_builder [["Key", ["x", "y", "z"]], ["Value", [1, 2, 3]], ["Another", [10, Nothing, 20]], ["Yet Another", [Nothing, "Hello", "World"]]]
            t1 = t.transpose "Key"
            t1.row_count . should_equal 9
            t1.column_count . should_equal 3
            t1.at "Key" . to_vector . should_equal ["x", "x", "x", "y", "y", "y", "z", "z", "z"]
            t1.at "Name" . to_vector . should_equal ["Value", "Another", "Yet Another", "Value", "Another", "Yet Another", "Value", "Another", "Yet Another"]
            t1.at "Value" . to_vector . should_equal [1, 10, Nothing, 2, Nothing, "Hello", 3, 20, "World"]

        group_builder.specify "should allow fields selected by index" <|
            t = table_builder [["Key", ["x", "y", "z"]], ["Value", [1, 2, 3]], ["Another", [10, Nothing, 20]], ["Yet Another", [Nothing, "Hello", "World"]]]
            t1 = t.transpose [0, -1]
            t1.column_names . should_equal ["Key", "Yet Another", "Name", "Value"]
            t1.row_count . should_equal 6
            t1.at "Key" . to_vector . should_equal ["x", "x", "y", "y", "z", "z"]
            t1.at "Yet Another" . to_vector . should_equal [Nothing, Nothing, "Hello", "Hello", "World", "World"]
            t1.at "Name" . to_vector . should_equal ["Value", "Another", "Value", "Another", "Value", "Another"]
            t1.at "Value" . to_vector . should_equal [1, 10, 2, Nothing, 3, 20]

        group_builder.specify "should allow all current columns to become id fields, without warning" <|
            t = table_builder [["Key", ["x", "y", "z"]], ["Foo", [1, 2, 3]], ["Another", [10, Nothing, 20]], ["Yet Another", [Nothing, "Hello", "World"]]]
            t1 = t.transpose t.column_names
            t1.row_count . should_equal 3
            t1.column_names . should_equal ["Key", "Foo", "Another", "Yet Another", "Name", "Value"]
            t1.at "Key" . to_vector . should_equal ["x", "y", "z"]
            t1.at "Foo" . to_vector . should_equal [1, 2, 3]
            t1.at "Name" . to_vector . should_equal [Nothing, Nothing, Nothing]
            t1.at "Value" . to_vector . should_equal [Nothing, Nothing, Nothing]
            Problems.assume_no_problems t1

        # ToDo: Verify the warnings and error handling within transpose.
        group_builder.specify "should handle missing columns" <|
            t1 = table_builder [["Key", ["x", "y", "z"]], ["Value", [1, 2, 3]], ["Another", [10, Nothing, 20]]]

            err1 = t1.transpose ["Key", "Missing", "Missing 2"]
            err1.should_fail_with Missing_Input_Columns
            err1.catch.criteria . should_equal ["Missing", "Missing 2"]

            err2 = t1.transpose [0, -1, 42, -100]
            err2.should_fail_with Missing_Input_Columns
            err2.catch.criteria . should_equal [42, -100]

            action1 = t1.transpose ["Key", "Missing", "Missing 2"] error_on_missing_columns=False on_problems=_
            tester1 table =
                table.column_names . should_equal ["Key", "Name", "Value"]
            problems1 = [Missing_Input_Columns.Error ["Missing", "Missing 2"]]
            Problems.test_problem_handling action1 problems1 tester1

            action2 = t1.transpose [0, -1, 42, -100] error_on_missing_columns=False on_problems=_
            tester2 table =
                table.column_names . should_equal ["Key", "Another", "Name", "Value"]
            problems2 = [Missing_Input_Columns.Error [42, -100]]
            Problems.test_problem_handling action2 problems2 tester2

        group_builder.specify "should warn on column name clashes" <|
            t1 = table_builder [["X", ["x", "y", "z"]], ["Y", [1, 2, 3]], ["Z", [10, Nothing, 20]]]

            action1 = t1.transpose ["X", "Y", "Z"] attribute_column_name="Y" value_column_name="Z" on_problems=_
            tester1 table =
                table.column_names . should_equal ["X", "Y", "Z", "Y 1", "Z 1"]
            problems1 = [Duplicate_Output_Column_Names.Error ["Y", "Z"]]
            Problems.test_problem_handling action1 problems1 tester1

            action2 = t1.transpose ["X"] attribute_column_name="F" value_column_name="F" on_problems=_
            tester2 table =
                table.column_names . should_equal ["X", "F", "F 1"]
            problems2 = [Duplicate_Output_Column_Names.Error ["F"]]
            Problems.test_problem_handling action2 problems2 tester2

            # No clash with the columns that are removed by transpose.
            t2 = t1.transpose ["X"] attribute_column_name="Y" value_column_name="Z" on_problems=Problem_Behavior.Report_Error
            Problems.assume_no_problems t2
            t2.column_names . should_equal ["X", "Y", "Z"]
