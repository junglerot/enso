from Standard.Base import all

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

import project.In_Memory.Common_Spec as In_Memory_Table_Spec

expect_column_names names table =
    table.columns . map .name . should_equal names frames_to_skip=2

## These tests are parametrized by various backends and so they should be run in
   context of a specific backend. However, for the purpose of testing we provide
   a shortcut that allows to run these tests with the in-memory backend.
run_default_backend spec =
    Test_Suite.run_main (In_Memory_Table_Spec.run_common_spec spec)

## Adds a clue which will display the provided table next to the failed test
   description.

   > Example
     Test a property of the table, displaying its contents if the test fails.

         t = Table.new [["A", [1, 2, 3]]]
         within_table t <|
             t.at "A" . to_vector . should_equal [1, 2, 3]
within_table table = Test.with_clue 'Resulting table:\n'+table.display+'\n\n'

## PRIVATE
Any.should_equal_tz_agnostic self other =
    loc = Meta.get_source_location 1
    _ = other
    Test.fail "Expected a vector but got "+self.to_display_text+" (at "+loc+")."

## PRIVATE
   A helper method that compares two vectors of Date_Time values.

   It ensures that they represent the same instant in time, but ignore the
   timezone that is attached to them. This is simply done by converting them to
   UTC.
Vector.should_equal_tz_agnostic self other =
    loc = Meta.get_source_location 1
    case other of
        _ : Vector ->
            utc = Time_Zone.utc
            normalize_date_time dt = case dt of
                _ : Date_Time -> dt.at_zone utc
                _ -> Test.fail "The vector should contain Date_Time objects but it contained "+dt.to_display_text+" (at "+loc+")"
            self_normalized = self.map normalize_date_time
            other_normalized = other.map normalize_date_time
            self_normalized.should_equal other_normalized frames_to_skip=2
        _ -> Test.fail "Expected a vector but got "+other.to_display_text+" (at "+loc+")"

## PRIVATE
Error.should_equal_tz_agnostic self other =
    loc = Meta.get_source_location 1
    _ = other
    Test.fail "Expected a vector but got a dataflow error "+self.catch.to_display_text+" (at "+loc+")."
