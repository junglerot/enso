from Standard.Base import all
from Standard.Table import Table

from Standard.Test_New import all

import project.Common_Table_Operations.Main.Test_Setup
import project.Common_Table_Operations.Main.Test_Selection
import project.Common_Table_Operations.Aggregate_Spec

expect_column_names names table =
    table.columns . map .name . should_equal names frames_to_skip=2

type Dummy_Connection
    Value

    close self = Nothing

    drop_table self table =
        _ = table
        Nothing


## These tests are parametrized by various backends and so they should be run in
   context of a specific backend. However, for the purpose of testing we provide
   a shortcut that allows to run these tests with the in-memory backend.

   Arguments:
   - add_specs: A function that takes two parameters: a suite builder and Test_Setup.
     And adds test specs to the suite builder.
run_default_backend add_specs =
    selection = Test_Selection.Config supports_case_sensitive_columns=True order_by=True natural_ordering=True case_insensitive_ordering=True order_by_unicode_normalization_by_default=True supports_unicode_normalization=True supports_time_duration=True supports_nanoseconds_in_time=True supports_mixed_columns=True fixed_length_text_columns=True supports_8bit_integer=True
    aggregate_selection = Aggregate_Spec.Test_Selection.Config

    table_fn _ = (enso_project.data / "data.csv") . read

    empty_table_fn _ =
        table = table_fn Nothing
        table.take 0

    materialize = x->x

    table_builder cols connection=Nothing =
        _ = connection
        Table.new cols

    create_connection_func _ =
        Dummy_Connection.Value

    setup = Test_Setup.Config "[In-Memory] " table_fn empty_table_fn table_builder materialize is_database=False test_selection=selection aggregate_test_selection=aggregate_selection create_connection_func
    suite = Test.build suite_builder->
        add_specs suite_builder setup
    suite.run_with_filter


## Adds a clue which will display the provided table next to the failed test
   description.

   > Example
     Test a property of the table, displaying its contents if the test fails.

         t = Table.new [["A", [1, 2, 3]]]
         within_table t <|
             t.at "A" . to_vector . should_equal [1, 2, 3]
within_table table = Test.with_clue 'Resulting table:\n'+table.display+'\n\n'

## PRIVATE
Any.should_equal_tz_agnostic self other =
    loc = Meta.get_source_location 1
    _ = other
    Test.fail "Expected a vector but got "+self.to_display_text+" (at "+loc+")."

## PRIVATE
   A helper method that compares two vectors of Date_Time values.

   It ensures that they represent the same instant in time, but ignore the
   timezone that is attached to them. This is simply done by converting them to
   UTC.
Vector.should_equal_tz_agnostic self other =
    loc = Meta.get_source_location 1
    case other of
        _ : Vector ->
            utc = Time_Zone.utc
            normalize_date_time dt = case dt of
                _ : Date_Time -> dt.at_zone utc
                _ -> Test.fail "The vector should contain Date_Time objects but it contained "+dt.to_display_text+" (at "+loc+")"
            self_normalized = self.map normalize_date_time
            other_normalized = other.map normalize_date_time
            self_normalized.should_equal other_normalized frames_to_skip=2
        _ -> Test.fail "Expected a vector but got "+other.to_display_text+" (at "+loc+")"

## PRIVATE
Error.should_equal_tz_agnostic self other =
    loc = Meta.get_source_location 1
    _ = other
    Test.fail "Expected a vector but got a dataflow error "+self.catch.to_display_text+" (at "+loc+")."
