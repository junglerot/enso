from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Table import Value_Type
import Standard.Table.Data.Type.Value_Type.Bits

from Standard.Table.Errors import Missing_Input_Columns, Conversion_Failure
from Standard.Database.Errors import Unsupported_Database_Operation

from Standard.Test import Test, Problems
import Standard.Test.Extensions

from project.Common_Table_Operations.Util import run_default_backend

polyglot java import java.lang.Long as Java_Long

main = run_default_backend spec

type My_Type
    Value x

    to_text : Text
    to_text self = "{{{MY Type [x="+self.x.to_text+"] }}}"

spec setup =
    prefix = setup.prefix
    table_builder = setup.table_builder
    materialize = setup.materialize
    supports_dates = setup.test_selection.date_time
    Test.group prefix+"Table/Column.cast - to text" <|
        Test.specify "should allow to cast columns of various basic types to text" <|
            t = table_builder [["X", [1, 2, 3000]], ["Y", [True, False, True]], ["Z", [1.5, 0.125, -2.5]], ["W", ["a", "DEF", "a slightly longer text"]]]
            t2 = t.cast t.column_names Value_Type.Char
            t2.at "X" . value_type . is_text . should_be_true
            t2.at "Y" . value_type . is_text . should_be_true
            t2.at "Z" . value_type . is_text . should_be_true
            t2.at "W" . value_type . is_text . should_be_true

            t2.at "X" . to_vector . should_equal ["1", "2", "3000"]
            # Depending on the backend, the case of True/False literals may differ.
            t2.at "Y" . to_vector . map (_.to_case Case.Lower) . should_equal ["true", "false", "true"]
            t2.at "Z" . to_vector . should_equal ["1.5", "0.125", "-2.5"]
            t2.at "W" . to_vector . should_equal ["a", "DEF", "a slightly longer text"]

        if supports_dates then
            Test.specify "should allow to cast date/time columns to text" <|
                t = table_builder [["X", [Date.new 2015 1 1, Date.new 2023 12 31]], ["Y", [Time_Of_Day.new 1 2 3, Time_Of_Day.new 23 57 59]], ["Z", [Date_Time.new 2015 1 1 1 2 3, Date_Time.new 2023 11 30 22 45 44]]]
                t2 = t.cast t.column_names Value_Type.Char
                t2.at "X" . value_type . is_text . should_be_true
                t2.at "Y" . value_type . is_text . should_be_true
                t2.at "Z" . value_type . is_text . should_be_true

                t2.at "X" . to_vector . should_equal ["2015-01-01", "2023-12-31"]
                t2.at "Y" . to_vector . should_equal ["01:02:03", "23:57:59"]
                # The particular format depends on the backend.
                vz = t2.at "Z" . to_vector
                vz.first . should_contain "2015-01-01"
                vz.first . should_contain "01:02:03"
                vz.second . should_contain "2023-11-30"
                vz.second . should_contain "22:45:44"

        if setup.is_database.not then
            Test.specify "should allow to cast a column of objects to text" <|
                t = table_builder [["X", [My_Type.Value 42, My_Type.Value "X"]]]
                c = t.at "X" . cast Value_Type.Char
                c.value_type.is_text . should_be_true
                c.to_vector . should_equal ["{{{MY Type [x=42] }}}", "{{{MY Type [x=X] }}}"]

        if setup.test_selection.fixed_length_text_columns then
            Test.specify "should allow to cast a text column to fixed-length"  <|
                t = table_builder [["X", ["a", "DEF", "a slightly longer text"]]]
                c = t.at "X" . cast (Value_Type.Char size=3 variable_length=False)
                c.value_type . should_equal (Value_Type.Char size=3 variable_length=False)
                c.to_vector . should_equal ["a  ", "DEF", "a s"]

                # No Conversion_Failure warning here, because we started with text, so it was expected we will trim it if needed.
                Problems.assume_no_problems c

            Test.specify "should allow casting a non-text column to fixed-length text" <|
                t = table_builder [["X", [1, 22, 333]]]
                c = t.at "X" . cast (Value_Type.Char size=3 variable_length=False)
                c.value_type . should_equal (Value_Type.Char size=3 variable_length=False)
                c.to_vector . should_equal ["1  ", "22 ", "333"]
                Problems.assume_no_problems c

            Test.specify "should warn when losing data if the fixed-length text length is too short to fit the data" pending=(if setup.is_database then "Conversion_Failure is not supported in Database yet.") <|
                t = table_builder [["X", [15, 1000000, 123456, 1000, 1000]]]
                c = t.at "X" . cast (Value_Type.Char size=3 variable_length=False)
                c.value_type . should_equal (Value_Type.Char size=3 variable_length=False)
                c.to_vector . should_equal ["15 ", "100", "123"]
                warning = Problems.expect_warning Conversion_Failure c
                warning.affected_rows_count . should_equal 4
                warning.to_display_text . should_contain "['1000000', '123456', '1000' and 1 other case] have a text representation that does not fit the target type"

    Test.group prefix+"Table/Column.cast - numeric" <|
        Test.specify "should allow to cast a boolean column to integer" <|
            t = table_builder [["X", [True, False, True]]]
            c = t.at "X" . cast Value_Type.Integer
            vt = c.value_type
            Test.with_clue "Expecting "+vt.to_display_text+" to be Integer. " <|
                vt.is_integer . should_be_true
            c.to_vector . should_equal [1, 0, 1]

        Test.specify "should allow to cast an integer column to floating point" <|
            t = table_builder [["X", [1, 2, 3]]]
            c = t.at "X" . cast Value_Type.Float
            c.value_type.is_floating_point . should_be_true
            c.to_vector . should_equal [1.0, 2.0, 3.0]

        Test.specify "should allow to cast an integer column to a smaller bit-width and larger bit-width" pending="TODO: #5159" <|
            t = table_builder [["X", [1, 2, 3]]]
            c = t.at "X" . cast (Value_Type.Integer Bits.Bits_16)
            c.value_type . should_equal (Value_Type.Integer Bits.Bits_16)
            c.to_vector . should_equal [1, 2, 3]

            t2 = table_builder [["X", [1, 2, 12000000]]]
            c2 = t2.at "X" . cast (Value_Type.Integer Bits.Bits_16)
            c2.value_type . should_equal (Value_Type.Integer Bits.Bits_16)
            c2.to_vector . should_equal [1, 2, Nothing]
            # This can likely only be checked on in-memory.
            Problems.expect_warning Conversion_Failure c2

            r3 = t2.at "X" . cast (Value_Type.Integer Bits.Bits_16) on_problems=Problem_Behavior.Report_Error
            r3.should_fail_with Conversion_Failure

            # Now converting the 16-bit column `c` into 32 bits.
            c3 = c.cast (Value_Type.Integer Bits.Bits_32)
            c3.value_type . should_equal (Value_Type.Integer Bits.Bits_32)
            c3.to_vector . should_equal [1, 2, 3]

            c4 = c.cast Value_Type.Byte
            c4.value_type . should_equal Value_Type.Byte
            c4.to_vector . should_equal [1, 2, 3]

        Test.specify "should allow to cast a floating point column to integer" <|
            t = table_builder [["X", [1.0001, 2.25, 4.0]]]
            c = t.at "X" . cast Value_Type.Integer
            vt = c.value_type
            Test.with_clue "Expecting "+vt.to_display_text+" to be Integer. " <|
                vt.is_integer . should_be_true
            c.to_vector . should_equal [1, 2, 4]
            # Not reporting Lossy Conversion as converting floats to integers obviously truncates the value.
            Problems.assume_no_problems c

            # The backend may either truncate or round.
            t2 = table_builder [["X", [1.1, 4.9]]]
            c2 = t2.at "X" . cast Value_Type.Integer
            v2 = c2.to_vector
            [[1, 4], [1, 5]] . should_contain v2

        if setup.is_database.not then
            Test.specify "should report Conversion_Failure if converting a huge float to an integer overflows it" <|
                max_long = Java_Long.MAX_VALUE
                too_big_double = (max_long + 1.0) * 1000.0
                (too_big_double > max_long) . should_be_true

                min_long = Java_Long.MIN_VALUE
                too_small_double = (min_long - 1.0) * 1000.0
                (too_small_double < min_long) . should_be_true

                v = [1.0, 2.1, max_long, too_big_double, min_long, too_small_double, 4.0]
                t = table_builder [["X", v]]
                t.at "X" . to_vector . should_equal v
                t.at "X" . value_type . should_equal Value_Type.Float

                c = t.at "X" . cast Value_Type.Integer
                c.value_type . should_equal Value_Type.Integer
                c.to_vector . should_equal [1, 2, max_long, Nothing, min_long, Nothing, 4]
                warning = Problems.expect_warning Conversion_Failure c
                warning.to_display_text . should_contain "could not be converted"
                warning.to_display_text . should_contain too_big_double.to_text

    if supports_dates then
        Test.group prefix+"Table/Column.cast - date/time" <|
            Test.specify "should allow to get the Date part from a Date_Time" <|
                t = table_builder [["X", [Date_Time.new 2015 1 2 3 4 5, Date_Time.new 2023 12 31 23 56 59]]]
                c = t.at "X" . cast Value_Type.Date
                c.value_type . should_equal Value_Type.Date
                c.to_vector . should_equal [Date.new 2015 1 2, Date.new 2023 12 31]

            Test.specify "should allow to get the Time_Of_Day part from a Date_Time" <|
                t = table_builder [["X", [Date_Time.new 2015 1 2 3 4 5, Date_Time.new 2023 12 31 23 56 59]]]
                c = t.at "X" . cast Value_Type.Time
                c.value_type . should_equal Value_Type.Time
                c.to_vector . should_equal [Time_Of_Day.new 3 4 5, Time_Of_Day.new 23 56 59]

            Test.specify "should allow to convert a Date into Date_Time" <|
                day1 = Date.new 2015 1 2
                day2 = Date.new 2023 12 31
                t = table_builder [["X", [day1, day2]]]
                c = t.at "X" . cast Value_Type.Date_Time
                c.value_type . should_equal Value_Type.Date_Time
                vz = c.to_vector
                # We cannot rely on what timezone the backend uses, so we just ensure that the time difference between the two results is consistent.
                diff = Duration.between vz.first vz.second
                expected_diff = Duration.between day1.to_date_time day2.to_date_time
                diff . should_equal expected_diff

    Test.group prefix+"Table/Column.cast - checking invariants" <|
        Test.specify "should report an error for unsupported conversions" <|
            t = table_builder [["X", [1, 2, 3]]]
            r1 = t.at "X" . cast Value_Type.Boolean
            r1.should_fail_with Illegal_Argument

        Test.specify "should report an error pointing to the Table.parse method where applicable" <|
            t = table_builder [["X", ["1", "2", "3"]]]
            r1 = t.at "X" . cast Value_Type.Integer
            r1.should_fail_with Illegal_Argument
            r1.to_display_text . should_contain "`parse` should be used instead"

        Test.specify "should report missing columns" <|
            t = table_builder [["X", [1, 2, 3]], ["Y", [4, 5, 6]]]

            r1 = t.cast ["X", "Z"] Value_Type.Char
            r1.should_fail_with Missing_Input_Columns
            r1.catch.criteria . should_equal ["Z"]

            t2 = t.cast ["X", "Z"] Value_Type.Char error_on_missing_columns=False
            warn = Problems.expect_warning Missing_Input_Columns t2
            warn.criteria . should_equal ["Z"]
            t2.at "X" . to_vector . should_equal ["1", "2", "3"]
            t2.at "Y" . to_vector . should_equal [4, 5, 6]

            t3 = t.cast ["Z"] Value_Type.Char error_on_missing_columns=False
            t3.at "X" . to_vector . should_equal [1, 2, 3]
            t3.at "Y" . to_vector . should_equal [4, 5, 6]

        Test.specify "should work if the first row is NULL" <|
            t = table_builder [["X", [Nothing, 1, 2, 3000]], ["Y", [Nothing, True, False, True]]]

            c1 = t.at "X" . cast Value_Type.Char
            c1.value_type.is_text . should_be_true
            c1.to_vector . should_equal [Nothing, "1", "2", "3000"]

            c2 = t.at "Y" . cast Value_Type.Integer
            c2.value_type . should_equal Value_Type.Integer
            c2.to_vector . should_equal [Nothing, 1, 0, 1]

        Test.specify "should not lose the type after further operations were performed on the result" <|
            t = table_builder [["X", [1, 2, 3000]], ["Y", [True, False, True]]]
            c1 = t.at "X" . cast Value_Type.Char
            c2 = t.at "Y" . cast Value_Type.Integer

            c3 = c1 + '_suffix'
            c3.value_type.is_text . should_be_true
            c3.to_vector . should_equal ["1_suffix", "2_suffix", "3000_suffix"]

            c4 = c2 + 1000
            vt4 = c4.value_type
            Test.with_clue "Expecting "+vt4.to_display_text+" to be Integer. " <|
                vt4.is_integer . should_be_true
            c4.to_vector . should_equal [1001, 1000, 1001]

        Test.specify "should not lose the type after further operations were performed on the result, even if the first row is NULL" <|
            t = table_builder [["X", [Nothing, 1, 2, 3000]], ["Y", [Nothing, True, False, True]]]
            c1 = t.at "X" . cast Value_Type.Char
            c2 = t.at "Y" . cast Value_Type.Integer

            c3 = c1 + '_suffix'
            c3.value_type.is_text . should_be_true
            c3.to_vector . should_equal [Nothing, "1_suffix", "2_suffix", "3000_suffix"]

            c4 = c2 + 1000
            vt4 = c4.value_type
            Test.with_clue "Expecting "+vt4.to_display_text+" to be Integer. " <|
                vt4.is_integer . should_be_true
            c4.to_vector . should_equal [Nothing, 1001, 1000, 1001]

        Test.specify 'Table.cast should cast the columns "in-place" and not reorder them' <|
            t = table_builder [["X", [1, 2, 3000]], ["Y", [4, 5, 6]], ["Z", [7, 8, 9]], ["A", [True, False, True]]]
            t2 = t.cast ["Z", "Y"] Value_Type.Char
            t2.column_names . should_equal ["X", "Y", "Z", "A"]

            t2.at "X" . value_type . is_integer . should_be_true
            t2.at "Y" . value_type . is_text . should_be_true
            t2.at "Z" . value_type . is_text . should_be_true
            t2.at "A" . value_type . is_boolean . should_be_true

            t2.at "X" . to_vector . should_equal [1, 2, 3000]
            t2.at "Y" . to_vector . should_equal ["4", "5", "6"]
            t2.at "Z" . to_vector . should_equal ["7", "8", "9"]
            t2.at "A" . to_vector . should_equal [True, False, True]

        if setup.test_selection.fixed_length_text_columns then
            Test.specify "should preserve the overridden types when materialized" pending="TODO: #5159 needed" <|
                t = table_builder [["X", [1, 2, 100]], ["Y", ["a", "abcdef", "abc"]]]
                t2 = t . cast "X" (Value_Type.Integer Bits.Bits_16) . cast "Y" (Value_Type.Char size=3 variable_length=False)

                t3 = materialize t2
                t3.at "X" . value_type . should_equal (t2.at "X" . value_type)
                t3.at "Y" . value_type . should_equal (Value_Type.Char size=3 variable_length=False)
                t3.at "Y" . to_vector . should_equal ["a  ", "abc", "abc"]

        if setup.is_database.not then
            Test.specify "should allow converting a Mixed type back to a specific type" <|
                t1 = table_builder [["A", [1, Nothing, 2]], ["B", [1.5, Nothing, 2.5]], ["C", [Nothing, "x", "y"]], ["D", [Nothing, True, False]]]
                m1 = t1.cast t1.column_names Value_Type.Mixed
                ["A", "B", "C", "D"].each c->
                    m1.at c . value_type . should_equal Value_Type.Mixed
                m1.at "A" . to_vector . should_equal [1, Nothing, 2]
                c1 = m1.at "A" . cast Value_Type.Integer
                c1.value_type . should_equal Value_Type.Integer
                c1.to_vector . should_equal [1, Nothing, 2]

                m1.at "B" . cast Value_Type.Float . value_type . should_equal Value_Type.Float
                m1.at "C" . cast Value_Type.Char . value_type . should_equal Value_Type.Char
                m1.at "D" . cast Value_Type.Boolean . value_type . should_equal Value_Type.Boolean

                t2 = table_builder [["E", [Date.new 2020, Date.new 2023, Nothing]], ["F", [Time_Of_Day.new 10, Time_Of_Day.new 11, Nothing]], ["G", [Date_Time.new 2022 12 30 13 45, Nothing, Date_Time.new 2020]]]
                m2 = t2.cast t2.column_names Value_Type.Mixed
                ["E", "F", "G"].each c->
                    m2.at c . value_type . should_equal Value_Type.Mixed
                m2.at "E" . cast Value_Type.Date . value_type . should_equal Value_Type.Date
                m2.at "F" . cast Value_Type.Time . value_type . should_equal Value_Type.Time
                m2.at "G" . cast Value_Type.Date_Time . value_type . should_equal Value_Type.Date_Time

            Test.specify "will extract matching values from a mixed column and replace unconvertible ones with Nothing" <|
                t0 = table_builder [["X", ["a", "b", "c", My_Type.Value 42]]]
                t0.at "X" . value_type . should_equal Value_Type.Mixed
                r0 = t0.cast ["X"] Value_Type.Integer
                w0 = Problems.expect_warning Conversion_Failure r0
                w0.affected_rows_count . should_equal 4
                r0.at "X" . to_vector . should_equal [Nothing, Nothing, Nothing, Nothing]

                mixed_values = [1, 2.25, "3", "-45.25", "2.0", "X", Date.new 2020, Date_Time.new 2023 12 15 19 25, Time_Of_Day.new 12 30, My_Type.Value 42, True, Nothing, "True"]
                t2 = table_builder [["super-mix", mixed_values]]
                t2.at "super-mix" . value_type . should_equal Value_Type.Mixed

                nulls n = Vector.fill n Nothing

                c1 = t2.cast "super-mix" Value_Type.Integer . at "super-mix"
                c1.value_type . should_equal Value_Type.Integer
                # Texts are not parsed, since cast does not do Text->numeric.
                c1.to_vector . should_equal ([1, 2] + (nulls 8) + [1, Nothing, Nothing])
                w1 = Problems.expect_warning Conversion_Failure c1
                w1.affected_rows_count . should_equal 9

                c2 = t2.cast "super-mix" Value_Type.Float . at "super-mix"
                c2.value_type . should_equal Value_Type.Float
                c2.to_vector . should_equal ([1.0, 2.25] + (nulls 8) + [1.0, Nothing, Nothing])
                w2 = Problems.expect_warning Conversion_Failure c2
                w2.affected_rows_count . should_equal 9

                c3 = t2.cast "super-mix" Value_Type.Char . at "super-mix"
                c3.value_type . should_equal Value_Type.Char
                date_time_str = Date_Time.new 2023 12 15 19 25 . to_text
                c3.to_vector . should_equal ["1.0", "2.25", "3", "-45.25", "2.0", "X", "2020-01-01", date_time_str, "12:30:00", "{{{MY Type [x=42] }}}", "True", Nothing, "True"]
                Problems.assume_no_problems c3

                if setup.test_selection.fixed_length_text_columns then
                    c3_2 = t2.cast "super-mix" (Value_Type.Char size=2) . at "super-mix"
                    c3_2.value_type . should_equal (Value_Type.Char size=2)
                    c3.to_vector . should_equal ["1.", "2.", "3", "-4", "2.", "X", "20", "20", "12", "{{", "Tr", Nothing, "Tr"]
                    w3_2 = Problems.expect_warning Conversion_Failure c3_2
                    w3_2.affected_rows_count . should_equal 10

                c4 = t2.cast "super-mix" Value_Type.Boolean . at "super-mix"
                c4.value_type . should_equal Value_Type.Boolean
                c4.to_vector . should_equal ((nulls 10) + [True, Nothing, Nothing])
                w4 = Problems.expect_warning Conversion_Failure c4
                w4.affected_rows_count . should_equal 11

                c5 = t2.cast "super-mix" Value_Type.Date . at "super-mix"
                c5.to_vector . should_equal ((nulls 6) + [Date.new 2020, Date.new 2023 12 15, Nothing] + (nulls 4))
                w5 = Problems.expect_warning Conversion_Failure c5
                w5.affected_rows_count . should_equal 6+3+1

                c6 = t2.cast "super-mix" Value_Type.Time . at "super-mix"
                c6.to_vector . should_equal ((nulls 6) + [Nothing, Time_Of_Day.new 19 25, Time_Of_Day.new 12 30] + (nulls 4))
                w6 = Problems.expect_warning Conversion_Failure c6
                w6.affected_rows_count . should_equal 6+3+1

                c7 = t2.cast "super-mix" Value_Type.Date_Time . at "super-mix"
                c7.to_vector . should_equal ((nulls 6) + [Date_Time.new 2020, Date_Time.new 2023 12 15 19 25, Nothing] + (nulls 4))
                w7 = Problems.expect_warning Conversion_Failure c7
                w7.affected_rows_count . should_equal 6+3+1

        if setup.is_database.not then
            Test.specify "should fail if there is no conversion available for a given type" <|
                t = table_builder [["X", [1, 2, 3]]]

                # currently unsupported
                r1 = t.cast "X" Value_Type.Decimal
                r1.should_fail_with Illegal_Argument

                r2 = t.cast "X" Value_Type.Binary
                r2.should_fail_with Illegal_Argument

                # this is not supposed to be supported, but still needs a friendly message
                r3 = t.cast "X" (Value_Type.Unsupported_Data_Type "foobar" "foobar")
                r3.should_fail_with Illegal_Argument

    Test.group prefix+"Simple variant of Table/Column.parse in all backends" <|
        Test.specify "should be able to parse simple integers" <|
            t = table_builder [["X", ["42", "0", "-1"]]]

            c1 = t.at "X" . parse Value_Type.Integer
            c1.value_type.is_integer . should_be_true
            c1.to_vector . should_equal [42, 0, -1]

            c2 = t.parse ["X"] Value_Type.Integer . at "X"
            c2.value_type.is_integer . should_be_true
            c2.to_vector . should_equal [42, 0, -1]

        Test.specify "should be able to parse simple floats" <|
            t = table_builder [["X", ["42.5", "0.25", "-1.0"]]]

            c1 = t.at "X" . parse Value_Type.Float
            c1.value_type.is_floating_point . should_be_true
            c1.to_vector . should_equal [42.5, 0.25, -1.0]

            c2 = t.parse ["X"] Value_Type.Float . at "X"
            c2.value_type.is_floating_point . should_be_true
            c2.to_vector . should_equal [42.5, 0.25, -1.0]

        if supports_dates then
            Test.specify "should be able to parse dates using a default format" <|
                t = table_builder [["X", ["2018-01-01", "2023-12-31"]]]

                c1 = t.at "X" . parse Value_Type.Date
                c1.value_type.should_equal Value_Type.Date
                c1.to_vector . should_equal [Date.new 2018 1 1, Date.new 2023 12 31]

                c2 = t.parse ["X"] Value_Type.Date . at "X"
                c2.value_type.should_equal Value_Type.Date
                c2.to_vector . should_equal [Date.new 2018 1 1, Date.new 2023 12 31]
        if supports_dates.not then
            Test.specify "should report that date parsing is unsupported" <|
                t = table_builder [["X", ["2018-01-01", "2023-12-31"]]]

                r1 = t.at "X" . parse Value_Type.Date
                r1.should_fail_with Unsupported_Database_Operation

                r2 = t.parse ["X"] Value_Type.Date
                r2.should_fail_with Unsupported_Database_Operation

        Test.specify "should be able to parse booleans with default format" <|
            t = table_builder [["X", ["true", "false", "true"]]]

            c1 = t.at "X" . parse Value_Type.Boolean
            c1.value_type.should_equal Value_Type.Boolean
            c1.to_vector . should_equal [True, False, True]

            c2 = t.parse ["X"] Value_Type.Boolean . at "X"
            c2.value_type.should_equal Value_Type.Boolean
            c2.to_vector . should_equal [True, False, True]

        Test.specify "should report missing columns" <|
            t = table_builder [["X", ["42", "0", "-1"]]]

            t1 = t.parse ["X", "Y"] Value_Type.Integer error_on_missing_columns=False
            t1.at "X" . to_vector . should_equal [42, 0, -1]
            t1.at "X" . value_type . is_integer . should_be_true
            Problems.expect_warning Missing_Input_Columns t1

            t2 = t.parse ["Y"] Value_Type.Integer error_on_missing_columns=False
            Problems.expect_warning Missing_Input_Columns t2
            t2.at "X" . to_vector . should_equal ["42", "0", "-1"]

            r3 = t.parse ["X", "Y"] Value_Type.Integer
            r3.should_fail_with Missing_Input_Columns
            r3.catch.criteria . should_equal ["Y"]
