from Standard.Base import all

import Standard.Database.Internal.Replace_Params.Replace_Params

import project.Common_Table_Operations.Add_Row_Number_Spec
import project.Common_Table_Operations.Aggregate_Spec
import project.Common_Table_Operations.Column_Name_Edge_Cases_Spec
import project.Common_Table_Operations.Column_Operations_Spec
import project.Common_Table_Operations.Core_Spec
import project.Common_Table_Operations.Cross_Tab_Spec
import project.Common_Table_Operations.Conversion_Spec
import project.Common_Table_Operations.Date_Time_Spec
import project.Common_Table_Operations.Derived_Columns_Spec
import project.Common_Table_Operations.Distinct_Spec
import project.Common_Table_Operations.Expression_Spec
import project.Common_Table_Operations.Filter_Spec
import project.Common_Table_Operations.Integration_Tests
import project.Common_Table_Operations.Join.Join_Spec
import project.Common_Table_Operations.Join.Cross_Join_Spec
import project.Common_Table_Operations.Join.Zip_Spec
import project.Common_Table_Operations.Join.Union_Spec
import project.Common_Table_Operations.Join.Lookup_Spec
import project.Common_Table_Operations.Map_Spec
import project.Common_Table_Operations.Missing_Values_Spec
import project.Common_Table_Operations.Nothing_Spec
import project.Common_Table_Operations.Order_By_Spec
import project.Common_Table_Operations.Select_Columns_Spec
import project.Common_Table_Operations.Take_Drop_Spec
import project.Common_Table_Operations.Temp_Column_Spec
import project.Common_Table_Operations.Transpose_Spec

from project.Common_Table_Operations.Util import run_default_backend

type Test_Setup
    ## A common test configuration for tests of shared operations on the Table
       API.

       Arguments:
       - prefix: A name to prepend to test groups to identify the tested
         backend.
       - table_fn: A function that takes Nothing and returns a table using the
         tested backend containing data from `data/data.csv`.
       - empty_table_fn: A function that takes Nothing and returns an empty
         table using the tested backend.
       - table_builder: A function used to build a table using the tested
         backend from a vector of columns represented as pairs of name and
         vector of values. The second optional argument is connection or Nothing.
         An example signature of the method is `table_builder cols connection=Nothing`.
       - materialize: A helper function which materializes a table from the
         tested backend as an in-memory table. Used to easily inspect results of
         a particular query/operation.
       - is_database: Specifies if the tests are run on a database-backed
         backend.
       - test_selection: A selection of which suites should be run. Can be used
         to skip checks for backends which do not support particular features.
       - aggregate_test_selection: A selection of which aggregate test suites
         should be run. Can be used to skip checks for backends which do not
         support particular features.
       - create_connection_func: A function that takes Nothing and creates a related
         database connection or Nothing for in-memory tests.
    Config prefix table_fn empty_table_fn (table_builder : (Vector Any -> (Any|Nothing)) -> Any) materialize is_database test_selection aggregate_test_selection create_connection_func

    ## Specifies if the given Table backend supports custom Enso types.

       Currently, only the in-memory backend does.
    supports_custom_objects : Boolean
    supports_custom_objects self = self.is_database.not

type Test_Selection
    ## The configuration specifying what features are supported by a given
       backend, driving what kind of test suites should be enabled.

       Arguments:
       - supports_case_sensitive_columns: Specifies if the backend supports
         case-sensitive column names. If `False`, the backend will match column
         names in a case insensitive way, so that "Foo" and "foo" will refer to
         the same column.
       - order_by: Specifies if the backend supports ordering operations.
       - natural_ordering: Specifies if the backend supports natural ordering
         operations.
       - case_insensitive_ordering: Specifies if the backend supports case
         insensitive ordering.
       - order_by_unicode_normalization_by_default: Specifies if the backend
         supports unicode normalization in its default ordering.
       - case_insensitive_ascii_only:
       - allows_mixed_type_comparisons: Specifies if mixed operations comparing
         mixed types are allowed by a given backend. Some backends will allow
         such comparisons, when mixed type storage is allowed or by coercing to
         the target type; others will fail with a type error.
       - supports_unicode_normalization: Specifies if the backend compares
         strings taking Unicode Normalization into account, i.e. whether
         's\u0301' is considered equal to 'Å›'.
       - is_nan_and_nothing_distinct: Specifies if the backend is able to
         distinguish between a decimal NaN value and a missing value (Enso's
         Nothing, or SQL's NULL). If `False`, NaN is treated as a NULL.
       - distinct_returns_first_row_from_group_if_ordered: If `order_by` was
         applied before, the distinct operation will return the first row from
         each group. Guaranteed in the in-memory backend, but may not be
         supported by all databases.
       - date_time: Specifies if the backend supports date/time operations.
       - fixed_length_text_columns: Specifies if the backend supports fixed
         length text columns.
       - length_restricted_text_columns: Specifies if the backend supports 
         length restrictions for text columns.
       - removes_trailing_whitespace_casting_from_char_to_varchar: if
         SELECT concat('X', CAST(CAST('   ' AS CHAR(3)) AS VARCHAR(3)), 'X')
         returns XX then this should be set to True
       - different_size_integer_types: Specifies if the backend supports
         integer types of various sizes, like 16-bit or 32-bit integers.
       - supports_8bit_integer: Specifies if the backend supports 8-bit
         integers.
       - supports_decimal_type: Specifies if the backend supports the `Decimal`
         high-precision type.
       - supports_time_duration: Specifies if the backend supports a
         `Duration`/`Period` type.
       - supports_nanoseconds_in_time: Specifies if the backend supports
         nanosecond precision in time values.
       - supports_mixed_columns: Specifies if the backend supports mixed-type
         columns.
       - supported_replace_params: Specifies the possible values of
         Replace_Params that a backend supports.
    Config supports_case_sensitive_columns=True order_by=True natural_ordering=False case_insensitive_ordering=True order_by_unicode_normalization_by_default=False case_insensitive_ascii_only=False allows_mixed_type_comparisons=True supports_unicode_normalization=False is_nan_and_nothing_distinct=True distinct_returns_first_row_from_group_if_ordered=True date_time=True fixed_length_text_columns=False length_restricted_text_columns=True removes_trailing_whitespace_casting_from_char_to_varchar=False different_size_integer_types=True supports_8bit_integer=False supports_decimal_type=False supports_time_duration=False supports_nanoseconds_in_time=False supports_mixed_columns=False supported_replace_params=Nothing

add_specs suite_builder setup =
    Core_Spec.add_specs suite_builder setup
    Select_Columns_Spec.add_specs suite_builder setup
    Column_Name_Edge_Cases_Spec.add_specs suite_builder setup
    Column_Operations_Spec.add_specs suite_builder setup
    Derived_Columns_Spec.add_specs suite_builder setup
    Date_Time_Spec.add_specs suite_builder setup
    Conversion_Spec.add_specs suite_builder setup
    Aggregate_Spec.add_specs suite_builder setup
    Filter_Spec.add_specs suite_builder setup
    Map_Spec.add_specs suite_builder setup
    Missing_Values_Spec.add_specs suite_builder setup
    Order_By_Spec.add_specs suite_builder setup
    Take_Drop_Spec.add_specs suite_builder setup
    Expression_Spec.add_specs suite_builder detailed=False setup
    Join_Spec.add_specs suite_builder setup
    Cross_Join_Spec.add_specs suite_builder setup
    Zip_Spec.add_specs suite_builder setup
    Union_Spec.add_specs suite_builder setup
    Lookup_Spec.add_specs suite_builder setup
    Distinct_Spec.add_specs suite_builder setup
    Cross_Tab_Spec.add_specs suite_builder setup
    Transpose_Spec.add_specs suite_builder setup
    Add_Row_Number_Spec.add_specs suite_builder setup
    Integration_Tests.add_specs suite_builder setup
    Temp_Column_Spec.add_specs suite_builder setup
    Nothing_Spec.add_specs suite_builder setup

main = run_default_backend add_specs
