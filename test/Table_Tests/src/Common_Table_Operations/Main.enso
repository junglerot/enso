from Standard.Base import all

import project.Common_Table_Operations.Add_Row_Number_Spec
import project.Common_Table_Operations.Aggregate_Spec
import project.Common_Table_Operations.Column_Operations_Spec
import project.Common_Table_Operations.Core_Spec
import project.Common_Table_Operations.Cross_Tab_Spec
import project.Common_Table_Operations.Conversion_Spec
import project.Common_Table_Operations.Date_Time_Spec
import project.Common_Table_Operations.Distinct_Spec
import project.Common_Table_Operations.Expression_Spec
import project.Common_Table_Operations.Filter_Spec
import project.Common_Table_Operations.Integration_Tests
import project.Common_Table_Operations.Join.Join_Spec
import project.Common_Table_Operations.Join.Cross_Join_Spec
import project.Common_Table_Operations.Join.Zip_Spec
import project.Common_Table_Operations.Join.Union_Spec
import project.Common_Table_Operations.Missing_Values_Spec
import project.Common_Table_Operations.Order_By_Spec
import project.Common_Table_Operations.Select_Columns_Spec
import project.Common_Table_Operations.Take_Drop_Spec
import project.Common_Table_Operations.Transpose_Spec

from project.Common_Table_Operations.Util import run_default_backend

type Test_Setup
    ## A common test configuration for tests of shared operations on the Table
       API.

       Arguments:
       - prefix: A name to prepend to test groups to identify the tested
         backend.
       - table: A table using the tested backend containing data from
         `data/data.csv`.
       - empty_table: An empty table using the tested backend.
       - table_builder: A function used to build a table using the tested
         backend from a vector of columns represented as pairs of name and
         vector of values.
       - materialize: A helper function which materializes a table from the
         tested backend as an in-memory table. Used to easily inspect results of
         a particular query/operation.
       - is_database: Specifies if the tests are run on a database-backed
         backend.
       - test_selection: A selection of which suites should be run. Can be used
         to skip checks for backends which do not support particular features.
       - aggregate_test_selection: A selection of which aggregate test suites
         should be run. Can be used to skip checks for backends which do not
         support particular features.
       - connection: A related database connection or Nothing for in-memory
         tests.
    Config prefix table empty_table table_builder materialize is_database test_selection aggregate_test_selection connection

    ## Specifies if the given Table backend supports custom Enso types.

       Currently, only the in-memory backend does.
    supports_custom_objects : Boolean
    supports_custom_objects self = self.is_database.not

type Test_Selection
    ## The configuration specifying what features are supported by a given
       backend, driving what kind of test suites should be enabled.

       Arguments:
       - supports_case_sensitive_columns: Specifies if the backend supports
         case-sensitive column names. If `False`, the backend will match column
         names in a case insensitive way, so that "Foo" and "foo" will refer to
         the same column.
       - order_by: Specifies if the backend supports ordering operations.
       - natural_ordering: Specifies if the backend supports natural ordering
         operations.
       - case_insensitive_ordering: Specifies if the backend supports case
         insensitive ordering.
       - order_by_unicode_normalization_by_default: Specifies if the backend
         supports unicode normalization in its default ordering.
       - case_insensitive_ascii_only:
       - take_drop: Specifies if the backend supports take/drop operations.
       - allows_mixed_type_comparisons: Specifies if mixed operations comparing
         mixed types are allowed by a given backend. Some backends will allow
         such comparisons, when mixed type storage is allowed or by coercing to
         the target type; others will fail with a type error.
       - supports_unicode_normalization: Specifies if the backend compares
         strings taking Unicode Normalization into account, i.e. whether
         's\u0301' is considered equal to 'Å›'.
       - is_nan_and_nothing_distinct: Specifies if the backend is able to
         distinguish between a decimal NaN value and a missing value (Enso's
         Nothing, or SQL's NULL). If `False`, NaN is treated as a NULL.
       - distinct_returns_first_row_from_group_if_ordered: If `order_by` was
         applied before, the distinct operation will return the first row from
         each group. Guaranteed in the in-memory backend, but may not be
         supported by all databases.
       - date_time: Specifies if the backend supports date/time operations.
       - fixed_length_text_columns: Specifies if the backend supports fixed
         length text columns.
       - supports_decimal_type: Specifies if the backend supports the `Decimal`
         high-precision type.
       - supports_time_duration: Specifies if the backend supports a
         `Duration`/`Period` type.
       - supports_nanoseconds_in_time: Specifies if the backend supports
         nanosecond precision in time values.
    Config supports_case_sensitive_columns=True order_by=True natural_ordering=False case_insensitive_ordering=True order_by_unicode_normalization_by_default=False case_insensitive_ascii_only=False take_drop=True allows_mixed_type_comparisons=True supports_unicode_normalization=False is_nan_and_nothing_distinct=True distinct_returns_first_row_from_group_if_ordered=True date_time=True fixed_length_text_columns=False supports_decimal_type=False supports_time_duration=False supports_nanoseconds_in_time=False

spec setup =
    Core_Spec.spec setup
    Select_Columns_Spec.spec setup
    Column_Operations_Spec.spec setup
    Date_Time_Spec.spec setup
    Conversion_Spec.spec setup
    Aggregate_Spec.spec setup
    Filter_Spec.spec setup
    Missing_Values_Spec.spec setup
    Order_By_Spec.spec setup
    Take_Drop_Spec.spec setup
    Expression_Spec.spec detailed=False setup
    Join_Spec.spec setup
    Cross_Join_Spec.spec setup
    Zip_Spec.spec setup
    Union_Spec.spec setup
    Distinct_Spec.spec setup
    Cross_Tab_Spec.spec setup
    Transpose_Spec.spec setup
    Add_Row_Number_Spec.spec setup
    Integration_Tests.spec setup

main = run_default_backend spec
