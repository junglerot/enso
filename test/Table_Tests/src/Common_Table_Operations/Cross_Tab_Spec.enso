from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Table.Data.Aggregate_Column.Aggregate_Column import Average, Count, Group_By, Sum, Concatenate
import Standard.Table.Data.Expression.Expression_Error
from Standard.Table.Errors import all

from Standard.Database.Errors import SQL_Error

from Standard.Test import Test, Problems
import Standard.Test.Extensions

from project.Common_Table_Operations.Util import run_default_backend

main = run_default_backend spec

spec setup =
    prefix = setup.prefix
    table_builder = setup.table_builder
    db_todo = if setup.is_database.not then Nothing else "Table.transpose is not implemented yet in Database."
    Test.group prefix+"Table.cross_tab" pending=db_todo <|
        table = table_builder [["Key", ["x", "x", "x", "x", "y", "y", "y", "z", "z"]], ["Value", [1, 2, 3, 4, 5, 6, 7, 8, 9]]]
        table2 = table_builder [["Group", ["A","B","A","B","A","B","A","B","A"]], ["Key", ["x", "x", "x", "x", "y", "y", "y", "z", "z"]], ["Value", [1, 2, 3, 4, 5, 6, 7, 8, 9]]]
        Test.specify "should cross_tab counts by default using first column as names" <|
            t1 = table.cross_tab
            t1.column_names . should_equal ["x", "y", "z"]
            t1.row_count . should_equal 1
            t1.at "x" . to_vector . should_equal [4]
            t1.at "y" . to_vector . should_equal [3]
            t1.at "z" . to_vector . should_equal [2]

        Test.specify "should allow a different aggregate" <|
            t1 = table.cross_tab values=[Sum "Value"]
            t1.column_names . should_equal ["x", "y", "z"]
            t1.row_count . should_equal 1
            t1.at "x" . to_vector . should_equal [10]
            t1.at "y" . to_vector . should_equal [18]
            t1.at "z" . to_vector . should_equal [17]

        Test.specify "should allow a custom expression for the aggregate" <|
            t1 = table.cross_tab values=[Sum "[Value]*[Value]"]
            t1.column_names . should_equal ["x", "y", "z"]
            t1.row_count . should_equal 1
            t1.at "x" . to_vector . should_equal [30]
            t1.at "y" . to_vector . should_equal [110]
            t1.at "z" . to_vector . should_equal [145]

        Test.specify "should allow a chosen column" <|
            t = table_builder [["Group", ["A","B","A","B","A","B","A","B","A"]], ["Species", ["x", "x", "x", "x", "y", "y", "y", "z", "z"]], ["Value", [1, 2, 3, 4, 5, 6, 7, 8, 9]]]
            t1 = t.cross_tab [] "Species"
            t1.column_names . should_equal ["x", "y", "z"]
            t1.row_count . should_equal 1
            t1.at "x" . to_vector . should_equal [4]
            t1.at "y" . to_vector . should_equal [3]
            t1.at "z" . to_vector . should_equal [2]

            t2 = t.cross_tab [] 1
            t2.column_names . should_equal ["x", "y", "z"]
            t2.row_count . should_equal 1
            t2.at "x" . to_vector . should_equal [4]
            t2.at "y" . to_vector . should_equal [3]
            t2.at "z" . to_vector . should_equal [2]

        Test.specify "should allow a grouping" <|
            t1 = table2.cross_tab ["Group"] "Key"
            t1.column_names . should_equal ["Group", "x", "y", "z"]
            t1.row_count . should_equal 2
            t1.at "Group" . to_vector . should_equal ["A", "B"]
            t1.at "x" . to_vector . should_equal [2, 2]
            t1.at "y" . to_vector . should_equal [2, 1]
            t1.at "z" . to_vector . should_equal [1, 1]

        Test.specify "should allow a grouping by Aggregate_Column" <|
            t1 = table2.cross_tab [Group_By "Group"] "Key"
            t1.column_names . should_equal ["Group", "x", "y", "z"]
            t1.row_count . should_equal 2
            t1.at "Group" . to_vector . should_equal ["A", "B"]
            t1.at "x" . to_vector . should_equal [2, 2]
            t1.at "y" . to_vector . should_equal [2, 1]
            t1.at "z" . to_vector . should_equal [1, 1]

            table2.cross_tab [Sum "Group"] "Key" . should_fail_with Illegal_Argument

        Test.specify "should allow a grouping by text" <|
            t1 = table2.cross_tab "Group" "Key"
            t1.column_names . should_equal ["Group", "x", "y", "z"]
            t1.row_count . should_equal 2
            t1.at "Group" . to_vector . should_equal ["A", "B"]
            t1.at "x" . to_vector . should_equal [2, 2]
            t1.at "y" . to_vector . should_equal [2, 1]
            t1.at "z" . to_vector . should_equal [1, 1]

            t2 = table2.cross_tab ["Group", "Group"] "Key"
            t2.column_names . should_equal ["Group", "x", "y", "z"]

        Test.specify "should allow multiple values aggregates" <|
            t1 = table.cross_tab values=[Count, Sum "Value"]
            t1.column_names . should_equal ["x Count", "x Sum", "y Count", "y Sum", "z Count", "z Sum"]
            t1.row_count . should_equal 1
            t1.at "x Count" . to_vector . should_equal [4]
            t1.at "x Sum" . to_vector . should_equal [10]
            t1.at "y Count" . to_vector . should_equal [3]
            t1.at "y Sum" . to_vector . should_equal [18]
            t1.at "z Count" . to_vector . should_equal [2]
            t1.at "z Sum" . to_vector . should_equal [17]

        Test.specify "should fail if name_field is not found" <|
            err1 = table.cross_tab [] "Name"
            err1.should_fail_with Missing_Input_Columns
            err1.catch.criteria . should_equal ["Name"]

            err2 = table.cross_tab [] 42
            err2.should_fail_with Missing_Input_Columns
            err2.catch.criteria . should_equal [42]

        Test.specify "should fail if group-by contains missing columns" <|
            err1 = table2.cross_tab ["Group", "Nonexistent Group", "OTHER"] "Key"
            err1.should_fail_with Missing_Input_Columns
            err1.catch.criteria . should_equal ["Nonexistent Group", "OTHER"]

            err2 = table2.cross_tab [0, 42] "Key"
            err2.should_fail_with Missing_Input_Columns
            err2.catch.criteria . should_equal [42]

        Test.specify "should fail if aggregate values contain missing columns" <|
            err1 = table.cross_tab values=[Count, Sum "Nonexistent Value", Sum "Value", Sum "OTHER"]
            err1.should_fail_with Invalid_Aggregate_Column
            err1.catch.name . should_equal "Nonexistent Value"

            err2 = table.cross_tab values=[Count, Sum "Nonexistent Value", Sum "Value", Sum 42]
            err2.should_fail_with Missing_Input_Columns
            err2.catch.criteria . should_equal [42]

        Test.specify "should fail if aggregate values contain invalid expressions" <|
            err1 = table.cross_tab values=[Sum "[MISSING]*10"]
            err1.should_fail_with Invalid_Aggregate_Column
            err1.catch.name . should_equal "[MISSING]*10"
            err1.catch.expression_error . should_equal (No_Such_Column.Error "MISSING")

            err2 = table.cross_tab values=[Sum "[[["]
            err2.should_fail_with Invalid_Aggregate_Column
            err2.catch.name . should_equal "[[["
            err2.catch.expression_error . should_be_a Expression_Error.Syntax_Error

        Test.specify "should not allow Group_By for values" <|
            err1 = table.cross_tab [] "Key" values=[Count, Group_By "Value"] on_problems=Problem_Behavior.Ignore
            err1.should_fail_with Illegal_Argument

        Test.specify "should gracefully handle duplicate aggregate names" <|
            action = table.cross_tab [] "Key" values=[Count new_name="Agg1", Sum "Value" new_name="Agg1"] on_problems=_
            tester table =
                table.column_names . should_equal ["x Agg1", "x Agg1 1", "y Agg1", "y Agg1 1", "z Agg1", "z Agg1 1"]
            problems = [Duplicate_Output_Column_Names.Error ["x Agg1", "y Agg1", "z Agg1"]]
            Problems.test_problem_handling action problems tester

            table3 = table2.rename_columns (Map.from_vector [["Group", "x"]])
            action3 = table3.cross_tab ["x"] "Key" on_problems=_
            tester3 table =
                table.column_names . should_equal ["x", "x 1", "y", "z"]
            problems3 = [Duplicate_Output_Column_Names.Error ["x"]]
            Problems.test_problem_handling action3 problems3 tester3

        Test.specify "should allow non-Text columns to be used as name" <|
            table = table_builder [["Key", [1, 1, 1, 2, 2, 1, 3, 3, 1]], ["Value", [1, 2, 3, 4, 5, 6, 7, 8, 9]]]
            t1 = table.cross_tab
            t1.column_names . should_equal ["1", "2", "3"]
            t1.row_count . should_equal 1
            t1.at "1" . to_vector . should_equal [5]
            t1.at "2" . to_vector . should_equal [2]
            t1.at "3" . to_vector . should_equal [2]

        Test.specify "should correctly handle uncommon characters in fields becoming column names" <|
            table = table_builder [["Key", ["ðŸ’¡ðŸŽ‰ðŸŒ»", "Ä…Ä™Åº", "Ä…Ä™Åº", '\n\n', "ðŸ˜Š", "ðŸ˜Š", "ðŸŒ»", "ðŸ˜Š", "ðŸŒ»", " "]], ["Value", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]
            t1 = table.cross_tab . sort_columns
            t1.column_names . should_equal ['\n\n', ' ', 'Ä…Ä™Åº', 'ðŸŒ»', 'ðŸ’¡ðŸŽ‰ðŸŒ»', 'ðŸ˜Š']
            t1.row_count . should_equal 1
            t1.at "ðŸ’¡ðŸŽ‰ðŸŒ»" . to_vector . should_equal [1]
            t1.at "ðŸŒ»" . to_vector . should_equal [2]
            t1.at "ðŸ˜Š" . to_vector . should_equal [3]
            t1.at "Ä…Ä™Åº" . to_vector . should_equal [2]
            t1.at '\n\n' . to_vector . should_equal [1]
            t1.at " " . to_vector . should_equal [1]

        Test.specify "should report Floating_Point_Equality if the group or name column is floating point" <|
            t = table_builder [["X", [1.5, 2.5, 2.5, 1.5]], ["Y", [1, 2, 3, 4]], ["Z", ["a", "b", "b", "b"]]]
            t1 = t.cross_tab
            Problems.expect_warning Floating_Point_Equality t1
            t1.column_names . should_equal ["1.5", "2.5"]
            t1.row_count . should_equal 1
            t1.at "1.5" . to_vector . should_equal [2]
            t1.at "2.5" . to_vector . should_equal [2]

            t2 = t.cross_tab ["X"] "Z"
            Problems.expect_warning Floating_Point_Equality t2
            t2.column_names . should_equal ["X", "a", "b"]
            t2.row_count . should_equal 2
            t2.at "X" . to_vector . should_equal [1.5, 2.5]
            t2.at "a" . to_vector . should_equal [1, 0]
            t2.at "b" . to_vector . should_equal [1, 2]

        Test.specify "should check types of aggregates" <|
            t = table_builder [["Key", ["a", "a", "b", "b"]], ["ints", [1, 2, 3, 4]], ["texts", ["a", "b", "c", "d"]]]

            [Problem_Behavior.Report_Error, Problem_Behavior.Report_Warning, Problem_Behavior.Ignore].each pb-> Test.with_clue "Problem_Behavior="+pb.to_text+" " <|
                t1 = t.cross_tab [] "Key" values=[Average "texts"] on_problems=pb
                t1.should_fail_with Invalid_Value_Type
                t2 = t.cross_tab [] "Key" values=[Sum "texts"] on_problems=pb
                t2.should_fail_with Invalid_Value_Type
                t3 = t.cross_tab [] "Key" values=[Concatenate "ints"] on_problems=pb
                t3.should_fail_with Invalid_Value_Type

        Test.specify "should return predictable types" <|
            table = table_builder [["Text", ["a", "b"]], ["Int", [1, 2]], ["Float", [1.1, 2.2]]]
            t1 = table.cross_tab ["Int"] "Text"
            t1.column_names . should_equal ["Int", "a", "b"]
            t1.at "Int" . value_type . is_integer . should_be_true
            t1.at "a" . value_type . is_integer . should_be_true
            t1.at "b" . value_type . is_integer . should_be_true

            t2 = table.cross_tab [] "Int" values=[Average "Float", Concatenate "Text"] . sort_columns
            t2.column_names . should_equal ["1 Average Float", "1 Concatenate Text", "2 Average Float", "2 Concatenate Text"]
            t2.at "1 Average Float" . value_type . is_floating_point . should_be_true
            t2.at "1 Concatenate Text" . value_type . is_text . should_be_true
            t2.at "2 Average Float" . value_type . is_floating_point . should_be_true
            t2.at "2 Concatenate Text" . value_type . is_text . should_be_true

        Test.specify "should fail gracefully if an effective column name would contain invalid characters" <|
            table = table_builder [["Key", ['x', 'x', 'y\0', '\0', 'y\0', 'z', 'z', 'z', 'z']], ["Value", [1, 2, 3, 4, 5, 6, 7, 8, 9]]]
            r1 = table.cross_tab
            r1.should_fail_with Illegal_Argument
            r1.catch.to_display_text . should_contain "must not contain the NUL character"

            r2 = table2.cross_tab [] "Key" values=[Average "Value" new_name='x\0']
            r2.print
            r2.should_fail_with Illegal_Argument
            r2.catch.to_display_text . should_contain "must not contain the NUL character"

        Test.specify "should fail gracefully if an effective column name would be empty or null" <|
            table = table_builder [["Key", [" ", "x", "x", "x", "", "", "", "y", "y"]], ["Value", [1, 2, 3, 4, 5, 6, 7, 8, 9]]]
            r1 = table.cross_tab
            r1.should_fail_with Illegal_Argument
            r1.catch.to_display_text . should_contain "cannot be empty"

            table2 = table_builder [["Key", [" ", "x", "x", "x", Nothing, Nothing, Nothing, "y", "y"]], ["Value", [1, 2, 3, 4, 5, 6, 7, 8, 9]]]
            r2 = table2.cross_tab
            r2 . should_fail_with Illegal_Argument
            r2.catch.to_display_text . should_contain "cannot be Nothing"
