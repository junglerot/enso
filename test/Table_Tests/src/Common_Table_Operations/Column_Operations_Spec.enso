from Standard.Base import all
import Standard.Base.Errors.Common.Arithmetic_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Table.Errors import all

from Standard.Test import Test, Problems
import Standard.Test.Extensions

from project.Common_Table_Operations.Util import run_default_backend

main = run_default_backend spec

spec setup =
    prefix = setup.prefix
    table_builder = setup.table_builder
    Test.group prefix+"Basic Column Operations" <|
        Test.specify "iif" <|
            t = table_builder [["X", [True, False, Nothing, True]]]
            t.at "X" . iif 22 33 . to_vector . should_equal [22, 33, Nothing, 22]

        Test.specify "iif on Columns" pending="Not implemented yet." Nothing

    t2 = table_builder [["x", [1, 4, 5, Nothing]], ["y", [2, 3, 5, Nothing]], ["b", [False, False, True, Nothing]]]
    x = t2.at "x"
    y = t2.at "y"
    b = t2.at "b"
    Test.group prefix+"Column Operations - Equality & Null Handling" <|
        Test.specify "should provide basic == and != comparisons" pending="TODO figure out proper null handling" <|
            (x == y).to_vector . should_equal [False, False, True, Nothing]
            (x != y).to_vector . should_equal [True, True, False, Nothing]
            (x == 4).to_vector . should_equal [False, True, False, Nothing]
            (x == Nothing).to_vector . should_equal [Nothing, Nothing, Nothing, Nothing]

        Test.specify "should allow to check which values are null"
            x.is_nothing.to_vector . should_equal [False, False, False, True]
            (x + Nothing).is_nothing.to_vector . should_equal [True, True, True, True]

        Test.specify "Column equality should handle nulls correctly" pending="TODO" <|
            a = [2, 3, Nothing, Nothing]
            b = [2, 4, Nothing, 5]
            r = [True, False, True, False]
            a.zip b (==) . should_equal r

            t = table_builder [["A", a], ["B", b]]
            ((t.at "A") == (t.at "B")) . to_vector . should_equal r

        Test.specify "equals_ignore_case for ASCII strings" <|
            # TODO test for nothing too
            x = ["a", "B", "c", "DEF"]
            y = ["aa", "b", "c", "dEf"]
            r = [False, True, True, True]

            x.zip y (.equals_ignore_case) . should_equal r

            t = table_builder [["X", x], ["Y", y]]
            (t.at "X") . equals_ignore_case (t.at "Y") . to_vector . should_equal r

        Test.specify "Text Column equality (including case-insensitive) should handle nulls correctly" pending="TODO" <|
            a = ["Z", "a", "b", Nothing, Nothing]
            b = ["Z", "A", "C", Nothing, "d"]
            r_sensitive   = [True, False, False, True, False]
            r_insensitive = [True, True,  False, True, False]

            a.zip b (==) . should_equal r_sensitive
            a.zip b (x-> y-> if x.is_nothing || y.is_nothing then x == y else x.equals_ignore_case y) . should_equal r_insensitive

            t = table_builder [["A", a], ["B", b]]
            ((t.at "A") == (t.at "B")) . to_vector . should_equal r_sensitive
            ((t.at "A").equals_ignore_case (t.at "B")) . to_vector . should_equal r_insensitive

        Test.specify "should allow to fill empty/nothing values" <|
            t = table_builder [["X", ["a", "", " ", Nothing, "b"]]]

            c1 = t.at "X" . fill_nothing "NA"
            c1.to_vector . should_equal ["a", "", " ", "NA", "b"]

            c2 = t.at "X" . fill_empty "<empty>"
            c2.to_vector . should_equal ["a", "<empty>", " ", "<empty>", "b"]

        Test.specify "should report a warning if checking equality on floating point columns" <|
            t = table_builder [["X", [1.0, 2.1, 3.2]], ["Y", [1.0, 2.0, 3.2]]]

            r1 = (t.at "X") == (t.at "Y")
            r1.to_vector . should_equal [True, False, True]
            Problems.expect_warning Floating_Point_Equality r1

            r2 = (t.at "X") != (t.at "Y")
            r2.to_vector . should_equal [False, True, False]
            Problems.expect_warning Floating_Point_Equality r2

    Test.group prefix+"Arithmetic and Boolean Column Operations" <|
        Test.specify "should allow basic operations" <|
            (x + y).to_vector . should_equal [3, 7, 10, Nothing]
            (x - y).to_vector . should_equal [-1, 1, 0, Nothing]
            (x * y).to_vector . should_equal [2, 12, 25, Nothing]
            (x < y).to_vector . should_equal [True, False, False, Nothing]
            (x <= y).to_vector . should_equal [True, False, True, Nothing]
            (x > y).to_vector . should_equal (x <= y).not.to_vector
            (x >= y).to_vector . should_equal (x < y).not.to_vector
            #(((x < y) || (x == y)) == (x <= y)).to_vector . should_equal [True, True, True, Nothing]
            (b || b.not).to_vector . should_equal [True, True, True, Nothing]

        Test.specify "should allow combining a column with a scalar" pending="TODO null handling" <|
            (x + 100).to_vector . should_equal [101, 104, 105, Nothing]
            (x * 10).to_vector . should_equal [10, 40, 50, Nothing]
            (x - 10).to_vector . should_equal [-9, -6, -5, Nothing]
            (x < 1000).to_vector . should_equal [True, True, True, Nothing]
            (b || False).to_vector . should_equal [False, False, True, Nothing]
            (b || True).to_vector . should_equal [True, True, True, True]
            (b && False).to_vector . should_equal [False, False, False, False]

        Test.specify "division should be aligned with the Enso arithmetic" <|
            a = [1, 5, 10, 100]
            b = [2, 2, 4, 5]
            r = [0.5, 2.5, 2.5, 20.0]
            a.zip b (/) . should_equal r

            t = table_builder [["A", a], ["B", b]]
            r2 = (t.at "A") / (t.at "B")
            r2 . to_vector . should_equal r

            r3 = (t.at "A") / 2
            r3 . to_vector . should_equal [0.5, 2.5, 5.0, 50.0]

        db_pending = if setup.is_database then "Arithmetic error handling is currently not implemented for the Database backend."
        Test.specify "should allow division by 0 and report warnings" pending=db_pending <|
            t = table_builder [["a", [3, 1, 0]], ["b", [2, 0, 0]], ["c", [1.5, 1.5, 0.0]], ["d", [1.5, 0.0, 0.0]]]
            a = t.at "a"
            b = t.at "b"
            c = t.at "c"
            d = t.at "d"

            has_div_warnings location expected_rows result =
                Test.with_clue location <|
                    warnings = Problems.get_attached_warnings result
                    msg = "Division by zero (at rows " + expected_rows.to_text + ")."
                    warnings.first . should_equal (Arithmetic_Error.Error msg)

            r1 = a / b
            r1.to_vector.to_text . should_equal "[1.5, Infinity, NaN]"
            has_div_warnings "[a] / [b]" [1, 2] r1
            r2 = c / d
            r2.to_vector.to_text . should_equal "[1.0, Infinity, NaN]"
            has_div_warnings "[c] / [d]" [1, 2] r2
            r3 = a / d
            r3.to_vector.to_text . should_equal "[2.0, Infinity, NaN]"
            has_div_warnings "[a] / [d]" [1, 2] r3
            r4 = a / 0
            r4.to_vector.to_text . should_equal "[Infinity, Infinity, NaN]"
            has_div_warnings "[a] / 0" [0, 1, 2] r4
            r5 = c / 0
            r5.to_vector.to_text . should_equal "[Infinity, Infinity, NaN]"
            has_div_warnings "[c] / 0" [0, 1, 2] r5

            r6 = a % b
            r6.to_vector.to_text . should_equal "[1, Nothing, Nothing]"
            has_div_warnings "[a] % [b]" [1, 2] r6
            r7 = c % d
            r7.to_vector.to_text . should_equal "[0.0, NaN, NaN]"
            has_div_warnings "[c] % [d]" [1, 2] r7
            r8 = a % d
            r8.to_vector.to_text . should_equal "[0.0, NaN, NaN]"
            has_div_warnings "[a] % [d]" [1, 2] r8
            r9 = a % 0
            r9.to_vector.to_text . should_equal "[Nothing, Nothing, Nothing]"
            has_div_warnings "[a] % 0" [0, 1, 2] r9
            r10 = c % 0
            r10.to_vector.to_text . should_equal "[NaN, NaN, NaN]"
            has_div_warnings "[c] % 0" [0, 1, 2] r10

        Test.specify "should limit the number of rows listed in the message" pending=db_pending <|
            t1 = table_builder [["a", 0.up_to 200 . to_vector]]
            zero = t1.at "a" - t1.at "a"
            div = t1.at "a" / zero
            warnings = Problems.get_attached_warnings div
            warnings.not_empty.should_be_true
            warning = warnings.first
            warning.should_be_a Arithmetic_Error
            warning.message . should_equal "Division by zero (at rows [0, 1, 2, 3, 4, 5, 6, 7, 8, ...])."

        Test.specify "should return null if one of arguments is missing" pending="TODO null handling" <|
            nulls = [Nothing, Nothing, Nothing, Nothing]
            (x + Nothing).to_vector . should_equal nulls
            (x - Nothing).to_vector . should_equal nulls
            (x * Nothing).to_vector . should_equal nulls
            (x / Nothing).to_vector . should_equal nulls
            (b && Nothing).to_vector . should_equal nulls
            (b || Nothing).to_vector . should_equal nulls

        Test.specify "Between should return null if any of the values are null" pending="TODO" <|
            a = [2, 3, Nothing, 7,       5,       Nothing]
            b = [0, 5, 7,       Nothing, 7,       Nothing]
            c = [9, 8, 7,       7,       Nothing, Nothing]
            r = [True, False, Nothing, Nothing, Nothing, Nothing]

            t = table_builder [["A", a], ["B", b], ["C", c]]
            ((t.at "A").between (t.at "B") (t.at "C")) . to_vector . should_equal r

    Test.group prefix+"Column Operations - Text" <|
        t3 = table_builder [["s1", ["foobar", "bar", "baz", "BAB", Nothing]], ["s2", ["foo", "ar", "a", "b", Nothing]]]
        s1 = t3.at "s1"
        s2 = t3.at "s2"
        Test.specify "should handle basic Text operations" <|
            s1.starts_with s2 . to_vector . should_equal [True, False, False, False, Nothing]
            s1.starts_with s2 Case_Sensitivity.Insensitive . to_vector . should_equal [True, False, False, True, Nothing]
            s1.starts_with "foo" . to_vector . should_equal [True, False, False, False, Nothing]
            s1.starts_with "ba" . to_vector . should_equal [False, True, True, False, Nothing]
            s1.starts_with "ba" Case_Sensitivity.Insensitive . to_vector . should_equal [False, True, True, True, Nothing]

            s1.contains s2 . to_vector . should_equal [True, True, True, False, Nothing]
            s1.contains s2 Case_Sensitivity.Insensitive . to_vector . should_equal [True, True, True, True, Nothing]
            s1.contains "a" . to_vector . should_equal [True, True, True, False, Nothing]
            s1.contains "oo" . to_vector . should_equal [True, False, False, False, Nothing]
            s1.contains "a" Case_Sensitivity.Insensitive . to_vector . should_equal [True, True, True, True, Nothing]

            s1.ends_with s2 . to_vector . should_equal [False, True, False, False, Nothing]
            s1.ends_with s2 Case_Sensitivity.Insensitive . to_vector . should_equal [False, True, False, True, Nothing]
            s1.ends_with "ar" . to_vector . should_equal [True, True, False, False, Nothing]
            s1.ends_with "a" . to_vector . should_equal [False, False, False, False, Nothing]
            s1.ends_with "b" Case_Sensitivity.Insensitive . to_vector . should_equal [False, False, False, True, Nothing]

    Test.group prefix+"Colum Operations - Names" <|
        t = table_builder [["a", [1, 2, 3]], ["b", ['x', 'y', 'z']], ["c", [1.0, 2.0, 3.0]], ["d", [True, False, True]]]
        Test.specify "arithmetic" <|
            ((t.at "a") + 42) . name . should_equal "[a] + 42"
            ((t.at "a") - (t.at "c")) . name . should_equal "[a] - [c]"
            ((t.at "a") * (t.at "c")) . name . should_equal "[a] * [c]"
            ((t.at "a") / (t.at "c")) . name . should_equal "[a] / [c]"
            ((t.at "a") % (t.at "c")) . name . should_equal "[a] % [c]"
            ((t.at "a") ^ (t.at "c")) . name . should_equal "[a] ^ [c]"
            ((t.at "b") + 'xyz') . name . should_equal "[b] + 'xyz'"
            ((t.at "b") + '\0') . name . should_equal "[b] + '\0'"

        Test.specify "comparison" <|
            ((t.at "b") == '\0\0') . name . should_equal "[b] == '\0\0'"
            ((t.at "b") != '\0\0') . name . should_equal "[b] != '\0\0'"
            ((t.at "a") < 0) . name . should_equal "[a] < 0"
            ((t.at "a") <= 0) . name . should_equal "[a] <= 0"
            ((t.at "a") > 0) . name . should_equal "[a] > 0"
            ((t.at "a") >= 0) . name . should_equal "[a] >= 0"
            ((t.at "b").between (t.at "c") 42) . name . should_equal "[b] between [c] and 42"

        Test.specify "logical" <|
            ((t.at "d") || False) . name . should_equal "[d] || False"
            ((t.at "d") && True) . name . should_equal "[d] && True"
            ((t.at "d").not) . name . should_equal "not [d]"
            ((t.at "d").iif 10 20) . name . should_equal "if [d] then 10 else 20"

        Test.specify "text" <|
            t.at "b" . equals_ignore_case "abc" . name . should_equal "equals_ignore_case([b], 'abc')"
            t.at "b" . starts_with "abc" . name . should_equal "starts_with([b], 'abc')"
            t.at "b" . contains "abc" . name . should_equal "contains([b], 'abc')"
            t.at "b" . like "%abc%" . name . should_equal "[b] like '%abc%'"
            t.at "b" . ends_with "abc" . name . should_equal "ends_with([b], 'abc')"
            t.at "b" . is_empty . name . should_equal "[b] is empty"
            t.at "b" . fill_empty "<empty>" . name . should_equal "fill_empty([b], '<empty>')"

        Test.specify "nulls" <|
            t.at "a" . coalesce [Nothing, 42] . name . should_equal "coalesce([a], Nothing, 42)"
            t.at "a" . is_nothing . name . should_equal "[a] is null"
            t.at "a" . is_present . name . should_equal "is_present([a])"
            t.at "a" . is_blank . name . should_equal "is_blank([a])"
            t.at "a" . fill_nothing 100 . name . should_equal "fill_nothing([a], 100)"

        Test.specify "misc"
            t.at "a" . min [1, 2] . name . should_equal "min([a], 1, 2)"
            t.at "a" . max 33 . name . should_equal "max([a], 33)"
            t.at "a" . is_in [1, 2, 3] . name . should_equal "[a] in [1, 2, 3]"

        Test.specify "composed operations" <|
            # These look a bit weird, but they are consistent with the column name escaping scheme.
            ((t.at "a" + 42) * (t.at "c")) . name . should_equal "[[a]] + 42] * [c]"
            ((t.at "a" + 42) * (t.at "c") - 33) . name . should_equal "[[[a]]]] + 42]] * [c]]] - 33"

        Test.specify "sort" <|
            t.at "a" . sort . name . should_equal "a"

        if setup.is_database.not then
            Test.specify "parse" <|
                t2 = table_builder [["X", ["1", "2", "3"]]]
                t2.at "X" . parse . name . should_equal "X"

            Test.specify "map and zip" <|
                t.at "a" . map (x -> x + 1) . name . should_equal "a"
                t.at "a" . zip (t.at "b") [_, _] . name . should_equal "[a] x [b]"

    Test.group prefix+"Column.rename" <|
        Test.specify "should not allow illegal names" <|
            t = table_builder [["a", [1, 2, 3]]]
            c = t.at "a"

            c.rename Nothing . should_fail_with Illegal_Argument
            c.rename '' . should_fail_with Illegal_Argument
            c.rename 'a\0b' . should_fail_with Illegal_Argument
            c.rename '\0' . should_fail_with Illegal_Argument
