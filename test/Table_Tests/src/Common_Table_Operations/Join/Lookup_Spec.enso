from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Table import all
from Standard.Table.Errors import all

from Standard.Database import all
from Standard.Database.Errors import Unsupported_Database_Operation, Invariant_Violation, Integrity_Error

from Standard.Test import Test, Problems
import Standard.Test.Extensions

from project.Common_Table_Operations.Util import run_default_backend, within_table
import project.Util

main = run_default_backend spec

spec setup =
    prefix = setup.prefix
    table_builder = setup.table_builder
    materialize = setup.materialize
    Test.group prefix+"Table.lookup_and_replace" <|
        Test.specify "should allow to simply update columns based on a lookup table" <|
            lookup = table_builder [["Y", ["A", "B", "A"]], ["X", [1, 2, 3]]]
            my_table = table_builder [["X", [1, 2, 3, 2]], ["Y", ["Z", "ZZ", "ZZZ", "ZZZZ"]], ["Z", [10, 20, 30, 40]]]

            t2 = my_table.lookup_and_replace lookup key_columns="X"
            t2.column_names . should_equal ["X", "Y", "Z"]
            m2 = t2 |> materialize |> _.order_by "Z"
            m2.at "Z" . to_vector . should_equal [10, 20, 30, 40]
            m2.at "X" . to_vector . should_equal [1, 2, 3, 2]
            m2.at "Y" . to_vector . should_equal ["A", "B", "A", "B"]

        Test.specify "should allow to add new columns from a lookup table (default)" <|
            lookup = table_builder [["code", ["a", "b", "c"]], ["status", ["new", "old", "changed"]]]
            my_table = table_builder [["id", [1, 2, 3, 4]], ["code", ["a", "c", "c", "b"]], ["hmm", [10, 20, 30, 40]]]

            t2 = my_table.lookup_and_replace lookup key_columns="code"
            t2.column_names . should_equal ["id", "code", "hmm", "status"]
            m2 = t2 |> materialize |> _.order_by "id"
            m2.at "id" . to_vector . should_equal [1, 2, 3, 4]
            m2.at "code" . to_vector . should_equal ["a", "c", "c", "b"]
            m2.at "hmm" . to_vector . should_equal [10, 20, 30, 40]
            m2.at "status" . to_vector . should_equal ["new", "changed", "changed", "old"]

            lookup2 = table_builder [["is_X", [True, False]], ["X", ["Yes", "No"]]]
            my_table2 = table_builder [["A", [1, 2, 3, 4]], ["is_X", [True, True, False, True]]]
            t3 = my_table2.lookup_and_replace lookup2 key_columns="is_X"
            t3.column_names . should_equal ["A", "is_X", "X"]
            m3 = t3 |> materialize |> _.order_by "A"
            m3.at "A" . to_vector . should_equal [1, 2, 3, 4]
            m3.at "is_X" . to_vector . should_equal [True, True, False, True]
            m3.at "X" . to_vector . should_equal ["Yes", "Yes", "No", "Yes"]

        Test.specify "will warn if extra columns are unexpected (add_new_columns=False)" <|
            lookup = table_builder [["code", ["a", "b", "c"]], ["status", ["new", "old", "changed"]]]
            my_table = table_builder [["id", [1, 2, 3, 4]], ["code", ["a", "c", "c", "b"]], ["hmm", [10, 20, 30, 40]]]

            t2 = my_table.lookup_and_replace lookup key_columns="code" add_new_columns=False
            t2.column_names . should_equal ["id", "code", "hmm"]
            m2 = t2 |> materialize |> _.order_by "id"
            m2.at "id" . to_vector . should_equal [1, 2, 3, 4]
            m2.at "code" . to_vector . should_equal ["a", "c", "c", "b"]
            m2.at "hmm" . to_vector . should_equal [10, 20, 30, 40]

            w2 = Problems.expect_only_warning Unexpected_Extra_Columns t2
            w2.columns . should_equal ["status"]
            w2.to_display_text . should_contain "unexpected columns were ignored"
            w2.to_display_text . should_contain "status"

            err2 = my_table.lookup_and_replace lookup key_columns=["code"] add_new_columns=False on_problems=Problem_Behavior.Report_Error
            err2.should_fail_with Unexpected_Extra_Columns
            err2.catch.columns . should_equal ["status"]

            lookup2 = table_builder [["code", ["a", "b", "c"]], ["status", ["new", "old", "changed"]], ["hmm", [111, 222, 333]]]
            t3 = my_table.lookup_and_replace lookup2 key_columns=["code"] add_new_columns=False
            t3.column_names . should_equal ["id", "code", "hmm"]
            m3 = t3 |> materialize |> _.order_by "id"
            m3.at "id" . to_vector . should_equal [1, 2, 3, 4]
            m3.at "code" . to_vector . should_equal ["a", "c", "c", "b"]
            m3.at "hmm" . to_vector . should_equal [111, 333, 333, 222]
            w3 = Problems.expect_only_warning Unexpected_Extra_Columns t3
            w3.columns . should_equal ["status"]

        Test.specify "will only update rows that are matched and skip others (default - allow_unmatched_rows=True)" <|
            lookup = table_builder [["X", [1, 2]], ["Y", ["A", "B"]]]
            my_table = table_builder [["X", [1, 2, 3, 2]], ["Y", ["Z", "ZZ", "ZZZ", "ZZZZ"]], ["Z", [10, 20, 30, 40]]]

            t2 = my_table.lookup_and_replace lookup key_columns=["X"]
            t2.column_names . should_equal ["X", "Y", "Z"]
            m2 = t2 |> materialize |> _.order_by "Z"
            m2.at "Z" . to_vector . should_equal [10, 20, 30, 40]
            m2.at "X" . to_vector . should_equal [1, 2, 3, 2]
            m2.at "Y" . to_vector . should_equal ["A", "B", "ZZZ", "B"]
            m2.at "Y" . to_vector . should_equal ["A", "B", "ZZZ", "B"]

        Test.specify "will fill new columns of unmatched rows with Nothing (allow_unmatched_rows=True)" <|
            lookup = table_builder [["X", [1, 2]], ["Y", ["A", "B"]], ["W", [1.5, 2.0]]]
            my_table = table_builder [["X", [1, 2, 3, 2]], ["Y", ["Z", "ZZ", "ZZZ", "ZZZZ"]], ["Z", [10, 20, 30, 40]]]

            t2 = my_table.lookup_and_replace lookup key_columns=["X"] allow_unmatched_rows=True
            t2.column_names . should_equal ["X", "Y", "Z", "W"]
            m2 = t2 |> materialize |> _.order_by "Z"
            m2.at "Z" . to_vector . should_equal [10, 20, 30, 40]
            m2.at "X" . to_vector . should_equal [1, 2, 3, 2]
            m2.at "Y" . to_vector . should_equal ["A", "B", "ZZZ", "B"]
            m2.at "W" . to_vector . should_equal [1.5, 2.0, Nothing, 2.0]

        Test.specify "will report unmatched rows (if allow_unmatched_rows=False)" <|
            lookup = table_builder [["X", [1, 2]], ["Y", ["A", "B"]]]
            my_table = table_builder [["X", [1, 2, 3, 2]], ["Y", ["Z", "ZZ", "ZZZ", "ZZZZ"]], ["Z", [10, 20, 30, 40]]]

            r2 = my_table.lookup_and_replace lookup key_columns=["X"] allow_unmatched_rows=False
            r2.should_fail_with Unmatched_Rows_In_Lookup
            r2.catch.to_display_text . should_contain "failed to find a corresponding row in the lookup table"
            r2.catch.to_display_text . should_contain "[3]"

            # But lookup table containing other keys that are not present in source is NOT a problem.
            lookup2 = table_builder [["X", [1, 2, 3]], ["Y", ["A", "B", "C"]]]
            my_table2 = table_builder [["X", [1, 2, 1, 1]], ["Y", ["Z", "ZZ", "ZZZ", "ZZZZ"]], ["Z", [10, 20, 30, 40]]]
            t3 = my_table2.lookup_and_replace lookup2 key_columns=["X"]
            m3 = t3 |> materialize |> _.order_by "Z"
            m3.at "X" . to_vector . should_equal [1, 2, 1, 1]
            m3.at "Y" . to_vector . should_equal ["A", "B", "A", "A"]
            m3.at "Z" . to_vector . should_equal [10, 20, 30, 40]

        Test.specify "will fail on missing key columns in either table" <|
            lookup = table_builder [["X", [1, 2]], ["Y", ["A", "B"]]]
            my_table = table_builder [["X", [1, 2, 3, 2]], ["Z", [10, 20, 30, 40]]]

            r2 = my_table.lookup_and_replace lookup key_columns=["Y"]
            r2.should_fail_with Missing_Input_Columns
            r2.catch.criteria . should_equal ["Y"]

            r3 = my_table.lookup_and_replace lookup key_columns=["Z"]
            r3.should_fail_with Missing_Input_Columns
            r3.catch.criteria . should_equal ["Z"]
            r3.catch.to_display_text . should_contain "in the lookup table"

        Test.specify "should allow matching by multiple key columns" <|
            lookup = table_builder [["X", [1, 2, 1]], ["Y", ["A", "B", "B"]], ["Z", [100, 100, 200]]]
            my_table = table_builder [["X", [1, 1, 1, 2]], ["Y", ["A", "B", "A", "B"]], ["Z", [10, 20, 30, 40]], ["W", [1000, 2000, 3000, 4000]]]

            t2 = my_table.lookup_and_replace lookup key_columns=["X", "Y"]
            t2.column_names . should_equal ["X", "Y", "Z", "W"]

            m2 = t2 |> materialize |> _.order_by "W"
            m2.at "W" . to_vector . should_equal [1000, 2000, 3000, 4000]
            m2.at "X" . to_vector . should_equal [1, 1, 1, 2]
            m2.at "Y" . to_vector . should_equal ["A", "B", "A", "B"]
            m2.at "Z" . to_vector . should_equal [100, 200, 100, 100]

        Test.specify "will fail on duplicate matches in the lookup table" <|
            lookup = table_builder [["X", [1, 2, 1]], ["Y", ["A", "B", "C"]]]
            my_table = table_builder [["X", [4, 2, 3, 2]], ["Y", ["Z", "ZZ", "ZZZ", "ZZZZ"]], ["Z", [10, 20, 30, 40]]]

            # If the duplicates do not show up in result - it is accepted.
            t2 = my_table.lookup_and_replace lookup key_columns=["X"]
            t2.column_names . should_equal ["X", "Y", "Z"]
            m2 = t2 |> materialize |> _.order_by "Z"
            m2.at "Z" . to_vector . should_equal [10, 20, 30, 40]
            m2.at "X" . to_vector . should_equal [4, 2, 3, 2]
            m2.at "Y" . to_vector . should_equal ["Z", "B", "ZZZ", "B"]

            my_table2 = table_builder [["X", [1, 2]], ["Y", ["Z", "ZZ"]], ["Z", [10, 20]]]
            r2 = my_table2.lookup_and_replace lookup key_columns=["X"]
            r2.should_fail_with Non_Unique_Key
            r2.catch.key_column_names . should_equal ["X"]
            r2.catch.clashing_example_key_values . should_equal [1]
            r2.catch.clashing_example_row_count . should_equal 2

            lookup2 = table_builder [["X", [1, 1]], ["Y", ["A", "A"]], ["Z", [100, 100]]]
            Problems.assume_no_problems <| my_table.lookup_and_replace lookup2 key_columns=["X", "Y"]
            r3 = my_table2.lookup_and_replace lookup2 key_columns=["X"]
            r3.should_fail_with Non_Unique_Key

            m3 = my_table2.lookup_and_replace lookup2 key_columns=["X", "Y"] |> materialize |> _.order_by "Z"
            m3.at "Z" . to_vector . should_equal [10, 20]
            m3.at "X" . to_vector . should_equal [1, 2]
            m3.at "Y" . to_vector . should_equal ["Z", "ZZ"]

            my_table3 = table_builder [["X", [1, 1, 2]], ["Y", ["A", "Z", "ZZ"]], ["Z", [10, 20, 30]]]
            r4 = my_table3.lookup_and_replace lookup2 key_columns=["X", "Y"]
            r4.should_fail_with Non_Unique_Key
            r4.catch.key_column_names . should_equal ["X", "Y"]
            r4.catch.clashing_example_key_values . should_equal [1, "A"]
            r4.catch.clashing_example_row_count . should_equal 2

        Test.specify "will preserve count of rows, even if there are duplicates" <|
            lookup = table_builder [["X", [1, 2]], ["Y", ["A", "B"]]]
            my_table = table_builder [["X", [1, 2, 2, 2, 1]], ["Z", [10, 20, 20, 20, 50]]]

            t2 = my_table.lookup_and_replace lookup key_columns=["X"]
            t2.column_names . should_equal ["X", "Z", "Y"]
            m2 = t2 |> materialize |> _.order_by "Z"
            m2.at "X" . to_vector . should_equal [1, 2, 2, 2, 1]
            m2.at "Y" . to_vector . should_equal ["A", "B", "B", "B", "A"]
            m2.at "Z" . to_vector . should_equal [10, 20, 20, 20, 50]

        Test.specify "should correctly preserve types of original, merged and added columns" <|
            table = table_builder [["key1", [0, 1]], ["key2", ["o", "?"]], ["X", [1, 10]], ["Y", ["A", "E"]], ["Z", [1.5, 2.0]], ["W", [True, False]], ["A", [2, 22]], ["B", ["1", "2"]], ["C", [2.0, 2.5]], ["D", [False, False]]]
            lookup = table_builder [["key1", [0, 2]], ["key2", ["o", "?"]], ["X2", [100, 1000]], ["Y2", ["foo", "bar"]], ["Z2", [0.5, 4.0]], ["W2", [False, True]], ["A", [3, 55]], ["B", ["F", "F"]], ["C", [3.0, 10.5]], ["D", [True, False]]]

            [True, False].each allow_unmatched_rows->
                table_prepared = if allow_unmatched_rows then table else
                    # If we don't allow unmatched rows, we filter the input to only contain the matching row - this test is not about matching, but about the types.
                    table.filter "key1" (Filter_Condition.Equal to=0)
                t2 = table_prepared.lookup_and_replace lookup key_columns=["key1", "key2"] allow_unmatched_rows=allow_unmatched_rows
                t2.column_names . should_equal ["key1", "key2", "X", "Y", "Z", "W", "A", "B", "C", "D", "X2", "Y2", "Z2", "W2"]

                t2.at "key1" . value_type . should_be_a (Value_Type.Integer ...)
                t2.at "key2" . value_type . should_equal Value_Type.Char

                t2.at "X" . value_type . should_be_a (Value_Type.Integer ...)
                t2.at "Y" . value_type . should_equal Value_Type.Char
                t2.at "Z" . value_type . should_equal Value_Type.Float
                t2.at "W" . value_type . should_equal Value_Type.Boolean

                t2.at "A" . value_type . should_be_a (Value_Type.Integer ...)
                t2.at "B" . value_type . should_equal Value_Type.Char
                t2.at "C" . value_type . should_equal Value_Type.Float
                t2.at "D" . value_type . should_equal Value_Type.Boolean

                t2.at "X2" . value_type . should_be_a (Value_Type.Integer ...)
                t2.at "Y2" . value_type . should_equal Value_Type.Char
                t2.at "Z2" . value_type . should_equal Value_Type.Float
                t2.at "W2" . value_type . should_equal Value_Type.Boolean

        if setup.test_selection.fixed_length_text_columns then Test.specify "should correctly preserve types of original, merged and added columns (various Char types test case)" <|
            table2 = table_builder [["key", ["0"]], ["X", ["a"]], ["A", ["bbbbb"]]] . cast "key" (Value_Type.Char size=50) . cast "X" (Value_Type.Char size=1) . cast "A" (Value_Type.Char size=5 variable_length=False)
            lookup2 = table_builder [["key", ["0"]], ["X2", ["ccc"]], ["A", ["dddd"]]] . cast "key" (Value_Type.Char size=100) . cast "X2" (Value_Type.Char size=3 variable_length=False) . cast "A" (Value_Type.Char size=4 variable_length=False)

            table2.at "key" . value_type . should_equal (Value_Type.Char size=50 variable_length=True)
            table2.at "X" . value_type . should_equal (Value_Type.Char size=1 variable_length=True)
            table2.at "A" . value_type . should_equal (Value_Type.Char size=5 variable_length=False)

            lookup2.at "key" . value_type . should_equal (Value_Type.Char size=100 variable_length=True)
            lookup2.at "X2" . value_type . should_equal (Value_Type.Char size=3 variable_length=False)
            lookup2.at "A" . value_type . should_equal (Value_Type.Char size=4 variable_length=False)

            [True, False].each allow_unmatched_rows->
                t3 = table2.lookup_and_replace lookup2 key_columns=["key"] allow_unmatched_rows=allow_unmatched_rows
                t3.column_names . should_equal ["key", "X", "A", "X2"]

                # The key column keeps its original type
                t3.at "key" . value_type . should_equal (Value_Type.Char size=50 variable_length=True)
                t3.at "X" . value_type . should_equal (Value_Type.Char size=1 variable_length=True)
                t3.at "X2" . value_type . should_equal (Value_Type.Char size=3 variable_length=False)

                case allow_unmatched_rows of
                    True ->
                        # The merged column gets a merged type (max size in that case, but gets variable length due to differences), because it may contain both old and new values.
                        t3.at "A" . value_type . should_equal (Value_Type.Char size=5 variable_length=True)
                    False ->
                        # If unmatched rows are not allowed, we can guarantee only _new_ values (from the lookup table) will be in the result, so instead of merging the type we inherit the type from the lookup table.
                        t3.at "A" . value_type . should_equal (Value_Type.Char size=4 variable_length=False)

        Test.specify "will report Floating_Point_Equality if floating-point columns are used as key" <|
            lookup = table_builder [["X", [1.0, 2.0, 3.0]], ["Y", ["A", "B", "C"]]]
            my_table = table_builder [["X", [2.0, 3.0, 2.0, 3.0]], ["Y", ["Z", "ZZ", "ZZZ", "ZZZZ"]], ["Z", [10, 20, 30, 40]]]
            lookup.at "X" . value_type . is_floating_point . should_be_true

            t2 = my_table.lookup_and_replace lookup key_columns="X"
            t2.column_names . should_equal ["X", "Y", "Z"]
            m2 = t2 |> materialize |> _.order_by "Z"
            m2.at "Z" . to_vector . should_equal [10, 20, 30, 40]
            m2.at "X" . to_vector . should_equal [2.0, 3.0, 2.0, 3.0]
            m2.at "Y" . to_vector . should_equal ["B", "C", "B", "C"]

            w2 = Problems.expect_only_warning Floating_Point_Equality t2
            w2.to_display_text . should_contain "X"

        Test.specify "will fail with No_Common_Type if types of updated columns are not compatible" <|
            lookup = table_builder [["X", [1, 2, 3]], ["Y", [1, 11, 111]]]
            my_table = table_builder [["X", [2, 3, 2, 3]], ["Y", ["Z", "ZZ", "ZZZ", "ZZZZ"]], ["Z", [10, 20, 30, 40]]]

            r2 = my_table.lookup_and_replace lookup key_columns="X"
            r2.should_fail_with No_Common_Type
            r2.catch.to_display_text . should_contain "Integer"
            r2.catch.to_display_text . should_contain "Char"
            r2.catch.to_display_text . should_contain "when unifying column [Y]"

        Test.specify "will allow incompatible types if allow_unmatched_rows=False" <|
            lookup = table_builder [["X", [1, 2, 3]], ["Y", [1, 11, 111]]]
            my_table = table_builder [["X", [2, 3, 2, 3]], ["Y", ["Z", "ZZ", "ZZZ", "ZZZZ"]], ["Z", [10, 20, 30, 40]]]
            my_table.at "Y" . value_type . is_text . should_be_true

            t2 = my_table.lookup_and_replace lookup key_columns="X" allow_unmatched_rows=False
            t2.column_names . should_equal ["X", "Y", "Z"]
            t2.at "Y" . value_type . is_integer . should_be_true
            m2 = t2 |> materialize |> _.order_by "Z"
            m2.at "X" . to_vector . should_equal [2, 3, 2, 3]
            m2.at "Y" . to_vector . should_equal [11, 111, 11, 111]
            m2.at "Z" . to_vector . should_equal [10, 20, 30, 40]

        Test.specify "will fail if key columns of the lookup table contain Nothing" <|
            lookup1 = table_builder [["X", [1, 2, Nothing]], ["Y", ["A", "B", "C"]]]
            my_table1 = table_builder [["X", [2, 3, 2, 3]], ["Z", [10, 20, 30, 40]]]
            r1 = my_table1.lookup_and_replace lookup1 key_columns="X"
            r1.should_fail_with Null_Values_In_Key_Columns

            # But NULLs in source table key are OK
            lookup2 = table_builder [["X", [1, 2]], ["Y", ["A", "B"]]]
            my_table2 = table_builder [["X", [2, 3, Nothing, 3]], ["Z", [10, 20, 30, 40]]]
            t2 = my_table2.lookup_and_replace lookup2 key_columns="X" allow_unmatched_rows=True
            m2 = t2 |> materialize |> _.order_by "Z"
            m2.at "X" . to_vector . should_equal [2, 3, Nothing, 3]
            m2.at "Y" . to_vector . should_equal ["B", Nothing, Nothing, Nothing]
            m2.at "Z" . to_vector . should_equal [10, 20, 30, 40]

            # But NULLs in source are ok, but mean such rows will never match:
            r3 = my_table2.lookup_and_replace lookup2 key_columns="X" allow_unmatched_rows=False
            r3.should_fail_with Unmatched_Rows_In_Lookup

        Test.specify "will not allow providing no key_columns" <|
            lookup = table_builder [["X", [1, 2]], ["Y", ["A", "B"]]]
            my_table = table_builder [["X", [2, 1]], ["Z", [10, 20]]]

            r2 = my_table.lookup_and_replace lookup key_columns=[]
            r2.should_fail_with Illegal_Argument

        if setup.is_database.not then Test.specify "(in-memory only) will preserve the order of rows from the original table" <|
            lookup = table_builder [["Y", [1, 0]], ["V", ["TRUE", "FALSE"]]]
            xs = 0.up_to 50 . to_vector
            ys = xs.map x-> x%2
            my_table = table_builder [["X", xs], ["Y", ys]]

            t2 = my_table.lookup_and_replace lookup key_columns="Y"
            t2.column_names . should_equal ["X", "Y", "V"]

            t2.at "X" . to_vector . should_equal xs
            t2.at "Y" . to_vector . should_equal ys
            vs = xs.map x-> if (x%2) == 1 then "TRUE" else "FALSE"
            t2.at "V" . to_vector . should_equal vs

        if setup.is_database then Test.specify "(database-only) will fail if pre-checked invariants get invalidated between the query is constructed and then materialized" <|
            Test.with_clue "(lookup is unique check) " <|
                lookup = table_builder [["X", [1, 2]], ["Y", ["A", "B"]]]
                table = table_builder [["X", [1, 2, 2]], ["Y", ["Z", "ZZ", "ZZZ"]], ["Z", [10, 20, 30]]]

                r1 = table.lookup_and_replace lookup key_columns="X"
                # Immediately, the query is all good.
                Problems.assume_no_problems r1

                m1 = r1 |> materialize |> _.order_by "Z"
                m1.at "X" . to_vector . should_equal [1, 2, 2]
                m1.at "Y" . to_vector . should_equal ["A", "B", "B"]
                m1.at "Z" . to_vector . should_equal [10, 20, 30]

                # Now, we change the table, so that the lookup is no longer unique - even if the values are the same - we care about row uniqueness.
                Problems.assume_no_problems <|
                    lookup.update_rows (Table.new [["X", [2]], ["Y", ["B"]]]) key_columns=[] update_action=Update_Action.Insert
                lookup.filter "X" (Filter_Condition.Equal to=2) . row_count . should_equal 2

                # Now, the query is no longer valid:
                m2 = r1 |> materialize
                m2.should_fail_with Invariant_Violation
                m2.catch.to_display_text . should_contain "database has been modified"
                m2.catch.to_display_text . should_contain "re-run the workflow"

                ## Now, even if we drop the lookup-related columns, we still should get an error
                   (otherwise we would risk duplicating records due to the non-uniqueness!)
                r3 = r1.select_columns ["Z"]
                Problems.assume_no_problems r3

                m3 = r3 |> materialize
                ## Alternatively, theoretically, this query could succeed
                   (knowing that it no longer depends on the lookup at all).
                   But if it does so, we need to guarantee that we do not get duplicated rows in the result:

                        r3.row_count . should_equal 3
                        r3.at "Z" . to_vector . length . should_equal 3
                        r3.at "Z" . to_vector . should_contain_the_same_elements_as [10, 20, 30]
                m3.should_fail_with Invariant_Violation
                r3.at "Z" . to_vector . should_fail_with Invariant_Violation

            Test.with_clue "(no unmatched rows check - added a row in source) " <|
                lookup = table_builder [["X", [1, 2]], ["Y", ["A", "B"]]]
                table = table_builder [["X", [1, 2, 2]], ["Y", ["Z", "ZZ", "ZZZ"]], ["Z", [10, 20, 30]]]

                r1 = table.lookup_and_replace lookup key_columns="X" allow_unmatched_rows=False
                # Immediately, the query is all good.
                Problems.assume_no_problems r1

                m1 = r1 |> materialize |> _.order_by "Z"
                m1.at "X" . to_vector . should_equal [1, 2, 2]
                m1.at "Y" . to_vector . should_equal ["A", "B", "B"]
                m1.at "Z" . to_vector . should_equal [10, 20, 30]

                # Now, we change the source table, so that there are unmatched rows:
                Problems.assume_no_problems <|
                    table.update_rows (Table.new [["X", [33]], ["Y", ["F"]], ["Z", [40]]]) key_columns=[] update_action=Update_Action.Insert
                table.row_count . should_equal 4

                # Now, the query is no longer valid:
                m2 = r1 |> materialize
                m2.should_fail_with Invariant_Violation

            Test.with_clue "(no unmatched rows check - removed a row in lookup) " <|
                lookup = table_builder [["X", [1, 2]], ["Y", ["A", "B"]]]
                table = table_builder [["X", [1, 2, 2]], ["Y", ["Z", "ZZ", "ZZZ"]], ["Z", [10, 20, 30]]]

                r1 = table.lookup_and_replace lookup key_columns="X" allow_unmatched_rows=False
                # Immediately, the query is all good.
                Problems.assume_no_problems r1

                m1 = r1 |> materialize |> _.order_by "Z"
                m1.at "X" . to_vector . should_equal [1, 2, 2]
                m1.at "Y" . to_vector . should_equal ["A", "B", "B"]
                m1.at "Z" . to_vector . should_equal [10, 20, 30]

                # Now, we change the lookup table, so that there are unmatched rows:
                Problems.assume_no_problems <|
                    lookup.delete_rows (Table.new [["X", [1]]]) key_columns=["X"]
                lookup.row_count . should_equal 1

                # Now, the query is no longer valid:
                m2 = r1 |> materialize
                m2.should_fail_with Invariant_Violation

        # This does not seem useful really, but there is no reason to disallow it, so we should ensure it does not crash.
        Test.specify "(edge-case) should allow lookup with itself" <|
            table = table_builder [["X", [1, 2, 3]], ["Y", ["A", "B", "C"]]]
            t2 = table.lookup_and_replace table key_columns="X"
            t2.column_names . should_equal ["X", "Y"]

            m2 = t2 |> materialize |> _.order_by "X"
            m2.at "X" . to_vector . should_equal [1, 2, 3]
            m2.at "Y" . to_vector . should_equal ["A", "B", "C"]

        Test.specify "should gracefully handle tables from different backends" <|
            t1 = table_builder [["A", [1, 2, 3]], ["B", ["a", "b", "c"]]]
            alternative_connection = Database.connect (SQLite In_Memory)
            t0 = (Table.new [["A", [3, 2, 1]], ["B", ["x", "y", "z"]]]).select_into_database_table alternative_connection "T0" temporary=True

            r1 = t1.lookup_and_replace t0 key_columns="A"
            r1.should_fail_with Illegal_Argument
