from Standard.Base import all

from Standard.Table import Value_Type, Column_Ref, Previous_Value, Blank_Selector
from Standard.Table.Data.Aggregate_Column.Aggregate_Column import Count_Distinct
from Standard.Table.Errors import all

from Standard.Database.Errors import Unsupported_Database_Operation

from Standard.Test_New import all


from project.Common_Table_Operations.Util import run_default_backend

main = run_default_backend add_specs

type Data
    Value ~data

    connection self = self.data.at 0
    t0 self = self.data.at 1
    t1 self = self.data.at 2
    t3 self = self.data.at 3
    t4 self = self.data.at 4

    setup create_connection_fn table_builder =
        connection = create_connection_fn Nothing
        t0 = table_builder [["a", [0, 1, Nothing, 42, Nothing, 5]], ["b", [True, Nothing, True, False, Nothing, False]], ["c", ["", "foo", "bar", Nothing, Nothing, " "]]] connection=connection
        t1 =
            a = ["a", [1, Nothing, 3, 4]]
            b = ["b", ["a", "b", Nothing, " "]]
            c = ["c", [10, 20, 30, 40]]
            d = ["d", [Nothing, True, False, True]]
            e = ["e", ["", "", "foo", "bar"]]
            f = ["f", [Nothing, "", Nothing, ""]]
            table_builder [a, b, c, d, e, f] connection=connection
        t3 = table_builder [["X", [2.0, 1.5, Number.nan, Number.nan]], ["Y", [Nothing, 2.0, Nothing, 5.0]]]
        t4 =
            c = ["c", [10, 20, 40, 30]]
            g = ["g", [Number.nan, 1, 2, 3.4]]
            h = ["h", [Number.nan, Nothing, Number.nan, Nothing]]
            table_builder [c, g, h]
        Data.Value [connection, t0, t1, t3, t4]

    teardown self =
        self.connection.close


add_specs suite_builder setup =
    prefix = setup.prefix
    create_connection_fn = setup.create_connection_func
    test_selection = setup.test_selection
    suite_builder.group prefix+"Dropping Missing Values" group_builder->
        data = Data.setup create_connection_fn setup.table_builder

        group_builder.teardown <|
            data.teardown

        table_builder cols =
            setup.table_builder cols connection=data.connection

        group_builder.specify "filter_blank_rows should drop rows that contain at least one missing cell" <|
            d = data.t0.filter_blank_rows when=Blank_Selector.Any_Cell
            d.row_count . should_equal 1
            d.at "a" . to_vector . should_equal [5]
            d.at "b" . to_vector . should_equal [False]
            d.at "c" . to_vector . should_equal [" "]

        group_builder.specify "filter_blank_rows should drop rows that are all blank" <|
            d2 = data.t0.filter_blank_rows when=Blank_Selector.All_Cells
            d2.at "a" . to_vector . should_equal [0, 1, Nothing, 42, 5]
            d2.at "b" . to_vector . should_equal [True, Nothing, True, False, False]
            d2.at "c" . to_vector . should_equal ["", "foo", "bar", Nothing, " "]

        group_builder.specify "filter_blank_rows should deal with edge cases" <|
            ## TODO currently our builder does not allow all-null tables, so we
               create one with a 0 and remove it by filter. See #6159.
            t0 = table_builder [["X", [0, Nothing, Nothing, Nothing]]]
            t1 = t0.filter "X" (Filter_Condition.Is_Nothing)
            t1.row_count . should_equal 3
            t1.at "X" . to_vector . should_equal [Nothing, Nothing, Nothing]

            t2 = t1.filter_blank_rows when=Blank_Selector.Any_Cell
            t2.row_count . should_equal 0
            t2.at "X" . to_vector . should_equal []

            t3 = table_builder [["X", ["", "", Nothing]]]
            t4 = t3.filter_blank_rows when=Blank_Selector.All_Cells
            t4.row_count . should_equal 0
            t4.at "X" . to_vector . should_equal []

        group_builder.specify "filter_blank_rows should work with a table with many columns" <|
            cols = Vector.new 60 i->
                ["col_"+i.to_text, [i, Nothing]]
            t1 = table_builder cols
            t2 = t1.filter_blank_rows
            t2.columns.length . should_equal 60
            t2.row_count . should_equal 1
            t2.at 42 . to_vector . should_equal [42]

        group_builder.specify "should allow to select blank columns" <|
            r1 = data.t1.select_blank_columns
            r1.columns.map .name . should_equal ["f"]
            r1.at "f" . to_vector . should_equal [Nothing, "", Nothing, ""]

            r2 = data.t1.select_blank_columns when=Blank_Selector.Any_Cell
            r2.columns.map .name . should_equal ["a", "b", "d", "e", "f"]
            r2.at "d" . to_vector . should_equal [Nothing, True, False, True]

        group_builder.specify "should allow to remove blank columns" <|
            r1 = data.t1.remove_blank_columns
            r1.columns.map .name . should_equal ["a", "b", "c", "d", "e"]
            r1.at "a" . to_vector . should_equal [1, Nothing, 3, 4]

            r2 = data.t1.remove_blank_columns when=Blank_Selector.Any_Cell
            r2.columns.map .name . should_equal ["c"]
            r2.at "c" . to_vector . should_equal [10, 20, 30, 40]

        if test_selection.is_nan_and_nothing_distinct then
            group_builder.specify "should not treat NaNs as blank by default" <|
                r1 = data.t3.filter_blank_rows when=Blank_Selector.Any_Cell
                # We cannot use `Vector.==` because `NaN != NaN`.
                r1.at "X" . to_vector . to_text . should_equal "[1.5, NaN]"
                r1.at "Y" . to_vector . should_equal [2.0, 5.0]

                r2 = data.t3.filter_blank_rows when=Blank_Selector.All_Cells
                r2.at "X" . to_vector . to_text . should_equal "[2.0, 1.5, NaN, NaN]"
                r2.at "Y" . to_vector . should_equal [Nothing, 2.0, Nothing, 5.0]

                r3 = data.t4.remove_blank_columns
                r3.columns.map .name . should_equal ["c", "g", "h"]
                r3.at "g" . to_vector . to_text . should_equal "[NaN, 1.0, 2.0, 3.4]"

                r4 = data.t4.remove_blank_columns when=Blank_Selector.Any_Cell
                r4.columns.map .name . should_equal ["c", "g"]
                r4.at "g" . to_vector . to_text . should_equal "[NaN, 1.0, 2.0, 3.4]"

                r5 = data.t4.select_blank_columns when=Blank_Selector.Any_Cell
                r5.columns.map .name . should_equal ["h"]
                r5.at "h" . to_vector . to_text . should_equal "[NaN, Nothing, NaN, Nothing]"

            group_builder.specify "should allow to treat NaNs as blank if asked" <|
                r1 = data.t3.filter_blank_rows when=Blank_Selector.Any_Cell treat_nans_as_blank=True
                # We cannot use `Vector.==` because `NaN != NaN`.
                r1.at "X" . to_vector . should_equal [1.5]
                r1.at "Y" . to_vector . should_equal [2.0]

                r2 = data.t3.filter_blank_rows when=Blank_Selector.All_Cells treat_nans_as_blank=True
                r2.at "X" . to_vector . to_text . should_equal "[2.0, 1.5, NaN]"
                r2.at "Y" . to_vector . should_equal [Nothing, 2.0, 5.0]

                r3 = data.t4.remove_blank_columns when=Blank_Selector.All_Cells treat_nans_as_blank=True
                r3.columns.map .name . should_equal ["c", "g"]
                r3.at "g" . to_vector . to_text . should_equal "[NaN, 1.0, 2.0, 3.4]"

                r4 = data.t4.select_blank_columns when=Blank_Selector.All_Cells treat_nans_as_blank=True
                r4.columns.map .name . should_equal ["h"]
                r4.at "h" . to_vector . to_text . should_equal "[NaN, Nothing, NaN, Nothing]"

                r5 = data.t4.remove_blank_columns when=Blank_Selector.Any_Cell treat_nans_as_blank=True
                r5.columns.map .name . should_equal ["c"]
                r5.at "c" . to_vector . should_equal [10, 20, 40, 30]

                r6 = data.t4.select_blank_columns when=Blank_Selector.Any_Cell treat_nans_as_blank=True
                r6.columns.map .name . should_equal ["g", "h"]
                r6.at "h" . to_vector . to_text . should_equal "[NaN, Nothing, NaN, Nothing]"

        if test_selection.is_nan_and_nothing_distinct.not then
            group_builder.specify "this backend treats NaN as Nothing" <|
                data.t3.at "X" . to_vector . should_equal [2.0, 1.5, Nothing, Nothing]
                data.t3.at "X" . is_nan . to_vector . should_fail_with Unsupported_Database_Operation

        group_builder.specify "select_blank_columns and remove_blank_columns should deal with edge cases" <|
            t = table_builder [["X", [1, 2, 3, 4]]]
            no_rows = t.filter "X" (Filter_Condition.Equal to=0)
            no_rows.row_count . should_equal 0
            no_rows.at "X" . to_vector . should_equal []

            no_rows.select_blank_columns . columns . map .name . should_equal ["X"]
            r2 = no_rows.remove_blank_columns
            r2.should_fail_with No_Output_Columns
            r2.catch.to_display_text . should_equal "No columns in the result, because of another problem: All columns were blank."

            r3 = t.select_blank_columns
            r3.should_fail_with No_Output_Columns
            r3.catch.to_display_text . should_equal "No columns in the result, because of another problem: No columns were blank."

    suite_builder.group prefix+"Filling Missing Values" group_builder->
        data = Data.setup create_connection_fn setup.table_builder

        group_builder.teardown <|
            data.teardown

        table_builder cols =
            setup.table_builder cols connection=data.connection

        group_builder.specify "should coerce long and double types to double" <|
            table = table_builder [["X", [1, Nothing, 2, Nothing]], ["Y", [0.5, Nothing, Nothing, 0.25]]]
            ints = table.at "X"
            ints_filled = ints.fill_nothing 0.5
            ints_filled.to_vector . should_equal [1.0, 0.5, 2.0, 0.5]
            ints_filled.value_type.is_floating_point.should_be_true

            decimals = table.at "Y"
            decimals_filled = decimals.fill_nothing 42
            decimals_filled.to_vector . should_equal [0.5, 42.0, 42.0, 0.25]
            decimals_filled.value_type.is_floating_point.should_be_true

            r1 = ints.fill_nothing decimals
            r1.to_vector . should_equal [1.0, Nothing, 2.0, 0.25]
            vt1 = r1.value_type
            Test.with_clue "r1.value_type="+vt1.to_display_text+": " <|
                vt1.is_floating_point.should_be_true

            r2 = ints.coalesce [decimals, 133]
            r2.to_vector . should_equal [1.0, 133, 2.0, 0.25]
            vt2 = r2.value_type
            Test.with_clue "r2.value_type="+vt2.to_display_text+": " <|
                vt2.is_floating_point.should_be_true

            t2 = table_builder [["X", [1, Nothing]], ["Y", [0.5, Nothing]]]
            r3 = (t2.at "X").fill_nothing (t2.at "Y")
            r3.to_vector . should_equal [1.0, Nothing]
            vt3 = r3.value_type
            Test.with_clue "r3.value_type="+vt3.to_display_text+": " <|
                vt3.is_floating_point.should_be_true

            r4 = ints.fill_nothing 100.0
            r4.to_vector . should_equal [1, 100, 2, 100]
            vt4 = r4.value_type
            Test.with_clue "r4.value_type="+vt4.to_display_text+": " <|
                vt4.is_floating_point.should_be_true

        group_builder.specify "should keep String, Boolean, Long and Double type" <|
            table = table_builder [["X", ["a", Nothing, "b", Nothing]], ["Y", [True, False, Nothing, Nothing]], ["Z", [1, Nothing, 2, Nothing]], ["W", [0.5, Nothing, Nothing, 0.25]]]
            strs = table.at "X"
            strs_filled = strs.fill_nothing "X"
            strs_filled.to_vector . should_equal ["a", "X", "b", "X"]
            strs_filled.value_type.is_text.should_be_true

            bools = table.at "Y"
            bools_filled = bools.fill_nothing False
            bools_filled.to_vector . should_equal [True, False, False, False]
            bools_filled.value_type . should_equal Value_Type.Boolean

            ints = table.at "Z"
            ints_filled = ints.fill_nothing 42
            ints_filled.to_vector . should_equal [1, 42, 2, 42]
            ints_filled.value_type.is_integer.should_be_true

            decimals = table.at "W"
            decimals_filled = decimals.fill_nothing 1.0
            decimals_filled.to_vector . should_equal [0.5, 1.0, 1.0, 0.25]
            decimals_filled.value_type.is_floating_point.should_be_true

        group_builder.specify "should not allow mixing types by default" <|
            table = table_builder [["X", [1, Nothing, 2, Nothing]], ["Y", [True, False, Nothing, Nothing]], ["Z", [0.5, Nothing, Nothing, 0.25]]]
            ints = table.at "X"
            ints_filled = ints.fill_nothing False
            ints_filled.should_fail_with No_Common_Type

            c = ints.coalesce [42.0, False]
            c.should_fail_with No_Common_Type

            table.at "Y" . fill_nothing 42 . should_fail_with No_Common_Type
            table.at "Z" . fill_nothing True . should_fail_with No_Common_Type

        if setup.is_database.not then
            group_builder.specify "may allow mixed types if explicitly retyped" <|
                table = table_builder [["X", [1, Nothing, 2, Nothing]], ["Y", [True, False, Nothing, Nothing]], ["Z", [0.5, Nothing, Nothing, 0.25]]]
                mix = table.at "X" . cast Value_Type.Mixed
                mix.value_type . should_equal Value_Type.Mixed
                mix_filled = mix.fill_nothing False
                mix_filled.to_vector . should_equal [1, False, 2, False]
                mix_filled.value_type . should_equal Value_Type.Mixed

                c2 = table.at "Y" . fill_nothing mix
                c2.to_vector . should_equal [True, False, 2, Nothing]
                c2.value_type . should_equal Value_Type.Mixed

                c3 = table.at "Z" . fill_nothing mix
                c3.to_vector . should_equal [0.5, Nothing, 2, 0.25]
                c3.value_type . should_equal Value_Type.Mixed

            group_builder.specify "will keep the Mixed type if was explicitly retyped" <|
                table = table_builder [["X", [1, Nothing, 2, Nothing]]]
                mix = table.at "X" . cast Value_Type.Mixed
                mix_filled = mix.fill_nothing 0
                mix_filled.to_vector . should_equal [1, 0, 2, 0]
                mix_filled.value_type . should_equal Value_Type.Mixed

        group_builder.specify "should correctly unify text columns of various lengths" pending=(if setup.test_selection.fixed_length_text_columns.not then "Fixed-length Char columns are not supported by this backend.") <|
            t0 = table_builder [["A", ["a", Nothing, "c"]], ["B", ["X", "Y", "Z"]], ["C", ["xyz", "abc", "def"]]]
            t1 = t0 . cast "A" (Value_Type.Char size=1 variable_length=False) . cast "B" (Value_Type.Char size=1 variable_length=False) . cast "C" (Value_Type.Char size=3 variable_length=False)

            a = t1.at "A"
            b = t1.at "B"
            c = t1.at "C"
            a.value_type.should_equal (Value_Type.Char size=1 variable_length=False)
            b.value_type.should_equal (Value_Type.Char size=1 variable_length=False)
            c.value_type.should_equal (Value_Type.Char size=3 variable_length=False)

            d = a.fill_nothing b
            d.to_vector . should_equal ["a", "Y", "c"]
            d.value_type . should_equal (Value_Type.Char size=1 variable_length=False)

            e = a.fill_nothing c
            e.to_vector . should_equal ["a", "abc", "c"]
            Test.with_clue "e.value_type="+e.value_type.to_display_text+": " <|
                e.value_type.variable_length.should_be_true

        group_builder.specify "should allow setting a default column by reference" <|
            t = table_builder [["A", ["x", "", Nothing]], ["B", ["a", "b", "c"]], ["C", [Nothing, Nothing, "ZZZ"]], ["D", [Nothing, "2", "3"]]]

            t1 = t.fill_nothing "A" (Column_Ref.Name "B")
            t1.at "A" . to_vector . should_equal ["x", "", "c"]

            t2 = t.fill_empty "A" (Column_Ref.Name "B")
            t2.at "A" . to_vector . should_equal ["x", "b", "c"]

            t3 = t.fill_nothing ["A", "C"] (Column_Ref.Name "D")
            t3.at "A" . to_vector . should_equal ["x", "", "3"]
            t3.at "B" . to_vector . should_equal ["a", "b", "c"]
            t3.at "C" . to_vector . should_equal [Nothing, "2", "ZZZ"]
            t3.at "D" . to_vector . should_equal [Nothing, "2", "3"]

        if setup.is_database.not then group_builder.specify "should allow filling rows with previous value" <|
            t = table_builder [["A", ["a", "", Nothing, Nothing, "", "b", "c", Nothing]]]

            t1 = t.fill_nothing "A" Previous_Value
            t1.at "A" . to_vector . should_equal ["a", "", "", "", "", "b", "c", "c"]

            t2 = t.fill_empty "A" Previous_Value
            t2.at "A" . to_vector . should_equal ["a", "a", "a", "a", "a", "b", "c", "c"]

            # May still keep Nothing/empty if there is no previous value
            t3 = table_builder [["B", [Nothing, Nothing, "", Nothing, "a", Nothing]]]
            t3.fill_nothing "B" Previous_Value . at "B" . to_vector . should_equal [Nothing, Nothing, "", "", "a", "a"]
            t3.fill_empty "B" Previous_Value . at "B" . to_vector . should_equal [Nothing, Nothing, "", Nothing, "a", "a"]

            # Will work on multiple columns
            t4 = table_builder [["A", ["a", "b", Nothing, Nothing]], ["B", [Nothing, 42, Nothing, 123]], ["C", ["", "foo", Nothing, "bar"]], ["D", [True, Nothing, False, Nothing]], ["E", [Nothing, Date.new 2001, Nothing, Nothing]], ["F", [2, Nothing, "a", Nothing]]]
            t5 = t4.fill_nothing ["A", "B", "D", "E", "F"] Previous_Value
            t5.at "A" . to_vector . should_equal ["a", "b", "b", "b"]
            t5.at "B" . to_vector . should_equal [Nothing, 42, 42, 123]
            t5.at "D" . to_vector . should_equal [True, True, False, False]
            t5.at "E" . to_vector . should_equal [Nothing, Date.new 2001, Date.new 2001, Date.new 2001]
            t5.at "F" . to_vector . should_equal [2, 2, "a", "a"]

            # C is unchanged
            t5.at "C" . to_vector . should_equal ["", "foo", Nothing, "bar"]

        if setup.is_database then group_builder.specify "will for now report that Previous_Value is not supported" <|
            t = table_builder [["A", ["a", "", Nothing, Nothing, "", "b", "c", Nothing]]]
            t.fill_nothing "A" Previous_Value . should_fail_with Unsupported_Database_Operation
            t.fill_empty "A" Previous_Value . should_fail_with Unsupported_Database_Operation
