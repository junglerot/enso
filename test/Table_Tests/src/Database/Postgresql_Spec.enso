from Standard.Base import all
import Standard.Base.System.Environment

from Standard.Database import all
from Standard.Database.Connection.Connection import Sql_Error
import Standard.Test
import Standard.Table as Materialized_Table
import project.Database.Common_Spec
import project.Common_Table_Spec
import project.Aggregate_Spec

postgres_specific_spec connection pending =
    Test.group "[PostgreSQL] Info" pending=pending <|
        connection.execute_update 'CREATE TABLE "Tinfo" ("strs" VARCHAR, "ints" INTEGER, "bools" BOOLEAN, "reals" REAL, "doubles" DOUBLE PRECISION)'
        t = connection.access_table "Tinfo"
        t.insert ["a", Nothing, False, 1.2, 0.000000000001]
        t.insert ["abc", Nothing, Nothing, 1.3, Nothing]
        t.insert ["def", 42, True, 1.4, 10]
        Test.specify "should return Table information" <|
            i = t.info
            i.index . to_vector . should_equal ["strs", "ints", "bools", "reals", "doubles"]
            i.at "Items Count" . to_vector . should_equal [3, 1, 2, 3, 2]
            i.at "SQL Type" . to_vector . should_equal ["varchar", "int4", "bool", "float4", "float8"]
        Test.specify "should infer standard types correctly" <|
            t.at "strs" . sql_type . is_definitely_text . should_be_true
            t.at "ints" . sql_type . is_definitely_integer . should_be_true
            t.at "bools" . sql_type . is_definitely_boolean . should_be_true
            t.at "reals" . sql_type . is_definitely_double . should_be_true
        connection.execute_update 'DROP TABLE "Tinfo"'

run_tests connection pending=Nothing =
    prefix = "[PostgreSQL] "
    name_counter = Ref.new 0
    tables = Vector.new_builder
    table_builder columns =
        ix = Ref.get name_counter
        Ref.put name_counter ix+1
        name = "table_"+ix.to_text

        in_mem_table = Materialized_Table.new <| columns.map description-> [description.at 0, description.at 2]
        table = connection.upload_table name in_mem_table
        tables.append name
        table
    clean_tables table_names =
        table_names.each name->
            sql = 'DROP TABLE "' + name + '"'
            Panic.rethrow <| connection.execute_update sql

    Common_Spec.spec prefix connection pending=pending
    here.postgres_specific_spec connection pending=pending
    Common_Table_Spec.spec prefix table_builder supports_case_sensitive_columns=True pending=pending

    selection = Aggregate_Spec.Test_Selection problem_handling=False advanced_stats=False text=False first_last=False std_dev=False multi_distinct=False
    agg_in_memory_table = (Enso_Project.data / "data.csv") . read_csv
    agg_table = connection.upload_table "AggT1" agg_in_memory_table
    tables.append agg_table.name
    empty_agg_table = connection.upload_table "AggT2" (agg_in_memory_table.take_start 0)
    tables.append empty_agg_table.name
    materialize = .to_dataframe
    Aggregate_Spec.aggregate_spec prefix agg_table empty_agg_table materialize selection pending=pending

    clean_tables tables.to_vector

spec =
    db_name = Environment.get "ENSO_DATABASE_TEST_DB_NAME"
    db_host = Environment.get "ENSO_DATABASE_TEST_HOST"
    db_user = Environment.get "ENSO_DATABASE_TEST_DB_USER"
    db_password = Environment.get "ENSO_DATABASE_TEST_DB_PASSWORD"

    case db_name.is_nothing of
        True ->
            message = "PostgreSQL test database is not configured. See README.md for instructions."
            connection = Error.throw message
            here.run_tests connection pending=message
        False ->
            url = case db_host.is_nothing of
                True -> "postgresql:" + db_name
                False -> "postgresql://" + db_host + "/" + db_name
            connection = Database.connect url user=db_user password=db_password
            here.run_tests connection

main = Test.Suite.run_main here.spec
