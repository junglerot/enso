from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

import Standard.Table.Data.Table.Table as Materialized_Table
from Standard.Database import SQL_Query
import Standard.Database.Data.Table as Database_Table
import Standard.Database.Data.SQL_Statement.SQL_Statement
import Standard.Database.Data.SQL_Type.SQL_Type
import Standard.Database.Internal.IR.Context.Context

type Fake_Test_Connection
    # type Fake_Test_Connection.Value (tables : Map Text (Vector [Text, SQL_Type])) (dialect : Text)
    Value tables dialect

    ## Set up a query returning a Table object, which can be used to work with data within the database or load it into memory.

       Arguments:
       - query: name of the table or sql statement to query.
         If supplied as `Text`, the name is checked against the `tables` list to determine if it is a table or a query.
       - alias: optionally specify a friendly alias for the query.
    query : Text | SQL_Query -> Text -> Database_Table.Table
    query self query alias="" = case query of
        Text -> self.query (SQL_Query.Table_Name query) alias
        SQL_Query.Raw_SQL _ ->
            Error.throw (Illegal_Argument.Error "Cannot query a fake connection with raw SQL")
        SQL_Query.Table_Name name ->
            columns = self.tables.get name
            Database_Table.make_table self name columns (Context.for_table name)

    ## Execute the query and load the results into memory as a Table.

       Arguments:
       - query: name of the table or sql statement to query.
         If supplied as `Text`, the name is checked against the `tables` list to determine if it is a table or a query.
       - alias: optionally specify a friendly alias for the query.
       - limit: the maximum number of rows to return (default 1000).
    read : Text | SQL_Query -> Text -> Integer | Nothing -> Materialized_Table
    read self _ _="" _=Nothing =
        Error.throw "Materialization not supported on fake connection."

    ## PRIVATE
    close : Nothing
    close self = Nothing

    ## PRIVATE
    execute_update : Text | SQL_Statement -> Integer
    execute_update self _ =
        Error.throw "Materialization not supported on fake connection."

## PRIVATE
make dialect tables =
    Fake_Test_Connection.Value tables dialect
