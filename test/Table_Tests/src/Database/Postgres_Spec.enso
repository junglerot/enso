from Standard.Base import all
import Standard.Base.System.Environment
import Standard.Base.Runtime.Ref
import Standard.Base.System.Platform
import Standard.Base.System.Process
from Standard.Base.System.Process.Exit_Code import Exit_Success

import Standard.Table as Materialized_Table
from Standard.Table.Data.Aggregate_Column import all

from Standard.Database import all
from Standard.Database.Connection.Connection import Sql_Error
from Standard.Database.Data.Sql import Sql_Type
from Standard.Database.Internal.Postgres.Pgpass import Pgpass_Entry
import Standard.Database.Internal.Postgres.Pgpass

import Standard.Test
import Standard.Test.Test_Environment

import project.Database.Common_Spec
import project.Database.Helpers.Name_Generator
import project.Common_Table_Spec
import project.Aggregate_Spec

postgres_specific_spec connection pending =
    Test.group "[PostgreSQL] Info" pending=pending <|
        tinfo = Name_Generator.random_name "Tinfo"
        connection.execute_update 'CREATE TEMPORARY TABLE "'+tinfo+'" ("strs" VARCHAR, "ints" INTEGER, "bools" BOOLEAN, "reals" REAL, "doubles" DOUBLE PRECISION)'
        t = connection.access_table tinfo
        t.insert ["a", Nothing, False, 1.2, 0.000000000001]
        t.insert ["abc", Nothing, Nothing, 1.3, Nothing]
        t.insert ["def", 42, True, 1.4, 10]

        Test.specify "should return Table information" <|
            i = t.info
            i.index . to_vector . should_equal ["strs", "ints", "bools", "reals", "doubles"]
            i.at "Items Count" . to_vector . should_equal [3, 1, 2, 3, 2]
            i.at "SQL Type" . to_vector . should_equal ["varchar", "int4", "bool", "float4", "float8"]

        Test.specify "should return Table information, also for aggregated results" <|
            i = t.aggregate [Concatenate "strs", Sum "ints", Count_Distinct "bools"] . info
            i.index . to_vector . should_equal ["Concatenate strs", "Sum ints", "Count Distinct bools"]
            i.at "Items Count" . to_vector . should_equal [1, 1, 1]
            i.at "SQL Type" . to_vector . should_equal ["VARCHAR", "BIGINT", "BIGINT"]

        Test.specify "should infer standard types correctly" <|
            t.at "strs" . sql_type . is_definitely_text . should_be_true
            t.at "ints" . sql_type . is_definitely_integer . should_be_true
            t.at "bools" . sql_type . is_definitely_boolean . should_be_true
            t.at "reals" . sql_type . is_definitely_double . should_be_true
        connection.execute_update 'DROP TABLE "'+tinfo+'"'

    Test.group "[PostgreSQL] Table.aggregate should correctly infer result types" pending=pending <|
        name = Name_Generator.random_name "Ttypes"
        connection.execute_update 'CREATE TEMPORARY TABLE "'+name+'" ("txt" VARCHAR, "i1" SMALLINT, "i2" INT, "i3" BIGINT, "i4" NUMERIC, "r1" REAL, "r2" DOUBLE PRECISION, "bools" BOOLEAN)'
        t = connection.access_table name
        Test.specify "Concatenate, Shortest and Longest" <|
            r = t.aggregate [Concatenate "txt", Shortest "txt", Longest "txt"]
            r.columns.at 0 . sql_type . should_equal Sql_Type.text
            r.columns.at 1 . sql_type . should_equal Sql_Type.text
            r.columns.at 2 . sql_type . should_equal Sql_Type.text

        Test.specify "Counts" <|
            r = t.aggregate [Count, Count_Empty "txt", Count_Not_Empty "txt", Count_Distinct "i1", Count_Not_Nothing "i2", Count_Nothing "i3"]
            r.columns.length . should_equal 6
            r.columns.each column->
                column.sql_type . should_equal Sql_Type.bigint

        Test.specify "Sum" <|
            r = t.aggregate [Sum "i1", Sum "i2", Sum "i3", Sum "i4", Sum "r1", Sum "r2"]
            r.columns.at 0 . sql_type . should_equal Sql_Type.bigint
            r.columns.at 1 . sql_type . should_equal Sql_Type.bigint
            r.columns.at 2 . sql_type . should_equal Sql_Type.numeric
            r.columns.at 3 . sql_type . should_equal Sql_Type.numeric
            r.columns.at 4 . sql_type . should_equal Sql_Type.real
            r.columns.at 5 . sql_type . should_equal Sql_Type.double

        Test.specify "Average" <|
            r = t.aggregate [Average "i1", Average "i2", Average "i3", Average "i4", Average "r1", Average "r2"]
            r.columns.at 0 . sql_type . should_equal Sql_Type.numeric
            r.columns.at 1 . sql_type . should_equal Sql_Type.numeric
            r.columns.at 2 . sql_type . should_equal Sql_Type.numeric
            r.columns.at 3 . sql_type . should_equal Sql_Type.numeric
            r.columns.at 4 . sql_type . should_equal Sql_Type.double
            r.columns.at 5 . sql_type . should_equal Sql_Type.double

        connection.execute_update 'DROP TABLE "'+name+'"'

run_tests connection pending=Nothing =
    prefix = "[PostgreSQL] "
    name_counter = Ref.new 0
    tables = Vector.new_builder
    table_builder columns =
        ix = name_counter.get
        name_counter . put ix+1
        name = Name_Generator.random_name "table_"+ix.to_text

        in_mem_table = Materialized_Table.new columns
        case connection.upload_table name in_mem_table of
            table ->
                tables.append name
                table
    clean_tables table_names =
        table_names.each name->
            sql = 'DROP TABLE "' + name + '"'
            Panic.rethrow <| connection.execute_update sql
    materialize = .to_dataframe

    Common_Spec.spec prefix connection pending=pending
    postgres_specific_spec connection pending=pending
    common_selection = Common_Table_Spec.Test_Selection supports_case_sensitive_columns=True order_by_unicode_normalization_by_default=True
    Common_Table_Spec.spec prefix table_builder test_selection=common_selection pending=pending

    selection = Aggregate_Spec.Test_Selection first_last_row_order=False aggregation_problems=False
    agg_in_memory_table = (enso_project.data / "data.csv") . read
    agg_table = connection.upload_table (Name_Generator.random_name "Agg1") agg_in_memory_table
    tables.append agg_table.name
    empty_agg_table = connection.upload_table (Name_Generator.random_name "Agg_Empty") (agg_in_memory_table.take_start 0)
    tables.append empty_agg_table.name
    Aggregate_Spec.aggregate_spec prefix agg_table empty_agg_table table_builder materialize is_database=True selection pending=pending

    clean_tables tables.to_vector

table_spec =
    db_name = Environment.get "ENSO_DATABASE_TEST_DB_NAME"
    db_host_port = (Environment.get "ENSO_DATABASE_TEST_HOST").if_nothing "localhost" . split ':'
    db_host = db_host_port.at 0
    db_port = if db_host_port.length == 1 then 5432 else Integer.parse (db_host_port.at 1)
    db_user = Environment.get "ENSO_DATABASE_TEST_DB_USER"
    db_password = Environment.get "ENSO_DATABASE_TEST_DB_PASSWORD"
    ca_cert_file = Environment.get "ENSO_DATABASE_TEST_CA_CERT_FILE"

    ssl_pending = if ca_cert_file.is_nothing then "PostgreSQL SSL test not configured." else Nothing
    Test.group "[PostgreSQL] SSL connectivity tests" pending=ssl_pending <|
        Test.specify "should connect without ssl parameter" <|
            Database.connect (Postgres db_host db_port db_name (Credentials db_user db_password)) . should_succeed

        Test.specify "should connect, requiring SSL" <|
            Database.connect (Postgres db_host db_port db_name (Credentials db_user db_password) use_ssl=Require) . should_succeed

        Test.specify "should connect be able to verify the certificate" <|
            Database.connect (Postgres db_host db_port db_name (Credentials db_user db_password) use_ssl=(Verify_CA ca_cert_file)) . should_succeed

            ## Default certificate should not accept the self signed certificate.
            ca_fail = Database.connect (Postgres db_host db_port db_name (Credentials db_user db_password) use_ssl=Verify_CA)
            ca_fail.is_error . should_equal True
            ca_fail.catch Sql_Error . is_a Sql_Error . should_equal True

        Test.specify "should connect be able to verify the host name against the certificate" <|
            Database.connect (Postgres db_host db_port db_name (Credentials db_user db_password) use_ssl=(Full_Verification ca_cert_file)) . should_succeed

        alternate_host = Environment.get "ENSO_DATABASE_TEST_ALTERNATE_HOST" . if_nothing <|
            if db_host == "127.0.0.1" then "localhost" else Nothing
        pending_alternate = if alternate_host.is_nothing then "Alternative host name not configured." else Nothing
        Test.specify "should fail to connect with alternate host name not valid in certificate" pending=pending_alternate <|
            ca_fail = Database.connect (Postgres alternate_host db_port db_name (Credentials db_user db_password) use_ssl=(Full_Verification ca_cert_file))
            ca_fail.is_error . should_equal True
            ca_fail.catch Sql_Error . is_a Sql_Error . should_equal True

    case db_name.is_nothing of
        True ->
            message = "PostgreSQL test database is not configured. See README.md for instructions."
            connection = Error.throw message
            run_tests connection pending=message
        False ->
            connection = Database.connect (Postgres (db_host_port.at 0) db_port db_name (Credentials db_user db_password))
            run_tests connection


pgpass_file = enso_project.data / "pgpass.conf"

pgpass_spec = Test.group "[PostgreSQL] .pgpass" <|
    make_pair username password =
        [Pair "user" username, Pair "password" password]
    Test.specify "should correctly parse the file, including escapes, blank lines and comments" <|
        result = Pgpass.parse_file pgpass_file
        result.length . should_equal 12
        e1 = Pgpass_Entry "localhost" "5432" "postgres" "postgres" "postgres"
        e2 = Pgpass_Entry "192.168.4.0" "1234" "foo" "bar" "baz"
        e3 = Pgpass_Entry "host with : semicolons in it? what?" "*" "*" "*" "well yes, that is possible, the :password: can contain those as well"
        e4 = Pgpass_Entry ":" ":" ":" ":" ":"
        e5 = Pgpass_Entry "you can escape an escape too: see \\" "*" "*" "*" "yes it is possible"
        e6 = Pgpass_Entry "other escapes like \n or \? " "*" "*" "*" "are just parsed as-is"
        e7 = Pgpass_Entry "a trailing escape character" "*" "*" "*" "is treated as a regular slash\"
        e8 = Pgpass_Entry "passwords should preserve leading space" "*" "*" "*" "   pass"
        e9 = Pgpass_Entry "\:" "*" "*" "*" "\:"
        e10 = Pgpass_Entry "::1" "*" "database_name" "user_that_has_no_password" ""
        e11 = Pgpass_Entry "*" "*" "*" "*" "fallback_password"
        e12 = Pgpass_Entry "order_matters" "1234" "this" "will_still_match_the_fallback_password" "not_this_one"
        entries = [e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12]
        result.should_equal entries

    if Platform.is_unix then
        Test.specify "should only accept the .pgpass file if it has correct permissions" <|
            Process.run "chmod" ["0777", pgpass_file.absolute.path] . should_equal Exit_Success
            Test_Environment.unsafe_with_environment_override "PGPASSFILE" (pgpass_file.absolute.path) <|
                Pgpass.verify pgpass_file . should_equal False
                Pgpass.read "passwords should preserve leading space" "1" "some database name that is really : weird" . should_equal []

            Process.run "chmod" ["0400", pgpass_file.absolute.path] . should_equal Exit_Success
            Test_Environment.unsafe_with_environment_override "PGPASSFILE" (pgpass_file.absolute.path) <|
                Pgpass.verify pgpass_file . should_equal True
                Pgpass.read "passwords should preserve leading space" "1" "some database name that is really : weird" . should_equal (make_pair "*" "   pass")

    Test.specify "should correctly match wildcards and use the first matching entry" <|
        Test_Environment.unsafe_with_environment_override "PGPASSFILE" (pgpass_file.absolute.path) <|
            Pgpass.read "localhost" 5432 "postgres" . should_equal (make_pair "postgres" "postgres")
            Pgpass.read "192.168.4.0" "1234" "foo" . should_equal (make_pair "bar" "baz")
            Pgpass.read "" "" "" . should_equal (make_pair "*" "fallback_password")
            Pgpass.read "blah" "5324" "blah" . should_equal (make_pair "*" "fallback_password")
            Pgpass.read "::1" "55999" "database_name" . should_equal (make_pair "user_that_has_no_password" "")
            Pgpass.read "order_matters" "1234" "this" . should_equal (make_pair "*" "fallback_password")
            Pgpass.read "\:" "1234" "blah" . should_equal (make_pair "*" "\:")
            Pgpass.read ":" ":" ":" . should_equal (make_pair ":" ":")

connection_setup_spec = Test.group "[PostgreSQL] Connection setup" <|
    Test.specify "should use environment variables as host, port and database defaults and fall back to hardcoded defaults" <|
        c1 = Postgres "example.com" 12345 "my_db"
        c2 = Postgres
        c3 = Test_Environment.unsafe_with_environment_override "PGHOST" "192.168.0.1" <|
            Test_Environment.unsafe_with_environment_override "PGPORT" "1000" <|
                Test_Environment.unsafe_with_environment_override "PGDATABASE" "ensoDB" <|
                    Postgres

        c1.host . should_equal "example.com"
        c1.port . should_equal 12345
        c1.database . should_equal "my_db"
        c1.jdbc_url . should_equal "jdbc:postgresql://example.com:12345/my_db"

        c2.host . should_equal "localhost"
        c2.port . should_equal 5432
        c2.database . should_equal ""
        c2.jdbc_url . should_equal "jdbc:postgresql://localhost:5432"

        c3.host . should_equal "192.168.0.1"
        c3.port . should_equal 1000
        c3.database . should_equal "ensoDB"
        c3.jdbc_url . should_equal "jdbc:postgresql://192.168.0.1:1000/ensoDB"

        ## Currently we require the port to be numeric. When we support
           Unix-sockets, we may lift that restriction.
        c4 = Test_Environment.unsafe_with_environment_override "PGPORT" "foobar" <|
            Postgres
        c4.host . should_equal "localhost"
        c4.port . should_equal 5432
        c4.database . should_equal ""
        c4.jdbc_url . should_equal "jdbc:postgresql://localhost:5432"

    add_ssl props = props+[Pair 'sslmode' 'prefer']
    Test.specify "should use the given credentials" <|
        c = Postgres credentials=(Credentials "myuser" "mypass")
        c.jdbc_url . should_equal "jdbc:postgresql://localhost:5432"
        c.jdbc_properties . should_equal <| add_ssl [Pair "user" "myuser", Pair "password" "mypass"]

    Test.specify "should fallback to environment variables and fill-out missing information based on the PGPASS file (if available)" <|
        c1 = Postgres
        c1.jdbc_url . should_equal "jdbc:postgresql://localhost:5432"

        c1.jdbc_properties . should_equal <| add_ssl []
        Test_Environment.unsafe_with_environment_override "PGPASSWORD" "somepassword" <|
            c1.jdbc_properties . should_fail_with Illegal_State_Error
            c1.jdbc_properties.catch.message . should_equal "PGPASSWORD is set, but PGUSER is not."

            Test_Environment.unsafe_with_environment_override "PGUSER" "someuser" <|
                c1.jdbc_properties . should_equal <| add_ssl [Pair "user" "someuser", Pair "password" "somepassword"]

        c2 = Postgres "192.168.4.0" 1234 "foo"
        c3 = Postgres "::1" 55999 "database_name"
        c4 = Postgres "::1" 55999 "otherDB"
        c2.jdbc_properties . should_equal <| add_ssl []
        c3.jdbc_properties . should_equal <| add_ssl []
        c4.jdbc_properties . should_equal <| add_ssl []

        Test_Environment.unsafe_with_environment_override "PGPASSFILE" pgpass_file.absolute.path <|
            c2.jdbc_properties . should_equal <| add_ssl [Pair "user" "bar", Pair "password" "baz"]
            c3.jdbc_properties . should_equal <| add_ssl [Pair "user" "user_that_has_no_password", Pair "password" ""]
            c4.jdbc_properties . should_equal <| add_ssl [Pair "user" "*", Pair "password" "fallback_password"]

            Test_Environment.unsafe_with_environment_override "PGUSER" "bar" <|
                c2.jdbc_properties . should_equal <| add_ssl [Pair "user" "bar", Pair "password" "baz"]
                [c3, c4].each c->
                    c.jdbc_properties . should_equal <|
                        add_ssl [Pair "user" "*", Pair "password" "fallback_password"]

            Test_Environment.unsafe_with_environment_override "PGUSER" "other user" <|
                [c2, c3, c4].each c->
                    c.jdbc_properties . should_equal <|
                        add_ssl [Pair "user" "*", Pair "password" "fallback_password"]

                Test_Environment.unsafe_with_environment_override "PGPASSWORD" "other password" <|
                    [c2, c3, c4].each c->
                        c.jdbc_properties . should_equal <| add_ssl [Pair "user" "other user", Pair "password" "other password"]

spec =
    table_spec
    pgpass_spec
    connection_setup_spec

main = Test.Suite.run_main spec
