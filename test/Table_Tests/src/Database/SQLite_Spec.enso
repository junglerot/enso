from Standard.Base import all
import Standard.Base.Runtime.Ref

import Standard.Table as Materialized_Table

from Standard.Database import all
from Standard.Database.Connection.Connection import Sql_Error_Data

import Standard.Test

import project.Database.Common_Spec
import project.Database.Helpers.Name_Generator
import project.Common_Table_Spec
import project.Aggregate_Spec

sqlite_specific_spec connection =
    Test.group "[SQLite] Error Handling" <|
        Test.specify "should wrap errors" <|
            connection.execute_query "foobar" . should_fail_with Sql_Error_Data
            connection.execute_update "foobar" . should_fail_with Sql_Error_Data

            action = connection.execute_query "SELECT A FROM undefined_table"
            action . should_fail_with Sql_Error_Data
            action.catch.to_text . should_equal "There was an SQL error: '[SQLITE_ERROR] SQL error or missing database (no such table: undefined_table)'. [Query was: SELECT A FROM undefined_table]"

    Test.group "[SQLite] Metadata" <|
        tinfo = Name_Generator.random_name "Tinfo"
        connection.execute_update 'CREATE TABLE "'+tinfo+'" ("strs" VARCHAR, "ints" INTEGER, "bools" BOOLEAN, "reals" REAL)'
        t = connection.access_table tinfo
        t.insert ["a", Nothing, False, 1.2]
        t.insert ["abc", Nothing, Nothing, 1.3]
        t.insert ["def", 42, True, 1.4]
        Test.specify "should return Table information" <|
            i = t.info
            i.index . to_vector . should_equal ["strs", "ints", "bools", "reals"]
            i.at "Items Count" . to_vector . should_equal [3, 1, 2, 3]
            i.at "SQL Type" . to_vector . should_equal ["VARCHAR", "INTEGER", "BOOLEAN", "REAL"]
        Test.specify "should infer standard types correctly" <|
            t.at "strs" . sql_type . is_definitely_text . should_be_true
            t.at "ints" . sql_type . is_definitely_integer . should_be_true
            t.at "bools" . sql_type . is_definitely_boolean . should_be_true
            t.at "reals" . sql_type . is_definitely_double . should_be_true

            t.at "ints" . sql_type . is_definitely_text . should_be_false
            t.at "strs" . sql_type . is_definitely_integer . should_be_false
            t.at "reals" . sql_type . is_definitely_boolean . should_be_false
            t.at "bools" . sql_type . is_definitely_double . should_be_false

sqlite_spec connection prefix =
    name_counter = Ref.new 0
    table_builder columns =
        ix = name_counter.get
        name_counter . put ix+1
        name = Name_Generator.random_name "table_"+ix.to_text

        in_mem_table = Materialized_Table.new columns
        connection.upload_table name in_mem_table
    materialize = .to_dataframe

    Common_Spec.spec prefix connection
    sqlite_specific_spec connection
    common_selection = Common_Table_Spec.Test_Selection_Data supports_case_sensitive_columns=False order_by=True natural_ordering=False case_insensitive_ordering=True case_insensitive_ascii_only=True take_drop=False
    Common_Table_Spec.spec prefix table_builder test_selection=common_selection

    ## For now `advanced_stats`, `first_last`, `text_shortest_longest` and
       `multi_distinct` remain disabled, because SQLite does not provide the
       needed aggregate functions and emulating them is highly problematic.
       We can rethink in the future how these could be emulated. Two of the
       possible solutions are:
       - creating complex nested queries using NTILE to compute the stats,
       - compiling SQLite library on our own and adding native extensions for
         the missing statistics.
    selection = Aggregate_Spec.Test_Selection_Data advanced_stats=False text_shortest_longest=False first_last=False first_last_row_order=False multi_distinct=False aggregation_problems=False nan=False
    agg_in_memory_table = (enso_project.data / "data.csv") . read
    agg_table = connection.upload_table (Name_Generator.random_name "Agg1") agg_in_memory_table
    empty_agg_table = connection.upload_table (Name_Generator.random_name "Agg_Empty") (agg_in_memory_table.take (First 0))
    Aggregate_Spec.aggregate_spec prefix agg_table empty_agg_table table_builder materialize is_database=True selection

    connection.close

spec =
    enso_project.data.create_directory
    file = enso_project.data / "sqlite_test.db"
    file.delete_if_exists
    sqlite_spec (Database.connect (SQLite_Data file)) "[SQLite] "
    file.delete

    sqlite_spec (Database.connect (SQLite_Data In_Memory)) "[SQLite Memory] "

main = Test.Suite.run_main spec
