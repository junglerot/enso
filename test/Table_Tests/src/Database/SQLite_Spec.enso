from Standard.Base import all
import Standard.Base.Runtime.Ref.Ref

import Standard.Table.Data.Type.Value_Type.Bits
from Standard.Table import Table, Value_Type

from Standard.Database import Database, SQLite, In_Memory, SQL_Query
import Standard.Database.Connection.SQLite_Format.SQLite_Format
from Standard.Database.Errors import SQL_Error

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

import project.Database.Common_Spec
import project.Database.Types.SQLite_Type_Mapping_Spec
import project.Database.Helpers.Name_Generator
import project.Common_Table_Operations

sqlite_specific_spec prefix connection =
    Test.group prefix+"Schemas and Databases" <|
        Test.specify "should be able to get current database and list databases" <|
            connection.database . should_equal Nothing
            connection.databases . should_equal [Nothing]
            Meta.is_same_object connection (connection.set_database Nothing) . should_be_true

        Test.specify "should be able to get current schema and list schemas" <|
            connection.schema . should_equal Nothing
            connection.schemas . should_equal [Nothing]
            Meta.is_same_object connection (connection.set_schema Nothing) . should_be_true

        Test.specify "does not allow changing schema or database" <|
            connection.set_schema "foo" . should_fail_with SQL_Error
            connection.set_database "foo" . should_fail_with SQL_Error

    Test.group prefix+"Tables and Table Types" <|
        tinfo = Name_Generator.random_name "TestTable"
        connection.execute_update 'CREATE TABLE "'+tinfo+'" ("A" VARCHAR)'

        vinfo = Name_Generator.random_name "TestView"
        connection.execute_update 'CREATE VIEW "'+vinfo+'" AS SELECT "A" FROM "'+tinfo+'";'

        Test.specify "should be able to list table types" <|
            table_types = connection.table_types
            table_types.length . should_not_equal 0
            table_types.contains "TABLE" . should_be_true
            table_types.contains "VIEW" . should_be_true

        Test.specify "should be able to list tables" <|
            tables = connection.tables
            tables.row_count . should_not_equal 0
            tables.columns.map .name . should_equal ["Database", "Schema", "Name", "Type", "Description"]
            tables.at "Name" . to_vector . contains tinfo . should_be_true
            tables.at "Name" . to_vector . contains vinfo . should_be_true

        Test.specify "should be able to filter tables by name" <|
            tables = connection.tables tinfo
            tables.row_count . should_equal 1
            tables.at "Database" . to_vector . at 0 . should_equal Nothing
            tables.at "Schema" . to_vector . at 0 . should_equal Nothing
            tables.at "Name" . to_vector . at 0 . should_equal tinfo
            tables.at "Type" . to_vector . at 0 . should_equal "TABLE"
            connection.tables "TestT_ble%" . row_count . should_equal 1

        Test.specify "should be able to filter tables by type" <|
            tables = connection.tables types=["VIEW"]
            tables.row_count . should_not_equal 0
            tables.at "Name" . to_vector . contains tinfo . should_be_false
            tables.at "Name" . to_vector . contains vinfo . should_be_true

    Test.group prefix+"Error Handling" <|
        Test.specify "should wrap errors" <|
            connection.read (SQL_Query.Raw_SQL "foobar") . should_fail_with SQL_Error
            connection.execute_update "foobar" . should_fail_with SQL_Error

            action = connection.read (SQL_Query.Raw_SQL "SELECT A FROM undefined_table")
            action . should_fail_with SQL_Error
            action.catch.to_text . should_equal "There was an SQL error: [SQLITE_ERROR] SQL error or missing database (no such table: undefined_table). [Query was: SELECT A FROM undefined_table]"

    tinfo = Name_Generator.random_name "Tinfo"
    connection.execute_update 'CREATE TABLE "'+tinfo+'" ("strs" VARCHAR, "ints" INTEGER, "bools" BOOLEAN, "reals" REAL)'
    Test.group prefix+"Metadata" <|
        t = connection.query (SQL_Query.Table_Name tinfo)
        t.insert ["a", Nothing, False, 1.2]
        t.insert ["abc", Nothing, Nothing, 1.3]
        t.insert ["def", 42, True, 1.4]
        Test.specify "should return Table information" <|
            i = t.info
            i.at "Column" . to_vector . should_equal ["strs", "ints", "bools", "reals"]
            i.at "Items Count" . to_vector . should_equal [3, 1, 2, 3]
            i.at "Value Type" . to_vector . should_equal [Value_Type.Char, Value_Type.Integer, Value_Type.Boolean, Value_Type.Float]
        Test.specify "should infer standard types correctly" <|
            t.at "strs" . value_type . is_text . should_be_true
            t.at "ints" . value_type . is_integer . should_be_true
            t.at "bools" . value_type . is_boolean . should_be_true
            t.at "reals" . value_type . is_floating_point . should_be_true

            t.at "ints" . value_type . is_text . should_be_false
            t.at "strs" . value_type . is_integer . should_be_false
            t.at "reals" . value_type . is_boolean . should_be_false
            t.at "bools" . value_type . is_floating_point . should_be_false

    Test.group prefix+"Dialect-specific codegen" <|
        Test.specify "should generate queries for the Distinct operation" <|
            t = connection.query (SQL_Query.Table_Name tinfo)
            code_template = 'SELECT "{Tinfo}"."strs" AS "strs", "{Tinfo}"."ints" AS "ints", "{Tinfo}"."bools" AS "bools", "{Tinfo}"."reals" AS "reals" FROM (SELECT "{Tinfo}_inner"."strs" AS "strs", "{Tinfo}_inner"."ints" AS "ints", "{Tinfo}_inner"."bools" AS "bools", "{Tinfo}_inner"."reals" AS "reals" FROM (SELECT "{Tinfo}"."strs" AS "strs", "{Tinfo}"."ints" AS "ints", "{Tinfo}"."bools" AS "bools", "{Tinfo}"."reals" AS "reals" FROM "{Tinfo}" AS "{Tinfo}") AS "{Tinfo}_inner" GROUP BY "{Tinfo}_inner"."strs") AS "{Tinfo}"'
            expected_code = code_template.replace "{Tinfo}" tinfo
            t.distinct ["strs"] . to_sql . prepare . should_equal [expected_code, []]

sqlite_spec connection prefix =
    name_counter = Ref.new 0
    table_builder columns =
        ix = name_counter.get
        name_counter . put ix+1
        name = Name_Generator.random_name "table_"+ix.to_text

        in_mem_table = Table.new columns
        connection.upload_table name in_mem_table
    materialize = .read

    Common_Spec.spec prefix connection
    sqlite_specific_spec prefix connection

    common_selection = Common_Table_Operations.Main.Test_Selection.Config supports_case_sensitive_columns=False order_by=True natural_ordering=False case_insensitive_ordering=True case_insensitive_ascii_only=True take_drop=False is_nan_and_nothing_distinct=False date_time=False

    ## For now `advanced_stats`, `first_last`, `text_shortest_longest` and
       `multi_distinct` remain disabled, because SQLite does not provide the
       needed aggregate functions and emulating them is highly problematic.
       We can rethink in the future how these could be emulated. Two of the
       possible solutions are:
       - creating complex nested queries using NTILE to compute the stats,
       - compiling SQLite library on our own and adding native extensions for
         the missing statistics.
    aggregate_selection = Common_Table_Operations.Aggregate_Spec.Test_Selection.Config advanced_stats=False text_shortest_longest=False first_last=False first_last_row_order=False multi_distinct=False aggregation_problems=False nan=False date_support=False
    agg_in_memory_table = (enso_project.data / "data.csv") . read
    agg_table = connection.upload_table (Name_Generator.random_name "Agg1") agg_in_memory_table
    empty_agg_table = connection.upload_table (Name_Generator.random_name "Agg_Empty") (agg_in_memory_table.take (First 0))

    setup = Common_Table_Operations.Main.Test_Setup.Config prefix agg_table empty_agg_table table_builder materialize is_database=True test_selection=common_selection aggregate_test_selection=aggregate_selection
    Common_Table_Operations.Main.spec setup

    connection.close

spec =
    enso_project.data.create_directory
    file = enso_project.data / "sqlite_test.db"
    file.delete_if_exists
    sqlite_spec (Database.connect (SQLite file)) "[SQLite] "
    file.delete

    sqlite_spec (Database.connect (SQLite In_Memory)) "[SQLite Memory] "

    SQLite_Type_Mapping_Spec.spec

    Test.group "SQLite_Format should allow connecting to SQLite files" <|
        file.delete_if_exists

        connection = Database.connect (SQLite file)
        connection.execute_update 'CREATE TABLE "Dummy" ("strs" VARCHAR, "ints" INTEGER, "bools" BOOLEAN, "reals" REAL)'
        connection.close

        Test.specify "should recognise a db file" <|
            Auto_Detect.get_format (enso_project.data / "data.db") . should_be_a SQLite_Format

        Test.specify "should recognise a sqlite file" <|
            Auto_Detect.get_format (enso_project.data / "data.sqlite") . should_be_a SQLite_Format

        Test.specify "should connect to a db file" <|
            connection = Data.read file
            tables = connection.tables
            tables.row_count . should_not_equal 0
            connection.close

        file.delete_if_exists

main = Test_Suite.run_main spec
