from Standard.Base import all
import Standard.Base.Error.Illegal_State.Illegal_State

from Standard.Table import Sort_Column, Sort_Column_Selector, Column_Selector, Join_Condition
from Standard.Table.Data.Aggregate_Column.Aggregate_Column import all
from Standard.Table.Errors import No_Input_Columns_Selected, Missing_Input_Columns, No_Such_Column

from Standard.Database import all
import Standard.Database.Data.Dialect
import Standard.Database.Data.SQL_Type.SQL_Type
from Standard.Database.Data.Table import combine_names, fresh_names
from Standard.Database.Errors import Unsupported_Database_Operation

from Standard.Test import Test, Test_Suite, Problems
import Standard.Test.Extensions

import project.Database.Helpers.Fake_Test_Connection

spec =
    int = SQL_Type.integer
    bool = SQL_Type.boolean
    str = SQL_Type.varchar
    test_connection =
        table1 = ["T1", [["A", int], ["B", str], ["C", bool]]]
        table2 = ["T2", [["D", int], ["E", int], ["F", bool]]]
        table3 = ["T3", [["A", int], ["E", bool], ["F", int]]]
        tables = Map.from_vector [table1, table2, table3]
        Fake_Test_Connection.make Dialect.sqlite tables
    t1 = test_connection.query (SQL_Query.Table_Name "T1")
    Test.group "[Codegen] JSON serialization" <|
        Test.specify "should serialize Tables and Columns to their SQL representation" pending="TODO: decide on how we handle ==" <|
            q1 = t1.filter (t1.at "A" == 42) . to_json

            part1 = JS_Object.from_pairs [["sql_code", 'SELECT "T1"."A" AS "A", "T1"."B" AS "B", "T1"."C" AS "C" FROM "T1" AS "T1" WHERE ("T1"."A" = ']]
            part2_sub = JS_Object.from_pairs [["value", 42], ["expected_sql_type", "INTEGER"]]
            part2 = JS_Object.from_pairs [["sql_interpolation", part2_sub]]
            part3 = JS_Object.from_pairs [["sql_code", ")"]]
            expected = JS_Object.from_pairs [["query", [part1, part2, part3]]] . to_text
            q1.should_equal expected

            q2 = t1.at "A" . to_json
            expected_2 = JS_Object.from_pairs [["query", [JS_Object.from_pairs [["sql_code", 'SELECT "T1"."A" AS "A" FROM "T1" AS "T1"']]]]] . to_text
            q2.should_equal expected_2

    Test.group "[Codegen] Basic Select" <|
        Test.specify "should select columns from a table" <|
            t1.to_sql.prepare . should_equal ['SELECT "T1"."A" AS "A", "T1"."B" AS "B", "T1"."C" AS "C" FROM "T1" AS "T1"', []]
            t2 = t1.select_columns (Column_Selector.By_Name ["C", "B", "undefined"]) reorder=True
            t2.to_sql.prepare . should_equal ['SELECT "T1"."C" AS "C", "T1"."B" AS "B" FROM "T1" AS "T1"', []]

            foo = t1.at "A" . rename "FOO"
            foo.to_sql.prepare . should_equal ['SELECT "T1"."A" AS "FOO" FROM "T1" AS "T1"', []]

            t3 = t2.set "bar" foo
            t3.to_sql.prepare . should_equal ['SELECT "T1"."C" AS "C", "T1"."B" AS "B", "T1"."A" AS "bar" FROM "T1" AS "T1"', []]

        Test.specify "should fail if at is called for a non-existent column" <|
            t1.at "undefined" . should_fail_with No_Such_Column.Error

        Test.specify "should allow to limit the amount of returned results" <|
            t2 = t1.limit 5
            t2.to_sql.prepare . should_equal ['SELECT "T1"."A" AS "A", "T1"."B" AS "B", "T1"."C" AS "C" FROM "T1" AS "T1" LIMIT 5', []]

        Test.specify "should work correctly when there are no columns" <|
            empty = t1.select_columns (Column_Selector.By_Name [])
            json = JS_Object.from_pairs [["query", Nothing], ["message", "The table has no columns so a query cannot be generated."]] . to_text
            empty.to_json . should_equal json
            empty.column_count . should_equal 0
            empty.to_sql . should_fail_with Unsupported_Database_Operation.Error

    Test.group "[Codegen] Building Expressions" <|
        Test.specify "should allow building expressions from columns and constants" <|
            a = t1.at "A"
            b = t1.at "B"
            c = t1.at "C"
            arith = (a * 2) + 1
            logic = (c || c.not) && True
            cmp = (a / a >= b) && (a - b < a)
            arith.to_sql.prepare . should_equal ['SELECT (("T1"."A" * ?) + ?) AS "A" FROM "T1" AS "T1"', [[2, int], [1, int]]]
            logic.to_sql.prepare . should_equal ['SELECT (("T1"."C" OR (NOT "T1"."C")) AND ?) AS "C" FROM "T1" AS "T1"', [[True, bool]]]
            cmp.to_sql.prepare . should_equal ['SELECT ((("T1"."A" / "T1"."A") >= "T1"."B") AND (("T1"."A" - "T1"."B") < "T1"."A")) AS "A" FROM "T1" AS "T1"', []]

        Test.specify "should support simple text operations" <|
            b = t1.at "B"
            add = b + "SUFFIX"
            add.to_sql.prepare . should_equal ['SELECT ("T1"."B" || ?) AS "B" FROM "T1" AS "T1"', [["SUFFIX", str]]]

            ends = b.ends_with "suf"
            starts = b.starts_with "pref"
            contains = b.contains "inf"
            ends.to_sql.prepare . should_equal ['SELECT ("T1"."B" LIKE (\'%\' || ?)) AS "B" FROM "T1" AS "T1"', [["suf", str]]]
            starts.to_sql.prepare . should_equal ['SELECT ("T1"."B" LIKE (? || \'%\')) AS "B" FROM "T1" AS "T1"', [["pref", str]]]
            contains.to_sql.prepare . should_equal ['SELECT instr("T1"."B", ?) > 0 AS "B" FROM "T1" AS "T1"', [["inf", str]]]

    Test.group "[Codegen] Masking Tables and Columns" <|
        Test.specify "should generate a single BETWEEN expression" <|
            t2 = t1.filter "A" (Filter_Condition.Between 10 20)
            t2.to_sql.prepare . should_equal ['SELECT "T1"."A" AS "A", "T1"."B" AS "B", "T1"."C" AS "C" FROM "T1" AS "T1" WHERE ("T1"."A" BETWEEN ? AND ?)', [[10, int], [20, int]]]

            t3 = t1.filter "A" (Filter_Condition.Between (t1.at "B") (t1.at "C"))
            t3.to_sql.prepare . should_equal ['SELECT "T1"."A" AS "A", "T1"."B" AS "B", "T1"."C" AS "C" FROM "T1" AS "T1" WHERE ("T1"."A" BETWEEN "T1"."B" AND "T1"."C")', []]

            t4 = t1.filter "A" (Filter_Condition.Between (t1.at "B") 33)
            t4.to_sql.prepare . should_equal ['SELECT "T1"."A" AS "A", "T1"."B" AS "B", "T1"."C" AS "C" FROM "T1" AS "T1" WHERE ("T1"."A" BETWEEN "T1"."B" AND ?)', [[33, int]]]

        Test.specify "should generate an IN expression" <|
            t2 = t1.filter "A" (Filter_Condition.Is_In [1, 2, 'foo'])
            t2.to_sql.prepare . should_equal ['SELECT "T1"."A" AS "A", "T1"."B" AS "B", "T1"."C" AS "C" FROM "T1" AS "T1" WHERE COALESCE("T1"."A" IN (?, ?, ?), FALSE)', [[1, int], [2, int], ["foo", int]]]

            t3 = t1.filter "A" (Filter_Condition.Is_In [1])
            t3.to_sql.prepare . should_equal ['SELECT "T1"."A" AS "A", "T1"."B" AS "B", "T1"."C" AS "C" FROM "T1" AS "T1" WHERE COALESCE("T1"."A" IN (?), FALSE)', [[1, int]]]

            t4 = t1.filter "A" (Filter_Condition.Is_In [])
            t4.to_sql.prepare . should_equal ['SELECT "T1"."A" AS "A", "T1"."B" AS "B", "T1"."C" AS "C" FROM "T1" AS "T1" WHERE (FALSE)', []]

            t5 = t1.filter "A" (Filter_Condition.Is_In [Nothing])
            t5.to_sql.prepare . should_equal ['SELECT "T1"."A" AS "A", "T1"."B" AS "B", "T1"."C" AS "C" FROM "T1" AS "T1" WHERE ((FALSE) OR ("T1"."A" IS NULL))', []]

    Test.group "[Codegen] Handling Missing Values" <|
        Test.specify "fill_missing should allow to replace missing values in a column with a constant" <|
            c = t1.at "A" . fill_missing "not-applicable"
            c.to_sql.prepare . should_equal ['SELECT COALESCE("T1"."A", ?) AS "A" FROM "T1" AS "T1"', [["not-applicable", int]]]

        Test.specify "filter_blank_rows should drop rows that contain at least one missing column in a Table" <|
            t2 = t1.filter_blank_rows when_any=True
            t2.to_sql.prepare . should_equal ['SELECT "T1"."A" AS "A", "T1"."B" AS "B", "T1"."C" AS "C" FROM "T1" AS "T1" WHERE (NOT ((("T1"."A" IS NULL) OR (("T1"."B" IS NULL) OR ("T1"."B" = \'\'))) OR ("T1"."C" IS NULL)))', []]

            t3 = t1.filter_blank_rows when_any=False
            t3.to_sql.prepare . should_equal ['SELECT "T1"."A" AS "A", "T1"."B" AS "B", "T1"."C" AS "C" FROM "T1" AS "T1" WHERE (NOT ((("T1"."A" IS NULL) AND (("T1"."B" IS NULL) OR ("T1"."B" = \'\'))) AND ("T1"."C" IS NULL)))', []]

    Test.group "[Codegen] Sorting" <|
        Test.specify "should allow sorting by a single column name" <|
            r1 = t1.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name "A"]) . at "B"
            r1.to_sql.prepare . should_equal ['SELECT "T1"."B" AS "B" FROM "T1" AS "T1" ORDER BY "T1"."A" ASC', []]

            r2 = t1.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name "B" Sort_Direction.Descending]) . at "A"
            r2.to_sql.prepare . should_equal ['SELECT "T1"."A" AS "A" FROM "T1" AS "T1" ORDER BY "T1"."B" DESC', []]

        Test.specify 'should allow sorting by multiple column names' <|
            r1 = t1.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name 'A', Sort_Column.Name 'B'])
            r1.to_sql.prepare . should_equal ['SELECT "T1"."A" AS "A", "T1"."B" AS "B", "T1"."C" AS "C" FROM "T1" AS "T1" ORDER BY "T1"."A" ASC, "T1"."B" ASC', []]

        Test.specify 'should allow sorting with specific by-column rules' <|
            r1 = t1.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name "A", Sort_Column.Name "B" Sort_Direction.Descending])
            r1.to_sql.prepare . should_equal ['SELECT "T1"."A" AS "A", "T1"."B" AS "B", "T1"."C" AS "C" FROM "T1" AS "T1" ORDER BY "T1"."A" ASC, "T1"."B" DESC', []]

        Test.specify 'should return warnings and errors when passed a non-existent column' <|
            action = t1.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name 'foobar']) on_problems=_
            tester table =
                table.to_sql.prepare . should_equal ['SELECT "T1"."A" AS "A", "T1"."B" AS "B", "T1"."C" AS "C" FROM "T1" AS "T1"', []]
            problems = [Missing_Input_Columns.Error [Sort_Column.Name 'foobar'], No_Input_Columns_Selected]
            Problems.test_problem_handling action problems tester

    Test.group "Helpers" <|
        Test.specify "fresh_names should provide fresh names" <|
            used_names = ["A", "A_1"]
            preferred_names = ["A", "A", "B"]
            fresh_names used_names preferred_names . should_equal ["A_2", "A_3", "B"]

    Test.group "[Codegen] Aggregation" <|
        Test.specify "should allow to count rows" <|
            code = t1.aggregate [Group_By "A" "A grp", Count "counter"] . to_sql . prepare
            code . should_equal ['SELECT "T1"."A" AS "A grp", COUNT(*) AS "counter" FROM "T1" AS "T1" GROUP BY "T1"."A"', []]

        Test.specify "should allow to group by multiple fields" <|
            code = t1.aggregate [Sum "A" "sum_a", Group_By "C" Nothing, Group_By "B" "B grp"] . to_sql . prepare
            code . should_equal ['SELECT SUM("T1"."A") AS "sum_a", "T1"."C" AS "C", "T1"."B" AS "B grp" FROM "T1" AS "T1" GROUP BY "T1"."C", "T1"."B"', []]

main = Test_Suite.run_main spec
