from Standard.Base import all

from Standard.Table import Table, Sort_Column, Column_Selector, Sort_Column_Selector
from Standard.Table.Data.Aggregate_Column.Aggregate_Column import all
from Standard.Table.Errors import No_Input_Columns_Selected, Missing_Input_Columns_Data

from Standard.Database import all
from Standard.Database.Errors import Unsupported_Database_Operation_Error_Data

from Standard.Test import Test, Problems
import Standard.Test.Extensions

import project.Database.Helpers.Name_Generator

spec prefix connection pending=Nothing =
    tables_to_clean = Vector.new_builder
    upload prefix data =
        name = Name_Generator.random_name prefix
        table = connection.upload_table name data
        tables_to_clean.append name
        table

    t1 = upload "T1" (Table.new [["a", [1, 4]], ["b", [2, 5]], ["c", [3, 6]]])
    Test.group prefix+"Basic Table Access" pending=pending <|
        Test.specify "should allow to materialize tables and columns into local memory" <|
            df = t1.read
            a = t1.at 'a' . read
            df.at 'a' . to_vector . should_equal [1, 4]
            a.to_vector . should_equal [1, 4]
        Test.specify "should allow to materialize columns directly into a Vector" <|
            v = t1.at 'a' . to_vector
            v . should_equal [1, 4]
        Test.specify "should preserve indexes when materializing tables" <|
            # TODO add multi indexes when implemented
            df = t1.set_index 'a' . read
            df.at 'b' . to_vector . should_equal [2, 5]
            df.columns.map .name . should_equal ['b', 'c']
            ix = df.index
            ix.name . should_equal 'a'
            ix.to_vector . should_equal [1, 4]
        Test.specify "should preserve indexes when materializing columns" <|
            # TODO add multi indexes when implemented
            b = t1.set_index 'a' . at 'b'
            col = b . read
            col.to_vector . should_equal [2, 5]

            ix = col.index
            ix.name . should_equal 'a'
            ix.to_vector . should_equal [1, 4]

            ix2 = b.to_table.index
            ix2.name . should_equal 'a'
            ix2.to_vector . should_equal [1, 4]
        Test.specify "should work correctly when there are no columns" <|
            empty = t1.select_columns []
            empty.read.column_count . should_equal 0
            empty.read.row_count . should_equal empty.row_count
        Test.specify "should handle bigger result sets" <|
            n = 1000
            original = Table.new [["a", Vector.new n ix->ix], ["b", Vector.new n ix-> ix *  3.1415926], ["c", Vector.new n ix-> ix.to_text]]
            table = upload "Big" original
            table.read.row_count . should_equal n

    Test.group prefix+"Mapping Operations" pending=pending <|
        t2 = upload "T2" <| Table.new [["x", [1, 4, 5, Nothing]], ["y", [2, 3, 5, Nothing]], ["b", [False, False, True, Nothing]]]
        x = t2.at "x"
        y = t2.at "y"
        b = t2.at "b"
        Test.specify "should allow combining columns with supported operations" <|
            (x + y).to_vector . should_equal [3, 7, 10, Nothing]
            (x - y).to_vector . should_equal [-1, 1, 0, Nothing]
            (x * y).to_vector . should_equal [2, 12, 25, Nothing]
            (x / y).to_vector . should_equal [0, 1, 1, Nothing]
            (x == y).to_vector . should_equal [False, False, True, Nothing]
            (x != y).to_vector . should_equal [True, True, False, Nothing]
            (x < y).to_vector . should_equal [True, False, False, Nothing]
            (x <= y).to_vector . should_equal [True, False, True, Nothing]
            (x > y).to_vector . should_equal (x <= y).not.to_vector
            (x >= y).to_vector . should_equal (x < y).not.to_vector
            (((x < y) || (x == y)) == (x <= y)).to_vector . should_equal [True, True, True, Nothing]
            (b || b.not).to_vector . should_equal [True, True, True, Nothing]

        Test.specify "should allow casting constants to be applied to the whole column" <|
            (x + 100).to_vector . should_equal [101, 104, 105, Nothing]
            (x * 10).to_vector . should_equal [10, 40, 50, Nothing]
            (x / 2).to_vector . should_equal [0, 2, 2, Nothing]
            (x - 10).to_vector . should_equal [-9, -6, -5, Nothing]
            (x == 4).to_vector . should_equal [False, True, False, Nothing]
            (x < 1000).to_vector . should_equal [True, True, True, Nothing]
            (b || False).to_vector . should_equal [False, False, True, Nothing]
            (b || True).to_vector . should_equal [True, True, True, True]
            (b && False).to_vector . should_equal [False, False, False, False]
            (x + Nothing).to_vector . should_equal [Nothing, Nothing, Nothing, Nothing]
            x.is_missing.to_vector . should_equal [False, False, False, True]
            (x == Nothing).to_vector . should_equal [Nothing, Nothing, Nothing, Nothing]

        t3 = upload "T3" <| Table.new [["s1", ["foobar", "bar", "baz", Nothing]], ["s2", ["foo", "ar", "a", Nothing]]]
        s1 = t3.at "s1"
        s2 = t3.at "s2"
        Test.specify "should handle Text operations" <|
            s1.starts_with s2 . to_vector . should_equal [True, False, False, Nothing]
            s1.starts_with "foo" . to_vector . should_equal [True, False, False, Nothing]
            s1.starts_with "ba" . to_vector . should_equal [False, True, True, Nothing]

            s1.contains s2 . to_vector . should_equal [True, True, True, Nothing]
            s1.contains "a" . to_vector . should_equal [True, True, True, Nothing]
            s1.contains "oo" . to_vector . should_equal [True, False, False, Nothing]

            s1.ends_with s2 . to_vector . should_equal [False, True, False, Nothing]
            s1.ends_with "ar" . to_vector . should_equal [True, True, False, Nothing]
            s1.ends_with "a" . to_vector . should_equal [False, False, False, Nothing]

    Test.group prefix+"Masking Tables" pending=pending <|
        Test.specify "should allow to select rows from a table or column based on an expression" <|
            t2 = t1.filter (t1.at "a" == 1)
            df = t2.read
            df.at "a" . to_vector . should_equal [1]
            df.at "b" . to_vector . should_equal [2]
            df.at "c" . to_vector . should_equal [3]
            t2.at "a" . to_vector . should_equal [1]
            t2.at "b" . to_vector . should_equal [2]
            t2.at "c" . to_vector . should_equal [3]

    # TODO these tests will soon be out of date, superseded by Common_Table_Spec
    Test.group prefix+"Joining Tables" pending=pending <|
        a = upload "TA" <| Table.new [["x", [0, 1, 7, 3, 6]], ["y", ["foo", "bar", "baz", "spam", "eggs"]]]
        b = upload "TB" <| Table.new [["w", [6, 3, 5, 5, 3, 3]], ["z", ["foo", "foo", "bar", "spam", "bar", "eggs"]]]

        ## The tests below use `sort`, because the SQL backend is not guaranteed
           to return the rows in any particular order. This is the `sort` from
           the Dataframes library, so it is independent of the library under
           testing here.
        Test.specify "should allow joining tables index-on-index" <|
            r_1 = a.set_index 'x' . join (b.set_index 'w') . read . order_by (Sort_Column_Selector.By_Name [Sort_Column.Name 'y', Sort_Column.Name 'z'])
            r_1.at 'y' . to_vector . should_equal ['bar', 'baz', 'eggs', 'foo', 'spam', 'spam', 'spam']
            r_1.at 'z' . to_vector . should_equal [Nothing, Nothing, 'foo', Nothing, 'bar', 'eggs', 'foo']

            r_2 = a.set_index 'y' . join (b.set_index 'z') drop_unmatched=True . read . order_by (Sort_Column_Selector.By_Name [Sort_Column.Name 'x', Sort_Column.Name 'w'])
            r_2.at 'x' . to_vector . should_equal [0, 0, 1, 1, 3, 6]
            r_2.at 'w' . to_vector . should_equal [3, 6, 3, 5, 5, 3]

        Test.specify "should allow joining tables column-on-index" <|
            r_1 = a.join (b.set_index 'w') on='x' . read . order_by (Sort_Column_Selector.By_Name [Sort_Column.Name 'y', Sort_Column.Name 'z'])
            r_1.at 'y' . to_vector . should_equal ['bar', 'baz', 'eggs', 'foo', 'spam', 'spam', 'spam']
            r_1.at 'z' . to_vector . should_equal [Nothing, Nothing, 'foo', Nothing, 'bar', 'eggs', 'foo']
            r_2 = a.join (b.set_index 'z') drop_unmatched=True on='y' . read . order_by (Sort_Column_Selector.By_Name [Sort_Column.Name 'x', Sort_Column.Name 'w'])
            r_2.at 'x' . to_vector . should_equal [0, 0, 1, 1, 3, 6]
            r_2.at 'w' . to_vector . should_equal [3, 6, 3, 5, 5, 3]

        Test.specify "should allow self-joins and append suffixes to disambiguate column names" <|
            r_1 = a.join (a.set_index 'x') on='x' . read . order_by (Sort_Column_Selector.By_Name [Sort_Column.Name 'x'])
            r_1.columns.map .name . should_equal ['x', 'y_left', 'y_right']
            r_1.at 'x' . to_vector . should_equal [0, 1, 3, 6, 7]
            expected_y = ['foo', 'bar', 'spam', 'eggs', 'baz']
            r_1.at 'y_left' . to_vector . should_equal expected_y
            r_1.at 'y_right' . to_vector . should_equal expected_y

            r_2 = a.set_index 'x' . join (a.set_index 'x') left_suffix='_old' right_suffix='_new'
            r_2.columns.map .name . should_equal ['y_old', 'y_new']

        Test.specify "should correctly handle multi-joins" <|
            ta = upload "M_TA" <| Table.new [["id", [0, 1]], ["name", ["Foo", "Hmm"]]]
            tb = upload "M_TB" <| Table.new [["id", [2, 0]], ["name", ["Bar", "Hmm"]]]
            tc = upload "M_TC" <| Table.new [["id_a", [0, 1]], ["id_b", [2, 0]]]
            ta_2 = ta.set_index "id"
            tb_2 = tb.set_index "id"
            res = (tc.join ta_2 on="id_a") . join tb_2 on="id_b" left_suffix="_a" right_suffix="_b"
            sel = res.select_columns (Column_Selector.By_Name ["name_a", "name_b"])
            df = sel.read . order_by (Sort_Column_Selector.By_Name [Sort_Column.Name "name_a"])
            df . at "name_a" . to_vector . should_equal ["Foo", "Hmm"]
            df . at "name_b" . to_vector . should_equal ["Bar", "Hmm"]

    Test.group prefix+"Missing Values" pending=pending <|
        t4 = upload "T4" <|
            Table.new [["a", [0, 1, Nothing, 42, Nothing]], ["b", [True, Nothing, True, False, Nothing]], ["c", ["", "foo", "bar", Nothing, Nothing]]]
        Test.specify "fill_missing should replace nulls" <|
            t4.at 'a' . fill_missing 10 . to_vector . should_equal [0, 1, 10, 42, 10]
            t4.at 'b' . fill_missing False . to_vector . should_equal [True, False, True, False, False]
            t4.at 'c' . fill_missing "NA" . to_vector . should_equal ["", "foo", "bar", "NA", "NA"]

        Test.specify "should correctly be counted" <|
            t4.row_count . should_equal 5
            col = t4.at 'a'
            col.length . should_equal 5
            col.count . should_equal 3
            col.count_missing . should_equal 2

    Test.group prefix+"Sorting" pending=pending <|
        df = upload "clothes" <|
            Table.new [["id", [1,2,3,4,5,6]], ["name", ["shoes","trousers","dress","skirt","blouse","t-shirt"]], ["quantity", [20,10,20,10,30,30]], ["rating", [3.0,Nothing,7.3,3.0,2.2,Nothing]], ["price", [37.2,42.1,64.1,87.4,13.5,64.2]]]

        Test.specify "should allow sorting by a single column name" <|
            r_1 = df.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name 'quantity'])
            r_1.at 'id' . to_vector . should_equal [2,4,1,3,5,6]

            r_3 = df.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name 'rating' Sort_Direction.Descending])
            r_3.at 'id' . to_vector . should_equal [3,1,4,5,2,6]

        Test.specify 'should allow sorting by multiple column names' <|
            r_1 = df.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name 'quantity', Sort_Column.Name 'rating'])
            r_1.at 'id' . to_vector . should_equal [2,4,1,3,6,5]

            r_2 = df.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name 'rating' Sort_Direction.Descending, Sort_Column.Name 'quantity' Sort_Direction.Descending])
            r_2.at 'id' . to_vector . should_equal [3,1,4,5,6,2]

        Test.specify 'should allow sorting with specific by-column rules' <|
            r_1 = df.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name "quantity", Sort_Column.Name "price" Sort_Direction.Descending])
            r_1.at 'id' . to_vector . should_equal [4,2,3,1,6,5]

        Test.specify 'should return warnings and errors when passed a non-existent column' <|
            action = df.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name 'foobar']) on_problems=_
            tester table =
                table.at 'id' . to_vector . should_equal [1,2,3,4,5,6]
            problems = [Missing_Input_Columns_Data [Sort_Column.Name 'foobar'], No_Input_Columns_Selected]
            Problems.test_problem_handling action problems tester

        Test.specify 'should correctly reorder all kinds of columns and leave the original columns untouched' <|
            ints = [1, 2, 3, 4, 5]
            reals = [1.3, 4.6, 3.2, 5.2, 1.6]
            bools = [False, False, True, True, False]
            texts = ["foo", "foo", "bar", "baz", "spam"]
            df = upload "T8" <|
                Table.new [["ord", [0,3,2,4,1]], ["ints", ints], ["reals", reals], ["bools", bools], ["texts", texts]]
            r = df.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name 'ord'])

            r.at 'ints' . to_vector . should_equal [1, 5, 3, 2, 4]
            df.at 'ints' . to_vector . should_equal ints

            r.at 'reals' . to_vector . should_equal [1.3, 1.6, 3.2, 4.6, 5.2]
            df.at 'reals' . to_vector . should_equal reals

            r.at 'bools' . to_vector . should_equal [False, False, True, False, True]
            df.at 'bools' . to_vector . should_equal bools

            r.at 'texts' . to_vector . should_equal ['foo', 'spam', 'bar', 'foo', 'baz']
            df.at 'texts' . to_vector . should_equal texts

        Test.specify 'should sort columns with specified ordering and missing placement' <|
            c = df.at 'rating'

            r_1 = c.sort
            r_1.to_vector.should_equal [Nothing, Nothing, 2.2, 3.0, 3.0, 7.3]

            r_2 = c.sort order=Sort_Direction.Descending
            r_2.to_vector.should_equal [7.3, 3.0, 3.0, 2.2, Nothing, Nothing]

    Test.group prefix+"Index" pending=pending <|
        t0 = upload "Tix" <|
            Table.new [["ix", [1,2,3]], ["c1", [4,5,6]]]
        t = t0.set_index 'ix'
        Test.specify "should be accessible by `at` like other columns" <|
            t.at 'ix' . to_vector . should_equal t.index.to_vector
        Test.specify "treated as a column indexed by itself should still correctly compute values" <|
            col = t.index+10
            vec = [11, 12, 13]
            col.to_vector . should_equal vec
            df_col = col.read
            df_col.to_vector . should_equal vec
            df_col.index.to_vector . should_equal [1, 2, 3]

    Test.group prefix+"Aggregation" pending=pending <|
        builders = [Vector.new_builder,Vector.new_builder,Vector.new_builder]
        insert v =
            builders.zip v .append
        insert ["foo",  0.4,     50]
        insert ["foo",  0.2,     10]
        insert ["foo",  0.4,     30]
        insert ["bar",  3.5,     20]
        insert ["foo",  Nothing, 20]
        insert ["baz",  6.7,     40]
        insert ["foo",  Nothing, 10]
        insert ["bar",  97,      60]
        insert ["quux", Nothing, 70]
        insert ["zzzz", Nothing, Nothing]
        insert ["zzzz", 1, 1]
        insert ["zzzz", 0, 0]
        insert ["zzzz", 0, 1]
        insert ["zzzz", 1, 0]
        insert ["zzzz", 0, 0]
        insert ["zzzz", Nothing, Nothing]
        t = upload "T9" <|
            Table.new [["name", builders.at 0 . to_vector], ["price", builders.at 1 . to_vector], ["quantity", builders.at 2 . to_vector]]

        ## A helper which makes sure that the groups in a materialized
           (InMemory) table are ordered according to a specified column or list
           of columns.
        determinize_by order_column table =
            table.order_by (Sort_Column_Selector.By_Name [Sort_Column.Name order_column])

        Test.specify "should allow counting group sizes and elements" <|
            ## Names set to lower case to avoid issue with Redshift where columns are
               returned in lower case.
            aggregates = [Count "count", Count_Not_Nothing "price" "count not nothing price", Count_Nothing "price" "count nothing price"]

            t1 = determinize_by "name" (t.aggregate ([Group_By "name"] + aggregates) . read)
            t1.at  "name" . to_vector . should_equal ["bar", "baz", "foo", "quux", "zzzz"]
            t1.at  "count" . to_vector . should_equal [2, 1, 5, 1, 7]
            t1.at  "count not nothing price" . to_vector . should_equal [2, 1, 3, 0, 5]
            t1.at  "count nothing price" . to_vector . should_equal [0, 0, 2, 1, 2]

            t2 = t.aggregate aggregates . read
            t2.at  "count" . to_vector . should_equal [16]
            t2.at  "count not nothing price" . to_vector . should_equal [11]
            t2.at  "count nothing price" . to_vector . should_equal [5]

        Test.specify "should allow simple arithmetic aggregations" <|
            ## Names set to lower case to avoid issue with Redshift where columns are
               returned in lower case.
            aggregates = [Sum "price" "sum price", Sum "quantity" "sum quantity", Average "price" "avg price"]
            ## TODO can check the datatypes

            t1 = determinize_by "name" (t.aggregate ([Group_By "name" Nothing] + aggregates) . read)
            t1.at  "name" . to_vector . should_equal ["bar", "baz", "foo", "quux", "zzzz"]
            t1.at  "sum price" . to_vector . should_equal [100.5, 6.7, 1, Nothing, 2]
            t1.at  "sum quantity" . to_vector . should_equal [80, 40, 120, 70, 2]
            t1.at  "avg price" . to_vector . should_equal [50.25, 6.7, (1/3), Nothing, (2/5)]

            t2 = t.aggregate aggregates . read
            t2.at  "sum price" . to_vector . should_equal [110.2]
            t2.at  "sum quantity" . to_vector . should_equal [312]
            t2.at  "avg price" . to_vector . should_equal [(110.2 / 11)]
    Test.group prefix+"Table.filter" pending=pending <|
        Test.specify "report error when trying to filter by a custom predicate" <|
            t1.filter "a" (x -> x % 2 == 0) . should_fail_with Unsupported_Database_Operation_Error_Data

    clean_table name = Panic.recover Any <|
        sql = 'DROP TABLE "' + name + '"'
        Panic.rethrow <| connection.execute_update sql
    tables_to_clean.to_vector.each clean_table
