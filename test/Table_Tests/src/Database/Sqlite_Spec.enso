from Standard.Base import all

from Standard.Database import all
from Standard.Database.Connection.Connection import Sql_Error
import Standard.Test
import Standard.Table as Materialized_Table
import project.Database.Common_Spec
import project.Database.Helpers.Name_Generator
import project.Common_Table_Spec
import project.Aggregate_Spec

sqlite_specific_spec connection =
    Test.group "[SQLite] Error Handling" <|
        Test.specify "should wrap errors" <|
            connection.execute_query "foobar" . should_fail_with Sql_Error
            connection.execute_update "foobar" . should_fail_with Sql_Error

            action = connection.execute_query "SELECT A FROM undefined_table"
            action . should_fail_with Sql_Error
            action.catch.to_text . should_equal "There was an SQL error: '[SQLITE_ERROR] SQL error or missing database (no such table: undefined_table)'."

    Test.group "[SQLite] Metadata" <|
        tinfo = Name_Generator.random_name "Tinfo"
        connection.execute_update 'CREATE TABLE "'+tinfo+'" ("strs" VARCHAR, "ints" INTEGER, "bools" BOOLEAN, "reals" REAL)'
        t = connection.access_table tinfo
        t.insert ["a", Nothing, False, 1.2]
        t.insert ["abc", Nothing, Nothing, 1.3]
        t.insert ["def", 42, True, 1.4]
        Test.specify "should return Table information" <|
            i = t.info
            i.index . to_vector . should_equal ["strs", "ints", "bools", "reals"]
            i.at "Items Count" . to_vector . should_equal [3, 1, 2, 3]
            i.at "SQL Type" . to_vector . should_equal ["VARCHAR", "INTEGER", "BOOLEAN", "REAL"]
        Test.specify "should infer standard types correctly" <|
            t.at "strs" . sql_type . is_definitely_text . should_be_true
            t.at "ints" . sql_type . is_definitely_integer . should_be_true
            t.at "bools" . sql_type . is_definitely_boolean . should_be_true
            t.at "reals" . sql_type . is_definitely_double . should_be_true

            t.at "ints" . sql_type . is_definitely_text . should_be_false
            t.at "strs" . sql_type . is_definitely_integer . should_be_false
            t.at "reals" . sql_type . is_definitely_boolean . should_be_false
            t.at "bools" . sql_type . is_definitely_double . should_be_false

spec =
    Enso_Project.data.create_directory
    file = Enso_Project.data / "sqlite_test.db"
    file.delete_if_exists
    connection = Database.open_sqlite_file file
    prefix = "[SQLite] "

    name_counter = Ref.new 0
    table_builder columns =
        ix = Ref.get name_counter
        Ref.put name_counter ix+1
        name = Name_Generator.random_name "table_"+ix.to_text

        in_mem_table = Materialized_Table.new <| columns.map description-> [description.at 0, description.at 2]
        connection.upload_table name in_mem_table

    Common_Spec.spec prefix connection
    here.sqlite_specific_spec connection
    Common_Table_Spec.spec prefix table_builder supports_case_sensitive_columns=False

    selection = Aggregate_Spec.Test_Selection advanced_stats=False text=False first_last=False std_dev=False multi_distinct=False
    agg_in_memory_table = (Enso_Project.data / "data.csv") . read_csv
    agg_table = connection.upload_table (Name_Generator.random_name "Agg1") agg_in_memory_table
    empty_agg_table = connection.upload_table (Name_Generator.random_name "Agg_Empty") (agg_in_memory_table.take_start 0)
    materialize = .to_dataframe
    Aggregate_Spec.aggregate_spec prefix agg_table empty_agg_table materialize selection

    connection.close
    file.delete

main = Test.Suite.run_main here.spec
