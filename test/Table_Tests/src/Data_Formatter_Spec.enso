from Standard.Base import all

from Standard.Table import Table, Column, Data_Formatter, Quote_Style
from Standard.Table.Errors import all

from Standard.Test import Test, Test_Suite, Problems
import Standard.Test.Extensions

type Custom_Type
    Value field

type Custom_Type_With_To_Text
    Value field

    to_text : Text
    to_text self = "[CUSTOM = " + self.field.to_text + "]"

type Custom_Type_With_Error
    to_text : Text
    to_text self = Error.throw (Illegal_State_Error_Data "foo_error")

type Custom_Type_With_Panic
    to_text : Text
    to_text self = Panic.throw (Illegal_State_Error_Data "foo_panic")

spec =
    Test.group "DataFormatter.parse" <|
        Test.specify "should parse numbers" <|
            formatter = Data_Formatter.Value
            formatter.parse "123" . should_equal 123
            formatter.parse "1000000" . should_equal 1000000
            formatter.parse "1000000.0" . should_equal 1000000.0
            formatter.parse "0" . should_equal 0
            formatter.parse "-1.0" . should_equal -1.0
            formatter.parse "-1." . should_equal -1.0
            formatter.parse "-1.000000" . should_equal -1.0
            formatter.parse "-2" . should_equal -2
            formatter.parse "1.0001" . should_equal 1.0001
            formatter.parse "Infinity" . should_equal (Number.positive_infinity)
            formatter.parse "-Infinity" . should_equal (Number.negative_infinity)
            formatter.parse "NaN" . is_nan . should_be_true

        Test.specify "should allow customizing the decimal point and thousand separator" <|
            formatter = Data_Formatter.Value thousand_separator="_" decimal_point=","
            formatter.parse "123" . should_equal 123
            formatter.parse "1_000_000" . should_equal 1000000
            formatter.parse "1_000_000_000" . should_equal (1000 * 1000 * 1000)
            formatter.parse "100_0_0_0" . should_equal 100000
            formatter.parse "1__00_000,0" . should_equal 100000.0
            formatter.parse "-100_000,0000" . should_equal -100000.0
            formatter.parse "0" . should_equal 0
            formatter.parse "-1,0" . should_equal -1.0
            formatter.parse "1,0001" . should_equal 1.0001

        Test.specify "should support exponential notation, but only if explicitly enabled" <|
            plain_formatter = Data_Formatter.Value
            exponential_formatter = Data_Formatter.Value allow_exponential_notation=True
            plain_formatter.parse "1E3" . should_equal "1E3"

            r1 = plain_formatter.parse "1E3" Decimal
            r1.should_equal Nothing
            Warning.get_all r1 . map .value . should_equal [(Invalid_Format_Data Nothing Decimal ["1E3"])]

            exponential_formatter.parse "1E3" . should_equal 1000.0
            exponential_formatter.parse "1E3" Decimal . should_equal 1000.0
            exponential_formatter.parse "1E3" Integer . should_equal Nothing

            plain_formatter.parse "1.2E-3" . should_equal "1.2E-3"
            plain_formatter.parse "1.2E-3" Decimal . should_equal Nothing
            exponential_formatter.parse "1.2E-3" . should_equal 0.0012
            exponential_formatter.parse "1.2E-3" Decimal . should_equal 0.0012

        Test.specify "handle leading zeros, only if enabled" <|
            Data_Formatter.Value.parse "0100" . should_equal "0100"
            Data_Formatter.Value.parse "000" . should_equal "000"
            Data_Formatter.Value.parse "000.0" . should_equal "000.0"
            formatter = Data_Formatter.Value allow_leading_zeros=True
            formatter.parse "0100" . should_equal 100
            formatter.parse "000" . should_equal 0
            formatter.parse "000.0" . should_equal 0.0

        Test.specify "should parse booleans" <|
            formatter = Data_Formatter.Value
            formatter.parse "True" . should_equal True
            formatter.parse "False" . should_equal False

        Test.specify "should allow custom boolean formats" <|
            formatter = Data_Formatter.Value true_values=["YES", "1", "true"] false_values=["NO", "0", "false"]
            formatter.parse "YES" . should_equal True
            formatter.parse "NO" . should_equal False
            (Data_Formatter.Value true_values=[] false_values=[]).parse "True" datatype=Boolean . should_equal Nothing

        Test.specify "should parse dates" <|
            formatter = Data_Formatter.Value
            formatter.parse "2022-01-01" . should_equal (Date.new 2022)
            formatter.parse "2020-05-07" datatype=Date . should_equal (Date.new 2020 5 7)
            formatter.parse "1999-01-01 00:00:00" . should_equal (Date_Time.new 1999)
            formatter.parse "1999-02-03 04:05:06" . should_equal (Date_Time.new 1999 2 3 4 5 6)
            formatter.parse "1999-01-01 00:00" datatype=Date_Time . should_equal (Date_Time.new 1999)
            formatter.parse "1999-02-03 04:05" . should_equal (Date_Time.new 1999 2 3 4 5 0)
            formatter.parse "00:00:00" . should_equal (Time_Of_Day.new)
            formatter.parse "17:34:59" . should_equal (Time_Of_Day.new 17 34 59)
            formatter.parse "00:00" . should_equal (Time_Of_Day.new)
            formatter.parse "17:34" datatype=Time_Of_Day . should_equal (Time_Of_Day.new 17 34)

            formatter.parse "00:00:65" datatype=Time_Of_Day . should_equal Nothing
            formatter.parse "30:00:65" datatype=Time_Of_Day . should_equal Nothing
            formatter.parse "1999-01-01 00:00" datatype=Time_Of_Day . should_equal Nothing
            formatter.parse "1999-01-01 00:00" datatype=Date . should_equal Nothing
            formatter.parse "30:00:65" . should_equal "30:00:65"

        Test.specify "should fallback to Text" <|
            formatter = Data_Formatter.Value
            formatter.parse "Text" . should_equal "Text"
            complex_text = """
                Text with such 'quotes' and also "that" and `that`
                And newlines toO!
            formatter.parse complex_text . should_equal complex_text

    Test.group "DataFormatter.format" <|
        Test.specify "should handle Nothing" <|
            Data_Formatter.Value.format Nothing . should_equal Nothing

        Test.specify "should format numbers" <|
            formatter = Data_Formatter.Value
            formatter.format 123 . should_equal "123"
            formatter.format 1000000 . should_equal "1000000"
            formatter.format 1000000.0 . should_equal "1000000.0"
            formatter.format 0 . should_equal "0"
            formatter.format -1.0 . should_equal "-1.0"
            formatter.format -2 . should_equal "-2"
            formatter.format 1.0001 . should_equal "1.0001"
            formatter.format (Number.positive_infinity) . should_equal "Infinity"
            formatter.format (Number.negative_infinity) . should_equal "-Infinity"
            formatter.format (Number.nan) . should_equal "NaN"

        Test.specify "should allow customizing the decimal point and thousand separator" <|
            formatter = Data_Formatter.Value thousand_separator="_" decimal_point=","
            formatter.format 123 . should_equal "123"
            formatter.format 1000000 . should_equal "1_000_000"
            formatter.format (1000 * 1000 * 1000) . should_equal "1_000_000_000"
            formatter.format 100000 . should_equal "100_000"
            formatter.format 100000.0 . should_equal "100_000,0"
            formatter.format -100000.0 . should_equal "-100_000,0"
            formatter.format 0 . should_equal "0"
            formatter.format -1.0 . should_equal "-1,0"
            formatter.format 1.0001 . should_equal "1,0001"

        Test.specify "should format booleans" <|
            formatter = Data_Formatter.Value
            formatter.format True . should_equal "True"
            formatter.format False . should_equal "False"

        Test.specify "should allow custom boolean formats" <|
            formatter = Data_Formatter.Value true_values=["YES", "1", "true"] false_values=["NO", "0", "false"]
            formatter.format True . should_equal "YES"
            formatter.format False . should_equal "NO"
            (Data_Formatter.Value true_values=[] false_values=[]).format True . should_fail_with Illegal_Argument_Error_Data

        Test.specify "should format dates" <|
            formatter = Data_Formatter.Value
            formatter.format (Date.new 2022) . should_equal "2022-01-01"
            formatter.format (Date_Time.new 1999) . should_equal "1999-01-01 00:00:00"
            formatter.format (Date_Time.new 1999 zone=Time_Zone.utc) . should_equal "1999-01-01 00:00:00"
            formatter.format (Date_Time.new 1999 zone=(Time_Zone.parse "America/Los_Angeles")) . should_equal "1999-01-01 00:00:00"
            formatter.format (Time_Of_Day.new) . should_equal "00:00:00"

        Test.specify "should allow custom date formats" <|
            formatter = Data_Formatter.Value date_formats=["E, d MMM y", "d MMM y[ G]"] datetime_formats=["dd/MM/yyyy HH:mm [z]"] time_formats=["h:mma"] datetime_locale=Locale.uk
            formatter.format (Date.new 2022 06 21) . should_equal "Tue, 21 Jun 2022"
            formatter.format (Date_Time.new 1999 02 03 04 56 11 zone=Time_Zone.utc) . should_equal "03/02/1999 04:56 UTC"
            formatter.format (Date_Time.new 1999 02 03 04 56 11 zone=(Time_Zone.parse "America/Los_Angeles")) . should_equal "03/02/1999 04:56 GMT-08:00"
            formatter.format (Time_Of_Day.new 13 55) . should_equal "1:55pm"

        Test.specify "should act as identity on Text" <|
            formatter = Data_Formatter.Value
            formatter.format "Text" . should_equal "Text"
            complex_text = """
                Text with such 'quotes' and also "that" and `that`
                And newlines toO!
            formatter.format complex_text . should_equal complex_text

        Test.specify "should work with custom types, falling back to the `.to_text` method" <|
            formatter = Data_Formatter.Value thousand_separator="_"
            formatter.format (Custom_Type.Value 42) . should_equal "(Custom_Type.Value 42)"
            # We fallback to `to_text`, so obviously the nested numbers will not know about our formatting settings.
            formatter.format (Custom_Type_With_To_Text.Value 1000) . should_equal "[CUSTOM = 1000]"

        Test.specify "should correctly pass through errors from custom type's `.to_text` method" pending="TODO: figure out the desired behavior, see: https://www.pivotaltracker.com/story/show/182522644" <|
            formatter = Data_Formatter.Value
            formatter.format Custom_Type_With_Error . should_fail_with Illegal_State_Error_Data
            Test.expect_panic_with (formatter.format Custom_Type_With_Panic) Illegal_State_Error_Data

    Test.group "DataFormatter builders" <|
        # We create a formatter with all non-default values to ensure that the builders keep the existing values of other properties instead of switching to the constructor's defaults.
        formatter_1 = Data_Formatter.Value trim_values=False allow_leading_zeros=True decimal_point=',' thousand_separator='_' allow_exponential_notation=True datetime_formats=["yyyy/MM/dd HH:mm:ss"] date_formats=["dd/MM/yyyy"] time_formats=["HH/mm/ss"] datetime_locale=Locale.uk true_values=["YES"] false_values=["NO"]
        Test.specify "should allow changing number formatting settings" <|
            formatter_2 = formatter_1.with_number_formatting decimal_point="*"
            formatter_2.decimal_point . should_equal "*"
            formatter_2.thousand_separator . should_equal formatter_1.thousand_separator
            formatter_2.allow_leading_zeros . should_equal formatter_1.allow_leading_zeros
            formatter_2.allow_exponential_notation . should_equal formatter_1.allow_exponential_notation
            formatter_2.true_values . should_equal formatter_1.true_values
            formatter_2.false_values . should_equal formatter_1.false_values
            formatter_2.date_formats . should_equal formatter_1.date_formats
            formatter_2.datetime_formats . should_equal formatter_1.datetime_formats
            formatter_2.time_formats . should_equal formatter_1.time_formats
            formatter_2.datetime_locale . should_equal formatter_1.datetime_locale
            formatter_2.trim_values . should_equal formatter_1.trim_values

            formatter_3 = formatter_1.with_number_formatting thousand_separator="" allow_exponential_notation=False allow_leading_zeros=False
            formatter_3.decimal_point . should_equal formatter_1.decimal_point
            formatter_3.thousand_separator . should_equal ""
            formatter_3.allow_leading_zeros . should_equal False
            formatter_3.allow_exponential_notation . should_equal False

        Test.specify "should allow changing datetime formats" <|
            formatter_1.with_datetime_formats . should_equal formatter_1

            formatter_2 = formatter_1.with_datetime_formats date_formats="dd.MM.yyyy"
            formatter_2.date_formats . should_equal ["dd.MM.yyyy"]
            formatter_2.datetime_formats . should_equal formatter_1.datetime_formats
            formatter_2.time_formats . should_equal formatter_1.time_formats
            formatter_2.decimal_point . should_equal formatter_1.decimal_point
            formatter_2.thousand_separator . should_equal formatter_1.thousand_separator
            formatter_2.allow_leading_zeros . should_equal formatter_1.allow_leading_zeros
            formatter_2.allow_exponential_notation . should_equal formatter_1.allow_exponential_notation
            formatter_2.true_values . should_equal formatter_1.true_values
            formatter_2.false_values . should_equal formatter_1.false_values
            formatter_2.datetime_locale . should_equal formatter_1.datetime_locale
            formatter_2.trim_values . should_equal formatter_1.trim_values

            formatter_3 = formatter_1.with_datetime_formats date_formats=[] datetime_formats=["foobar"] time_formats="baz"
            formatter_3.date_formats . should_equal []
            formatter_3.datetime_formats . should_equal ["foobar"]
            formatter_3.time_formats . should_equal ["baz"]
            formatter_3.decimal_point . should_equal formatter_1.decimal_point
            formatter_3.thousand_separator . should_equal formatter_1.thousand_separator
            formatter_3.allow_leading_zeros . should_equal formatter_1.allow_leading_zeros
            formatter_3.allow_exponential_notation . should_equal formatter_1.allow_exponential_notation
            formatter_3.true_values . should_equal formatter_1.true_values
            formatter_3.false_values . should_equal formatter_1.false_values
            formatter_3.datetime_locale . should_equal formatter_1.datetime_locale
            formatter_3.trim_values . should_equal formatter_1.trim_values

        Test.specify "should allow changing the datetime locale" <|
            formatter_2 = formatter_1.with_locale Locale.france
            formatter_2.datetime_locale . should_equal Locale.france
            formatter_2.date_formats . should_equal formatter_1.date_formats
            formatter_2.datetime_formats . should_equal formatter_1.datetime_formats
            formatter_2.time_formats . should_equal formatter_1.time_formats
            formatter_2.decimal_point . should_equal formatter_1.decimal_point
            formatter_2.thousand_separator . should_equal formatter_1.thousand_separator
            formatter_2.allow_leading_zeros . should_equal formatter_1.allow_leading_zeros
            formatter_2.allow_exponential_notation . should_equal formatter_1.allow_exponential_notation
            formatter_2.true_values . should_equal formatter_1.true_values
            formatter_2.false_values . should_equal formatter_1.false_values
            formatter_2.trim_values . should_equal formatter_1.trim_values

        Test.specify "should allow changing booleans' representations" <|
            formatter_2 = formatter_1.with_boolean_values "1" "0"
            formatter_2.date_formats . should_equal formatter_1.date_formats
            formatter_2.datetime_formats . should_equal formatter_1.datetime_formats
            formatter_2.time_formats . should_equal formatter_1.time_formats
            formatter_2.decimal_point . should_equal formatter_1.decimal_point
            formatter_2.thousand_separator . should_equal formatter_1.thousand_separator
            formatter_2.allow_leading_zeros . should_equal formatter_1.allow_leading_zeros
            formatter_2.allow_exponential_notation . should_equal formatter_1.allow_exponential_notation
            formatter_2.true_values . should_equal ["1"]
            formatter_2.false_values . should_equal ["0"]
            formatter_2.datetime_locale . should_equal formatter_1.datetime_locale
            formatter_2.trim_values . should_equal formatter_1.trim_values

            formatter_3 = formatter_1.with_boolean_values false_values=[] true_values=[]
            formatter_3.true_values . should_equal []
            formatter_3.false_values . should_equal []

main = Test_Suite.run_main spec
