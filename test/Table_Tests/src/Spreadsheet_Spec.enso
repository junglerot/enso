from Standard.Base import all
import Standard.Test
import Standard.Table
import Standard.Table.Io.File_Format
import Standard.Table.Io.File_Read
from Standard.Table.Io.Excel import Sheet
from Standard.Table.Data.Data_Formatter as Data_Formatter_Module import Data_Formatter

import project.Util


spec =

    Test.group 'XLSX writing' <|
        ## We disable parsing dates, because date support is not advanced enough
           for these tests. This should ideally be re-enabled with the
           completion of the following story:
           https://www.pivotaltracker.com/story/show/181755990
        no_dates = File_Format.Delimited "," value_formatter=(Data_Formatter date_formats=[] time_formats=[] datetime_formats=[])
        out = Enso_Project.data / 'out.xlsx'
        table = Enso_Project.data/'varied_column.csv' . read (format = no_dates)
        clothes = Enso_Project.data/'clothes.csv' . read (format = no_dates)

        Test.specify 'should write tables to non-existent XLSX files' <|
            out.delete_if_exists
            table.write_xlsx out
            written = out.read
            written.should_equal table
            out.delete_if_exists

        Test.specify 'should create a new sheet if it already exists and write mode is Create' <|
            out.delete_if_exists
            table.write_xlsx out sheet='Foo'
            clothes.write_xlsx out sheet='Foo'
            read_1 = out.read (File_Format.Excel (Sheet "Foo"))
            read_1 . should_equal table
            read_2 = out.read (File_Format.Excel (Sheet "Foo 1"))
            read_2 . should_equal clothes
            out.delete_if_exists

        Test.specify 'should overwrite a sheet if it already exists and write mode is Overwrite' <|
            out.delete_if_exists
            table.write_xlsx out sheet='Foo'
            clothes.write_xlsx out sheet='Foo' write_mode=Table.Spreadsheet_Write_Mode.Overwrite
            read = out.read (File_Format.Excel (Sheet "Foo"))
            read . should_equal clothes
            out.delete_if_exists

        Test.specify 'should append to a sheet if it already exists and write mode is Append' <|
            out.delete_if_exists
            clothes.write_xlsx out sheet='Foo'
            clothes.write_xlsx out sheet='Foo' write_mode=Table.Spreadsheet_Write_Mode.Append include_header=False
            read = out.read (File_Format.Excel (Sheet "Foo"))
            read . should_equal (clothes.concat clothes)
            out.delete_if_exists

        Test.specify 'should write multiple files if row limit is specified' <|
            out_1 = Enso_Project.data / 'out_1.xlsx'
            out_2 = Enso_Project.data / 'out_2.xlsx'
            out_1.delete_if_exists
            out_2.delete_if_exists
            clothes.write_xlsx out max_rows_per_file=4
            out_1.read . should_equal (clothes.take_start 4)
            out_2.read . should_equal (clothes.take_end 2)
            out_1.delete_if_exists
            out_2.delete_if_exists

main = Test.Suite.run_main here.spec
