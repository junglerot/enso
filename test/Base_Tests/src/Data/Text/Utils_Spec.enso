from Standard.Base import all

polyglot java import org.enso.base.Text_Utils
polyglot java import org.enso.base.text.CaseFoldedString
polyglot java import com.ibm.icu.text.BreakIterator

from Standard.Test_New import all


polyglot java import java.lang.Exception as JException

add_specs suite_builder =
    suite_builder.group "Text_Utils" group_builder->
        kshi = '\u0915\u094D\u0937\u093F'
        facepalm = '\u{1F926}\u{1F3FC}\u200D\u2642\uFE0F'
        text = "a"+kshi+facepalm+'e\u{301}Z'
        codepoints_to_graphemes = _.flatten <| text.characters.map_with_index ix-> grapheme->
            codepoints_count = grapheme.char_vector.length
            Vector.new codepoints_count _->ix

        group_builder.specify "should correctly translate an codepoint index to a grapheme index" <|
            codepoints_to_graphemes . each_with_index codepoint_ix-> grapheme_ix->
                found_grapheme_ix = Text_Utils.utf16_index_to_grapheme_index text codepoint_ix
                found_grapheme_ix.should_equal grapheme_ix

            Text_Utils.utf16_index_to_grapheme_index text text.char_vector.length . should_equal text.length
            Text_Utils.utf16_index_to_grapheme_index "" 0 . should_equal 0

            Text_Utils.utf16_index_to_grapheme_index 'Ä…' 0 . should_equal 0
            Text_Utils.utf16_index_to_grapheme_index 'Ä…' 1 . should_equal 1

            Text_Utils.utf16_index_to_grapheme_index "aB" 0 . should_equal 0
            Text_Utils.utf16_index_to_grapheme_index "aB" 1 . should_equal 1
            Text_Utils.utf16_index_to_grapheme_index "aB" 2 . should_equal 2

            Text_Utils.utf16_index_to_grapheme_index 'a\u{301}' 0 . should_equal 0
            Text_Utils.utf16_index_to_grapheme_index 'a\u{301}' 1 . should_equal 0
            Text_Utils.utf16_index_to_grapheme_index 'a\u{301}' 2 . should_equal 1

        group_builder.specify "should correctly translate a series of codepoint indices to a grapheme indices in a batch" <|
            translate_indices text ixes =
                Vector.from_polyglot_array <| Text_Utils.utf16_indices_to_grapheme_indices text ixes
            codepoint_indices = Vector.new text.char_vector.length ix->ix
            translate_indices text codepoint_indices . should_equal codepoints_to_graphemes

            translate_indices "" [0] . should_equal [0]
            translate_indices 'Ä…' [0, 1] . should_equal [0, 1]
            translate_indices "aB" [0, 1, 2] . should_equal [0, 1, 2]
            translate_indices 'a\u{301}' [0, 1, 2] . should_equal [0, 0, 1]

        group_builder.specify "should correctly case-fold a string and translate codeunits to graphemes" <|
            text = 'a\u{301}AZÃŸï¬ƒÄ…'
            folded = CaseFoldedString.fold text Locale.default.java_locale
            folded.getFoldedString . should_equal 'a\u{301}azssffiÄ…'

            codeunits = Vector.new folded.getFoldedString.char_vector.length+1 ix->ix
            grapheme_ixes = codeunits.map ix->
                folded.findGrapheme ix . index
            grapheme_ixes . should_equal [0, 0, 1, 2, 3, 3, 4, 4, 4, 5, 6]

            Test.expect_panic_with (folded.findGrapheme -1) JException
            Test.expect_panic_with (folded.findGrapheme folded.getFoldedString.char_vector.length+1) JException

        group_builder.specify "should correctly take prefix and suffix of a string" <|
            txt = 's\u0301Ä…Å›c\u0301'
            Text_Utils.take_prefix txt 1 . should_equal 's\u0301'
            Text_Utils.take_prefix txt 2 . should_equal 's\u0301Ä…'
            Text_Utils.take_prefix txt 3 . should_equal 's\u0301Ä…Å›'
            Text_Utils.take_prefix txt 4 . should_equal txt
            Text_Utils.take_prefix txt 5 . should_equal txt
            Text_Utils.take_prefix txt 400 . should_equal txt
            Text_Utils.take_prefix txt 0 . should_equal ''
            Text_Utils.take_prefix txt -1 . should_equal ''
            Text_Utils.take_prefix txt -42 . should_equal ''

            Text_Utils.take_suffix txt 1 . should_equal 'c\u0301'
            Text_Utils.take_suffix txt 2 . should_equal 'Å›c\u0301'
            Text_Utils.take_suffix txt 3 . should_equal 'Ä…Å›c\u0301'
            Text_Utils.take_suffix txt 4 . should_equal txt
            Text_Utils.take_suffix txt 5 . should_equal txt
            Text_Utils.take_suffix txt 400 . should_equal txt
            Text_Utils.take_suffix txt 0 . should_equal ''
            Text_Utils.take_suffix txt -1 . should_equal ''
            Text_Utils.take_suffix txt -42 . should_equal ''

            Text_Utils.take_prefix 'ðŸš€ðŸš§' 1 . should_equal 'ðŸš€'
            Text_Utils.take_prefix 'ðŸš€ðŸš§' 2 . should_equal 'ðŸš€ðŸš§'
            Text_Utils.take_suffix 'ðŸš€ðŸš§' 1 . should_equal 'ðŸš§'

            kshi = '\u0915\u094D\u0937\u093F'
            Text_Utils.take_prefix (kshi+kshi+kshi) 1 . should_equal kshi
            Text_Utils.take_prefix (kshi+kshi+kshi) 2 . should_equal kshi+kshi
            Text_Utils.take_suffix (kshi+kshi+'a'+kshi) 2 . should_equal 'a'+kshi
            Text_Utils.take_suffix (kshi+kshi+'a'+kshi) 1 . should_equal kshi

    suite_builder.group "to_display_text" group_builder->
        group_builder.specify "simple conversion" <|
            "Hello".to_display_text . should_equal "Hello"

        group_builder.specify "long text conversion" <|
            long = "Hello World! ".repeat 1024
            disp = long.to_display_text
            disp.length . should_equal 80
            disp.characters.take (First 5) . should_equal [ 'H', 'e', 'l', 'l', 'o' ]
            disp.characters.take (Last 6) . should_equal ['l', 'd', '!', ' ', ' ', 'â€¦']

        group_builder.specify "grapheme 1 conversion" <|
            txt = 'a\u0321\u0302'*100
            txt.to_display_text . should_equal ('a\u0321\u0302'*78 + ' â€¦')

        group_builder.specify "grapheme 2 conversion" <|
            txt = '\u0915\u094D\u0937\u093F'*100
            txt.to_display_text . should_equal ('\u0915\u094D\u0937\u093F'*78 + ' â€¦')

        group_builder.specify "grapheme 3 conversion" <|
            txt = '\u{1F926}\u{1F3FC}\u200D\u2642\uFE0F'*100
            txt.to_display_text . should_equal ('\u{1F926}\u{1F3FC}\u200D\u2642\uFE0F'*78 + ' â€¦')

main =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter

