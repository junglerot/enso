from Standard.Base import all
import Standard.Base.Errors.Common.Type_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Test_New import all

polyglot java import java.math.BigInteger

## PRIVATE
add_specs group_builder round_fun =
    group_builder.specify "Can round positive decimals correctly" <|
        round_fun 3.0 . should_equal 3
        round_fun 3.00001 . should_equal 3
        round_fun 3.3 . should_equal 3
        round_fun 3.49999 . should_equal 3
        round_fun 3.5 . should_equal 4
        round_fun 3.50001 . should_equal 4
        round_fun 3.99999 . should_equal 4

    group_builder.specify "Can round negative decimals correctly" <|
        round_fun -3.0 . should_equal -3
        round_fun -3.00001 . should_equal -3
        round_fun -3.3 . should_equal -3
        round_fun -3.49999 . should_equal -3
        round_fun -3.5 . should_equal -4
        round_fun -3.50001 . should_equal -4
        round_fun -3.99999 . should_equal -4

    group_builder.specify "Explicit and implicit 0 decimal places work the same" <|
        round_fun 3.00001 0 . should_equal 3
        round_fun 3.3 0 . should_equal 3
        round_fun 3.00001 . should_equal 3
        round_fun 3.3 . should_equal 3

    group_builder.specify "Can round zero and small decimals correctly" <|
        round_fun 0.0 . should_equal 0
        round_fun 0.00001 . should_equal 0
        round_fun -0.00001 . should_equal 0

    group_builder.specify "Can round positive decimals to a specified number of decimal places" <|
        round_fun 3.0001 2 . should_equal 3.0
        round_fun 3.1414 2 . should_equal 3.14
        round_fun 3.1415 2 . should_equal 3.14
        round_fun 3.1416 2 . should_equal 3.14
        round_fun 3.9999 2 . should_equal 4.0

        round_fun 3.0001 3 . should_equal 3.0
        round_fun 3.1414 3 . should_equal 3.141
        round_fun 3.1415 3 . should_equal 3.142
        round_fun 3.1416 3 . should_equal 3.142
        round_fun 3.9999 3 . should_equal 4.0

    group_builder.specify "Can round negative decimals to a specified number of decimal places" <|
        round_fun -3.0001 2 . should_equal -3.0
        round_fun -3.1414 2 . should_equal -3.14
        round_fun -3.1415 2 . should_equal -3.14
        round_fun -3.1416 2 . should_equal -3.14
        round_fun -3.9999 2 . should_equal -4.0

        round_fun -3.0001 3 . should_equal -3.0
        round_fun -3.1414 3 . should_equal -3.141
        round_fun -3.1415 3 . should_equal -3.142
        round_fun -3.1416 3 . should_equal -3.142
        round_fun -3.9999 3 . should_equal -4.0

    group_builder.specify "Can round positive decimals to a specified negative number of decimal places" <|
        round_fun 1234.0 -1 . should_equal 1230
        round_fun 1234.0 -2 . should_equal 1200
        round_fun 1234.0 -3 . should_equal 1000
        round_fun 1234.0 -4 . should_equal 0

        round_fun 1499.0 -1 . should_equal 1500
        round_fun 1499.0 -2 . should_equal 1500
        round_fun 1499.0 -3 . should_equal 1000

        round_fun 1495.0 -1 . should_equal 1500
        round_fun 1494.0 -1 . should_equal 1490
        round_fun 1495.0 -2 . should_equal 1500
        round_fun 1494.0 -2 . should_equal 1500

    group_builder.specify "Can round negative decimals to a specified negative number of decimal places" <|
        round_fun -1234.0 -1 . should_equal -1230
        round_fun -1234.0 -2 . should_equal -1200
        round_fun -1234.0 -3 . should_equal -1000
        round_fun -1234.0 -4 . should_equal 0

        round_fun -1499.0 -1 . should_equal -1500
        round_fun -1499.0 -2 . should_equal -1500
        round_fun -1499.0 -3 . should_equal -1000

        round_fun -1495.0 -1 . should_equal -1500
        round_fun -1494.0 -1 . should_equal -1490
        round_fun -1495.0 -2 . should_equal -1500
        round_fun -1494.0 -2 . should_equal -1500

    group_builder.specify "Banker's rounding handles half-way values correctly" <|
        round_fun -3.5 use_bankers=True . should_equal -4
        round_fun -2.5 use_bankers=True . should_equal -2
        round_fun -1.5 use_bankers=True . should_equal -2
        round_fun -0.5 use_bankers=True . should_equal 0
        round_fun 0.5 use_bankers=True . should_equal 0
        round_fun 1.5 use_bankers=True . should_equal 2
        round_fun 2.5 use_bankers=True . should_equal 2
        round_fun 3.5 use_bankers=True . should_equal 4

        round_fun 0.235 2 use_bankers=True . should_equal 0.24
        round_fun 0.225 2 use_bankers=True . should_equal 0.22
        round_fun -0.235 2 use_bankers=True . should_equal -0.24
        round_fun -0.225 2 use_bankers=True . should_equal -0.22

        round_fun 12350.0 -2 use_bankers=True . should_equal 12400
        round_fun 12250.0 -2 use_bankers=True . should_equal 12200
        round_fun -12350.0 -2 use_bankers=True . should_equal -12400
        round_fun -12250.0 -2 use_bankers=True . should_equal -12200

    group_builder.specify "Banker's rounding handles non-half-way values just like normal rounding" <|
        round_fun 3.0 use_bankers=True . should_equal 3
        round_fun 3.00001 use_bankers=True . should_equal 3
        round_fun 3.3 use_bankers=True . should_equal 3
        round_fun 3.49999 use_bankers=True . should_equal 3
        round_fun 3.50001 use_bankers=True . should_equal 4
        round_fun 3.99999 use_bankers=True . should_equal 4

        round_fun -3.0 . should_equal -3
        round_fun -3.00001 . should_equal -3
        round_fun -3.3 . should_equal -3
        round_fun -3.49999 . should_equal -3
        round_fun -3.50001 . should_equal -4
        round_fun -3.99999 . should_equal -4

    group_builder.specify "Can round correctly near the precision limit" <|
        round_fun 1.22222222225 10 . should_equal 1.2222222223
        round_fun 1.222222222225 11 . should_equal 1.22222222223
        round_fun 1.2222222222225 12 . should_equal 1.222222222223
        round_fun 1.22222222222225 13 . should_equal 1.2222222222223
        round_fun 1.222222222222225 14 . should_equal 1.22222222222223

        round_fun -1.22222222225 10 . should_equal -1.2222222223
        round_fun -1.222222222225 11 . should_equal -1.22222222223
        round_fun -1.2222222222225 12 . should_equal -1.222222222223
        round_fun -1.22222222222225 13 . should_equal -1.2222222222223
        round_fun -1.222222222222225 14 . should_equal -1.22222222222223

        round_fun 1.22222222235 10 . should_equal 1.2222222224
        round_fun 1.222222222235 11 . should_equal 1.22222222224
        round_fun 1.2222222222235 12 . should_equal 1.222222222224
        round_fun 1.22222222222235 13 . should_equal 1.2222222222224
        round_fun 1.222222222222235 14 . should_equal 1.22222222222224

        round_fun -1.22222222235 10 . should_equal -1.2222222224
        round_fun -1.222222222235 11 . should_equal -1.22222222224
        round_fun -1.2222222222235 12 . should_equal -1.222222222224
        round_fun -1.22222222222235 13 . should_equal -1.2222222222224
        round_fun -1.222222222222235 14 . should_equal -1.22222222222224

    group_builder.specify "Can round correctly near the precision limit, using banker's rounding" <|
        round_fun 1.22222222225 10 use_bankers=True . should_equal 1.2222222222
        round_fun 1.222222222225 11 use_bankers=True . should_equal 1.22222222222
        round_fun 1.2222222222225 12 use_bankers=True . should_equal 1.222222222222
        round_fun 1.22222222222225 13 use_bankers=True . should_equal 1.2222222222222
        round_fun 1.222222222222225 14 use_bankers=True . should_equal 1.22222222222222

        round_fun -1.22222222225 10 use_bankers=True . should_equal -1.2222222222
        round_fun -1.222222222225 11 use_bankers=True . should_equal -1.22222222222
        round_fun -1.2222222222225 12 use_bankers=True . should_equal -1.222222222222
        round_fun -1.22222222222225 13 use_bankers=True . should_equal -1.2222222222222
        round_fun -1.222222222222225 14 use_bankers=True . should_equal -1.22222222222222

        round_fun 1.22222222235 10 use_bankers=True . should_equal 1.2222222224
        round_fun 1.222222222235 11 use_bankers=True . should_equal 1.22222222224
        round_fun 1.2222222222235 12 use_bankers=True . should_equal 1.222222222224
        round_fun 1.22222222222235 13 use_bankers=True . should_equal 1.2222222222224
        round_fun 1.222222222222235 14 use_bankers=True . should_equal 1.22222222222224

        round_fun -1.22222222235 10 use_bankers=True . should_equal -1.2222222224
        round_fun -1.222222222235 11 use_bankers=True . should_equal -1.22222222224
        round_fun -1.2222222222235 12 use_bankers=True . should_equal -1.222222222224
        round_fun -1.22222222222235 13 use_bankers=True . should_equal -1.2222222222224
        round_fun -1.222222222222235 14 use_bankers=True . should_equal -1.22222222222224

    group_builder.specify "Decimal places out of range" <|
        round_fun 3.1 16 . should_fail_with Illegal_Argument
        round_fun 3.1 -16 . should_fail_with Illegal_Argument

    group_builder.specify "Floating point imperfect representation counter-examples" <|
        round_fun 1.225 2 use_bankers=True . should_equal 1.22 # Actual result 1.23
        round_fun 37.785 2 . should_equal 37.79

    group_builder.specify "Can round small integers to a specified number of decimal places correctly (value is unchanged)"
        round_fun 0 . should_equal 0
        round_fun 3 . should_equal 3
        round_fun -3 . should_equal -3
        round_fun 3 0 . should_equal 3
        round_fun -3 0 . should_equal -3
        round_fun 3 1 . should_equal 3
        round_fun -3 1 . should_equal -3

    group_builder.specify "Can round integers to a specified number of negative places correctly"
        round_fun 0 -1 . should_equal 0
        round_fun 4 -1 . should_equal 0
        round_fun 5 -1 . should_equal 10
        round_fun 6 -1 . should_equal 10
        round_fun 9 -1 . should_equal 10
        round_fun 10 -1 . should_equal 10
        round_fun 11 -1 . should_equal 10
        round_fun 24 -1 . should_equal 20
        round_fun 25 -1 . should_equal 30
        round_fun 29 -1 . should_equal 30
        round_fun 30 -1 . should_equal 30
        round_fun 31 -1 . should_equal 30

        round_fun 2000 -3 . should_equal 2000
        round_fun 2001 -3 . should_equal 2000
        round_fun 2412 -3 . should_equal 2000
        round_fun 2499 -3 . should_equal 2000
        round_fun 2500 -3 . should_equal 3000
        round_fun 2501 -3 . should_equal 3000
        round_fun 2511 -3 . should_equal 3000
        round_fun 2907 -3 . should_equal 3000
        round_fun 2999 -3 . should_equal 3000
        round_fun 3000 -3 . should_equal 3000
        round_fun 3001 -3 . should_equal 3000
        round_fun 3098 -3 . should_equal 3000
        round_fun 3101 -3 . should_equal 3000

    group_builder.specify "Can round negative integers to a specified number of negative places correctly"
        round_fun -4 -1 . should_equal 0
        round_fun -5 -1 . should_equal -10
        round_fun -6 -1 . should_equal -10
        round_fun -9 -1 . should_equal -10
        round_fun -10 -1 . should_equal -10
        round_fun -11 -1 . should_equal -10
        round_fun -24 -1 . should_equal -20
        round_fun -25 -1 . should_equal -30
        round_fun -29 -1 . should_equal -30
        round_fun -30 -1 . should_equal -30
        round_fun -31 -1 . should_equal -30

        round_fun -2000 -3 . should_equal -2000
        round_fun -2001 -3 . should_equal -2000
        round_fun -2412 -3 . should_equal -2000
        round_fun -2499 -3 . should_equal -2000
        round_fun -2500 -3 . should_equal -3000
        round_fun -2501 -3 . should_equal -3000
        round_fun -2511 -3 . should_equal -3000
        round_fun -2907 -3 . should_equal -3000
        round_fun -2999 -3 . should_equal -3000
        round_fun -3000 -3 . should_equal -3000
        round_fun -3001 -3 . should_equal -3000
        round_fun -3098 -3 . should_equal -3000
        round_fun -3101 -3 . should_equal -3000

    group_builder.specify "Can round negative integers to a specified number of negative places with banker's rounding correctly" <|
        round_fun 12300 -2 use_bankers=True . should_equal 12300
        round_fun 12301 -2 use_bankers=True . should_equal 12300
        round_fun 12330 -2 use_bankers=True . should_equal 12300
        round_fun 12349 -2 use_bankers=True . should_equal 12300
        round_fun 12350 -2 use_bankers=True . should_equal 12400
        round_fun 12351 -2 use_bankers=True . should_equal 12400
        round_fun 12370 -2 use_bankers=True . should_equal 12400
        round_fun 12430 -2 use_bankers=True . should_equal 12400
        round_fun 12470 -2 use_bankers=True . should_equal 12500

        round_fun 12249 -2 use_bankers=True . should_equal 12200
        round_fun 12250 -2 use_bankers=True . should_equal 12200
        round_fun 12251 -2 use_bankers=True . should_equal 12300

        round_fun -12300 -2 use_bankers=True . should_equal -12300
        round_fun -12301 -2 use_bankers=True . should_equal -12300
        round_fun -12330 -2 use_bankers=True . should_equal -12300
        round_fun -12349 -2 use_bankers=True . should_equal -12300
        round_fun -12350 -2 use_bankers=True . should_equal -12400
        round_fun -12351 -2 use_bankers=True . should_equal -12400
        round_fun -12370 -2 use_bankers=True . should_equal -12400
        round_fun -12430 -2 use_bankers=True . should_equal -12400
        round_fun -12470 -2 use_bankers=True . should_equal -12500

        round_fun -12249 -2 use_bankers=True . should_equal -12200
        round_fun -12250 -2 use_bankers=True . should_equal -12200
        round_fun -12251 -2 use_bankers=True . should_equal -12300

    group_builder.specify "Handles incorrect argument types" <|
        Test.expect_panic_with (round_fun 123 "two") Type_Error
        Test.expect_panic_with (round_fun 123 use_bankers="no") Type_Error
        Test.expect_panic_with (round_fun 123 use_bankers=0) Type_Error

