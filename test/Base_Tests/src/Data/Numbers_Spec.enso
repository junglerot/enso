from Standard.Base import all
import Standard.Base.Errors.Common.Arithmetic_Error
import Standard.Base.Errors.Common.Incomparable_Values
import Standard.Base.Errors.Common.Type_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Base.Data.Numbers import Number_Parse_Error

from Standard.Test_New import all

import project.Data.Round_Spec

polyglot java import java.math.BigInteger
polyglot java import java.math.BigDecimal

Integer.is_even self = self % 2 == 0

Float.get_fun_factor self = "Wow, " + self.to_text + " is such a fun number!"

type Complex
    Value re:Float im:Float

    new re=0 im=0 = Complex.Value re im

    + self (that:Complex) = Complex.new self.re+that.re self.im+that.im

    < self (that:Complex) = Complex_Comparator.compare self that == Ordering.Less
    > self (that:Complex) = Complex_Comparator.compare self that == Ordering.Greater

    == self (that:Complex) = Complex_Comparator.compare self that == Ordering.Equal

    pending_equality -> Text = "== with conversions isn't yet supported"

Complex.from (that:Number) = Complex.new that

type Complex_Comparator
    compare x:Complex y:Complex = if x.re==y.re && x.im==y.im then Ordering.Equal else
        if x.im==0 && y.im==0 then Ordering.compare x.re y.re else
            Nothing
    hash x:Complex = 7*x.re + 11*x.im

Comparable.from (_:Complex) = Complex_Comparator


add_specs suite_builder =
    eps = 0.000001
    almost_max_long = 9223372036854775806
    almost_max_long_times_three = 27670116110564327418
    almost_max_long_times_three_plus_1 = 27670116110564327419
    almost_max_long_times_three_decimal = 27670116110564327418.8
    hundred_factorial = 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
    very_negative = -99223372036854775808

    suite_builder.group "Integers" group_builder->
        Round_Spec.add_specs group_builder (.round)

        group_builder.specify "should be of unbound size when multiplied" <|
            1.up_to 101 . fold 1 (*) . should_equal hundred_factorial

        group_builder.specify "should be of unbound size when added" <|
            (almost_max_long + almost_max_long + almost_max_long).should_equal almost_max_long_times_three

        group_builder.specify "should be of unbound size when subtracted" <|
            (0 - almost_max_long - almost_max_long - almost_max_long).should_equal almost_max_long_times_three.negate

        group_builder.specify "should be of unbound size when dividing" <|
            expected = 3372816184472482867110284450043137767873196479305249187406461598235841786750685581361224832688174410089430537516012695688121622150430744676
            ((1.up_to 101 . fold 1 (*)).div  3*almost_max_long).should_equal expected

        group_builder.specify "should be of unbound size when taking remainder" <|
            expected = 3191479909175673432
            ((1.up_to 101 . fold 1 (*)) % 3*almost_max_long).should_equal expected

        group_builder.specify "should allow defining extension methods through the Integer type for any number size" <|
            876543.is_even.should_be_false
            (1.up_to 101 . fold 1 (*)).is_even.should_be_true

        group_builder.specify "should handle the negation edge cases" <|
            x = 9223372036854775808
            y = -x
            z = -9223372036854775808
            y.should_equal z

        group_builder.specify "should handle equality between small and big integers" <|
            (1 == hundred_factorial).should_be_false
            (hundred_factorial == 1).should_be_false

        group_builder.specify "should properly handle going to big numbers and back" <|
            ((almost_max_long * 3) / 3) . should_equal almost_max_long

        group_builder.specify "should use floating point arithmetic for division" <|
            (3 / 4) . should_equal 0.75 epsilon=eps
            (almost_max_long * 2 / almost_max_long_times_three) . should_equal 0.6666666 epsilon=eps

        group_builder.specify "should support integer division" <|
            (10.div 3) . should_equal 3
            (10.div 0).should_fail_with Arithmetic_Error

        group_builder.specify "should support integral binary literals" <|
            lit = 2_01101101
            lit . should_equal 109

        group_builder.specify "should support integral hexadecimal literals" <|
            lit = 16_6D
            lit . should_equal 109

        group_builder.specify "should support bitwise and" <|
            left  = 2_01101101
            right = 2_11000100
            big_left = 16_17ffffffffffffffa
            big_right = 16_17ffffffffffffffc
            left.bit_and right . should_equal 2_01000100
            left.bit_and big_right . should_equal 2_01101100
            big_left.bit_and right . should_equal 2_11000000
            big_left.bit_and big_right . should_equal 16_17ffffffffffffff8

        group_builder.specify "should support bitwise or" <|
            left  = 2_01101101
            right = 2_11000100
            big_left = 16_17ffffffffffffffa
            big_right = 16_17ffffffffffffffc
            left.bit_or right . should_equal 2_11101101
            left.bit_or big_right . should_equal 16_17ffffffffffffffd
            big_left.bit_or right . should_equal 16_17ffffffffffffffe
            big_left.bit_or right . should_equal 16_17ffffffffffffffe

        group_builder.specify "should support bitwise exclusive or" <|
            left  = 2_01101101
            right = 2_11000100
            big_left = 16_17ffffffffffffffa
            big_right = 16_17ffffffffffffffc
            left.bit_xor right . should_equal 2_10101001
            left.bit_xor big_right . should_equal 16_17fffffffffffff91
            big_left.bit_xor right . should_equal 16_17fffffffffffff3e
            big_left.bit_xor big_right . should_equal 2_00000110

        group_builder.specify "should support bitwise negation" <|
            bits  = 2_01101101
            big_bits = 16_17ffffffffffffffa
            bits.bit_not . should_equal -2_01101110
            bits.bit_not.bit_not . should_equal bits
            big_bits.bit_not . should_equal -16_17ffffffffffffffb
            big_bits.bit_not.bit_not . should_equal big_bits

        group_builder.specify "should support left bit shifts" <|
            positive_bits = 2_01101101
            negative_bits = -2_01101101
            positive_big_bits = almost_max_long_times_three
            negative_big_bits = -almost_max_long_times_three

            positive_bits.bit_shift_l 2 . should_equal 2_0110110100
            positive_bits.bit_shift_l 64 . should_equal 16_6d0000000000000000
            positive_bits.bit_shift_l -2 . should_equal 2_011011
            positive_bits.bit_shift_l -64 . should_equal 0
            (positive_bits.bit_shift_l positive_big_bits).should_fail_with Arithmetic_Error
            positive_bits.bit_shift_l negative_big_bits . should_equal 0

            negative_bits.bit_shift_l 2 . should_equal -436
            negative_bits.bit_shift_l 64 . should_equal -2010695104034341126144
            negative_bits.bit_shift_l -2 . should_equal -28
            negative_bits.bit_shift_l -64 . should_equal -1
            (negative_bits.bit_shift_l positive_big_bits).should_fail_with Arithmetic_Error
            negative_bits.bit_shift_l negative_big_bits . should_equal -1

            positive_big_bits.bit_shift_l 2 . should_equal 110680464442257309672
            positive_big_bits.bit_shift_l 64 . should_equal 510423550381407695084381446705395007488
            positive_big_bits.bit_shift_l -2 . should_equal 6917529027641081854
            positive_big_bits.bit_shift_l -100 . should_equal 0
            (positive_big_bits.bit_shift_l positive_big_bits).should_fail_with Arithmetic_Error
            positive_big_bits.bit_shift_l negative_big_bits . should_equal 0

            negative_big_bits.bit_shift_l 2 . should_equal -110680464442257309672
            negative_big_bits.bit_shift_l 64 . should_equal -510423550381407695084381446705395007488
            negative_big_bits.bit_shift_l -2 . should_equal -6917529027641081855
            negative_big_bits.bit_shift_l -100 . should_equal -1
            (negative_big_bits.bit_shift_l positive_big_bits).should_fail_with Arithmetic_Error
            negative_big_bits.bit_shift_l negative_big_bits . should_equal -1

        group_builder.specify "should support right bit shifts, preserving sign" <|
            positive_bits = 2_01101101
            negative_bits = -2_01101101
            positive_big_bits = almost_max_long_times_three
            negative_big_bits = -almost_max_long_times_three

            positive_bits.bit_shift_r 2 . should_equal (positive_bits.bit_shift_l -2)
            positive_bits.bit_shift_r 64 . should_equal (positive_bits.bit_shift_l -64)
            positive_bits.bit_shift_r -2 . should_equal (positive_bits.bit_shift_l 2)
            positive_bits.bit_shift_r -64 . should_equal (positive_bits.bit_shift_l 64)
            (positive_bits.bit_shift_r negative_big_bits).should_fail_with Arithmetic_Error
            positive_bits.bit_shift_r positive_big_bits . should_equal 0

            negative_bits.bit_shift_r 2 . should_equal (negative_bits.bit_shift_l -2)
            negative_bits.bit_shift_r 64 . should_equal (negative_bits.bit_shift_l -64)
            negative_bits.bit_shift_r -2 . should_equal (negative_bits.bit_shift_l 2)
            negative_bits.bit_shift_r -64 . should_equal (negative_bits.bit_shift_l 64)
            (negative_bits.bit_shift_r negative_big_bits).should_fail_with Arithmetic_Error
            negative_bits.bit_shift_r positive_big_bits . should_equal -1

            positive_big_bits.bit_shift_r 2 . should_equal (positive_big_bits.bit_shift_l -2)
            positive_big_bits.bit_shift_r 64 . should_equal (positive_big_bits.bit_shift_l -64)
            positive_big_bits.bit_shift_r -2 . should_equal (positive_big_bits.bit_shift_l 2)
            positive_big_bits.bit_shift_r -100 . should_equal (positive_big_bits.bit_shift_l 100)
            (positive_big_bits.bit_shift_r negative_big_bits).should_fail_with Arithmetic_Error
            positive_big_bits.bit_shift_r positive_big_bits . should_equal 0

            negative_big_bits.bit_shift_r 2 . should_equal (negative_big_bits.bit_shift_l -2)
            negative_big_bits.bit_shift_r 64 . should_equal (negative_big_bits.bit_shift_l -64)
            negative_big_bits.bit_shift_r -2 . should_equal (negative_big_bits.bit_shift_l 2)
            negative_big_bits.bit_shift_r -100 . should_equal (negative_big_bits.bit_shift_l 100)
            (negative_big_bits.bit_shift_r negative_big_bits).should_fail_with Arithmetic_Error
            negative_big_bits.bit_shift_r positive_big_bits . should_equal -1

        group_builder.specify "should be able to parse" <|
            Integer.parse "1245623" . should_equal 1245623
            Integer.parse "012345" . should_equal 12345
            Integer.parse "-1234567" . should_equal -1234567
            Integer.parse "00000" . should_equal 0
            Integer.parse "00000123" . should_equal 123
            Integer.parse "123.45" . should_fail_with Number_Parse_Error
            Integer.parse "123A" . should_fail_with Number_Parse_Error
            Integer.parse "aaaa" . should_fail_with Number_Parse_Error

        group_builder.specify "should parse hundred factorial" <|
            txt = hundred_factorial.to_text
            number = Integer.parse txt
            number . should_equal hundred_factorial

        group_builder.specify "should fail on too huge decimal" <|
            txt = hundred_factorial.to_text + ".345"
            number = Integer.parse txt
            number . should_fail_with Number_Parse_Error

        group_builder.specify "should be able to parse alternate bases" <|
            Integer.parse "1245623" 8 . should_equal 347027
            Integer.parse "-1245623" 8 . should_equal -347027
            Integer.parse "0001245623" 8 . should_equal 347027
            Integer.parse "00000" 8 . should_equal 0
            Integer.parse "9847" 8 . should_fail_with Number_Parse_Error
            Integer.parse "8479" 8 . should_fail_with Number_Parse_Error
            Integer.parse "ABC123" 16 . should_equal 11256099
            Integer.parse "123ABC" 16 . should_equal 1194684
            Integer.parse "123aBc" 16 . should_equal 1194684
            Integer.parse "-ABC123" 16 . should_equal -11256099
            Integer.parse "00000ABC123" 16 . should_equal 11256099
            Integer.parse "123aBcG" 16 . should_fail_with Number_Parse_Error
            Integer.parse "10101010" 2 . should_equal 170
            Integer.parse "00001111" 2 . should_equal 15
            Integer.parse "-10101010" 2 . should_equal -170
            Integer.parse "-101021010" 2 . should_fail_with Number_Parse_Error
            Integer.parse "123" 128 . should_fail_with Number_Parse_Error

        group_builder.specify "should be able to invoke methods on Integer via static method call" <|
            Integer.+ 1 2 . should_equal 3
            Test.expect_panic_with (Integer.+ 1 2.5)  Type_Error
            Test.expect_panic_with (Integer.+ 1.5 1) Type_Error
            Test.expect_panic_with (Integer.+ 1.5 2.5) Type_Error
            Test.expect_panic_with (Integer.+ 1 "hello") Type_Error

        group_builder.specify "pow on huge" <|
            huge = 10 ^ 70
            huge.to_text . starts_with "1000" . should_be_true
            huge.to_text.characters . filter (== '0') . to_vector . length . should_equal 70

        group_builder.specify "pow with negative" <|
            (10 ^ -1) . should_equal 0.1

    suite_builder.group "Floats" group_builder->

        group_builder.specify "should exist and expose basic arithmetic operations" <|
            ((1.5 + 1.5)*1.3 / 2 - 3) . should_equal -1.05 epsilon=eps

        group_builder.specify "should allow defining extension methods through the Float type" <|
            32.5.get_fun_factor.should_equal "Wow, 32.5 is such a fun number!"

        group_builder.specify "should be able to be parsed" <|
            Float.parse "32.5" . should_equal 32.5
            Float.parse "0122.5" . should_equal 122.5
            Float.parse "-98.5" . should_equal -98.5
            Float.parse "000000" . should_equal 0
            Float.parse "000000.0001" . should_equal 0.0001
            Float.parse "aaaa" . should_fail_with Number_Parse_Error

        group_builder.specify "parse with locale" <|
            l = Locale.new "cs"
            Float.parse "32,5" l . should_equal 32.5
            Float.parse "0122,5" l . should_equal 122.5
            Float.parse "-98,5" l . should_equal -98.5
            Float.parse "000000" l . should_equal 0
            Float.parse "000000,0001" l . should_equal 0.0001
            Float.parse "aaaa" l . should_fail_with Number_Parse_Error

        group_builder.specify "decimal should parse hundred factorial well" <|
            txt = hundred_factorial.to_text + ".345"
            decimal = Float.parse txt
            is_huge = decimal > (hundred_factorial / 5)
            is_huge . should_equal True

    suite_builder.group "Numbers" group_builder->

        group_builder.specify "should define addition" <|
            2+3 . should_equal 5

        group_builder.specify "should define multiplication" <|
            2*3 . should_equal 6

        group_builder.specify "should define modulo for integers and decimals" <|
            5%3 . should_equal 2
            5%3 . should_be_a Integer

            5.0%3.0 . should_equal 2.0
            5%3.0 . should_equal 2.0
            5.0%3 . should_equal 2.0
            5.0%3.0 . should_be_a Float
            5%3.0 . should_be_a Float
            5.0%3 . should_be_a Float

            3.5%2 . should_equal 1.5
            10.5%1.0 . should_equal 0.5

            3%1 . should_equal 0
            3%1 . should_be_a Integer

            3.5%1 . should_equal 0.5

            almost_max_long_times_three%10 . should_equal 8
            1000%almost_max_long_times_three . should_equal 1000

            1%0 . should_fail_with Arithmetic_Error
            almost_max_long_times_three%0 . should_fail_with Arithmetic_Error

            1.0%0.0 . is_nan . should_be_true
            1%0.0 . is_nan . should_be_true
            1.0%0 . is_nan . should_be_true
            almost_max_long_times_three%0.0 . is_nan . should_be_true

            1/0 . is_infinite . should_be_true
            -1/0 . is_infinite . should_be_true

            hundred_factorial%0 . should_fail_with Arithmetic_Error
            hundred_factorial%hundred_factorial . should_equal 0
            10%hundred_factorial . should_equal 10

        group_builder.specify "should support less than operator" <|
            (1 < 2).should_be_true
            (1 < 1).should_be_false
            (1 < 0).should_be_false
            (1 < 1.01).should_be_true
            (1 < 0.99).should_be_false
            (3 < hundred_factorial).should_be_true
            (3 < very_negative).should_be_false
            Test.expect_panic_with (3 < Nothing) Type_Error
            (1.01 < 0.99).should_be_false
            (1.01 < 1.02).should_be_true
            (1.01 < 1).should_be_false
            (1.01 < 2).should_be_true
            (3.14 < hundred_factorial).should_be_true
            (3.14 < very_negative).should_be_false
            Test.expect_panic_with (1.5 < Nothing) Type_Error
            (hundred_factorial < 1).should_be_false
            (hundred_factorial < 1.5).should_be_false
            (very_negative < 1).should_be_true
            (very_negative < 1.5).should_be_true
            (hundred_factorial < very_negative).should_be_false
            (very_negative < hundred_factorial).should_be_true
            Test.expect_panic_with (very_negative < Nothing) Type_Error

        group_builder.specify "should support less than or equal to operator" <|
            (1 <= 2).should_be_true
            (1 <= 1).should_be_true
            (1 <= 0).should_be_false
            (1 <= 1.01).should_be_true
            (1 <= 0.99).should_be_false
            (3 <= hundred_factorial).should_be_true
            (3 <= very_negative).should_be_false
            Test.expect_panic_with (3 <= Nothing) Type_Error
            (1.01 <= 0.99).should_be_false
            (1.01 <= 1.02).should_be_true
            (1.01 <= 1).should_be_false
            (1.01 <= 2).should_be_true
            (3.14 <= hundred_factorial).should_be_true
            (3.14 <= very_negative).should_be_false
            Test.expect_panic_with (1.5 <= Nothing) Type_Error
            (hundred_factorial <= 1).should_be_false
            (hundred_factorial <= 1.5).should_be_false
            (very_negative <= 1).should_be_true
            (very_negative <= 1.5).should_be_true
            (hundred_factorial <= very_negative).should_be_false
            (very_negative <= hundred_factorial).should_be_true
            Test.expect_panic_with (very_negative <= Nothing) Type_Error

        group_builder.specify "should support greater than operator" <|
            (1 > 2).should_be_false
            (1 > 1).should_be_false
            (1 > 0).should_be_true
            (1 > 1.01).should_be_false
            (1 > 0.99).should_be_true
            (3 > hundred_factorial).should_be_false
            (3 > very_negative).should_be_true
            Test.expect_panic_with (3 > Nothing) Type_Error
            (1.01 > 0.99).should_be_true
            (1.01 > 1.02).should_be_false
            (1.01 > 1).should_be_true
            (1.01 > 2).should_be_false
            (3.14 > hundred_factorial).should_be_false
            (3.14 > very_negative).should_be_true
            Test.expect_panic_with (1.5 > Nothing) Type_Error
            (hundred_factorial > 1).should_be_true
            (hundred_factorial > 1.5).should_be_true
            (very_negative > 1).should_be_false
            (very_negative > 1.5).should_be_false
            (hundred_factorial > very_negative).should_be_true
            (very_negative > hundred_factorial).should_be_false
            Test.expect_panic_with (very_negative > Nothing) Type_Error

        group_builder.specify "should support greater than or equal to operator" <|
            (1 >= 2).should_be_false
            (1 >= 1).should_be_true
            (1 >= 0).should_be_true
            (1 >= 1.01).should_be_false
            (1 >= 0.99).should_be_true
            (3 >= hundred_factorial).should_be_false
            (3 >= very_negative).should_be_true
            Test.expect_panic_with (3 >= Nothing) Type_Error
            (1.01 >= 0.99).should_be_true
            (1.01 >= 1.02).should_be_false
            (1.01 >= 1).should_be_true
            (1.01 >= 2).should_be_false
            (3.14 >= hundred_factorial).should_be_false
            (3.14 >= very_negative).should_be_true
            Test.expect_panic_with (1.5 >= Nothing) Type_Error
            (hundred_factorial >= 1).should_be_true
            (hundred_factorial >= 1.5).should_be_true
            (very_negative >= 1).should_be_false
            (very_negative >= 1.5).should_be_false
            (hundred_factorial >= very_negative).should_be_true
            (very_negative >= hundred_factorial).should_be_false
            Test.expect_panic_with (very_negative >= Nothing) Type_Error

        group_builder.specify "should be ordered by the default comparator" <|
            Ordering.compare 1 2 . should_equal Ordering.Less
            Ordering.compare 1 1 . should_equal Ordering.Equal
            Ordering.compare 1 0 . should_equal Ordering.Greater
            Ordering.compare 1 1.01 . should_equal Ordering.Less
            Ordering.compare 1 0.99 . should_equal Ordering.Greater
            Ordering.compare 3 hundred_factorial . should_equal Ordering.Less
            Ordering.compare 3 very_negative . should_equal Ordering.Greater
            Ordering.compare 3 Nothing . should_fail_with Incomparable_Values
            Ordering.compare 1.01 0.99 . should_equal Ordering.Greater
            Ordering.compare 1.01 1.02 . should_equal Ordering.Less
            Ordering.compare 1.01 1 . should_equal Ordering.Greater
            Ordering.compare 1.01 2 . should_equal Ordering.Less
            Ordering.compare 3.14 hundred_factorial . should_equal Ordering.Less
            Ordering.compare 3.14 very_negative . should_equal Ordering.Greater
            Ordering.compare 1.5 Nothing . should_fail_with Incomparable_Values
            Ordering.compare hundred_factorial 1 . should_equal Ordering.Greater
            Ordering.compare hundred_factorial 1.5 . should_equal Ordering.Greater
            Ordering.compare very_negative 1 . should_equal Ordering.Less
            Ordering.compare very_negative 1.5 . should_equal Ordering.Less
            Ordering.compare hundred_factorial very_negative . should_equal Ordering.Greater
            Ordering.compare very_negative hundred_factorial . should_equal Ordering.Less
            Ordering.compare very_negative Nothing . should_fail_with Incomparable_Values

        group_builder.specify "should expose exponentiation operations" <|
            (3.14 ^ 2.71).should_equal 22.216689546 epsilon=eps
            (3.14 ^ 14).should_equal 9057640.36635 epsilon=eps
            a = almost_max_long
            (a ^ 4).should_equal (a * a * a * a)
            (2 ^ 10).should_equal 1024
            (2 ^ 0.5).should_equal 1.41421356237 epsilon=eps
            (a^2)^0.5 . should_equal a epsilon=eps

        group_builder.specify "should expose more involved mathematical functions" <|
            Math.pi.sin.should_equal 0 epsilon=eps
            (Math.pi / 4).sin.should_equal (2 ^ 0.5)/2 epsilon=eps
            (Math.pi / 6).cos.should_equal (3.sqrt / 2) epsilon=eps
            (17 ^ 0.13).log base=17 . should_equal 0.13 epsilon=eps
            0.exp.should_equal 1

        group_builder.specify "should allow calculating the floor value" <|
            1.2314.floor . should_equal 1
            1.floor . should_equal 1
            almost_max_long_times_three_decimal.floor.to_float . should_equal almost_max_long_times_three.to_float
            almost_max_long_times_three.floor . should_equal almost_max_long_times_three

        group_builder.specify "should allow calculating the ceil value" <|
            1.2314.ceil . should_equal 2
            1.ceil . should_equal 1
            almost_max_long_times_three_decimal.ceil.to_float . should_equal almost_max_long_times_three_plus_1.to_float
            almost_max_long_times_three_plus_1.ceil . should_equal almost_max_long_times_three_plus_1

        group_builder.specify "should expose a NaN value" <|
            Number.nan.is_nan . should_be_true
            0.is_nan . should_be_false
            Number.positive_infinity.is_nan . should_be_false
            Number.negative_infinity.is_nan . should_be_false

            Number.nan.is_infinite . should_be_false
            0.is_infinite . should_be_false
            Number.positive_infinity.is_infinite . should_be_true
            Number.negative_infinity.is_infinite . should_be_true

            Number.nan==Number.nan . should_be_false
            Number.nan==0 . should_be_false
            Number.nan!=Number.nan . should_be_true

        group_builder.specify "should support inexact equality comparisons" <|
            1.0001 . equals 1.0002 epsilon=0.01 . should_be_true
            1.0001 . equals 1.0002 epsilon=0.0000001 . should_be_false

            1 . equals 2 . should_be_false
            1 . equals (0+1) . should_be_true

            Number.positive_infinity . equals Number.positive_infinity . should_be_true

            Number.negative_infinity . equals Number.negative_infinity . should_be_true
            Number.negative_infinity . equals Number.positive_infinity . should_be_false

            Number.negative_infinity . should_equal (-Number.positive_infinity)
            Number.negative_infinity . equals (-Number.positive_infinity) . should_be_true

            Number.nan . equals Number.nan . should_fail_with Incomparable_Values
            Number.nan . equals 0 . should_fail_with Incomparable_Values

    suite_builder.group "rounding" group_builder->
        group_builder.specify "Returns the correct type" <|
            231 . round 1 . should_be_a Integer
            231 . round 0 . should_be_a Integer
            231 . round . should_be_a Integer
            231 . round -1 . should_be_a Integer

        group_builder.specify "Input out of range" <|
            100000000000000 . round -2 . should_fail_with Illegal_Argument
            -100000000000000 . round -2 . should_fail_with Illegal_Argument
            100000000000000 . round . should_fail_with Illegal_Argument
            -100000000000000 . round . should_fail_with Illegal_Argument
            100000000000000 . round 1 . should_fail_with Illegal_Argument
            -100000000000000 . round 1 . should_fail_with Illegal_Argument
            99999999999999 . round . should_equal 99999999999999
            -99999999999999 . round . should_equal -99999999999999
            99999999999999 . round -2 . should_equal 100000000000000
            -99999999999999 . round -2 . should_equal -100000000000000

        group_builder.specify "Reject bigints before reaching the Java" <|
            922337203685477580700000 . round . should_fail_with Illegal_Argument
            -922337203685477580700000 . round . should_fail_with Illegal_Argument

        group_builder.specify "Can handle small numbers computed from bigints" <|
            (922337203685477580712345 - 922337203685477580700000) . round . should_equal 12345
            ((99999999999998 * 1000).div 1000) . round . should_equal 99999999999998

    suite_builder.group "Float.truncate" group_builder->

        group_builder.specify "Correctly converts to Integer" <|
            0.1.truncate . should_equal 0
            0.9.truncate . should_equal 0
            3.1.truncate . should_equal 3
            3.9.truncate . should_equal 3
            -0.1.truncate . should_equal 0
            -0.9.truncate . should_equal 0
            -3.1.truncate . should_equal -3
            -3.9.truncate . should_equal -3

    suite_builder.group "Integer.truncate" group_builder->

        group_builder.specify "Returns its argument" <|
            0.truncate . should_equal 0
            3.truncate . should_equal 3
            -3.truncate . should_equal -3

    suite_builder.group "Number Conversions" group_builder->
        group_builder.specify "Complex plus Integer" <|
            v1 = (Complex.new 1 2) + (Complex.new 3)
            v2 = (Complex.new 1 2) + 3
            v1 . should_equal v2

        group_builder.specify "Integer plus Complex" <|
            v1 = (Complex.new 3) + (Complex.new 1 2)
            v2 = 3 + (Complex.new 1 2)
            v1 . should_equal v2

        group_builder.specify "Equality of complex and complex" <|
            v1 = (Complex.new 3 1) + (Complex.new 4 7)
            v2 = (Complex.new 1 2) + (Complex.new 6 6)
            v1 . should_equal v2
            v2 . should_equal v1
            v1==v2 . should_be_true
            v2==v1 . should_be_true

        group_builder.specify "Inequality of complex and complex" <|
            v1 = (Complex.new 7 1)
            v2 = (Complex.new 6 6)
            Ordering.compare v1 v2 . catch Incomparable_Values (_->42) . should_equal 42

        group_builder.specify "Equality of complex and number" pending=Complex.pending_equality <|
            v1 = (Complex.new 3)
            v2 = 3
            v1 . should_equal v2
            v2 . should_equal v1
            v1==v2 . should_be_true
            v2==v1 . should_be_true

        group_builder.specify "Equality of number and complex" pending=Complex.pending_equality <|
            v1 = 3
            v2 = (Complex.new 3)
            v1 . should_equal v2
            v2 . should_equal v1
            v1==v2 . should_be_true
            v2==v1 . should_be_true

        group_builder.specify "Greater or equal of complex and complex" <|
            v1 = (Complex.new 3)
            v2 = (Complex.new 4)
            v1<v2 . should_be_true
            v2<v1 . should_be_false

            v1>v2 . should_be_false
            v2>v1 . should_be_true

        group_builder.specify "Greater or equal of complex and number" <|
            v1 = (Complex.new 3)
            v2 = 4
            v1<v2 . should_be_true
            v2<v1 . should_be_false

            v1>v2 . should_be_false
            v2>v1 . should_be_true

        group_builder.specify "Greater or equal of number and complex" <|
            v1 = 3
            v2 = (Complex.new 4)
            v1<v2 . should_be_true
            v2<v1 . should_be_false

            v1>v2 . should_be_false
            v2>v1 . should_be_true

    suite_builder.group "BigInts" group_builder->
        expected_value = 2002115494039257055317447151023464523838443110452722331466645440244415760562579268801894716412

        bigint_spec name create mul =
            group_builder.specify name+" 6 * 7" <|
                six = create 6
                seven = create 7
                both = six*seven
                both . should_equal 42

                six.is_a Integer . should_be_true
                seven.is_a Integer . should_be_true
                both.is_a Integer . should_be_true

            group_builder.specify name+" power of 3 with running_fold" <|
                three = create 3

                two_hundred = 1.up_to 200 . running_fold three a->_->
                    mul a three

                sum = two_hundred.reduce (+)
                sum.is_a Integer . should_be_true
                sum.div two_hundred.length . should_equal expected_value

            group_builder.specify name+" power of 3 with map" <|
                three = create 3

                two_hundred = 1.up_to 200 . map i->
                    0.up_to i . fold three (v-> _-> mul v three)

                sum = two_hundred.reduce (+)
                sum.is_a Integer . should_be_true
                case sum of
                    _ : Integer -> Nothing
                    v -> Test.fail "Expecting Integer, but got: "+(Meta.type_of v).to_text
                sum.div two_hundred.length . should_equal expected_value

            group_builder.specify name+" BigInteger to BigDecimal test" <|
                    h = 2^70
                    bd1 = BigDecimal.new h 0
                    bd2 = BigDecimal.new h
                    bd1.to_text . should_equal bd2.to_text
                    bd1 . should_equal bd2
                    bd1.toBigIntegerExact . should_equal h

        to_java_bigint n = BigInteger.new n.to_text
        java_bigint_mul a b =
            big_a = to_java_bigint a
            big_b = to_java_bigint b
            big_a * big_b

        bigint_spec "Enso" (x->x) (*)
        bigint_spec "Java" to_java_bigint java_bigint_mul
        bigint_spec "JavaScript" to_js_bigint js_bigint_mul

        group_builder.specify "Matrix of values" <|
            x = to_java_bigint 10
            y = 10
            z = 10.0
            w = to_js_bigint 10

            [x, y, z, w].each a->
                [x, y, z, w].each b->
                    a+b . should_equal 20

main =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter


foreign js to_js_bigint n = """
    return BigInt(n)

foreign js js_bigint_mul a b = """
    return BigInt(a) * BigInt(b)
