from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.No_Such_Key.No_Such_Key

from Standard.Test_New import all


polyglot java import java.nio.file.Path as JavaPath
polyglot java import java.util.Map as JavaMap

## Type that violates reflexivity
type My_Nan
    Value comment:Text

type My_Nan_Comparator
    compare _ _ = Nothing
    hash _ = 0

Comparable.from (_:My_Nan) = My_Nan_Comparator

type My_Key
    Value hash_code:Integer value:Text idx:Integer

type My_Key_Comparator
    # Comparison ignores idx field
    compare x y =
        if x.hash_code != y.hash_code then Nothing else
            if x.value == y.value then Ordering.Equal else Nothing

    hash x = x.hash_code

Comparable.from (_:My_Key) = My_Key_Comparator


foreign js js_str str = """
    return new String(str)

foreign js js_null = """
    return null

foreign js js_empty_dict = """
    return new Map()

foreign python py_empty_dict = """
    return {}

foreign js js_dict_from_vec vec = """
    dict = new Map()
    for (let i = 0; i < vec.length; i += 2) {
        dict.set(vec[i], vec[i+1])
    }
    return dict

foreign python py_dict_from_vec vec = """
    d = {}
    for i in range(0, len(vec), 2):
        d[vec[i]] = vec[i + 1]
    return d

foreign python py_dict_from_map map = """
    d = dict()
    for key in map.__iter__():
        d[key] = map[key]
    return d

foreign python py_vec_from_map map = """
    vec = []
    for key in map.__iter__():
        value = map[key]
        vec.append([key, value])
    return vec

# Should throw error - updating immutable map from Enso
foreign python py_update_dict map key val = """
    map[key] = val

foreign python py_wrapper obj = """
    class MyClass:
        def __init__(self, obj):
            self.data = obj
    return MyClass(obj)

pending_python_missing = if Polyglot.is_language_installed "python" then Nothing else "Can't run Python tests, Python is not installed."

type Child
    Value data

type Parent
    Value child

type GrandParent
    Value parent

add_specs suite_builder =
    suite_builder.group "Enso maps" group_builder->
        group_builder.specify "should allow checking for emptiness" <|
            empty_map = Map.empty
            non_empty = Map.empty . insert "foo" 1234
            empty_map.is_empty . should_be_true
            non_empty.is_empty . should_be_false

        group_builder.specify "should get the default comparator for polyglot maps" <|
            Comparable.from (Map.empty) . should_equal Default_Comparator
            Comparable.from (js_empty_dict) . should_equal Default_Comparator
            Comparable.from (JavaMap.of "A" 1 "B" 2) . should_equal Default_Comparator

        group_builder.specify "should compare two hash maps" <|
            (Map.singleton "a" 1).should_equal (Map.singleton "a" 1)
            (Map.singleton "b" 2).should_not_equal (Map.singleton "a" 1)
            Map.empty.should_equal Map.empty
            Map.empty.should_not_equal (Map.singleton "a" 1)
            (Map.empty.insert "a" 1 . insert "b" 2).should_equal (Map.empty.insert "b" 2 . insert "a" 1)

        group_builder.specify "should allow checking for non emptiness" <|
            empty_map = Map.empty
            non_empty = Map.empty . insert "foo" 1234
            empty_map.not_empty . should_be_false
            non_empty.not_empty . should_be_true

        group_builder.specify "should allow checking its size" <|
            empty_map = Map.empty
            non_empty = Map.singleton "a" "b" . insert "x" "y"
            empty_map.size . should_equal 0
            non_empty.size . should_equal 2

        group_builder.specify "should support arbitrary atoms as keys" <|
            map = Map.singleton (Pair.new "one" "two") 42
            (map.get (Pair.new "one" "two")).should_equal 42
            (map.get (Pair.new "A" "B")).should_equal Nothing
            (map.get (Pair.new "two" "two")).should_equal Nothing

        group_builder.specify "should use proper hash code for keys" <|
            single_key_map key = Map.singleton key 42
            grand_parent_1 = GrandParent.Value (Parent.Value (Child.Value 2))
            grand_parent_2 = GrandParent.Value (Parent.Value (Child.Value 2.0))

            (single_key_map 2 . at 2.0) . should_equal 42
            (single_key_map -2 . at -2.0) . should_equal 42
            (single_key_map 'ś' . at 's\u0301') . should_equal 42
            (single_key_map 's\u0301' . at 'ś') . should_equal 42
            (single_key_map 'éabc' . at 'e\u0301abc') . should_equal 42
            (single_key_map 'e\u0301abc' . at 'éabc') . should_equal 42
            (single_key_map grand_parent_1 . at grand_parent_2) . should_equal 42
            (single_key_map (Json.parse '{"a": 1}') . at (Json.parse '{"a": 1}')) . should_equal 42
            (single_key_map (Child.Value 1) . at (Child.Value 1.0)) . should_equal 42

        group_builder.specify "should support vectors as keys" <|
            map = Map.singleton [1, "a", 2] "Value"
            map.size.should_equal 1
            map.get [1, "a", 2] . should_equal "Value"

        group_builder.specify "should support NaN as keys" <|
            Map.empty.insert Number.nan 1 . contains_key Number.nan . should_be_true
            Map.empty.insert Number.nan 1 . values . should_equal [1]
            Map.empty.insert Number.nan 1 . insert Number.nan 2 . contains_key Number.nan . should_be_true
            Map.empty.insert Number.nan 1 . insert Number.nan 2 . values . should_equal [2]
            Map.empty.insert Number.nan 1 . insert "key" 2 . insert Number.nan 3 . contains_key Number.nan . should_be_true
            Map.empty.insert Number.nan 1 . insert "key" 2 . insert Number.nan 3 . contains_key "key" . should_be_true
            Map.empty.insert Number.nan 1 . insert "key" 2 . insert Number.nan 3 . at Number.nan . should_equal 3
            Map.empty.insert Number.nan 1 . insert "key" 2 . insert Number.nan 3 . at "key" . should_equal 2
            Map.empty.insert Number.nan 1 . insert Number.nan Number.nan . at Number.nan . to_text . should_equal "NaN"
            Map.empty.insert Number.nan 1 . insert Number.nan Number.nan . remove Number.nan . size . should_equal 0

        group_builder.specify "should support dates as keys" <|
            map = Map.empty.insert (Date.new 1993) 1 . insert (Date.new 1993 2 5) 2 . insert (Date_Time.new 1993 2 5 13 45) 3
            map.size.should_equal 3
            map.get (Date.new 1993 6 7) . should_equal Nothing
            map.get (Date.new 1993) . should_equal 1
            map.get (Date_Time.new 1993) . should_equal Nothing
            map.get (Date.new 1993 2 5) . should_equal 2
            map.get (Date_Time.new 1993 2 5) . should_equal Nothing
            map.get (Date_Time.new 1993 2 5 13 45) . should_equal 3

        group_builder.specify "should support another hash map as key" <|
            key_map = Map.singleton (Pair.new "one" "two") 42
            map = Map.singleton key_map 23
            map.size.should_equal 1
            (map.get "A").should_equal Nothing
            (map.get key_map).should_equal 23
            (map.get map).should_equal Nothing

        group_builder.specify "should support another hash map with NaN keys as key" <|
            Map.singleton (Map.singleton Number.nan 1) 42 . size . should_equal 1
            Map.singleton (Map.singleton Number.nan 1) 42 . keys . at 0 . keys . to_text . should_equal "[NaN]"
            Map.singleton (Map.singleton Number.nan 1) 42 . keys . at 0 . get Number.nan . should_equal 1
            Map.singleton (Map.singleton Number.nan 1) 42 . at (Map.singleton Number.nan 1) . should_equal 42

        group_builder.specify "should support atoms with custom comparators that violate reflexivity as keys" <|
            k = My_Nan.Value "foo"
            k2 = My_Nan.Value "foo"
            (k==k).should_be_true
            (k==k2).should_be_false
            Meta.is_same_object k k2 . should_be_false
            Meta.is_same_object k k . should_be_true
            m = Map.empty.insert k 10
            m.contains_key k . should_be_true
            m.get k . should_equal 10
            m.contains_key k2 . should_be_false

            m2 = m.insert k2 20
            m2.get k . should_equal 10
            m2.get k2 . should_equal 20
            m2.size . should_equal 2

            m3 = m2.insert k 30
            m3.size . should_equal 2
            m3.get k . should_equal 30

        group_builder.specify "should support atom with custom comparators with complicated hash method" <|
            keys = 0.up_to 500 . map ix->
                value = ["A", "B", "C", "D", "E"].at (ix % 5)
                hash_code = Comparable.from value . hash value
                My_Key.Value hash_code value ix
            distinct_keys = keys.fold Map.empty acc_map->
                item->
                    acc_map.insert item True
            distinct_keys.size . should_equal 5
            distinct_key_values = keys.map (_.value) . fold Map.empty acc_map->
                item->
                    acc_map.insert item True
            distinct_key_values.size . should_equal 5

        group_builder.specify "should handle keys with standard equality semantics" <|
            map = Map.singleton 2 "Hello"
            (map.get 2).should_equal "Hello"
            (map.get 2.0).should_equal "Hello"
            (Map.singleton 2 "Hello").should_equal (Map.singleton 2.0 "Hello")

        group_builder.specify "should handle Nothing as keys" <|
            Map.singleton Nothing 3 . get Nothing . should_equal 3
            Map.singleton Nothing 1 . insert Nothing 2 . get Nothing . should_equal 2
            Map.singleton Nothing 1 . should_equal (Map.singleton Nothing 1)
            Map.singleton Nothing 1 . insert Nothing 2 . at Nothing . should_equal 2
            Map.singleton js_null 1 . at Nothing . should_equal 1

        group_builder.specify "should handle incomparable values as keys" <|
            Map.empty.insert Number.nan 1 . insert Number.nan 2 . get Number.nan . should_equal 2

        group_builder.specify "should handle Nothing as values" <|
            Map.singleton 1 Nothing . at 1 . should_equal Nothing
            Map.singleton Nothing Nothing . at Nothing . should_equal Nothing

        group_builder.specify "should support rewriting values with same keys" <|
            map = Map.empty.insert "a" 1 . insert "a" 42
            map.size.should_equal 1
            map.get "a" . should_equal 42

        group_builder.specify "should allow storing atoms as values" <|
            json = Json.parse '{"a": 1}'
            pair = Pair.new "first" "second"
            map = Map.empty.insert 0 json . insert 1 pair
            map.get 0 . should_equal json
            map.get 1 . should_equal pair

        group_builder.specify "should not drop warnings from keys" <|
            key = Warning.attach "my_warn" "my_key"
            map = Map.singleton key 42
            (Warning.get_all (map.keys.at 0)).length . should_equal 1

        group_builder.specify "should not drop warnings from values" <|
            val = Warning.attach "my_warn" "my_val"
            map = Map.singleton 42 val
            (Warning.get_all (map.values.at 0)).length . should_equal 1

        group_builder.specify "should convert the whole map to a vector" <|
            m = Map.empty . insert 0 0 . insert 3 -5 . insert 1 2
            m.to_vector.sort on=_.first . should_equal [[0, 0], [1, 2], [3, -5]]

        group_builder.specify "should allow building the map from two vectors" <|
            expected = Map.empty . insert 0 0 . insert 3 -5 . insert 1 2
            Map.from_keys_and_values [0, 3, 1] [0, -5, 2] . should_equal expected

        group_builder.specify "should allow building the map from vector like things" <|
            expected = Map.empty . insert 0 0 . insert 1 -5 . insert 2 2
            Map.from_keys_and_values (0.up_to 3) [0, -5, 2] . should_equal expected

        group_builder.specify "should not allow building with duplicate keys unless explicitly allowed" <|
            expected = Map.empty . insert 0 0 . insert 3 -5 . insert 1 2
            Map.from_keys_and_values [0, 3, 1, 0] [3, -5, 2, 0] . should_fail_with Illegal_Argument
            Map.from_keys_and_values [0, 3, 1, 0] [3, -5, 2, 0] error_on_duplicates=False . should_equal expected

        group_builder.specify "should not allow different length vectors when building" <|
            Map.from_keys_and_values [0, 3, 1] [3, -5, 2, 0] . should_fail_with Illegal_Argument

        group_builder.specify "should allow building the map from a vector" <|
            expected = Map.empty . insert 0 0 . insert 3 -5 . insert 1 2
            vec = [[0, 0], [3, -5], [1, 2]]
            Map.from_vector vec . should_equal expected

        group_builder.specify "should not allow duplicates when building the map from a vector, unless explicitly allowed" <|
            vec = [[0, 0], [3, -5], [1, 2], [0, 1]]
            m1 = Map.from_vector vec
            m1.should_fail_with Illegal_Argument
            m1.catch.message . should_equal "`Map.from_vector` encountered duplicate key: 0"

            m2 = Map.from_vector vec error_on_duplicates=False
            Problems.assume_no_problems m2
            m2.get 0 . should_equal 1
            m2.get 3 . should_equal -5

        group_builder.specify "should define a well-defined text conversion" <|
            m = Map.empty . insert 0 0 . insert 3 -5 . insert 1 2
            m.to_text . should_contain "0=0"
            m.to_text . should_contain "3=-5"
            m.to_text . should_contain "1=2"

        group_builder.specify "should define structural equality" <|
            map_1 = Map.empty . insert "1" 2 . insert "2" "1"
            map_2 = Map.empty . insert "1" 2 . insert "2" "1"
            map_3 = Map.empty
            map_1==map_2 . should_be_true
            map_1==map_3 . should_be_false
            map_2==map_3 . should_be_false

        group_builder.specify "should allow inserting and looking up values" <|
            m = Map.empty . insert "foo" 134 . insert "bar" 654 . insert "baz" "spam"
            m.at "foo" . should_equal 134
            m.at "bar" . should_equal 654
            m.at "baz" . should_equal "spam"
            (m.at "nope").should_fail_with No_Such_Key

        group_builder.specify "should support get" <|
            m = Map.empty . insert 2 3
            m.get 2 0 . should_equal 3
            m.get 1 10 . should_equal 10
            m.get 2 (Panic.throw "missing") . should_equal 3

        group_builder.specify "should allow getting a vector of the keys" <|
            m = Map.empty . insert 1 2 . insert 2 4
            m.keys . should_equal [1, 2]

        group_builder.specify "should allow getting a vector of the values" <|
            m = Map.empty . insert 1 2 . insert 2 4
            m.values . should_equal [2, 4]

        group_builder.specify "should support contains_key" <|
            m = Map.empty . insert 2 3
            m.contains_key 2 . should_be_true
            m.contains_key 1 . should_be_false

        group_builder.specify "should allow transforming the map" <|
            m = Map.empty . insert 1 2 . insert 2 4
            expected = Map.empty . insert "1" 4 . insert "2" 8
            m.transform (k -> v -> [k.to_text, v*2]) . should_equal expected

        group_builder.specify "should disallow duplicate keys when transforming the map" <|
            m = Map.from_vector [[1, 2], [11, 3]]
            m2 = m.transform (k -> v -> [k % 10, v*2])
            m2.should_fail_with Illegal_Argument
            m2.catch.message . should_equal "`Map.transform` encountered duplicate key: 1"

        group_builder.specify "should allow mapping over values" <|
            m = Map.empty . insert 1 2 . insert 2 4
            expected = Map.empty . insert 1 4 . insert 2 8
            m.map (v -> v*2) . should_equal expected

        group_builder.specify "should allow mapping over keys" <|
            m = Map.empty . insert 1 2 . insert 2 4
            expected = Map.empty . insert 2 2 . insert 4 4
            m.map_keys (k -> k*2) . should_equal expected

        group_builder.specify "should allow mapping with keys" <|
            m = Map.empty . insert 1 2 . insert 2 4
            expected = Map.empty . insert 1 3 . insert 2 6
            m.map_with_key (k -> v -> k + v) . should_equal expected

        group_builder.specify "should allow iterating over each value" <|
            m = Map.empty . insert 1 2 . insert 2 4
            vec = Vector.new_builder
            expected_vec = [2, 4]
            m.each (v -> vec.append v)
            vec.to_vector . should_equal expected_vec

        group_builder.specify "should allow iterating over each key-value pair" <|
            m = Map.empty . insert 1 2 . insert 2 4
            vec = Vector.new_builder
            expected_vec = [3, 6]
            m.each_with_key (k -> v -> vec.append (k+v))
            vec.to_vector . should_equal expected_vec

        group_builder.specify "should allow folding over the values" <|
            m = Map.empty . insert 1 2 . insert 2 4
            m.fold 0 (+) . should_equal 6

        group_builder.specify "should allow folding over the key-value pairs" <|
            m = Map.empty . insert 1 2 . insert 2 4
            m.fold_with_key 0 (l -> k -> v -> l + k + v) . should_equal 9

        group_builder.specify "should be able to add a Nothing key to the map of Text" <|
            m = Map.empty . insert "A" 2 . insert Nothing 1 . insert "B" 3
            m.at "A" . should_equal 2
            m.at "B" . should_equal 3
            m.at Nothing . should_equal 1

        group_builder.specify "should be able to add a Nothing key to the map of Integer" <|
            m = Map.empty . insert 100 2 . insert Nothing 1 . insert 200 3
            m.at 100 . should_equal 2
            m.at 200 . should_equal 3
            m.at Nothing . should_equal 1

        group_builder.specify "should be able to remove entries (1)" <|
            m1 = Map.empty.insert "A" 1 . insert "B" 2
            m2 = m1.remove "B"
            m2.get "A" . should_equal 1
            m2.remove "A" . should_equal Map.empty
            Test.expect_panic_with (m1.remove "foo") Any

        group_builder.specify "should be able to remove entries (2)" <|
            m1 = Map.empty.insert "A" 1
            m2 = m1.insert "B" 2
            m3 = m1.insert "C" 3
            m2.remove "A" . to_vector . should_equal [["B", 2]]
            m2.remove "B" . to_vector . should_equal [["A", 1]]
            m3.remove "A" . to_vector . should_equal [["C", 3]]
            m3.remove "C" . to_vector . should_equal [["A", 1]]

        group_builder.specify "should be able to remove entries (3)" <|
            m = Map.empty.insert "A" 1 . insert "B" 2 . insert "C" 3
            m.remove "B" . should_equal (Map.singleton "A" 1 . insert "C" 3)

    suite_builder.group "Polyglot keys and values" group_builder->
        group_builder.specify "should support polyglot keys" <|
            map = Map.singleton (js_str "A") 42
            map.size.should_equal 1
            map.get "A" . should_equal 42
            map.get (js_str "A") . should_equal 42

        group_builder.specify "should support host objects as keys" <|
            # JavaPath has proper implementation of hashCode
            map = Map.singleton (JavaPath.of "/home/user/file.txt") 42
            map.get "X" . should_equal Nothing
            map.get "A" . should_equal Nothing
            map.get (JavaPath.of "/home/user/file.txt") . should_equal 42

        group_builder.specify "should support Python objects as keys" pending=pending_python_missing <|
            py_obj = py_wrapper 42
            map = Map.singleton py_obj "Value"
            map.get py_obj . should_equal "Value"

        group_builder.specify "should support Python objects as values" pending=pending_python_missing <|
            map = Map.singleton "A" (py_wrapper 42)
            map.get "A" . data . should_equal 42

        group_builder.specify "should insert entries to a polyglot map" pending=pending_python_missing <|
            dict = py_dict_from_vec ["A", 1, "B", 2]
            dict.insert "C" 3 . keys . sort . should_equal ["A", "B", "C"]

        group_builder.specify "should remove entries from a polyglot map" pending=pending_python_missing <|
            dict = py_dict_from_vec ["A", 1, "B", 2]
            dict.remove "B" . to_vector . should_equal [["A", 1]]

    suite_builder.group "non-linear inserts" group_builder->
        group_builder.specify "should handle inserts with different keys" <|
            m1 = Map.singleton "A" 1
            m2 = m1.insert "B" 2
            m3 = m1.insert "C" 3
            m2.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2]]
            m3.to_vector.sort on=_.first . should_equal [["A", 1], ["C", 3]]

        group_builder.specify "should handle inserts with same keys (1)" <|
            m1 = Map.singleton "A" 1
            m2 = m1.insert "A" 2
            m3 = m1.insert "A" 3
            m4 = m1.insert "B" 4
            m2.to_vector.sort on=_.first . should_equal [["A", 2]]
            m3.to_vector.sort on=_.first . should_equal [["A", 3]]
            m4.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 4]]

        group_builder.specify "should handle inserts with same keys (2)" <|
            m1 = Map.singleton "foo" 1
            m2 = m1.insert "baz" 2
            m3 = m2.insert "foo" 3
            m1.to_vector.sort on=_.first . should_equal [['foo', 1]]
            m2.to_vector.sort on=_.first . should_equal [['baz', 2], ['foo', 1]]
            m3.to_vector.sort on=_.first . should_equal [['baz', 2], ['foo', 3]]

        group_builder.specify "should handle inserts with same keys (3)" <|
            m1 = Map.singleton "A" 1
            m2 = m1.insert "B" 2
            m3 = m2.insert "A" 3
            m4 = m2.insert "C" 4
            m1.to_vector.sort on=_.first . should_equal [["A", 1]]
            m2.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2]]
            m3.to_vector.sort on=_.first . should_equal [["A", 3], ["B", 2]]
            m4.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2], ["C", 4]]

        group_builder.specify "should handle inserts with same keys (4)" <|
            m1 = Map.singleton "A" 1
            m2 = m1.insert "B" 2
            m3 = m2.insert "C" 3
            m4 = m2.insert "D" 4
            m2.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2]]
            m3.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2], ["C", 3]]
            m4.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2], ["D", 4]]

        group_builder.specify "should handle inserts with same keys (5)" <|
            m1 = Map.singleton "A" 1
            m2 = m1.insert "B" 2
            m3 = m2.insert "A" 3
            m4 = m2.insert "A" 4
            m2.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2]]
            m3.to_vector.sort on=_.first . should_equal [["A", 3], ["B", 2]]
            m4.to_vector.sort on=_.first . should_equal [["A", 4], ["B", 2]]

        group_builder.specify "should handle inserts with same keys (6)" <|
            m1 = Map.singleton "A" 1
            m2 = m1.insert "B" 2
            m3 = m2.insert "C" 3
            m4 = m2.insert "A" 4
            m2.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2]]
            m3.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2], ["C", 3]]
            m4.to_vector.sort on=_.first . should_equal [["A", 4], ["B", 2]]

        group_builder.specify "should handle inserts with same keys (7)" <|
            m1 = Map.singleton "A" 1
            m2 = m1.insert "B" 2
            m3 = m2.insert "C" 3
            m4 = m3.insert "D" 4
            m5 = m2.insert "A" 5
            m2.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2]]
            m3.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2], ["C", 3]]
            m4.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2], ["C", 3], ["D", 4]]
            m5.to_vector.sort on=_.first . should_equal [["A", 5], ["B", 2]]

        group_builder.specify "should handle inserts with same keys (8)" <|
            m1 = Map.singleton "A" 1
            m2 = m1.insert "B" 2
            m3 = m2.insert "C" 3
            m4 = m3.insert "A" 4
            m5 = m2.insert "A" 5
            m2.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2]]
            m3.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2], ["C", 3]]
            m4.to_vector.sort on=_.first . should_equal [["A", 4], ["B", 2], ["C", 3]]
            m5.to_vector.sort on=_.first . should_equal [["A", 5], ["B", 2]]

        group_builder.specify "should handle inserts with same keys (9)" <|
            m1 = Map.singleton "A" 1
            m2 = m1.insert "B" 2
            m3 = m2.insert "A" 3
            m4 = m2.insert "B" 4
            m5 = m2.insert "C" 5
            m2.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2]]
            m3.to_vector.sort on=_.first . should_equal [["A", 3], ["B", 2]]
            m4.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 4]]
            m5.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2], ["C", 5]]

        group_builder.specify "should handle inserts with same keys (10)" <|
            m1 = Map.singleton "A" 1
            m2 = m1.insert "B" 2
            m3 = m2.insert "C" 3
            m4 = m2.insert "D" 4
            m5 = m2.insert "E" 5
            m2.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2]]
            m3.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2], ["C", 3]]
            m4.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2], ["D", 4]]
            m5.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2], ["E", 5]]

    suite_builder.group "Polyglot hash maps" group_builder->
        group_builder.specify "should pass maps as immutable maps to other langs" pending=pending_python_missing <|
            map = Map.singleton "A" 1
            # Python's KeyError should be raised
            Test.expect_panic_with (py_update_dict map "A" 2) Any
            map.get "A" . should_equal 1

        group_builder.specify "should treat JavaScript maps as Enso maps" <|
            js_dict = js_dict_from_vec ["A", 1, "B", 2]
            map = js_dict.insert "C" 3
            js_dict.to_vector.should_equal [["A", 1], ["B", 2]]
            map.to_vector.sort on=_.first . should_equal [["A", 1], ["B", 2], ["C", 3]]

        group_builder.specify "should treat Java Map as Enso map" <|
            sort_by_keys vec = vec.sort by=x-> y-> Ordering.compare x.first y.first
            jmap = JavaMap.of "A" 1 "B" 2
            (sort_by_keys jmap.to_vector) . should_equal [["A", 1], ["B", 2]]
            (sort_by_keys (jmap.insert "C" 3 . to_vector)) . should_equal [["A", 1], ["B", 2], ["C", 3]]

        group_builder.specify "should treat Python dicts as Enso maps" pending=pending_python_missing <|
            py_dict = py_dict_from_vec ["A", 1, "B", 2]
            map = py_dict.insert "C" 3
            py_dict.not_empty . should_be_true
            py_dict.to_vector . should_contain_the_same_elements_as [["A", 1], ["B", 2]]
            map.to_vector . should_contain_the_same_elements_as [["A", 1], ["B", 2], ["C", 3]]
            py_empty_dict.is_empty.should_be_true
            py_empty_dict.insert "A" 1 . insert "A" 2 . get "A" . should_equal 2

        group_builder.specify "should pass maps with null keys to Python and back" pending=pending_python_missing <|
            # Python supports None as keys, Enso support Nothing as keys
            py_dict = py_dict_from_map (Map.singleton Nothing 42)
            py_dict.get Nothing . should_equal 42
            py_dict.insert "A" 23 . get Nothing . should_equal 42
            py_dict.insert Nothing 23 . get Nothing . should_equal 23

        group_builder.specify "should treat Enso maps as Python dicts when passed to Python" pending=pending_python_missing <|
            map1 = Map.empty.insert "A" 1 . insert "B" 2
            py_vec_from_map map1 . should_contain_the_same_elements_as [["A", 1], ["B", 2]]
            map2 = Map.empty.insert "A" 1 . insert Nothing 2
            py_vec_from_map map2 . should_contain_the_same_elements_as [["A", 1], [Nothing, 2]]


main =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter

