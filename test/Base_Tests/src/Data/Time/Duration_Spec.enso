from Standard.Base import all
import Standard.Base.Errors.Common.Incomparable_Values
import Standard.Base.Errors.Time_Error.Time_Error

from Standard.Test_New import all


polyglot java import java.time.Duration as Java_Duration
polyglot java import java.time.LocalDate
polyglot java import java.time.LocalDateTime as Java_DateTime

add_specs suite_builder =
    suite_builder.group "Duration" group_builder->

        group_builder.specify "should create interval seconds" <|
            duration = (Duration.new seconds=5)
            duration.seconds . should_equal 5
            duration.milliseconds . should_equal 0

        group_builder.specify "should create interval between two points in time" <|
            (Duration.between (Date_Time.new 2001 1 1 3) (Date_Time.new 2001 1 1 10)).total_hours . should_equal 7
            (Duration.between (Date_Time.new 2001 1 1) (Date_Time.new 2001 1 7)).total_hours . should_equal (6 * 24)
            (Duration.between (Date_Time.new 2001 1 1 13) (Date_Time.new 2001 1 7 16)).total_hours . should_equal (3 + 6 * 24)

        group_builder.specify "should normalize periods" <|
            (Duration.new seconds=60).total_minutes . should_equal 1
            (Duration.new milliseconds=1000).total_seconds . should_equal 1

        group_builder.specify "should normalize addition" <|
            duration = (Duration.new hours=11) + (Duration.new hours=1)
            duration.hours . should_equal 12

        group_builder.specify "should normalize subtraction" <|
            duration = (Duration.new hours=13) - (Duration.new hours=1)
            duration.hours . should_equal 12

        group_builder.specify "should render a friendly to display text" <|
            Duration.new . to_display_text . should_equal "0s"
            Duration.new seconds=30 . to_display_text . should_equal "30s"
            Duration.new seconds=30 milliseconds=500 . to_display_text . should_equal "30.5s"
            Duration.new hours=1 . to_display_text . should_equal "1h"
            Duration.new hours=1 minutes=30 . to_display_text . should_equal "1h 30m"
            Duration.new hours=1 seconds=30 . to_display_text . should_equal "1h 0m 30s"
            Duration.new hours=1 minutes=30 seconds=30 . to_display_text . should_equal "1h 30m 30s"

        group_builder.specify "should convert to Json" <|
            interval = (Duration.new nanoseconds=120) + (Duration.new seconds=30) + (Duration.new hours=14)
            interval.to_json.should_equal <|
                duration_pairs = [["hours", interval.hours], ["seconds", interval.seconds], ["nanoseconds", interval.nanoseconds]]
                JS_Object.from_pairs ([["type", "Duration"], ["constructor", "new"]] + duration_pairs) . to_text

        group_builder.specify "should be comparable" <|
            duration_1 = (Duration.new hours=5)
            duration_2 = (Duration.new minutes=1)
            Ordering.compare duration_1 duration_1 . should_equal Ordering.Equal
            duration_1==duration_1 . should_be_true
            duration_1!=duration_2 . should_be_true
            duration_1>duration_2 . should_be_true
            duration_1<duration_2 . should_be_false

        group_builder.specify "should not mix Duration and Period" <|
            durations = [(Duration.new hours=1), (Duration.zero), (Duration.new hours=1 seconds=30)]
            periods = [(Period.new days=1), (Period.new 0), (Period.new years=30), (Period.new years=3 months=2)]
            durations.each duration->
                periods.each period->
                    (duration + period).should_fail_with Time_Error
                    (duration - period).should_fail_with Time_Error
                    (period + duration).should_fail_with Time_Error
                    (period - duration).should_fail_with Time_Error
                    (duration > period).should_fail_with Incomparable_Values
                    (duration < period).should_fail_with Incomparable_Values

        group_builder.specify "Date_Time supports adding and subtracting Duration" <|
            ((Date_Time.new 2022 10 1 hour=10) + (Duration.new hours=2)) . should_equal (Date_Time.new 2022 10 1 hour=12)
            ((Date_Time.new 2022 10 1 hour=10) - (Duration.new hours=2)) . should_equal (Date_Time.new 2022 10 1 hour=8)
            ((Date_Time.new 2022 10 2) - (Duration.new hours=24)) . should_equal (Date_Time.new 2022 10 1)
            ((Date_Time.new 2022 10 1 hour=2) - (Duration.new minutes=3)) . should_equal (Date_Time.new 2022 10 1 hour=1 minute=57)

        group_builder.specify "Java Duration is equal to Enso Duration" <|
            (Duration.new hours=1) . should_equal (Java_Duration.ofHours 1)
            (Duration.new minutes=80) . should_equal (Java_Duration.ofMinutes 80)
            (Java_Duration.ofSeconds 30) . should_equal (Duration.new seconds=30)

        group_builder.specify "Difference of Java Date and Enso date should be an Enso Duration" <|
            (Duration.between (java_datetime 2022 01 01) (Date_Time.new 2022 01 02) timezone_aware=False).total_hours . should_equal 24
            (Duration.between (Date_Time.new 2022 01 01) (java_datetime 2022 01 02) timezone_aware=False).total_hours . should_equal 24
            (Duration.between (Date_Time.new 2022 01 01 13) (java_datetime 2022 01 01 14) timezone_aware=False).total_hours . should_equal 1
            (Duration.between (java_datetime 2022 01 01 13 13) (Date_Time.new 2022 01 01 13 15) timezone_aware=False).total_minutes . should_equal 2

        group_builder.specify "Difference of two Java Dates should be an Enso Duration" <|
            (Duration.between (java_datetime 2022 01 01) (java_datetime 2022 01 02) timezone_aware=False).total_hours . should_equal 24

        group_builder.specify "Difference of two JS Dates is an Enso Duration" <|
            (Duration.between (js_datetime 2022 09 01) (js_datetime 2022 09 02) timezone_aware=False).total_hours . should_equal 24

        group_builder.specify "Difference of JS Dates and Java Dates should be Enso Duration" <|
            (Duration.between (js_datetime 2022 09 08) (java_datetime 2022 09 09) timezone_aware=False).total_hours . should_equal 24
            (Duration.between (java_datetime 2022 09 09) (js_datetime 2022 09 08) timezone_aware=False).total_hours . should_equal (-24)

java_datetime year month=1 day=1 hour=0 minute=0 second=0 nanosecond=0 =
    Panic.catch Any (Java_DateTime.of year month day hour minute second nanosecond) (err -> Error.throw (Time_Error.Error <| err.payload.getMessage))

js_datetime year month=1 day=1 hour=0 minute=0 second=0 nanosecond=0 =
    Panic.catch Any (js_datetime_impl year month day hour minute second nanosecond) (err -> Error.throw (Time_Error.Error err.payload))

foreign js js_datetime_impl year month day hour minute second nanosecond = """
    if (month > 12 || month < 1) {
        throw `Invalid value for MonthOfYear (valid values 1 - 12): ${month}`;
    }
    return new Date(year, month - 1, day, hour, minute, second, nanosecond / 1000000);

main =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter

