from Standard.Base import all
import Standard.Base.Errors.Common.Forbidden_Operation
import Standard.Base.Errors.Common.Dry_Run_Operation
import Standard.Base.Errors.Encoding_Error.Encoding_Error
import Standard.Base.Errors.File_Error.File_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State
import Standard.Base.Runtime.Context

polyglot java import org.enso.base_test_helpers.FileSystemHelper

from Standard.Test_New import all


set_writable file writable =
    path = file.absolute.path
    FileSystemHelper.setWritable path writable

add_specs suite_builder =
    sample_file = enso_project.data / "sample.txt"
    windows_file = enso_project.data / "windows.txt"
    non_existent_file = File.new "does_not_exist.txt"

    suite_builder.group "File Operations" group_builder->
        group_builder.specify "should allow creating a new file" <|
            path = sample_file.path
            File.new path

        group_builder.specify "should have `new` be a no-op on a file" <|
            file = File.new sample_file
            file . should_equal sample_file

        group_builder.specify "should allow joining sections" <|
            f_1 = File.new "foo/bar"
            (File.new "foo" / "bar") . normalize . should_equal f_1
            File.new "foo" . join "bar" . should_equal f_1

            f_2 = File.new "foo/a/b/c/d/e"
            File.new "foo" . join "a" . join "b" . join "c" . join "d" . join "e" . should_equal f_2
            File.new "foo" . join ["a", "b", "c", "d", "e"] . should_equal f_2

        group_builder.specify "should check if file exists" <|
            non_existent_file.exists.should_be_false
            sample_file.exists.should_be_true

        group_builder.specify "should get file size" <|
            file_size = sample_file.size
            ## Allows for having line endings replaced.
            valid_size = file_size==403 || file_size==406
            valid_size.should_be_true

            result = non_existent_file.size
            result.should_fail_with File_Error
            result.catch.should_be_a File_Error.Not_Found

            folder = enso_project.data.size
            folder.should_fail_with File_Error
            folder.catch.should_be_a File_Error.IO_Error

        group_builder.specify "should get file name" <|
            sample_file.name.should_equal "sample.txt"

        group_builder.specify "should get file extension" <|
            sample_file.extension.should_equal ".txt"
            (File.new "this.is.a.silly.name.txt").extension.should_equal ".txt"
            (File.new "no_extension").extension.should_equal ""
            (File.new "file.").extension.should_equal ""

        group_builder.specify "should convert a file to absolute" <|
            abs = File.new "foo.txt" . absolute
            through_cwd = (File.current_directory / "foo.txt")
            abs.should_equal through_cwd

        group_builder.specify "should normalize file" <|
            f_1 = File.new "foo"
            File.new "bar/../baz/../foo" . normalize . should_equal f_1
            (File.new "bar" / ".." / "baz" / ".." / "foo") . normalize . should_equal f_1
            File.new "bar" . join ["..", "baz", "..", "foo"] . should_equal f_1

        group_builder.specify "should handle `==` on files" <|
            (File.new "foo").should_equal (File.new "foo")
            (File.new "bar").should_not_equal (File.new "foo")

        group_builder.specify "should allow checking in parent path with `starts_with`" <|
            (File.new "foo/bar").starts_with (File.new "foo") . should_be_true
            (File.new "foo/bar").starts_with (File.new "f") . should_be_false

        group_builder.specify "should allow creating a directory" <|
            f = enso_project.data / "good_dir"
            f.delete_if_exists
            f.exists.should_be_false

            f.create_directory
            f.exists.should_be_true
            f.is_directory.should_be_true

            g = f / "bar" / "baz"
            g.exists.should_be_false

            g.create_directory
            g.exists.should_be_true

            g.delete_if_exists
            g.parent.delete_if_exists
            f.delete_if_exists

        group_builder.specify "should only allow creating a directory if Output is enabled" <|
            f = enso_project.data / "bad_dir"
            f.delete_if_exists
            f.exists.should_be_false

            Context.Output.with_disabled <|
                f.create_directory . should_fail_with Forbidden_Operation
                f.exists.should_be_false

        group_builder.specify "should allow reading a file byte by byte" <|
            f = enso_project.data / "short.txt"
            f.delete_if_exists
            f.exists.should_be_false
            "Cup".write f on_existing_file=Existing_File_Behavior.Overwrite
            f.with_input_stream stream->
                stream.read_byte.should_equal 67
                stream.read_byte.should_equal 117
                stream.read_byte.should_equal 112
                stream.read_byte.should_equal -1
            f.delete
            f.exists.should_be_false

        group_builder.specify "should only allow with_output_stream if Output is enabled" <|
            f = enso_project.data / "short.txt"
            f.delete_if_exists

            byte_vector = "Hello World!".bytes Encoding.utf_8
            write_bytes bytes = f.with_output_stream [File_Access.Create, File_Access.Write] stream->
                stream.write_bytes bytes
                stream.close

            write_bytes byte_vector . should_succeed
            f.exists.should_be_true
            f.delete

            Context.Output.with_disabled <|
                write_bytes byte_vector . should_fail_with Forbidden_Operation
                f.exists.should_be_false

            f.delete_if_exists

        group_builder.specify "should only allow deleting a file if Output is enabled" <|
            f = enso_project.data / "short.txt"
            f.delete_if_exists
            "Cup".write f on_existing_file=Existing_File_Behavior.Overwrite

            Context.Output.with_disabled <|
                f.delete . should_fail_with Forbidden_Operation
                f.exists.should_be_true

            f.delete.should_succeed
            f.exists.should_be_false

        group_builder.specify "should only allow copying a file if Output is enabled" <|
            f = enso_project.data / "short.txt"
            f.delete_if_exists
            "Cup".write f on_existing_file=Existing_File_Behavior.Overwrite

            g = enso_project.data / "short_copy.txt"
            g.delete_if_exists

            f.copy_to g . should_succeed
            g.exists.should_be_true
            g.delete_if_exists

            Context.Output.with_disabled <|
                f.copy_to g . should_fail_with Forbidden_Operation
                g.exists.should_be_false

            "A".write f on_existing_file=Existing_File_Behavior.Overwrite
            "B".write g on_existing_file=Existing_File_Behavior.Overwrite

            r = f.copy_to g
            r.should_fail_with File_Error
            r.catch.should_be_a File_Error.Already_Exists
            f.read . should_equal "A"
            g.read . should_equal "B"

            f.copy_to g replace_existing=True . should_succeed
            f.read . should_equal "A"
            g.read . should_equal "A"

            f.delete_if_exists
            g.delete_if_exists

        group_builder.specify "should only allow moving a file if Output is enabled" <|
            f = enso_project.data / "short.txt"
            f.delete_if_exists
            "Cup".write f on_existing_file=Existing_File_Behavior.Overwrite

            g = enso_project.data / "short_copy.txt"
            g.delete_if_exists

            Context.Output.with_disabled <|
                f.move_to g . should_fail_with Forbidden_Operation
                f.exists.should_be_true
                g.exists.should_be_false

            f.move_to g . should_succeed
            f.exists.should_be_false
            g.exists.should_be_true

            "A".write f on_existing_file=Existing_File_Behavior.Overwrite
            "B".write g on_existing_file=Existing_File_Behavior.Overwrite
            r = f.move_to g
            r.should_fail_with File_Error
            r.catch.should_be_a File_Error.Already_Exists
            f.exists.should_be_true
            g.exists.should_be_true
            g.read . should_equal "B"

            f.move_to g replace_existing=True . should_succeed
            f.exists.should_be_false
            g.exists.should_be_true
            g.read . should_equal "A"

            f.delete_if_exists
            g.delete_if_exists

        group_builder.specify "should handle exceptions when deleting a missing file" <|
            file = File.new "does_not_exist.txt"
            result = file.delete
            result.should_fail_with File_Error
            result.catch.should_be_a File_Error.Not_Found

        if Platform.is_unix then
            group_builder.specify "should allow to check file permissions" <|
                f = enso_project.data / "transient" / "permissions.txt"
                f.delete_if_exists
                "foobar".write f

                Process.run "chmod" ["0777", f.absolute.path] . exit_code . should_equal Exit_Code.Success
                rwx = [Permission.Read, Permission.Write, Permission.Execute]
                f.posix_permissions . should_equal <|
                    File_Permissions.Value rwx rwx rwx

                Process.run "chmod" ["0421", f.absolute.path] . exit_code . should_equal Exit_Code.Success
                f.posix_permissions . should_equal <|
                    File_Permissions.Value [Permission.Read] [Permission.Write] [Permission.Execute]
                f.is_writable.should_be_false

                f.delete

            group_builder.specify "should gracefully handle permission errors" <|
                f = enso_project.data / "transient" / "permissions2.txt"
                f.delete_if_exists
                "foobar".write f

                Process.run "chmod" ["0000", f.absolute.path] . exit_code . should_equal Exit_Code.Success
                f.posix_permissions . should_equal <|
                    File_Permissions.Value [] [] []

                r1 = f.read
                r1.should_fail_with File_Error
                r1.catch.should_be_a File_Error.Access_Denied
                r1.catch.file . should_equal f
                r1.catch.to_display_text.should_contain "Insufficient permissions"

                Process.run "chmod" ["0744", f.absolute.path] . exit_code . should_equal Exit_Code.Success
                f.delete

    suite_builder.group "read_bytes" group_builder->
        group_builder.specify "should allow reading a file to byte vector" <|
            contents = sample_file.read_bytes
            contents.take (First 6) . should_equal [67, 117, 112, 99, 97, 107]

        group_builder.specify "should allow reading a file to byte vector via path" <|
            full_path = sample_file . path
            contents = File.new full_path . read_bytes
            contents.take (First 6) . should_equal [67, 117, 112, 99, 97, 107]

        group_builder.specify "should allow to read last n bytes from a file" <|
            file = enso_project.data / "transient" / "bytes.txt"
            data = [1, 0, 0, 1, 2, 100, 20]
            Context.Output.with_enabled <|
                data.write_bytes file
                file.read_last_bytes 0 . should_equal []
                file.read_last_bytes 1 . should_equal [20]
                file.read_last_bytes 2 . should_equal [100, 20]
                file.read_last_bytes 5 . should_equal [0, 1, 2, 100, 20]
                file.read_last_bytes 1000 . should_equal data
                file.delete

        group_builder.specify "should handle exceptions when reading a non-existent file" <|
            file = File.new "does_not_exist.txt"
            file.read_bytes . should_fail_with File_Error
            file.read_bytes.catch.should_be_a File_Error.Not_Found
            non_existent_file.read_bytes . should_fail_with File_Error
            non_existent_file.read_bytes.catch.should_be_a File_Error.Not_Found

        group_builder.specify "should open and read the file in one shot" <|
            path_name = sample_file.path
            contents = File.new path_name . read_bytes
            contents.take (First 6) . should_equal [67, 117, 112, 99, 97, 107]
            file = sample_file
            contents_2 = File.new file . read_bytes
            contents_2.take (First 6) . should_equal [67, 117, 112, 99, 97, 107]

        group_builder.specify "no parent of dot implies nothing" <|
            no_parent = (File.new '.').parent
            no_parent.is_nothing . should_be_true

    suite_builder.group "read_text" group_builder->
        group_builder.specify "should allow reading a UTF-8 file" <|
            contents = sample_file.read_text
            contents.should_start_with "Cupcake ipsum dolor sit amet."

        group_builder.specify "should allow reading a UTF-8 file via path" <|
            full_path = sample_file . path
            contents = Data.read_text full_path
            contents.should_start_with "Cupcake ipsum dolor sit amet."

        group_builder.specify "should allow reading a Windows file via path" <|
            contents = windows_file.read_text Encoding.windows_1252
            contents.should_equal "Hello World! $¢¤¥"

        group_builder.specify "should raise warnings when reading invalid characters" <|
            action = windows_file.read_text Encoding.ascii on_problems=_
            tester result = result.should_equal 'Hello World! $\uFFFD\uFFFD\uFFFD'
            problems = [Encoding_Error.Error "Encoding issues at 14, 15, 16."]
            Problems.test_problem_handling action problems tester

            # Check that it defaults to warning.
            Problems.expect_only_warning Encoding_Error <|
                windows_file.read_text Encoding.ascii

        group_builder.specify "should handle exceptions when reading a non-existent file" <|
            file = File.new "does_not_exist.txt"
            r1 = Data.read_text "does_not_exist.txt"
            r1.should_fail_with File_Error
            r1.catch.should_be_a File_Error.Not_Found
            r2 = file.read_text
            r2.should_fail_with File_Error
            r2.catch.should_be_a File_Error.Not_Found
            r3 = non_existent_file.read_text
            r3.should_fail_with File_Error
            r3.catch.should_be_a File_Error.Not_Found

        group_builder.specify "should open and read the file in one shot" <|
            path_name = sample_file.path
            contents = Data.read_text path_name
            contents.should_start_with "Cupcake ipsum dolor sit amet."
            file = sample_file
            contents_2 = Data.read_text file
            contents_2.should_start_with "Cupcake ipsum dolor sit amet."

    suite_builder.group "write operations" group_builder->
        data = [32, 127, -128, 0]
        data_2 = [10, 15, 20, 30]

        transient = enso_project.data / "transient"
        group_builder.specify "should allow to writing bytes to a new file and return that file's descriptor on success" <|
            f = transient / "new_file.dat"
            f.delete_if_exists
            f.exists.should_be_false
            r = data.write_bytes f
            r . should_equal f
            Problems.assume_no_problems r
            f.exists.should_be_true
            f.read_bytes.should_equal data
            f.delete_if_exists

        group_builder.specify "should backup a file when overwriting with new bytes" <|
            f = transient / "work.txt"
            f.delete_if_exists
            f_bak = transient / "work.txt.bak"
            f_bak.delete_if_exists
            Problems.assume_no_problems <| data.write_bytes f
            f.exists.should_be_true
            Problems.assume_no_problems <| data_2.write_bytes f
            f.read_bytes.should_equal data_2
            f_bak.exists.should_be_true
            f.delete_if_exists
            f_bak.delete_if_exists

        group_builder.specify "should allow overwriting a file with new bytes" <|
            f = transient / "work.txt"
            f.delete_if_exists
            f_bak = transient / "work.txt.bak"
            f_bak.delete_if_exists
            Problems.assume_no_problems <|
                data.write_bytes f
            f.exists.should_be_true
            Problems.assume_no_problems <|
                data_2.write_bytes f on_existing_file=Existing_File_Behavior.Overwrite
            f.read_bytes.should_equal data_2
            f_bak.exists.should_be_false
            f.delete_if_exists

        group_builder.specify "should allow appending bytes to a new file" <|
            f = transient / "new_file.dat"
            f.delete_if_exists
            f.exists.should_be_false
            Problems.assume_no_problems <|
                data.write_bytes f
            Problems.assume_no_problems <|
                data_2.write_bytes f on_existing_file=Existing_File_Behavior.Append
            f.read_bytes.should_equal (data + data_2)
            f.delete_if_exists

        group_builder.specify "should fail with Illegal_Argument when trying to write invalid byte vector" <|
            f = transient / "work.txt"
            f.delete_if_exists
            f.exists.should_be_false
            [0, 1, 256].write_bytes f . should_fail_with Illegal_Argument
            [0, 1, Nothing].write_bytes f . should_fail_with Illegal_Argument

        group_builder.specify "should not change the file when trying to write an invalid byte vector" <|
            f = transient / "work.txt"
            f.delete_if_exists
            f_bak = transient / "work.txt.bak"
            f_bak.delete_if_exists
            Problems.assume_no_problems <| data.write_bytes f
            [0, 1, 256].write_bytes f . should_fail_with Illegal_Argument
            f.read_bytes.should_equal data
            f_bak.exists.should_be_false
            [0, 1, 256].write_bytes f on_existing_file=Existing_File_Behavior.Overwrite . should_fail_with Illegal_Argument
            f.read_bytes.should_equal data
            [0, 1, 256].write_bytes f on_existing_file=Existing_File_Behavior.Append . should_fail_with Illegal_Argument
            f.read_bytes.should_equal data
            f.delete_if_exists

        group_builder.specify "should allow writing text to a new file and return this file's descriptor on success" <|
            f = transient / "work.txt"
            f.delete_if_exists
            f.exists.should_be_false
            r = "line 1!".write f
            Problems.assume_no_problems r
            r.should_equal f
            f.exists.should_be_true
            f.read_text.should_equal "line 1!"
            f.delete
            f.exists.should_be_false

        group_builder.specify "should perform a dry run writing text to a new file if Context.Output is disabled" <|
            f = transient / "work.txt"
            f.delete_if_exists
            f.exists.should_be_false

            r = Context.Output.with_disabled <|
                r = "line 1!".write f
                Problems.expect_only_warning Dry_Run_Operation r
                f.exists.should_be_false
                r.exists.should_be_true
                r

            r.delete_if_exists

        group_builder.specify "should allow appending text to a file" <|
            f = transient / "work.txt"
            f.delete_if_exists
            "line 1!".write f on_existing_file=Existing_File_Behavior.Append on_problems=Report_Error . should_succeed . should_equal f
            '\nline 2!'.write f on_existing_file=Existing_File_Behavior.Append on_problems=Report_Error . should_succeed . should_equal f
            f.read_text.should_equal 'line 1!\nline 2!'
            f.delete
            f.exists.should_be_false

        group_builder.specify "should perform a dry run appending text to a file if Context.Output is disabled" <|
            f = transient / "work.txt"
            f.delete_if_exists
            "line 1!".write f on_existing_file=Existing_File_Behavior.Append on_problems=Report_Error . should_succeed . should_equal f

            Context.Output.with_disabled <|
                r = '\nline 2!'.write f on_existing_file=Existing_File_Behavior.Append on_problems=Report_Error
                Problems.expect_only_warning Dry_Run_Operation r
                r.exists.should_be_true
                r.read_text.should_equal 'line 1!\nline 2!'
                f.read_text.should_equal 'line 1!'

                Context.Output.with_enabled <| r.delete_if_exists

        group_builder.specify "if Context.Output is disabled, will always start from the file given - so the effects of previous dry run are not visible" <|
            f = transient / "dry_append.txt"
            f.delete_if_exists

            Context.Output.with_disabled <|
                r = "line 1!".write f on_existing_file=Existing_File_Behavior.Append on_problems=Report_Error
                Problems.expect_only_warning Dry_Run_Operation r
                r.exists.should_be_true

                s = '\nline 2!'.write f on_existing_file=Existing_File_Behavior.Append on_problems=Report_Error
                Problems.expect_only_warning Dry_Run_Operation s
                s.exists.should_be_true

                # We only see the second line, because the base file `f` was not updated and the second append still starts from an empty file.
                s.read_text.should_equal '\nline 2!'

                # But the dry run file for the same `f` target should be kept the same:
                s.should_equal r

                f.exists.should_be_false

                Context.Output.with_enabled r.delete_if_exists

        group_builder.specify "if Context.Output is disabled, will append to the dry run file if the dry run file descriptor is passed as the write target" <|
            f = transient / "dry_append.txt"
            f.delete_if_exists

            Context.Output.with_disabled <|
                dry_run_file = "line 1!".write f on_existing_file=Existing_File_Behavior.Append on_problems=Report_Error
                Problems.expect_only_warning Dry_Run_Operation dry_run_file
                dry_run_file.exists.should_be_true

                # Contrary to example above, we write to the returned file, not just `f`.
                s = '\nline 2!'.write dry_run_file on_existing_file=Existing_File_Behavior.Append on_problems=Report_Error
                Problems.expect_only_warning Dry_Run_Operation s
                s.exists.should_be_true

                # We see both updates, because we've thread through the resulting dry run file descriptor:
                s.read_text.should_equal 'line 1!\nline 2!'
                # The returned file is also the same:
                s.should_equal dry_run_file

                f.exists.should_be_false

                Context.Output.with_enabled dry_run_file.delete_if_exists

        group_builder.specify "should allow to overwrite files" <|
            f = transient / "work.txt"
            f.delete_if_exists
            f.exists.should_be_false
            "line 1!".write f on_existing_file=Existing_File_Behavior.Overwrite on_problems=Report_Error . should_succeed . should_equal f
            f.exists.should_be_true
            f.read_text.should_equal "line 1!"
            "line 2!".write f on_existing_file=Existing_File_Behavior.Overwrite on_problems=Report_Error . should_succeed . should_equal f
            f.read_text.should_equal "line 2!"
            f.delete
            f.exists.should_be_false

        group_builder.specify "should not overwrite original file if Context.Output is disabled" <|
            f = transient / "work.txt"
            f.delete_if_exists
            f.exists.should_be_false
            "line 1!".write f on_existing_file=Existing_File_Behavior.Overwrite on_problems=Report_Error . should_succeed . should_equal f
            f.exists.should_be_true

            r = Context.Output.with_disabled <|
                r = "line 2!".write f on_existing_file=Existing_File_Behavior.Overwrite
                r.read_text.should_equal "line 2!"
                r
            r.delete_if_exists

            f.read_text.should_equal "line 1!"
            f.delete_if_exists

        group_builder.specify "should fail if a file already exists, depending on the settings" <|
            f = transient / "work.txt"
            f.delete_if_exists
            f.exists.should_be_false
            "line 1!".write f on_existing_file=Existing_File_Behavior.Error on_problems=Report_Error . should_succeed . should_equal f
            f.exists.should_be_true
            f.read_text.should_equal "line 1!"

            r1 = "line 2!".write f on_existing_file=Existing_File_Behavior.Error
            r1.should_fail_with File_Error
            r1.catch.should_be_a File_Error.Already_Exists
            f.read_text.should_equal "line 1!"

            Context.Output.with_disabled <|
                r2 = "line 2!".write f on_existing_file=Existing_File_Behavior.Error
                r2.should_fail_with File_Error
                r2.catch.should_be_a File_Error.Already_Exists
                f.read_text.should_equal "line 1!"

            f.delete
            f.exists.should_be_false

        group_builder.specify "should create a backup when writing a file" <|
            f = transient / "work.txt"
            f.delete_if_exists
            f.exists.should_be_false
            "line 1!".write f on_problems=Report_Error . should_succeed . should_equal f
            if f.exists.not then
                Test.fail "The file should have been created."
            f.read_text.should_equal "line 1!"

            bak = transient / "work.txt.bak"
            "backup content".write bak on_existing_file=Existing_File_Behavior.Overwrite

            n0 = transient / "work.txt.new"
            n1 = transient / "work.txt.new.1"
            n2 = transient / "work.txt.new.2"
            n3 = transient / "work.txt.new.3"
            n4 = transient / "work.txt.new.4"
            written_news = [n0, n1, n2, n4]
            written_news.each n->
                "new content".write n on_existing_file=Existing_File_Behavior.Overwrite
            n3.delete_if_exists

            "line 2!".write f on_problems=Report_Error . should_succeed . should_equal f
            f.read_text.should_equal "line 2!"
            bak.read_text.should_equal "line 1!"
            if n3.exists then
                Test.fail "The temporary file should have been cleaned up."
            written_news.each n->
                n.read_text . should_equal "new content"
            [f, bak, n0, n1, n2, n4].each .delete

        group_builder.specify "should not create a backup when writing a dry run file with Context.Output disabled" <|
            f = transient / "work.txt"
            f.delete_if_exists
            f.exists.should_be_false
            "line 1!".write f on_problems=Report_Error . should_succeed . should_equal f

            r = Context.Output.with_disabled <|
                s = "New Content!".write f on_existing_file=Existing_File_Behavior.Backup
                s.exists.should_be_true
                s.read_text.should_equal "New Content!"

                "Other Content!".write s on_existing_file=Existing_File_Behavior.Backup
                s.read_text.should_equal "Other Content!"
                t = File.new s.path+".bak"
                t.exists.should_be_false
                s

            bak = transient / "work.txt.bak"
            bak.exists.should_be_false

            f.read_text.should_equal "line 1!"
            f.delete_if_exists
            bak.delete_if_exists
            r.delete_if_exists

        group_builder.specify "should correctly handle failure of the write operation when working with the backup" <|
            f = transient / "work.txt"
            "OLD".write f on_existing_file=Existing_File_Behavior.Overwrite
            bak_file = transient / "work.txt.bak"
            new_file = transient / "work.txt.new"
            [bak_file, new_file].each .delete_if_exists

            result = Panic.catch Illegal_State handler=(caught_panic-> caught_panic.payload.message) <|
                Existing_File_Behavior.Backup.write f output_stream->
                    output_stream.write_bytes "foo".utf_8
                    Panic.throw (Illegal_State.Error "baz")
                    output_stream.write_bytes "bar".utf_8
                Test.fail "Control flow should never get here, because the panic should have been propagated and handled."
            result.should_equal "baz"
            f.read_text . should_equal "OLD"
            if bak_file.exists then
                Test.fail "If the operation failed, we shouldn't have even created the backup."
            if new_file.exists then
                Test.fail "The temporary file should have been cleaned up."
            f.delete

            result2 = Panic.catch Illegal_State handler=(caught_panic-> caught_panic.payload.message) <|
                Existing_File_Behavior.Backup.write f output_stream->
                    output_stream.write_bytes "foo".utf_8
                    Panic.throw (Illegal_State.Error "baz")
                    output_stream.write_bytes "bar".utf_8
                Test.fail "Control flow should never get here, because the panic should have been propagated and handled."
            result2.should_equal "baz"
            if f.exists.not then
                Test.fail "Since we were writing to the original destination, the partially written file should have been preserved even upon failure."
            f.read_text . should_equal "foo"
            if bak_file.exists then
                Test.fail "If the operation failed, we shouldn't have even created the backup."
            if new_file.exists then
                Test.fail "The temporary file should have been cleaned up."
            f.delete

            "OLD".write f on_existing_file=Existing_File_Behavior.Overwrite
            result3 = Existing_File_Behavior.Backup.write f output_stream->
                output_stream.write_bytes "foo".utf_8
                Error.throw (Illegal_State.Error "HMM...")
            result3.should_fail_with Illegal_State
            result3.catch.message . should_equal "HMM..."
            f.read_text . should_equal "OLD"
            if bak_file.exists then
                Test.fail "If the operation failed, we shouldn't have even created the backup."
            if new_file.exists then
                Test.fail "The temporary file should have been cleaned up."
            f.delete

            result4 = Existing_File_Behavior.Backup.write f output_stream->
                output_stream.write_bytes "foo".utf_8
                Error.throw (Illegal_State.Error "HMM...")
            result4.should_fail_with Illegal_State
            result4.catch.message . should_equal "HMM..."
            if f.exists.not then
                Test.fail "Since we were writing to the original destination, the partially written file should have been preserved even upon failure."
            f.read_text . should_equal "foo"
            if bak_file.exists then
                Test.fail "If the operation failed, we shouldn't have even created the backup."
            if new_file.exists then
                Test.fail "The temporary file should have been cleaned up."
            f.delete

        group_builder.specify "should respect file access permissions and fail with an error if denied, in all modes" <|
            f = transient / "permissions3.txt"
            if f.exists then set_writable f True
            f.delete_if_exists

            "foobar".write f on_existing_file=Existing_File_Behavior.Overwrite

            f.is_writable.should_be_true
            set_writable f False
            f.is_writable.should_be_false

            r2 = "FOO".write f on_existing_file=Existing_File_Behavior.Append
            r2.should_fail_with File_Error
            r2.catch.should_be_a File_Error.Access_Denied
            f.read . should_equal "foobar"

            r3 = "FOO".write f on_existing_file=Existing_File_Behavior.Overwrite
            r3.should_fail_with File_Error
            r3.catch.should_be_a File_Error.Access_Denied
            f.read . should_equal "foobar"

            r4 = "FOO".write f on_existing_file=Existing_File_Behavior.Backup
            r4.should_fail_with File_Error
            r4.catch.should_be_a File_Error.Access_Denied
            f.read . should_equal "foobar"

            f.is_writable.should_be_false

            set_writable f True
            f.delete

        group_builder.specify "should fail if the parent directory does not exist" <|
            parent = transient / "nonexistent"
            parent.exists.should_be_false

            f = parent / "foo.txt"
            r1 = "txt".write f
            r1.should_fail_with File_Error
            r1.catch.should_be_a File_Error.Not_Found
            # The write fails because the _parent_ directory did not exist.
            r1.catch.file . should_equal parent

            r2 = [65, 67].write_bytes f
            r2.should_fail_with File_Error
            r2.catch.should_be_a File_Error.Not_Found

        group_builder.specify "Should handle parent-less file paths" <|
            transient = enso_project.data / "transient"
            f1 = transient / "./test1.txt"
            f2_filename = "parentlesstest" + Date_Time.now.to_unix_epoch_milliseconds.to_text + ".txt"
            f2 = File.new f2_filename

            do_cleanup =
                f2.delete_if_exists
                f2_bak = File.new (f2_filename + ".bak")
                f2_bak.delete_if_exists

            Panic.with_finalizer do_cleanup <|
                txt = "MY CONTENT"
                txt.write f1
                txt.write f2

                f1.read_text . should_equal txt
                f2.read_text . should_equal txt

                txt2 = "MY NEW CONTENT"
                txt2.write f1
                txt2.write f2

                f1.read_text . should_equal txt2
                f2.read_text . should_equal txt2

        group_builder.specify "should warn about not-encodable characters according to the problem behaviour" <|
            f = transient / "encoding-errors.txt"

            encoding = Encoding.ascii
            input_content = "Hello! 😊"
            do_write pb =
                f.delete_if_exists
                input_content.write f encoding on_problems=pb
            tester write_result =
                write_result . should_equal f
                write_result.read . should_equal "Hello! ?"
            problems = [Encoding_Error.Error "Encoding issues at 7."]
            Problems.test_problem_handling do_write problems tester

            # And should not overwrite the original contents when working in backup mode.
            f.delete_if_exists
            "Initial Content".write f on_existing_file=Existing_File_Behavior.Overwrite
            big_content = "Hello " * 2000 + input_content
            r2 = big_content.write f encoding on_problems=Problem_Behavior.Report_Error
            r2.should_fail_with Encoding_Error
            f.read . should_equal "Initial Content"
            f.delete

    suite_builder.group "folder operations" group_builder->
        resolve files =
            base = enso_project.data
            files.map str->
                (base / str) . to_text

        group_builder.specify "should check if file is a directory" <|
            sample_file.is_directory.should_be_false
            enso_project.root.is_directory.should_be_true

        group_builder.specify "should list files in a directory" <|
            immediate = enso_project.data.list . map .to_text
            immediate.sort.should_equal (resolve ["books.json", "helloworld.txt", "sample-json.weird-extension", "sample-malformed.json", "sample.json", "sample.png", "sample.txt", "sample.xxx", "transient", "tree", "windows.log", "windows.txt", 'xml'])

            filtered1 = enso_project.data.list name_filter="s[a-cw]mple.{t?t,md}" . map .to_text
            filtered1.should_equal (resolve ["sample.txt"])

            filtered2 = Data.list_directory enso_project.data name_filter="*re*" . map .to_text
            filtered2.should_equal (resolve ["tree"])

        group_builder.specify "should list files in a directory recursively" <|
            root = enso_project.data / "tree"
            resolve files = files.map str-> (root / str) . to_text

            all = root.list recursive=True . map .to_text
            all.sort.should_equal (resolve ["", "sample.csv", "sample.txt", "subdirectory", "subdirectory/a.txt", "subdirectory/nested", "subdirectory/nested/b.txt"])

            filtered1 = root.list name_filter="**.txt" recursive=True . map .to_text
            filtered1.sort.should_equal (resolve ["sample.txt", "subdirectory/a.txt", "subdirectory/nested/b.txt"])

            filtered1b = root.list name_filter="*.txt" recursive=True . map .to_text
            filtered1b.sort.should_equal (resolve ["sample.txt", "subdirectory/a.txt", "subdirectory/nested/b.txt"])

            filtered2 = root.list name_filter="*/*/*" recursive=True . map .to_text
            filtered2.should_equal (resolve ["subdirectory/nested/b.txt"])

            filtered3 = root.list name_filter="a.txt" recursive=True . map .to_text
            filtered3.sort.should_equal (resolve ["subdirectory/a.txt"])

            filtered4 = root.list name_filter="nested/*.txt" recursive=True . map .to_text
            filtered4.sort.should_equal (resolve ["subdirectory/nested/b.txt"])

main =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter

