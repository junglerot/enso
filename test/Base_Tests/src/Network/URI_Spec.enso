from Standard.Base import all
import Standard.Base.Data.Enso_Cloud.Enso_Secret.Enso_Secret_Error
import Standard.Base.Errors.Common.Syntax_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Network.HTTP.Request.Request

from Standard.Test_New import all

import project.Network.Enso_Cloud.Cloud_Tests_Setup.Cloud_Tests_Setup
from project.Network.Enso_Cloud.Cloud_Tests_Setup import with_retries

add_specs suite_builder =
    ## To run this test locally:
       $ sbt 'http-test-helper/run localhost 8080'
       $ export ENSO_HTTP_TEST_HTTPBIN_URL=http://localhost:8080/
    base_url = case Environment.get "ENSO_HTTP_TEST_HTTPBIN_URL" of
        Nothing -> Nothing
        str -> if str.ends_with "/" then str else str + "/"
    pending_has_url = if base_url != Nothing then Nothing else
        "The HTTP tests only run when the `ENSO_HTTP_TEST_HTTPBIN_URL` environment variable is set to URL of the httpbin server"

    suite_builder.group "URI" group_builder->
        group_builder.specify "should parse URI from string" <|
            addr = URI.parse "http://user:pass@example.com/foo/bar?key=val"
            addr.scheme.should_equal "http"
            addr.user_info.should_equal "user:pass"
            addr.host.should_equal "example.com"
            addr.authority.should_equal "user:pass@example.com"
            addr.port.should_equal Nothing
            addr.path.should_equal "/foo/bar"
            addr.query.should_equal "key=val"
            addr.fragment.should_equal Nothing

        group_builder.specify "should allow to convert a text to URI" <|
            addr2 = URI.from "https://example.org:1234/?a=b&c=d+e#line=10,20"
            addr2.should_be_a URI
            addr2.scheme.should_equal "https"
            addr2.user_info.should_equal Nothing
            addr2.host.should_equal "example.org"
            addr2.authority.should_equal "example.org:1234"
            addr2.port.should_equal 1234
            addr2.path.should_equal "/"
            addr2.query.should_equal "a=b&c=d+e"
            addr2.fragment.should_equal "line=10,20"

            addr3 = "ftp://example.com:21/" . to URI
            addr3.should_be_a URI
            addr3.scheme.should_equal "ftp"
            addr3.user_info.should_equal Nothing
            addr3.host.should_equal "example.com"
            addr3.authority.should_equal "example.com:21"
            addr3.port.should_equal 21
            addr3.path.should_equal "/"
            addr3.query.should_equal Nothing
            addr3.fragment.should_equal Nothing

        group_builder.specify "should escape URI" <|
            addr = URI.parse "https://%D0%9B%D0%B8%D0%BD%D1%83%D1%81:pass@ru.wikipedia.org/wiki/%D0%AF%D0%B4%D1%80%D0%BE_Linux?%D0%9A%D0%BE%D0%B4"
            addr.user_info.should_equal "Линус:pass"
            addr.authority.should_equal "Линус:pass@ru.wikipedia.org"
            addr.path.should_equal "/wiki/Ядро_Linux"
            addr.query.should_equal "Код"
            addr.fragment.should_equal Nothing
            addr.raw_user_info.should_equal "%D0%9B%D0%B8%D0%BD%D1%83%D1%81:pass"
            addr.raw_authority.should_equal "%D0%9B%D0%B8%D0%BD%D1%83%D1%81:pass@ru.wikipedia.org"
            addr.raw_path.should_equal "/wiki/%D0%AF%D0%B4%D1%80%D0%BE_Linux"
            addr.raw_query.should_equal "%D0%9A%D0%BE%D0%B4"
            addr.raw_fragment.should_equal Nothing

        group_builder.specify "should return Syntax_Error when parsing invalid URI" <|
            r = URI.parse "a b c"
            r.should_fail_with Syntax_Error
            r.catch.to_display_text . should_contain "a b c"
            URI.from "a b c" . should_fail_with Syntax_Error

        group_builder.specify "should allow a URI without scheme or authority" <|
            uri = URI.parse "//a/b/c"
            uri.scheme.should_equal Nothing
            uri.authority.should_equal "a"
            uri.path.should_equal "/b/c"
            uri.to_text . should_equal "//a/b/c"

            uri2 = URI.parse "///a/b/c"
            uri2.scheme.should_equal Nothing
            uri2.authority.should_equal Nothing
            uri2.path.should_equal "/a/b/c"

        group_builder.specify "should compare two URIs for equality" <|
            (URI.parse "http://google.com").should_equal (URI.parse "http://google.com")
            (URI.parse "http://google.com").should_not_equal (URI.parse "http://amazon.com")

        group_builder.specify "allows adding query arguments" <|
            base_uri = URI.parse "http://a_user@example.com"
            uri = base_uri . add_query_argument "foo" "bar"

            uri.should_be_a URI
            uri.scheme.should_equal "http"
            uri.user_info.should_equal "a_user"
            uri.host.should_equal "example.com"
            uri.authority.should_equal "a_user@example.com"
            uri.port.should_equal Nothing
            uri.path.should_equal ""
            uri.query.should_equal "foo=bar"
            uri.fragment.should_equal Nothing
            uri.to_text . should_equal "http://a_user@example.com/?foo=bar"

        group_builder.specify "should be able to add multiple query arguments" <|
            base_uri = URI.parse "https://example.com/path?a=b"
            uri = base_uri . add_query_argument "c" "d" . add_query_argument "e" "f"

            uri.should_be_a URI
            uri.query.should_equal "a=b&c=d&e=f"
            uri.scheme.should_equal "https"
            uri.user_info.should_equal Nothing
            uri.host.should_equal "example.com"
            uri.authority.should_equal "example.com"
            uri.port.should_equal Nothing
            uri.path.should_equal "/path"
            uri.fragment.should_equal Nothing

        # We rely on the http-test-helper for these tests, to ensure that the encoding is indeed correctly interpreted by a real-life server:
        group_builder.specify "should correctly handle various characters within the key and value of arguments" pending=pending_has_url <|
            base_uri = URI.parse base_url+"get"

            uri1 = base_uri . add_query_argument "a" "b"
            uri1.should_be_a URI
            r1 = uri1.fetch
            decode_query_params r1 . should_equal [["a", "b"]]

            uri2 = base_uri
                . add_query_argument "q1" "b c"
                . add_query_argument "q2" "e+f"
                . add_query_argument "q3" "e%20f"
            r2 = uri2.fetch
            # All values should be encoded and decoded correctly so that they retain the original symbols:
            decode_query_params r2 . should_equal [["q1", "b c"], ["q2", "e+f"], ["q3", "e%20f"]]

            s1 = '"f"\'\' ; 🚀🚧a'
            s2 = "[a=b]:[b=c][d=e]++++!?&->#...__(){}@///\\\|%%%100*^, ]]] ==> <br>a"
            uri3 = base_uri
                . add_query_argument "q4" "śnieżnobiały"
                . add_query_argument "q5" s1
                . add_query_argument "q6" s2
                . add_query_argument "q7" ""
                . add_query_argument "q8" " "
                . add_query_argument "q9" "%%%"
                . add_query_argument "q10" '\n\n\t'
            r3 = uri3.fetch
            decode_query_params r3 . should_equal [["q4", "śnieżnobiały"], ["q5", s1], ["q6", s2], ["q7", ""], ["q8", " "], ["q9", "%%%"], ["q10", '\n\n\t']]

            uri4 = base_uri
                . add_query_argument "p+r" "b c"
                . add_query_argument "p r" "b c"
                . add_query_argument "🚀"  "🚧"
                . add_query_argument "śnieżnobiałą" "łąkę"
                . add_query_argument s2 "zzz"
            r4 = uri4.fetch
            decode_query_params r4 . should_equal [["p+r", "b c"], ["p r", "b c"], ["🚀", "🚧"], ["śnieżnobiałą", "łąkę"], [s2, "zzz"]]

        group_builder.specify "may allow duplicate keys in query parameters" pending=pending_has_url <|
            uri = URI.parse base_url+"get"
                . add_query_argument "a" "b"
                . add_query_argument "a" "c"
                . add_query_argument "a" "d"
            decode_query_params uri.fetch . should_equal [["a", "b"], ["a", "c"], ["a", "d"]]

        group_builder.specify "should allow to get properties of a URI with added query arguments and user info" <|
            base_uri = URI.parse "https://example.com/path?a=b#FRAG"
            uri1 = base_uri . add_query_argument "c" "d" . add_query_argument "e" "f"

            uri1.should_be_a URI
            uri1.scheme.should_equal "https"
            uri1.user_info.should_equal Nothing
            uri1.host.should_equal "example.com"
            uri1.path.should_equal "/path"
            uri1.query.should_equal "a=b&c=d&e=f"
            uri1.fragment.should_equal "FRAG"
            uri1.should_equal (URI.parse "https://example.com/path?a=b&c=d&e=f#FRAG")

        group_builder.specify "should allow the / syntax for extending the path on an URI" <|
            uri0 = URI.parse "https://example.com"
            uri1 = uri0 / "path"
            uri1.path . should_equal "/path"
            uri1.to_text . should_equal "https://example.com/path"

            uri2 = uri0 / "path/"
            uri2.path . should_equal "/path/"
            uri2.to_text . should_equal "https://example.com/path/"

            uri3 = uri1 / "2"
            uri3.path . should_equal "/path/2"
            uri3.to_text . should_equal "https://example.com/path/2"

            uri4 = uri2 / "2"
            uri4.path . should_equal "/path/2"
            uri4.to_text . should_equal "https://example.com/path/2"

        group_builder.specify "should work fine with / characters and empty segments" <|
            uri0 = URI.parse "http://example.com/get/"

            uri1 = uri0 / "///0" / "a///b" / "c///"
            uri1.path . should_equal "/get////0/a///b/c///"

            uri2 = uri0 / "a" / ""
            uri2.path . should_equal "/get/a//"
            uri3 = uri2 / "b"
            uri3.path . should_equal "/get/a//b"

            uri4 = uri0 / "a" / "/"
            uri4.path . should_equal "/get/a//"
            uri5 = uri4 / "b"
            uri5.path . should_equal "/get/a//b"

        group_builder.specify "should allow various characters in the path" pending=pending_has_url <|
            uri0 = URI.parse base_url+"get"
            uri1 = uri0 / "a b c" / "d+e" / "f%20g" / "ś🚧:@"

            # Weirdly, the spaces are presented as + even in the not-raw path.
            # But inspecting the raw path shows that they are indeed distinguished.
            uri1.path . should_equal "/get/a b c/d+e/f%20g/ś🚧:@"
            uri1.raw_path . should_equal "/get/a%20b%20c/d%2Be/f%2520g/%C5%9B%F0%9F%9A%A7%3A%40"
            uri1.to_text . should_equal base_url+"get/a%20b%20c/d%2Be/f%2520g/%C5%9B%F0%9F%9A%A7%3A%40"

            r = uri1.fetch
            r.at "path" . should_equal "/get/a b c/d+e/f%20g/ś🚧:@"

            ext = "a [!who puts that//// into URI??!!] ; --- ### a:=b"
            uri3 = uri0 / ext
            r2 = uri3.fetch
            r2.at "path" . should_equal "/get/"+ext

        group_builder.specify "should allow slashes within path" <|
            uri0 = URI.parse "https://example.com/"
            uri1 = uri0 / "a" / "b" / "c/d/e" / "f////g"
            uri1.path . should_equal "/a/b/c/d/e/f////g"
            uri1.to_text . should_equal "https://example.com/a/b/c/d/e/f////g"

        group_builder.specify "will warn about ? or # being encoded in path" <|
            uri0 = URI.parse "https://example.com/a/b/c"

            uri1 = uri0 / "x?y"
            uri1.path . should_equal "/a/b/c/x?y"
            uri1.raw_path . should_equal "/a/b/c/x%3Fy"
            uri1.to_text . should_equal "https://example.com/a/b/c/x%3Fy"
            w1 = Problems.expect_only_warning Illegal_Argument uri1
            w1.message . should_contain "The requested path contained a '?' symbol which has been URL-encoded. If you want to modify the query, use the `add_query_argument` method instead."

            uri2 = uri0 / "x#y"
            uri2.path . should_equal "/a/b/c/x#y"
            uri2.raw_path . should_equal "/a/b/c/x%23y"
            uri2.to_text . should_equal "https://example.com/a/b/c/x%23y"
            w2 = Problems.expect_only_warning Illegal_Argument uri2
            w2.message . should_contain "The requested path contained a '#' symbol which has been URL-encoded. The `/` is not meant to be used to set a fragment for the URI."

            uri3 = URI.parse "https://example.com/a?b=c#d"
            uri4 = uri3 / "x?y" / "z#w"
            uri4.path . should_equal "/a/x?y/z#w"
            uri4.raw_path . should_equal "/a/x%3Fy/z%23w"
            uri4.query . should_equal "b=c"
            uri4.fragment . should_equal "d"
            uri4.to_text . should_equal "https://example.com/a/x%3Fy/z%23w?b=c#d"

        group_builder.specify "should keep existing query arguments intact when extending the path" <|
            uri0 = URI.parse "https://example.com/path?a=b&c=d"
            uri1 = uri0 / "x" / "y"
            uri2 = uri1 . add_query_argument "e" "f"
            uri3 = uri2 / "z"

            uri3.path . should_equal "/path/x/y/z"
            uri3.query . should_equal "a=b&c=d&e=f"
            uri3.to_text . should_equal "https://example.com/path/x/y/z?a=b&c=d&e=f"

        group_builder.specify "should allow to reset query arguments" <|
            uri0 = URI.parse "https://example.com/path?a=b&c=d#FRAG"
            uri1 = uri0 . add_query_argument "e" "f"

            uri2 = uri1 . reset_query_arguments
            uri2.path . should_equal "/path"
            uri2.query . should_equal Nothing
            uri2.fragment . should_equal "FRAG"
            uri2.to_text . should_equal "https://example.com/path#FRAG"

        cloud_setup = Cloud_Tests_Setup.prepare

        group_builder.specify "will not convert back to URI if secrets are present in the query arguments" pending=cloud_setup.pending <|
            cloud_setup.with_prepared_environment <|
                secret1 = Enso_Secret.create "my_test_secret-uri-1" "My Value"
                secret1.should_succeed
                Panic.with_finalizer secret1.delete <|
                    uri = URI.from "https://example.com/"
                        . add_query_argument "arg1" secret1
                        . add_query_argument "arg2" "plain value"

                    uri.to_text . should_equal ("https://example.com/?arg1=__SECRET__&arg2=plain+value")
                    uri.to_java_uri . should_fail_with Enso_Secret_Error
                    uri.raw_query . should_fail_with Enso_Secret_Error

        group_builder.specify "should allow to use secrets in query arguments, containing all kinds of various characters" pending=cloud_setup.httpbin_pending <|
            cloud_setup.with_prepared_environment <|
                secret1 = Enso_Secret.create "my_test_secret-uri-4" "My Very Secret Value"
                secret1.should_succeed
                Panic.with_finalizer secret1.delete <|
                    s2 = "Another Secret Value containing Emoji 😊❤️ and ąęś AND [a=b]:[b=c][d=e]++++!?&->#...__(){}@///\\\|%%%100*^, ]]] ==> <br>a"
                    secret2 = Enso_Secret.create "my_test_secret-uri-5" s2
                    secret2.should_succeed
                    Panic.with_finalizer secret2.delete <|
                        uri = (cloud_setup.httpbin_secure_uri / "get")
                            . add_query_argument "arg1" secret1
                            . add_query_argument "arg2" "plain value"
                            . add_query_argument "arg3" secret2

                        uri.to_text . should_equal (cloud_setup.httpbin_secure_uri.to_text + "get?arg1=__SECRET__&arg2=plain+value&arg3=__SECRET__")
                        uri.raw_query . should_fail_with Enso_Secret_Error

                        with_retries <|
                            response = cloud_setup.httpbin_secure_client.request (Request.get uri)
                            decode_query_params response.decode_as_json . should_equal [["arg1", "My Very Secret Value"], ["arg2", "plain value"], ["arg3", s2]]

        group_builder.specify "does not allow secrets in non-https requests" pending=cloud_setup.pending <|
            cloud_setup.with_prepared_environment <|
                secret1 = Enso_Secret.create "my_test_secret-uri-8" "My Value"
                secret1.should_succeed
                Panic.with_finalizer secret1.delete <|
                    uri1 = URI.from "http://example.com/"
                        . add_query_argument "arg1" secret1
                        . add_query_argument "arg2" "plain value"

                    uri1.to_text . should_equal ("http://example.com/?arg1=__SECRET__&arg2=plain+value")
                    r1 = uri1.fetch
                    r1.should_fail_with Illegal_Argument
                    r1.catch.to_display_text . should_contain "Secrets are not allowed in HTTP connections, use HTTPS instead."

main =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter


decode_query_params : Json -> Vector (Pair Text Text)
decode_query_params json_response =
    params = json_response.at "queryParameters"
    params.map pair->
        [pair.at "name", pair.at "value"]
