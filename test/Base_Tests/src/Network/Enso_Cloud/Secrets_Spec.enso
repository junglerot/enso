from Standard.Base import all
import Standard.Base.Data.Base_64.Base_64
import Standard.Base.Data.Enso_Cloud.Enso_Secret.Derived_Secret_Value
import Standard.Base.Data.Enso_Cloud.Enso_Secret.Enso_Secret_Error
import Standard.Base.Errors.Common.Forbidden_Operation
import Standard.Base.Errors.Common.Not_Found
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State
import Standard.Base.Network.HTTP.Request.Request
import Standard.Base.Runtime.Context
from Standard.Base.Data.Enso_Cloud.Enso_Secret import as_hideable_value

from Standard.Test_New import all
from Standard.Test.Execution_Context_Helpers import run_with_and_without_output



import project.Network.Enso_Cloud.Cloud_Tests_Setup.Cloud_Tests_Setup
from project.Network.Enso_Cloud.Cloud_Tests_Setup import with_retries

polyglot java import org.enso.base.enso_cloud.EnsoSecretAccessDenied
polyglot java import org.enso.base.enso_cloud.ExternalLibrarySecretHelper

add_specs suite_builder setup:Cloud_Tests_Setup = setup.with_prepared_environment <|
    suite_builder.group "Enso Cloud Secrets" pending=setup.pending group_builder->
        group_builder.specify "should be able to list existing secrets" <|
            # This should work regardless of Output context setting:
            run_with_and_without_output <|
                # We cannot test much more because we do not know what secrets are already there, further tests will check more by creating and deleting secrets
                Enso_Secret.list . should_be_a Vector

        group_builder.specify "should allow to create, list and delete secrets" <|
            my_secret = Enso_Secret.create "my_test_secret" "my_secret_value"
            my_secret.should_succeed
            my_secret.name . should_equal "my_test_secret"
            my_secret.id.is_empty . should_be_false

            with_retries <|
                Enso_Secret.list . should_contain my_secret

            my_secret.delete . should_succeed

            with_retries <|
                Enso_Secret.list . should_not_contain my_secret

        group_builder.specify "should allow to get a secret by name" <|
            created_secret = Enso_Secret.create "my_test_secret-2" "my_secret_value"
            created_secret.should_succeed
            Panic.with_finalizer created_secret.delete <|
                with_retries <|
                    fetched_secret = Enso_Secret.get "my_test_secret-2"
                    fetched_secret . should_equal created_secret

        group_builder.specify "should fail to create a secret if it already exists" <|
            created_secret = Enso_Secret.create "my_test_secret-3" "my_secret_value"
            created_secret.should_succeed
            wait_until_secret_is_propagated created_secret
            Panic.with_finalizer created_secret.delete <|
                with_retries <|
                    r1 = Enso_Secret.create "my_test_secret-3" "my_secret_value"

                    ## If the secret was created due to race condition - we clean it up
                       TODO: this should be addressed at Cloud level, disallowing to create a secret with the same name
                    if r1.is_error.not then r1.delete

                    r1.should_fail_with Illegal_Argument
                    r1.catch.to_display_text . should_contain "already exists"

        group_builder.specify "should allow to use secrets in HTTPS request headers" pending=setup.httpbin_pending <|
            secret1 = Enso_Secret.create "my_test_secret-6" "Yet another Mystery"
            secret1.should_succeed

            Panic.with_finalizer secret1.delete <| with_retries <|
                https = setup.httpbin_secure_client
                response = https.request (Request.get (setup.httpbin_secure_uri / "get") headers=[Header.new "X-My-Secret" secret1])
                response.decode_as_json.at "headers" . at "X-My-Secret" . should_equal "Yet another Mystery"

        group_builder.specify "should allow to derive values from secrets in Header.authorization_bearer" pending=setup.httpbin_pending <|
            secret_token = Enso_Secret.create "my_test_secret-7" "MySecretToken"
            secret_token.should_succeed

            Panic.with_finalizer secret_token.delete <| with_retries <|
                https = setup.httpbin_secure_client
                response = https.request (Request.get (setup.httpbin_secure_uri / "get") headers=[Header.authorization_bearer secret_token])
                response_json = response.decode_as_json
                response_json.at "headers" . at "Authorization" . should_equal "Bearer MySecretToken"

        group_builder.specify "should allow to derive values from secrets in Header.authorization_basic" pending=setup.httpbin_pending <|
            secret_username = Enso_Secret.create "my_test_secret-8" "MyUsername"
            secret_username.should_succeed
            Panic.with_finalizer secret_username.delete <|
                secret_password = Enso_Secret.create "my_test_secret-9" "MyP@ssword"
                secret_password.should_succeed
                Panic.with_finalizer secret_password.delete <| with_retries <|
                    https = setup.httpbin_secure_client
                    response = https.request (Request.get (setup.httpbin_secure_uri / "get") headers=[Header.authorization_basic secret_username secret_password])

                    expected = "Basic " + (Base_64.encode_text "MyUsername:MyP@ssword")
                    response_json = response.decode_as_json
                    response_json.at "headers" . at "Authorization" . should_equal expected

        group_builder.specify "should allow to derive values from secrets" <|
            secret1 = Enso_Secret.create "my_test_secret-10" "Something"
            secret1.should_succeed
            Panic.with_finalizer secret1.delete <| with_retries <|
                x = Derived_Secret_Value.from "X"
                y = Derived_Secret_Value.from "Y"
                v1 = x + y
                v2 = x + (Derived_Secret_Value.from secret1)

                v1.simplify . should_equal "XY"
                # Cannot simplify if it contains secrets
                v2.simplify . should_equal v2
                v2.to_plain_text . should_fail_with Enso_Secret_Error

                v1.to_text . should_equal "XY"
                v2.to_text . should_equal "X__SECRET__"

                b1 = Derived_Secret_Value.Base_64_Encode v1
                b2 = Derived_Secret_Value.Base_64_Encode v2

                b1.simplify . should_equal "WFk="
                b2.simplify . should_equal b2

                b1.to_text . should_equal "WFk="
                b2.to_text . should_equal "base64(X__SECRET__)"

        group_builder.specify "does not allow secrets in HTTP headers" pending=setup.httpbin_pending <|
            secret1 = Enso_Secret.create "my_test_secret-11" "Something"
            secret1.should_succeed
            Panic.with_finalizer secret1.delete <| with_retries <|
                uri = setup.httpbin_uri / "get"
                r1 = uri.fetch headers=[Header.new "X-My-Secret" secret1]
                r1.should_fail_with Illegal_Argument
                r1.catch.to_display_text . should_contain "Secrets are not allowed in HTTP connections, use HTTPS instead."

        group_builder.specify "API exposing secrets to external libraries should not be accessible from unauthorized code" <|
            secret1 = Enso_Secret.create "my_test_secret-12" "Something"
            secret1.should_succeed
            Panic.with_finalizer secret1.delete <| with_retries <|
                java_repr = as_hideable_value secret1
                Test.expect_panic EnsoSecretAccessDenied <|
                    ExternalLibrarySecretHelper.resolveValue java_repr

        group_builder.specify "should allow to create and delete secrets in a sub-directory" pending=setup.real_cloud_pending <|
            subdirectory = Enso_File.root.create_directory "my_test_subdirectory-1"
            subdirectory.should_succeed
            Panic.with_finalizer subdirectory.delete <|
                nested_secret = Enso_Secret.create "my-nested-secret-1" "NESTED_secret_value" parent=subdirectory
                nested_secret.should_succeed

                delete_on_fail caught_panic =
                    nested_secret.delete
                    Panic.throw caught_panic
                Panic.catch Any handler=delete_on_fail <|
                    with_retries <|
                        Enso_Secret.list parent=subdirectory . should_contain nested_secret
                        Enso_Secret.exists "my-nested-secret-1" parent=subdirectory . should_be_true
                        Enso_Secret.get "my-nested-secret-1" parent=subdirectory . should_equal nested_secret

                    # The secret from a subdirectory should not appear in the root list:
                    Enso_Secret.list . should_not_contain nested_secret
                    Enso_Secret.exists "my-nested-secret-1" . should_be_false
                    Enso_Secret.get "my-nested-secret-1" . should_fail_with Not_Found

                nested_secret.delete . should_succeed

                # Secret should disappear from the list after deletion:
                with_retries <|
                    Enso_Secret.list parent=subdirectory . should_not_contain nested_secret
                    Enso_Secret.exists "my-nested-secret-1" parent=subdirectory . should_be_false
                    Enso_Secret.get "my-nested-secret-1" parent=subdirectory . should_fail_with Not_Found

        group_builder.specify "should allow to use secrets from a sub-directory" pending=(setup.real_cloud_pending.if_nothing setup.httpbin_pending) <|
            subdirectory = Enso_File.root.create_directory "my_test_subdirectory-2"
            subdirectory.should_succeed
            Panic.with_finalizer subdirectory.delete <|
                nested_secret = Enso_Secret.create "my-nested-secret-2" "NESTED_secret_value" parent=subdirectory
                nested_secret.should_succeed
                Panic.with_finalizer nested_secret.delete <|
                    with_retries <|
                        https = setup.httpbin_secure_client
                        response = https.request (Request.get (setup.httpbin_secure_uri / "get") headers=[Header.new "X-My-Nested-Secret" nested_secret])
                        response.decode_as_json.at "headers" . at "X-My-Nested-Secret" . should_equal "NESTED_secret_value"

        group_builder.specify "should allow to update secrets within a sub-directory" pending=(setup.real_cloud_pending.if_nothing setup.httpbin_pending) <|
            subdirectory = Enso_File.root.create_directory "my_test_subdirectory-3"
            subdirectory.should_succeed
            Panic.with_finalizer subdirectory.delete <|
                nested_secret = Enso_Secret.create "my-nested-secret-3" "Value-A" parent=subdirectory
                nested_secret.should_succeed
                Panic.with_finalizer nested_secret.delete <|
                    with_retries <|
                        https = setup.httpbin_secure_client
                        response = https.request (Request.get (setup.httpbin_secure_uri / "get") headers=[Header.new "X-My-Nested-Secret" nested_secret])
                        response.decode_as_json.at "headers" . at "X-My-Nested-Secret" . should_equal "Value-A"

                    nested_secret.update_value "Value-New-B" . should_succeed

                    # Not exactly sure if retries are needed here, but for test stability preferred to keep them.
                    with_retries <|
                        # Flushing caches to avoid the old value getting stuck after the first retry fails due to lack of propagation yet.
                        Enso_User.flush_caches
                        https = setup.httpbin_secure_client
                        response = https.request (Request.get (setup.httpbin_secure_uri / "get") headers=[Header.new "X-My-Nested-Secret" nested_secret])
                        response.decode_as_json.at "headers" . at "X-My-Nested-Secret" . should_equal "Value-New-B"

        group_builder.specify "should NOT be able to create/update/delete secrets with disabled Output Context" <|
            Context.Output.with_disabled <|
                Enso_Secret.create "foo" "bar" . should_fail_with Forbidden_Operation

            secret1 = Enso_Secret.create "my_test_secret-13" "Something"
            secret1.should_succeed
            Panic.with_finalizer secret1.delete <|
                Context.Output.with_disabled <|
                    secret1.update_value "Something else" . should_fail_with Forbidden_Operation
                    secret1.delete . should_fail_with Forbidden_Operation
                    Enso_Secret.create ("foo"+Random.uuid) "baz" . should_fail_with Forbidden_Operation

                    # Get should still work
                    with_retries <| Enso_Secret.get "my_test_secret-13" . should_equal secret1


main =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter


wait_until_secret_is_propagated secret =
    with_retries <| Enso_Secret.list . should_contain secret
