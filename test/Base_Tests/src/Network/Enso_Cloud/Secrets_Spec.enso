from Standard.Base import all
import Standard.Base.Data.Base_64.Base_64
import Standard.Base.Data.Enso_Cloud.Enso_Secret.Derived_Secret_Value
import Standard.Base.Data.Enso_Cloud.Enso_Secret.Enso_Secret_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State
import Standard.Base.Network.HTTP.Request.Request

from Standard.Test import Test, Test_Suite
import Standard.Test.Test_Environment
import Standard.Test.Extensions

import project.Network.Enso_Cloud.Cloud_Tests_Setup.Cloud_Tests_Setup
from project.Network.Enso_Cloud.Cloud_Tests_Setup import with_retries

spec setup:Cloud_Tests_Setup = setup.with_prepared_environment <|
    Test.group "Enso Cloud Secrets" pending=setup.pending <|
        Test.specify "should be able to list existing secrets" <|
            # We cannot test much more because we do not know what secrets are already there, further tests will check more by creating and deleting secrets
            Enso_Secret.list . should_be_a Vector

        Test.specify "should allow to create, list and delete secrets" <|
            my_secret = Enso_Secret.create "my_test_secret" "my_secret_value"
            my_secret.should_succeed
            my_secret.name . should_equal "my_test_secret"
            my_secret.id.is_empty . should_be_false

            with_retries <|
                Enso_Secret.list . should_contain my_secret

            my_secret.delete . should_succeed

            with_retries <|
                Enso_Secret.list . should_not_contain my_secret

        Test.specify "should allow to get a secret by name" <|
            created_secret = Enso_Secret.create "my_test_secret-2" "my_secret_value"
            created_secret.should_succeed
            Panic.with_finalizer created_secret.delete <|
                with_retries <|
                    fetched_secret = Enso_Secret.get "my_test_secret-2"
                    fetched_secret . should_equal created_secret

        Test.specify "should fail to create a secret if it already exists" <|
            created_secret = Enso_Secret.create "my_test_secret-3" "my_secret_value"
            created_secret.should_succeed
            wait_until_secret_is_propagated created_secret
            Panic.with_finalizer created_secret.delete <|
                r1 = Enso_Secret.create "my_test_secret-3" "my_secret_value"
                r1.should_fail_with Illegal_Argument
                r1.catch.to_display_text . should_contain "already exists"

        Test.specify "should allow to use secrets in HTTPS request headers" pending=setup.httpbin_pending <|
            secret1 = Enso_Secret.create "my_test_secret-6" "Yet another Mystery"
            secret1.should_succeed

            Panic.with_finalizer secret1.delete <| with_retries <|
                https = setup.httpbin_secure_client
                response = https.request (Request.get (setup.httpbin_secure_uri / "get") headers=[Header.new "X-My-Secret" secret1])
                response.decode_as_json.at "headers" . at "X-My-Secret" . should_equal "Yet another Mystery"

        Test.specify "should allow to derive values from secrets in Header.authorization_bearer" pending=setup.httpbin_pending <|
            secret_token = Enso_Secret.create "my_test_secret-7" "MySecretToken"
            secret_token.should_succeed

            Panic.with_finalizer secret_token.delete <| with_retries <|
                https = setup.httpbin_secure_client
                response = https.request (Request.get (setup.httpbin_secure_uri / "get") headers=[Header.authorization_bearer secret_token])
                response_json = response.decode_as_json
                response_json.at "headers" . at "Authorization" . should_equal "Bearer MySecretToken"

        Test.specify "should allow to derive values from secrets in Header.authorization_basic" pending=setup.httpbin_pending <|
            secret_username = Enso_Secret.create "my_test_secret-8" "MyUsername"
            secret_username.should_succeed
            Panic.with_finalizer secret_username.delete <|
                secret_password = Enso_Secret.create "my_test_secret-9" "MyP@ssword"
                secret_password.should_succeed
                Panic.with_finalizer secret_password.delete <| with_retries <|
                    https = setup.httpbin_secure_client
                    response = https.request (Request.get (setup.httpbin_secure_uri / "get") headers=[Header.authorization_basic secret_username secret_password])

                    expected = "Basic " + (Base_64.encode_text "MyUsername:MyP@ssword")
                    response_json = response.decode_as_json
                    response_json.at "headers" . at "Authorization" . should_equal expected

        Test.specify "should allow to derive values from secrets" <|
            secret1 = Enso_Secret.create "my_test_secret-9" "Something"
            secret1.should_succeed
            Panic.with_finalizer secret1.delete <| with_retries <|
                x = Derived_Secret_Value.from "X"
                y = Derived_Secret_Value.from "Y"
                v1 = x + y
                v2 = x + (Derived_Secret_Value.from secret1)

                v1.simplify . should_equal "XY"
                # Cannot simplify if it contains secrets
                v2.simplify . should_equal v2
                v2.to_plain_text . should_fail_with Enso_Secret_Error

                v1.to_text . should_equal "XY"
                v2.to_text . should_equal "X__SECRET__"

                b1 = Derived_Secret_Value.Base_64_Encode v1
                b2 = Derived_Secret_Value.Base_64_Encode v2

                b1.simplify . should_equal "WFk="
                b2.simplify . should_equal b2

                b1.to_text . should_equal "WFk="
                b2.to_text . should_equal "base64(X__SECRET__)"

        Test.specify "does not allow secrets in HTTP headers" pending=setup.httpbin_pending <|
            secret1 = Enso_Secret.create "my_test_secret-10" "Something"
            secret1.should_succeed
            Panic.with_finalizer secret1.delete <| with_retries <|
                uri = setup.httpbin_uri / "get"
                r1 = uri.fetch headers=[Header.new "X-My-Secret" secret1]
                r1.should_fail_with Illegal_Argument
                r1.catch.to_display_text . should_contain "Secrets are not allowed in HTTP connections, use HTTPS instead."

main = Test_Suite.run_main (spec Cloud_Tests_Setup.prepare)

wait_until_secret_is_propagated secret =
    with_retries <| Enso_Secret.list . should_contain secret
