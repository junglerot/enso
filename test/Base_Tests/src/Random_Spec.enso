from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Random.Random_Generator

from Standard.Test_New import all


add_specs suite_builder = suite_builder.group "Random" group_builder->
    group_builder.specify "should allow generating random integers" <|
        Random.set_seed 12345
        Random.integer 0 99 . should_equal 51
        Random.integer 0 9999 . should_equal 9080

        random_range = 0.up_to 1000 . map (_-> Random.integer 0 99) . compute_bulk [Statistic.Minimum, Statistic.Maximum]
        (random_range.at 0 >= 0) . should_equal True
        (random_range.at 1 <= 99) . should_equal True

    group_builder.specify "should allow generating random floats" <|
        Random.set_seed 12345
        Random.float . should_equal 0.3618031071604718 epsilon=0.00000001
        Random.float . should_equal 0.932993485288541 epsilon=0.00000001

        random_range = 0.up_to 1000 . map _->Random.float . compute_bulk [Statistic.Minimum, Statistic.Maximum]
        (random_range.at 0 >= 0) . should_equal True
        (random_range.at 1 <= 1) . should_equal True

    group_builder.specify "should allow generating random booleans" <|
        Random.set_seed 0
        0.up_to 3 . map _->Random.boolean . should_equal [True, True, False]

    group_builder.specify "should allow generating random gaussian floats" <|
        Random.set_seed 12345
        Random.gaussian . should_equal -0.187808989658912 epsilon=0.00000001
        Random.gaussian . should_equal 0.5884363051154796 epsilon=0.00000001
        Random.gaussian standard_deviation=2 . should_equal 1.8976095608800851
        Random.gaussian mean=5 . should_equal 4.505719279373956
        Random.gaussian standard_deviation=2 mean=5 . should_equal 2.55317612563977

        0.up_to 100 . map (_-> Random.gaussian standard_deviation=10) . any (_ > 3.0) . should_be_true
        0.up_to 100 . map (_-> Random.gaussian mean=1000000) . any (_ > 1000000) . should_be_true
        0.up_to 100 . map (_-> Random.gaussian) . any (_ > 1000000) . should_be_false

    group_builder.specify "should allow to generate random indices" <|
        Random.set_seed 0

        two_out_of_three = 0.up_to 100 . map _->
            Random.indices 3 2
        two_out_of_four = 0.up_to 10000 . map seed->
            Random.set_seed seed
            Random.indices 4 2

        two_out_of_three . should_contain_the_same_elements_as [[0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [2, 1]]
        two_out_of_four . should_contain_the_same_elements_as <|
            [[0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [2, 1], [0, 3], [1, 3], [2, 3], [3, 0], [3, 1], [3, 2]]

        permutations = 0.up_to 100 . map _->
            Random.indices 3 3
        permutations_2 = 0.up_to 100 . map _->
            Random.indices 3 100

        all_permutations = [[0, 1, 2], [0, 2, 1], [1, 0, 2], [1, 2, 0], [2, 0, 1], [2, 1, 0]]
        permutations . should_contain_the_same_elements_as all_permutations
        permutations_2 . should_contain_the_same_elements_as all_permutations

        Random.indices 0 0 . should_equal []
        Random.indices 0 100 . should_equal []
        Random.indices 1 1 . should_equal [0]
        Random.indices 1 . should_equal [0]
        Random.indices 1 100 . should_equal [0]
        Random.indices 100 0 . should_equal []

    group_builder.specify "should allow generating random dates" <|
        Random.set_seed 4000
        Random.date (Date.new 2023 03 01) (Date.new 2023 10 14) . should_equal (Date.new 2023 6 9)
        Random.date (Date.new 2023 03 01) (Date.new 2023 10 14) . should_equal (Date.new 2023 7 16)
        Random.date (Date.new 2023 03 01) (Date.new 2023 10 14) . should_equal (Date.new 2023 10 12)

        all_from_small_range = [Date.new 2023 03 01, Date.new 2023 03 02, Date.new 2023 03 03]
        dates = 0.up_to 100 . map (_-> Random.date (Date.new 2023 03 01) (Date.new 2023 03 03))
        dates.should_contain_the_same_elements_as all_from_small_range

    group_builder.specify "should allow generating random times" <|
        Random.set_seed 12345
        start = Time_Of_Day.new 8 12 15
        end = Time_Of_Day.new 9 40 2
        Random.time start end . should_equal (Time_Of_Day.new 9 31 10)
        Random.time start end . should_equal (Time_Of_Day.new 8 34 31)
        Random.time start end . should_equal (Time_Of_Day.new 9 27 48)
        Random.time . should_equal (Time_Of_Day.new 0 13 48)
        Random.time . should_equal (Time_Of_Day.new 14 20 55)
        Random.time . should_equal (Time_Of_Day.new 8 48 4)

        small_range_start = Time_Of_Day.new 8 12 15
        small_range_end = Time_Of_Day.new 8 12 18
        all_from_small_range = [Time_Of_Day.new 8 12 15, Time_Of_Day.new 8 12 16, Time_Of_Day.new 8 12 17, Time_Of_Day.new 8 12 18]
        times = 0.up_to 100 . map (_-> Random.time small_range_start small_range_end)
        times.should_contain_the_same_elements_as all_from_small_range

    group_builder.specify "should allow generating random UUIDs" <|
        Random.uuid . should_only_contain_elements_in "0123456789abcdef-"

    group_builder.specify "should allow to select random items from a vector, without replacement" <|
        Random.set_seed 0
        vector = ["A", "B", "C"]
        shuffles = 0.up_to 100 . map _->
            Random.items vector 2
        shuffles . should_contain_the_same_elements_as [["A", "B"], ["A", "C"], ["B", "A"], ["B", "C"], ["C", "A"], ["C", "B"]]

        Random.items ["A", "A", "A"] 2 . should_equal ["A", "A"]
        Random.items ["A", "A", "A"] 0 . should_equal []
        Random.items ["A", "A", "A"] 3 . should_equal ["A", "A", "A"]

    group_builder.specify "should allow to select random items from a vector, with replacement" <|
        Random.set_seed 0
        vector = 0.up_to 10 . to_vector

        Random.items vector with_replacement=True . length . should_equal 1
        Random.items vector 4 with_replacement=True . length . should_equal 4
        Random.items vector 10 with_replacement=True . length . should_equal 10
        Random.items vector 11 with_replacement=True . length . should_equal 11
        Random.items vector 100 with_replacement=True . length . should_equal 100

        0.up_to 20 . map _->
            items = Random.items vector 5 with_replacement=True
            items.should_only_contain_elements_in vector
            items.length . should_equal 5

    group_builder.specify "should not allow to select more items than the vector has, without replacement" <|
        vector = 0.up_to 10 . to_vector
        Random.items vector 11 . should_fail_with Illegal_Argument
        Random.items vector 100 . should_fail_with Illegal_Argument

    group_builder.specify "should allow to generate random permutations" <|
        Random.set_seed 0
        list = [0, 1, 2]
        permutations = 0.up_to 100 . map _->
            Random.permute list
        permutations_2 = 0.up_to 100 . map _->
            Random.permute list

        all_permutations = [[0, 1, 2], [0, 2, 1], [1, 0, 2], [1, 2, 0], [2, 0, 1], [2, 1, 0]]
        permutations . should_contain_the_same_elements_as all_permutations
        permutations_2 . should_contain_the_same_elements_as all_permutations

    group_builder.specify "should not allow using a too-large integer range" <|
        high = 9223372036854775806999
        Random.integer 0 high . should_fail_with Illegal_Argument

    group_builder.specify "Can call an instance directly" <|
        Random.new_generator . should_be_a Random_Generator
        Random.new_generator 12345 . should_be_a Random_Generator
        Random.new_generator 12345 . integer 0 99 . should_equal 51
        Random.new_generator 12345 . float . should_equal 0.3618031071604718 epsilon=0.00000001
        Random.new_generator 12345 . gaussian . should_equal -0.187808989658912 epsilon=0.00000001

main =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter

