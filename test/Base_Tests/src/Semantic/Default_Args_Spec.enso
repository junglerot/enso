from Standard.Base import all

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

from project.Semantic.Default_Args_Spec.Box import all

type Box
    Foo (v : Boolean = True)

type Bar (a : Integer = 1) (b : Box = (Foo False)) (c : Boolean = b.v)

type A a=0 b=1
type B a=2 b=(Foo True)
type C a=3 b=Foo
type D a=4 b=(Bar 1)
type E a=5 b=a c=(b+1)
type F a=6 b=(Foo False) c=(b.v)
type G a=4 b=Bar

local_fun a b=1 c=local_const = a + b + c
local_const = 42

spec =
    Test.group "Atom Constructors" <|
        Test.specify "should be allowed to use primitive default arguments" <|
            x = A 1
            x.b.should_equal 1
            y = A 1
            y.b.should_equal 1

        Test.specify "should be allowed to use non-primitive default arguments" <|
            a = B 1 (Foo False)
            a.b.should_equal (Foo False)
            b = B 1
            b.b.should_equal (Foo True)
            c = C 1
            c.b.should_equal (Foo)
            d = D 1
            d.b.b.should_equal (Foo False)
            d.b.c.should_equal False

        Test.specify "should be allowed to use default arguments that refer to previous parameters" <|
            e = E 1
            e.b.should_equal 1
            e.c.should_equal 2
            f = F 1
            f.c.should_equal False

        Test.specify "apply defaulted arguments that are themselves fully defaulted" <|
            G.should_equal (G 4 (Bar 1 (Foo False) False))

    Test.group "Functions" <|
        Test.specify "should apply default arguments that involve local functions" <|
            local_fun 0 . should_equal 43

main = Test_Suite.run_main spec
