import project.Any.Any
import project.Data.Text.Text
import project.Data.Boolean.Boolean
import project.Errors.Common.Forbidden_Operation
import project.Function.Function
import project.Panic.Panic

from project.Runtime.Context import Input, Output

@Builtin_Type
type Context
    Input
    Output

    name : Text
    name self =
        case self of
            Input  -> "Input"
            Output -> "Output"

    if_enabled : Function -> Text -> Any
    if_enabled self ~action environment="design" =
        if self.is_enabled environment then action else Panic.throw (Forbidden_Operation.Error self.name)

    is_enabled : Text -> Boolean
    is_enabled self environment="design" =
        self.is_enabled_builtin environment

    ## PRIVATE
    is_enabled_builtin : Text -> Boolean
    is_enabled_builtin self environment = @Builtin_Method "Context.is_enabled_builtin"

current_execution_environment : Text
current_execution_environment = @Builtin_Method "Runtime.current_execution_environment"

with_enabled_context : Context -> Text -> Function -> Any
with_enabled_context context environment=Runtime.current_execution_environment ~action = with_enabled_context_builtin context environment action

with_enabled_context_builtin : Context -> Text -> Function -> Any
with_enabled_context_builtin context environment ~action = @Builtin_Method "Runtime.with_enabled_context_builtin"

with_disabled_context : Context -> Text -> Function -> Any
with_disabled_context context environment=Runtime.current_execution_environment ~action = with_disabled_context_builtin context environment action

with_disabled_context_builtin : Context -> Text -> Function -> Any
with_disabled_context_builtin context environment ~action = @Builtin_Method "Runtime.with_disabled_context_builtin"

primitive_get_stack_trace = @Builtin_Method "Runtime.primitive_get_stack_trace"
