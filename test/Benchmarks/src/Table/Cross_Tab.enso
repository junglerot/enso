from Standard.Base import all

from Standard.Table import Table
from Standard.Table.Data.Aggregate_Column.Aggregate_Column import Count, Sum

from Standard.Test import Bench, Faker


options = Bench.options . set_warmup (Bench.phase_conf 1 2) . set_measure (Bench.phase_conf 1 2)


seed = 1646322139


create_table : Table
create_table num_rows =
    faker = Faker.new seed
    sizes = ['XXS', 'XS', 'S', 'M', 'L', 'XL', 'XXL']
    stores = ["Brixton", "Chelsea", "Fulham", "Mayfair", "Notting Hill", "Peckham", "Richmond", "Westminster", "Whitechapel", "Wimbledon"]
    types = ["Gravel", "Mountain", "Road"]
    vgen v = 0.up_to num_rows . map _-> faker.vector_item v

    size = ["size", vgen sizes]
    store = ["store", vgen stores]
    typ = ["type", vgen types]
    price = ["price", 0.up_to num_rows . map _-> faker.decimal -200.0 200.0]

    Table.new [size, store, typ, price]


type Data
    Value ~table

    create num_rows = Data.Value (create_table num_rows)


collect_benches = Bench.build builder->
    row_numbers = [25, 250, 2500, 25000]


    row_numbers.each num_rows->
        data = Data.create num_rows

        builder.group ("CrossTab_" + num_rows.to_text) options group_builder->
            specify group_by name_column values=[Count] =
                name = (group_by.join '_') + "_" + name_column + "_" + (values.map .to_text . join "_")
                group_builder.specify (normalize_name name) <|
                    data.table.cross_tab group_by name_column values

            specify [] "size"
            specify [] "type"
            specify [] "store"
            specify ["type"] "size"
            specify ["store"] "size"
            specify ["size"] "store"
            specify ["size"] "store" values=[Count, Sum "price"]


normalize_name : Text -> Text
normalize_name name =
    name.replace "(" "" |> _.replace ")" "" |> _.replace " " "_" |> _.replace "'" ""


main = collect_benches . run_main
