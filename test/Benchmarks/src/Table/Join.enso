from Standard.Base import all
from Standard.Base.Runtime import assert

from Standard.Table import all

from Standard.Test import Bench

from project.Config import extended_tests

options = Bench.options . set_warmup (Bench.phase_conf 2 5) . set_measure (Bench.phase_conf 2 5)

type Scenario
    Value table1 table2

shuffle vec =
    vec.take (Index_Sub_Range.Sample vec.length seed=42)

create_scenario_equals num_rows =
    xs = (0.up_to num_rows).to_vector
    table1 = Table.new [["key", xs]]
    table2 = Table.new [["key", shuffle xs]]
    Scenario.Value table1 table2

create_scenario_equals_medium_groups num_rows =
    xs = (0.up_to num_rows).map x-> (x/30).floor
    ys = xs.reverse.map (+2)
    table1 = Table.new [["key", xs]]
    table2 = Table.new [["key", ys]]
    Scenario.Value table1 table2

create_scenario_equals_ignore_case num_rows =
    table1 = Table.new [["key", (0.up_to num_rows).map i-> "a"+i.to_text]]
    table2 = Table.new [["case_insensitive_key", (0.up_to num_rows).reverse.map i-> "A"+i.to_text]]
    Scenario.Value table1 table2

create_scenario_between num_rows =
    xs = (0.up_to num_rows).map x-> x*100
    lows = xs.map x-> x-10
    highs = xs.map x-> x+50

    table1 = Table.new [["x", shuffle xs]]
    table2 = Table.new [["lows", lows], ["highs", highs]]
    Scenario.Value table1 table2

## The mixed scenario creates a pair of tables where all rows are mapped 1-1,
   but they are split into 3 groups. Each group differs by only one 'key' while
   having equal keys of the other two types.

   This ensures that a combined scenario must be efficient for all conditions,
   regardless of the distribution of keys - it cannot naively group by only a
   subset of keys and brute force the remaining keys - because in this example,
   splitting by any subset of keys will still yield a big group - only splitting
   by all 3 keys gives us small groups (1-1).
create_scenario_mixed num_rows =
    n = (num_rows/3).round
    xs = (0.up_to n).to_vector
    ys_1 = (0.up_to n).map i-> "a"+i.to_text
    ys_2 = (0.up_to n).map i-> "A"+i.to_text
    zs = (0.up_to n).map x-> 1000 + x*100

    constant_x = Vector.new n _-> 1
    constant_y = Vector.new n _-> "_"
    constant_z = Vector.new n _-> 0

    table1 =
        group1 = Table.new [["EQ", shuffle xs], ["case_insensitive", constant_y], ["x", constant_z]]
        group2 = Table.new [["EQ", constant_x], ["case_insensitive", shuffle ys_1], ["x", constant_z]]
        group3 = Table.new [["EQ", constant_x], ["case_insensitive", constant_y], ["x", shuffle zs]]
        group1.union [group2, group3]

    table2 =
        group1 = Table.new [["EQ", shuffle xs], ["case_insensitive", constant_y], ["lows", constant_z], ["highs", constant_z]]
        group2 = Table.new [["EQ", constant_x], ["case_insensitive", shuffle ys_2], ["lows", constant_z], ["highs", constant_z]]

        lows = zs.map x-> x-10
        highs = zs.map x-> x+30
        group3 = Table.new [["EQ", constant_x], ["case_insensitive", constant_y], ["lows", lows], ["highs", highs]]

        group1.union [group2, group3]

    Scenario.Value table1 table2

## The 2d equality scenario matches rows based on 2 keys -
   it matches corresponding points on a 2d grid.

   This is used to verify that multi-key joins are efficient too.
create_scenario_equals_2d num_rows =
    n = num_rows.sqrt.ceil
    pts = (0.up_to n).to_vector.flat_map x->
        (0.up_to n).map y-> [x, y]

    shuffled_pts = shuffle pts

    table1 = Table.new [["x", shuffled_pts.map .first], ["y", shuffled_pts.map .second]]
    table2 = Table.new [["x", pts.map .first], ["y", pts.map .second]]
    Scenario.Value table1 table2

## Similarly to the example with equality, this creates a 2d grid of points, but
   they are matched using the Between condition.
create_scenario_between_2d num_rows =
    n = num_rows.sqrt.ceil
    pts = (0.up_to n).to_vector.flat_map x->
        (0.up_to n).map y-> [x, y]

    shuffled_pts = shuffle pts
    table1 = Table.new [["x", shuffled_pts.map .first], ["y", shuffled_pts.map .second]]

    lows = pts.map p-> [p.first - 0.1, p.second - 0.1]
    highs = pts.map p-> [p.first + 0.1, p.second + 0.1]

    table2 = Table.new [["x_lows", lows.map .first], ["y_lows", lows.map .second], ["x_highs", highs.map .first], ["y_highs", highs.map .second]]
    Scenario.Value table1 table2

## This one creates a scenario with a 2d grid of points for the left table, but
   the right table contains pairs of coordinates that denote belts of size 2 x n
   on that grid.

   Some of them will be horizontal and some vertical, to see how the order of
   Between arguments affects performance.
create_scenario_between_2d_belts num_rows =
    n = num_rows.sqrt.ceil
    pts = (0.up_to n).to_vector.flat_map x->
        (0.up_to n).map y-> [x, y]

    shuffled_pts = shuffle pts
    table1 = Table.new [["x", shuffled_pts.map .first], ["y", shuffled_pts.map .second]]

    horizontal_belts = Vector.new n x->
        [x, x+1, 0, n, False]
    vertical_belts = Vector.new n y->
        [0, n, y, y+1, True]

    table2 = Table.from_rows ["x_lows", "x_highs", "y_lows", "y_highs", "is_vertical"] (horizontal_belts + vertical_belts)
    Scenario.Value table1 table2

## This is a scenario where we want to find rows unmatched in another table.

   The scenario is set-up on purpose in such a way that the intersection of the
   two tables is very large. This will only be fast if the anti-join does not
   compute the intersection which is not needed in this scenario.
create_scenario_antijoin num_rows =
    xs = Vector.new num_rows _-> 1

    ## The first 1000 rows will be unmatched (and should be returned in the anti-join).
       All other rows will match with _all_ rows from `xs`, creating a huge intersection.
    ys = Vector.new num_rows ix->
        if ix < 1000 then -ix else 1

    table1 = Table.new [["key", xs]]
    table2 = Table.new [["key", ys]]
    Scenario.Value table1 table2

## This is a scenario where we join a very large table with a much smaller table 
   to check an optimisation where we only index the smaller of the 2 tables
create_scenario_large_small_table =
    xs = (0.up_to 10000000).map _-> Random.integer 0 999
    ys = (0.up_to 1000).to_vector
    table1 = Table.new [["key", xs]]
    table2 = Table.new [["key", ys]]
    Scenario.Value table1 table2


type Data
    Value ~equals ~equals_medium_groups ~equals_ignore_case ~between ~mixed ~equals2d ~between2d ~between2d_belts ~antijoin ~large_small_table

    create num_rows =
        Data.Value (create_scenario_equals num_rows) (create_scenario_equals_medium_groups num_rows) (create_scenario_equals_ignore_case num_rows) (create_scenario_between num_rows) (create_scenario_mixed num_rows) (create_scenario_equals_2d num_rows) (create_scenario_between_2d num_rows) (create_scenario_between_2d_belts num_rows) (create_scenario_antijoin num_rows) (create_scenario_large_small_table)

collect_benches = Bench.build builder->
    num_rows = 50000
    data = Data.create num_rows

    builder.group ("Join_" + num_rows.to_text) options group_builder->
        group_builder.specify "Equals" <|
            scenario = data.equals
            r = scenario.table1.join scenario.table2 on="key"
            assert (r.row_count == num_rows)

        group_builder.specify "Equals_Medium_Groups" <|
            scenario = data.equals_medium_groups
            scenario.table1.join scenario.table2 on="key"

        group_builder.specify "Equals_Ignore_Case" <|
            scenario = data.equals_ignore_case
            r = scenario.table1.join scenario.table2 on=(Join_Condition.Equals_Ignore_Case "key" "case_insensitive_key")
            assert (r.row_count == num_rows)

        group_builder.specify "Between" <|
            scenario = data.between
            r = scenario.table1.join scenario.table2 on=(Join_Condition.Between "x" "lows" "highs")
            assert (r.row_count == num_rows)

        group_builder.specify "Mixed" <|
            scenario = data.mixed
            r = scenario.table1.join scenario.table2 on=[Join_Condition.Equals "EQ", Join_Condition.Equals_Ignore_Case "case_insensitive", Join_Condition.Between "x" "lows" "highs"]
            expected_rows = data.mixed.table1.row_count
            assert (r.row_count == expected_rows)

        group_builder.specify "Equals_2D" <|
            scenario = data.equals2d
            r = scenario.table1.join scenario.table2 on=["x", "y"]
            assert (r.row_count == scenario.table1.row_count)

        group_builder.specify "Between_2D" <|
            scenario = data.between2d
            r = scenario.table1.join scenario.table2 on=[Join_Condition.Between "x" "x_lows" "x_highs", Join_Condition.Between "y" "y_lows" "y_highs"]
            assert (r.row_count == scenario.table1.row_count)

        if extended_tests then group_builder.specify "Between_2D_Belts_All" <|
            scenario = data.between2d_belts
            r = scenario.table1.join scenario.table2 on=[Join_Condition.Between "x" "x_lows" "x_highs", Join_Condition.Between "y" "y_lows" "y_highs"]
            assert (r.row_count == scenario.table1.row_count)

        if extended_tests then group_builder.specify "Between_2D_Belts_V" <|
            scenario = data.between2d_belts
            t2 = scenario.table2.filter "is_vertical" Filter_Condition.Is_True
            r = scenario.table1.join t2 on=[Join_Condition.Between "x" "x_lows" "x_highs", Join_Condition.Between "y" "y_lows" "y_highs"]
            assert (r.row_count == scenario.table1.row_count)

        if extended_tests then group_builder.specify "Between_2D_Belts_H" <|
            scenario = data.between2d_belts
            t2 = scenario.table2.filter "is_vertical" Filter_Condition.Is_False
            r = scenario.table1.join t2 on=[Join_Condition.Between "x" "x_lows" "x_highs", Join_Condition.Between "y" "y_lows" "y_highs"]
            assert (r.row_count == scenario.table1.row_count)

        group_builder.specify "AntiJoin" <|
            scenario = data.antijoin
            r = scenario.table2.join scenario.table1 on="key" join_kind=Join_Kind.Left_Exclusive
            assert (r.row_count == 1000)

        group_builder.specify "Join_Large_Table_to_Small_Table" <|
            scenario = data.large_small_table
            r = scenario.table1.join scenario.table2 on="key"
            assert (r.row_count == scenario.table1.row_count)

        group_builder.specify "Join_Small_Table_to_Large_Table" <|
            scenario = data.large_small_table
            r = scenario.table2.join scenario.table1 on="key"
            assert (r.row_count == scenario.table1.row_count)
        
main = collect_benches . run_main
