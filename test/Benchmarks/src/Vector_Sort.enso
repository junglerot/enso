from Standard.Base import all

import Standard.Test.Bench

import project.Vector as Vector_Utils

polyglot java import java.util.Random
polyglot java import org.enso.base.Time_Utils



## Bench Utilities ============================================================

vector_size = 1000000
iter_size = 100
num_iterations = 10

make_sorted_ascending_vec : Integer -> Base.Vector.Vector
make_sorted_ascending_vec n = 0.up_to n+1 . to_vector

make_partially_sorted_vec : Integer -> Base.Vector.Vector
make_partially_sorted_vec n =
    random_gen = Random.new n
    direction = Ref.new Sort_Direction.Ascending
    last_num = Ref.new 0
    run_length = Ref.new 0
    Base.Vector.fill n <|
        case (run_length.get) == 0 of
            True ->
                new_direction = if random_gen.nextDouble > 0 then Sort_Direction.Ascending else
                    Sort_Direction.Descending
                direction.put new_direction
                run_length.put ((random_gen.nextLong % (n / 10).floor) - 1)
                num = random_gen.nextInt
                last_num.put num
                num
            False ->
                change = random_gen.nextInt.abs % n
                num = case direction.get of
                    Sort_Direction.Ascending ->
                        num = last_num.get + change
                        last_num.put num
                        num
                    Sort_Direction.Descending ->
                        num = (last_num.get) - change
                        last_num.put num
                        num
                run_length.put (run_length.get - 1)
                num


# The Benchmarks ==============================================================

main =
    sorted_vec = make_sorted_ascending_vec vector_size
    partially_sorted_vec = make_partially_sorted_vec vector_size
    random_vec = Vector_Utils.make_random_vec vector_size
    projection = x -> x % 10
    comparator = l -> r -> r.compare_to l

    Bench.measure (sorted_vec.sort) "Already Sorted" iter_size num_iterations
    Bench.measure (sorted_vec.sort order=Sort_Direction.Descending) "Sorted in Opposite Order" iter_size num_iterations
    Bench.measure (partially_sorted_vec.sort) "Sorted Runs Ascending" iter_size num_iterations
    Bench.measure (partially_sorted_vec.sort order=Sort_Direction.Descending) "Sorted Runs Descending" iter_size num_iterations
    Bench.measure (random_vec.sort) "Random Elements Ascending" iter_size num_iterations
    Bench.measure (random_vec.sort order=Sort_Direction.Descending) "Random Elements Descending" iter_size num_iterations
    Bench.measure (random_vec.sort on=projection) "Sorting with a Custom Projection" iter_size num_iterations
    Bench.measure (random_vec.sort by=comparator) "Sorting with a Custom Comparison" iter_size num_iterations
