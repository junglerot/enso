from Standard.Base import all

from Standard.Test import Bench

polyglot java import java.lang.System as Java_System
polyglot java import java.io.File as Java_File

type Data
    Value ~enso_bin:File ~empty_world:File ~hello_world:File

    bench_empty self =
        res = Process.run self.enso_bin.path [ "--run", self.empty_world.to_text ]

    bench_hello self =
        res = Process.run self.enso_bin.path [ "--run", self.hello_world.to_text ]


collect_benches = Bench.build builder->
    options = Bench.options . set_warmup (Bench.phase_conf 2 5) . set_measure (Bench.phase_conf 3 5)


    data =
        Data.Value enso_bin empty_file hello_file

    builder.group "Startup" options group_builder->
        group_builder.specify "empty_startup" data.bench_empty
        group_builder.specify "hello_world_startup" data.bench_hello

empty_file =
    f = File.create_temporary_file "empty" "enso"
    t = """
        main = "Hello World"
    t.write f
    f

hello_file =
    f = File.create_temporary_file "hello" "enso"
    t = """
        from Standard.Base import IO

        main = IO.println "Hello World"
    t.write f
    f

enso_bin =
    p = Java_System.getProperty "jdk.module.path"
    s = p.split Java_File.separator
    paths = s.take (Index_Sub_Range.While _!="..")
    j = paths . join Java_File.separator
    File.new j / if Platform.os == Platform.OS.Windows then "enso.bat" else "enso"

main = collect_benches . run_main
