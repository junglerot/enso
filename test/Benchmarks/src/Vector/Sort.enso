from Standard.Base import all
import Standard.Base.Runtime.Ref.Ref

from Standard.Test import Bench

import project.Vector.Utils

polyglot java import java.util.Random as Java_Random
polyglot java import org.enso.base.Time_Utils


## Bench Utilities ============================================================

make_sorted_ascending_vec : Integer -> Vector
make_sorted_ascending_vec n = 0.up_to n+1 . to_vector


make_partially_sorted_vec : Integer -> Vector
make_partially_sorted_vec n =
    random_gen = Java_Random.new n
    direction = Ref.new Sort_Direction.Ascending
    last_num = Ref.new 0
    run_length = Ref.new 0
    Vector.fill n <|
        case (run_length.get) == 0 of
            True ->
                new_direction = if random_gen.nextDouble > 0 then Sort_Direction.Ascending else
                    Sort_Direction.Descending
                direction.put new_direction
                run_length.put ((random_gen.nextLong % (n / 10).floor) - 1)
                num = random_gen.nextInt
                last_num.put num
                num
            False ->
                change = random_gen.nextInt.abs % n
                num = case direction.get of
                    Sort_Direction.Ascending ->
                        num = last_num.get + change
                        last_num.put num
                        num
                    Sort_Direction.Descending ->
                        num = (last_num.get) - change
                        last_num.put num
                        num
                run_length.put (run_length.get - 1)
                num

type Int
    Value v

    identity self = self


# The Benchmarks ==============================================================


options = Bench.options . set_warmup (Bench.phase_conf 1 4) . set_measure (Bench.phase_conf 1 3)


type Data
    Value ~sorted_vec ~partially_sorted_vec ~random_vec ~random_vec_wrapped

    create vec_size =
        Data.Value (Data.make_sorted_vec vec_size) (make_partially_sorted_vec vec_size) (Data.make_random_vec vec_size) ((Data.make_random_vec vec_size).map (v -> Int.Value v))

    make_sorted_vec vec_size =
        make_sorted_ascending_vec vec_size

    make_random_vec vec_size =
        Utils.make_random_vec vec_size


collect_benches = Bench.build builder->
    vector_size = 100 * 1000
    data = Data.create vector_size
    projection = x -> x % 10
    comparator = l -> r -> Ordering.compare l r

    builder.group "Vector_Sort" options group_builder->
        group_builder.specify "Already_Sorted" <|
            data.sorted_vec.sort

        group_builder.specify "Sorted_in_Opposite_Order" <|
            data.sorted_vec.sort Sort_Direction.Descending

        group_builder.specify "Sorted_Runs_Ascending" <|
            data.partially_sorted_vec.sort

        group_builder.specify "Sorted_Runs_Descending" <|
            data.partially_sorted_vec.sort Sort_Direction.Descending

        group_builder.specify "Random_Elements_Ascending" <|
            data.random_vec.sort

        group_builder.specify "Random_Elements_Descending" <|
            data.random_vec.sort Sort_Direction.Descending

        group_builder.specify "Sorting_with_a_Custom_Projection" <|
            data.random_vec.sort on=projection

        group_builder.specify "Sorting_with_an_identity_function" <|
            data.random_vec_wrapped.sort on=(_.identity)

        group_builder.specify "Sorting_with_an_unresolved_identity_function" <|
            data.random_vec_wrapped.sort on=(.identity)

        group_builder.specify "Sorting_with_the_Default_Ordered_Comparator" <|
            data.random_vec.sort by=comparator


main = collect_benches . run_main
