from Standard.Base import all

from Standard.Test import Bench

options = Bench.options . set_warmup (Bench.phase_conf 1 2) . set_measure (Bench.phase_conf 1 2)


type Data
    Value ~dates ~holidays ~shifted_dates

    create shift =
        Data.Value (create_dates) (create_holidays) (create_shifted_dates shift)


create_dates =
    first_day = Date.new 2020 1 1
    Vector.new 1000 (x -> first_day + (Period.new days=x))


create_holidays =
    dates = create_dates
    dates.take (Index_Sub_Range.Sample 100 100)


create_shifted_dates shift =
    dates = create_dates
    dates.map (d -> d + (Period.new days=shift))


collect_benches = Bench.build builder->
    shifts = [1, 5, 20, 100]

    shifts.each shift->
        builder.group ("Time_Work_Days_Shift_" + shift.to_text) options group_builder->
            data = Data.create shift

            group_builder.specify "work_days_until" <|
                data.dates.zip data.shifted_dates d1-> d2-> d1.work_days_until d2

            group_builder.specify "work_days_until_with_holidays" <|
                data.dates.zip data.shifted_dates d1-> d2-> d1.work_days_until d2 holidays=data.holidays

            group_builder.specify "add_regular_days" <|
                data.dates.map date-> date + (Period.new days=shift)

            group_builder.specify "add_work_days" <|
                data.dates.map date-> date.add_work_days shift

            group_builder.specify "add_work_days_with_holidays" <|
                data.dates.map date-> date.add_work_days shift holidays=data.holidays


main = collect_benches . run_main
