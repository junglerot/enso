from Standard.Base import all

from Standard.Test import Bench, Faker

compare_all_adjacent text_vector =
    res = 1.up_to text_vector.length . fold False acc-> ix->
        compare_result = (text_vector.at ix-1) < (text_vector.at ix)
        acc && compare_result
    res

bench =
    ## The `Text.compare_to` benchmarks check both scenarios where the Texts are
       short and very long - both checking the case where the difference appears
       early or late in the long string. This is to see well any overheads
       related to preprocessing the whole string and any possible early
       termination.

       The benchmarks are run in two variants - one where the generated texts
       contain only ASCII characters and another where the texts also contain
       non-ASCII letters and accent combinators modifying neighboring letters.
       This is to compare the performance of handling simple ASCII versus
       performance of handling more complex Unicode characters.
    bench_strcmp suite_prefix character_template common_prefix =
        faker = Faker.new
        ## Warning: this relies on the fact that Faker will treat the accent
           codepoint `\u{301}` as a separate code unit. We rely on this to add
           accents randomly to neighboring characters. If the implementation of
           Faker is changed, this must be modified accordingly.
        make_alpha_template length = Vector.new length _-> character_template
        very_short_template = make_alpha_template 4
        very_short = Vector.new 100000 _-> 'ðŸ¤©' + faker.string_value very_short_template
        medium_template = make_alpha_template 64
        medium = Vector.new 10000 _-> faker.string_value medium_template

        big_a_codepoint = 65
        big_template = make_alpha_template 100000
        big_random = Vector.new 100 _-> faker.string_value big_template
        big_early_difference = Vector.new 100 ix->
            "bb" + (Text.from_codepoints [big_a_codepoint + ix%5]) + "aaa" + (faker.string_value big_template)
        prefix = common_prefix.repeat 100000
        big_late_difference = Vector.new 100 ix-> prefix + (Text.from_codepoints [big_a_codepoint + ix%5])

        Bench.measure (compare_all_adjacent very_short) suite_prefix+"very short" 10 10
        Bench.measure (compare_all_adjacent medium) suite_prefix+"medium" 10 10
        Bench.measure (compare_all_adjacent big_random) suite_prefix+"big - random" 10 10
        Bench.measure (compare_all_adjacent big_early_difference) suite_prefix+"big - early difference" 10 10
        Bench.measure (compare_all_adjacent big_late_difference) suite_prefix+"big - late difference" 10 10

    bench_strcmp "strcmp Unicode " (Faker.upper_case_letters + 'Ä™\u{301}\u{302}'.char_vector) 'Ä™\u{301}'
    bench_strcmp "strcmp ASCII " Faker.upper_case_letters 'A'

main = bench
