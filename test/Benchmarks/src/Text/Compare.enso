from Standard.Base import all

from Standard.Test import Bench, Faker


compare_all_adjacent text_vector =
    res = 1.up_to text_vector.length . fold False acc-> ix->
        compare_result = (text_vector.at ix-1) < (text_vector.at ix)
        acc && compare_result
    res


create_very_short_template character_template =
    Vector.new 4 _-> character_template


create_very_short character_template faker =
    very_short_template = create_very_short_template character_template
    Vector.new 100000 _-> 'ðŸ¤©' + faker.string_value very_short_template


create_medium_template character_template =
    Vector.new 64 _-> character_template


create_medium character_template faker =
    medium_template = create_medium_template character_template
    Vector.new 10000 _-> faker.string_value medium_template


create_big_template character_template =
    Vector.new 100000 _-> character_template


create_big_random character_template faker =
    big_template = create_big_template character_template
    Vector.new 100 _-> faker.string_value big_template


create_big_early_difference character_template faker =
    big_a_codepoint = 65
    big_template = create_big_template character_template
    Vector.new 100 ix->
        "bb" + (Text.from_codepoints [big_a_codepoint + ix%5]) + "aaa" + (faker.string_value big_template)


create_big_late_difference common_prefix =
    big_a_codepoint = 65
    prefix = common_prefix.repeat 100000
    Vector.new 100 ix-> prefix + (Text.from_codepoints [big_a_codepoint + ix%5])


type Data
    Value ~very_short ~medium ~big_random ~big_early_difference ~big_late_difference

    create character_template faker common_prefix =
        Data.Value (create_very_short character_template faker) (create_medium character_template faker) (create_big_random character_template faker) (create_big_early_difference character_template faker) (create_big_late_difference common_prefix)


collect_benches = Bench.build builder->
    ## The `Text` compare benchmarks check both scenarios where the Texts are
       short and very long - both checking the case where the difference appears
       early or late in the long string. This is to see well any overheads
       related to preprocessing the whole string and any possible early
       termination.

       The benchmarks are run in two variants - one where the generated texts
       contain only ASCII characters and another where the texts also contain
       non-ASCII letters and accent combinators modifying neighboring letters.
       This is to compare the performance of handling simple ASCII versus
       performance of handling more complex Unicode characters.
    bench_strcmp suite_prefix character_template common_prefix =
        faker = Faker.new

        data = Data.create character_template faker common_prefix

        builder.group ("Text_Compare_Small_" + suite_prefix) (Bench.options.set_warmup (Bench.phase_conf 1 5) . set_measure (Bench.phase_conf 1 3)) group_builder->
            group_builder.specify "very_short" <|
                compare_all_adjacent data.very_short

            group_builder.specify "medium" <|
                compare_all_adjacent data.medium

        builder.group ("Text_Compare_Big_" + suite_prefix) (Bench.options.set_warmup (Bench.phase_conf 3 5) . set_measure (Bench.phase_conf 3 3)) group_builder->
            group_builder.specify "big_random" <|
                compare_all_adjacent data.big_random

            group_builder.specify "big_early_difference" <|
                compare_all_adjacent data.big_early_difference

            group_builder.specify "big_late_difference" <|
                compare_all_adjacent data.big_late_difference


    ## Warning: this relies on the fact that Faker will treat the accent
       codepoint `\u{301}` as a separate code unit. We rely on this to add
       accents randomly to neighboring characters. If the implementation of
       Faker is changed, this must be modified accordingly.
    bench_strcmp "strcmp_Unicode" (Faker.upper_case_letters + 'Ä™\u{301}\u{302}'.char_vector) 'Ä™\u{301}'
    bench_strcmp "strcmp_ASCII" Faker.upper_case_letters 'A'


main = collect_benches . run_main
