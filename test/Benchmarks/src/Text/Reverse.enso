from Standard.Base import all

from Standard.Test import Bench, Faker


type Data
    Value ~very_short_random ~big_random

    create faker =
        Data.Value (create_very_short_random faker) (create_big_random faker)


## Warning: this relies on the fact that Faker will treat the accent
   codepoint `\u{301}` as a separate code unit. We rely on this to add
   accents randomly to neighboring characters. If the implementation of
   Faker is changed, this must be modified accordingly.
create_template length =
    character_template = (Faker.upper_case_letters + Faker.lower_case_letters + 'ąę\u{301}\u{302}\u{303}\u{321}'.char_vector)
    Vector.new length _-> character_template


create_very_short_random faker =
    very_short_template = create_template 4
    faker.string_value very_short_template


create_big_random faker =
    big_template = create_template 100000
    faker.string_value big_template


## The `Text.reverse` benchmarks check both scenarios where the Texts are
   short and very long. This is to show any overheads related to string
   building.
collect_benches = Bench.build builder->

    data = Data.create Faker.new

    builder.group "Text_Reverse_Short" (Bench.options.set_warmup (Bench.phase_conf 1 2) . set_measure (Bench.phase_conf 1 2)) group_builder->
        group_builder.specify "very_short_random" <|
            data.very_short_random.reverse

    builder.group "Text_Reverse_Big" (Bench.options.set_warmup (Bench.phase_conf 1 3) . set_measure (Bench.phase_conf 1 3)) group_builder->
        group_builder.specify "big_random" <|
            data.big_random.reverse


main = collect_benches . run_main
