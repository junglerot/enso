from Standard.Base import all

from Standard.Table import Column
from Standard.Test import Bench, Faker

## Bench Utilities ============================================================

vector_size = 1000000
iter_size = 100
num_iterations = 10

# The Benchmarks ==============================================================

bench =
    ## No specific significance to this constant, just fixed to make generated set deterministic
    fixed_random_seed = 1644575867
    faker = Faker.new fixed_random_seed

    IO.println <| "Creating floats"
    floats_vec = Vector.new vector_size _->(faker.decimal -1000000000 1000000000)
    floats = Column.from_vector "floats" floats_vec

    IO.println <| "Creating integers"
    ints_vec = Vector.new vector_size _->(faker.integer -1000000000 1000000000)
    ints = Column.from_vector "ints" ints_vec

    IO.println <| ".round floats"
    Bench.measure floats.round "Column.round floats" iter_size num_iterations

    IO.println <| ".truncate floats"
    Bench.measure floats.truncate "Column.truncate floats" iter_size num_iterations
    IO.println <| ".ceil floats"
    Bench.measure floats.ceil "Column.ceil floats" iter_size num_iterations
    IO.println <| ".floor floats"
    Bench.measure floats.floor "Column.floor floats" iter_size num_iterations

    IO.println <| ".round ints"
    Bench.measure ints.round "Column.round ints" iter_size num_iterations
    IO.println <| ".truncate ints"
    Bench.measure ints.truncate "Column.truncate ints" iter_size num_iterations
    IO.println <| ".ceil ints"
    Bench.measure ints.ceil "Column.ceil ints" iter_size num_iterations
    IO.println <| ".floor ints"
    Bench.measure ints.floor "Column.floor ints" iter_size num_iterations

main = bench
