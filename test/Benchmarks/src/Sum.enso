from Standard.Base import all
import Standard.Base.Runtime.Debug
import Standard.Base.Runtime.State

from Standard.Test import Bench

polyglot java import java.lang.Long

type Counter
type Sum

sum_tco = sum_to ->
    summator = acc -> current ->
        if current == 0 then acc else
            @Tail_Call summator acc+current current-1
    res = summator 0 sum_to
    res

sum_tco_decimal = sum_to ->
    s = sum_to.to_decimal
    summator = acc -> current ->
        if current >= s then acc else
            @Tail_Call summator acc+current current+1.0
    res = summator 0.0 0.0
    res

sum_tco_eval = sumTo ->
    summator = acc -> current ->
        if current == 0 then acc else
            Debug.eval "@Tail_Call summator (acc + current) (current - 1)"

    res = summator 0 sumTo
    res

sum_tco_java = sum_to ->
    summator = acc -> current ->
        if current == 0 then acc else
            @Tail_Call summator (Long.sum acc current) (current - 1)
    res = summator 0 sum_to
    res

sum_co_state_body =
    n = State.get Counter
    acc = State.get Sum
    State.put Counter n-1
    State.put Sum     acc+n
    if n == 0 then acc else
        @Tail_Call sum_co_state_body

sum_co_state n =
    res = State.run Counter n (State.run Sum 0 sum_co_state_body)
    res

sum_state_body n =
    acc = State.get Number
    State.put Number (acc + n)
    if n == 0 then State.get Number else
        @Tail_Call sum_state_body (n - 1)

sum_state = sum_to ->
    res = State.run Number 0 (sum_state_body sum_to)
    res

sum_co_1 n acc = if n == 0 then acc else @Tail_Call sum_co_2 n-1 acc+n

sum_co_2 n acc = if n == 0 then acc else sum_co_1 n-1 acc+n

sum_co n =
    res = sum_co_2 n 0
    res

options = Bench.options . set_warmup (Bench.phase_conf 1 3) . set_measure (Bench.phase_conf 1 3)

collect_benches = Bench.build builder->
    ten_mil = 10000000

    builder.group "Sum" options group_builder->
        group_builder.specify "sum_tco_corecursive" (sum_tco ten_mil)
        group_builder.specify "sum_tco_float" (sum_tco_decimal ten_mil)
        group_builder.specify "sum_tco" (sum_tco ten_mil)
        group_builder.specify "sum_tco_java" (sum_tco_java ten_mil)
        group_builder.specify "sum_state" (sum_state ten_mil)
        group_builder.specify "sum_co_state" (sum_co_state ten_mil)
        # This test is disabled because it fails when running from a common entry point.
        # See the bug: https://www.pivotaltracker.com/story/show/183914580
        #group_builder.specify "sum_tco_eval" (sum_tco_eval ten_mil)


main = collect_benches . run_main
