from Standard.Base import all

from Standard.Test import Bench, Faker

## Bench Utilities ============================================================

vector_size = 100000
iter_size = 100
num_iterations = 10

# The Benchmarks ==============================================================

collect_benches group_builder =
    bench_measure ~act name = group_builder.specify name act

    ## No specific significance to this constant, just fixed to make generated set deterministic
    fixed_random_seed = 1644575867
    faker = Faker.new fixed_random_seed
    funs = [["ceil", _.ceil], ["floor", _.floor], ["truncate", _.truncate]]

    IO.println <| "Creating decimals"
    decimals = Vector.new vector_size _-> faker.decimal -1000000000 1000000000
    IO.println <| "Creating integers"
    integers = Vector.new vector_size _-> faker.integer -1000000000 1000000000

    funs.map pair->
        name = pair.at 0
        fun = pair.at 1
        IO.println <| "Benchmarking decimal " + name
        bench_measure (decimals.map fun) name

    funs.map pair->
        name = pair.at 0
        fun = pair.at 1
        IO.println <| "Benchmarking integer" + name
        bench_measure (integers.map fun) name

    [True, False].map use_bankers->
        [0, -2, 2].map decimal_places->
            name = "round decimal_places=" + (decimal_places.to_text.replace '-' '_') + " use_bankers=" + use_bankers.to_text
            fun = _.round decimal_places use_bankers
            bench_measure (decimals.map fun) "decimal "+name
            bench_measure (integers.map fun) "integer "+name

bench =
    options = Bench.options . size iter_size . iter num_iterations

    Bench.build builder->
        builder.group "Numbers" options group_builder->
            collect_benches group_builder

main = bench . run_main
