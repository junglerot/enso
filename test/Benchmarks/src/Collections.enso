from Standard.Base import all

from Standard.Test import Bench

polyglot java import java.util.Random as Java_Random

gen_list len = 0.up_to len . fold List.Nil (l -> i -> List.Cons i+1 l)

sum_list_meta list =
    nil_cons = Meta.meta List.Nil . constructor
    folder acc list =
        meta_list = Meta.meta list
        if meta_list.constructor == nil_cons then acc else
            fs = meta_list.fields
            @Tail_Call folder (acc + fs.at 0) (fs.at 1)
    res = folder 0 list
    res

sum_recur n = if n == 0 then 0 else 1 + sum_recur n-1

build_map size =
    rand = Java_Random.new
    0.up_to size . fold Map.empty (m -> i -> m.insert (rand.nextInt 10000) i)

options = Bench.options

type Data
    Value ~list ~vec ~vec_decimal

    create =
        Data.Value (gen_list 1000*1000) (Vector.new 1000*1000 (ix -> ix + 1)) (Vector.new 1000*1000 (ix -> ix + 0.0))


collect_benches = Bench.build builder->
    data = Data.create

    builder.group "Collections" options group_builder->
        group_builder.specify "list_meta_fold" <|
            sum_list_meta data.list

        group_builder.specify "list_fold" <|
            data.list.fold 0 (+)

        group_builder.specify "vector_fold" <|
            data.vec.fold 0 (+)

        group_builder.specify "vector_decimal_fold" <|
            data.vec_decimal.fold 0 (+)

        group_builder.specify "build_map" <|
            build_map 10000


main = collect_benches . run_main
