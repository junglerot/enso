from Standard.Base import all
import Standard.Base.Error.Illegal_State.Illegal_State

from Standard.Test import Bench

polyglot java import java.util.Random
polyglot java import org.graalvm.collections.Pair as Graal_Pair

type Uniform_Type
    Only_Ctor x y

type Simple_Sum_Type
    Variant_A
    Variant_B

type Sum_Type_With_Values
    Ctor_A x y
    Ctor_B x

## Counts entries in the vector equal to a given element and checks if it is as
   expected.
count_entries vector element expected_count=1 =
    go ix acc = if ix >= vector.length then acc else
        new_acc = if vector.at ix == element then acc+1 else acc
        @Tail_Call go (ix+1) new_acc
    count = go 0 0
    if count != expected_count then
        msg = "Expected " + expected_count.to_text + " entries of " + element.to_text + ", but got " + count.to_text
        IO.println msg
        Panic.throw (Illegal_State.Error msg)

## Alternative implementation delegating to equals, for comparing polyglot performance.
count_entries_polyglot vector element expected_count=1 =
    go ix acc = if ix >= vector.length then acc else
        new_acc = if (vector.at ix).equals element then acc+1 else acc
        @Tail_Call go (ix+1) new_acc
    count = go 0 0
    if count != expected_count then
        msg = "Expected " + expected_count.to_text + " entries of " + element.to_text + ", but got " + count.to_text
        IO.println msg
        Panic.throw (Illegal_State.Error msg)

bench =
    n = 100000
    iter_size = 100
    num_iterations = 10

    integer_vec = Vector.new n (ix -> ix)
    boolean_vec = integer_vec.map x->
        x % 5 == 0
    text_vec = integer_vec.map .to_text

    uniform_atom_vec = integer_vec.map x->
        Uniform_Type.Only_Ctor (x + 10) (x * 2)
    simple_variant_atom_vec = integer_vec.map x->
        if x % 5 == 0 then Simple_Sum_Type.Variant_A else Simple_Sum_Type.Variant_B
    complex_variant_atom_vec = integer_vec.map x->
        if x % 5 == 0 then Sum_Type_With_Values.Ctor_A (x + 10) (x * 2) else Sum_Type_With_Values.Ctor_B x

    polyglot_vec = integer_vec.map x->
        Graal_Pair.create (x + 10) (x * 2)

    first_day = Date.new 1971
    date_vec = integer_vec.map x->
        first_day + (Period.new days=x)
    first_dt = Date_Time.new 1971
    datetime_vec = integer_vec.map x->
        first_dt + (Duration.new minutes=x)

    Bench.measure (count_entries integer_vec 4567) "Integer Equality" iter_size num_iterations
    Bench.measure (count_entries boolean_vec True expected_count=(n . div 5)) "Boolean Equality" iter_size num_iterations
    Bench.measure (count_entries text_vec "4567") "Text Equality" iter_size num_iterations
    Bench.measure (count_entries date_vec (Date.new 1980 12 30)) "Date Equality" iter_size num_iterations
    Bench.measure (count_entries datetime_vec (Date_Time.new 1971 1 2 12 30)) "Date_Time Equality" iter_size num_iterations

    Bench.measure (count_entries uniform_atom_vec (Uniform_Type.Only_Ctor 110 200)) "Custom Atom Equality - single constructor" iter_size num_iterations
    Bench.measure (count_entries simple_variant_atom_vec Simple_Sum_Type.Variant_A expected_count=(n . div 5)) "Custom Atom Equality - 2 constructors without data" iter_size num_iterations
    Bench.measure (count_entries complex_variant_atom_vec (Sum_Type_With_Values.Ctor_B 123)) "Custom Atom Equality - 2 constructors with data" iter_size num_iterations

    Bench.measure (count_entries polyglot_vec (Graal_Pair.create 110 200)) "Java Polyglot ==" iter_size num_iterations
    Bench.measure (count_entries_polyglot polyglot_vec (Graal_Pair.create 110 200)) "Java Polyglot .equals" iter_size num_iterations

    Nothing

main = bench
