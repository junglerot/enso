from Standard.Base import all
import Standard.Base.Errors.Common.Forbidden_Operation
import Standard.Base.Errors.File_Error.File_Error
import Standard.Base.Runtime.Context

from Standard.Image import Image, Read_Flag, Write_Flag
import Standard.Image.Image_File_Format.Image_File_Format

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

polyglot java import java.lang.System as Java_System

fetch addr file =
    if file.exists then Exit_Code.Success else
        Process.run "curl" [addr, "--silent", "--output", file.path] . exit_code

spec =
    rgba_addr = "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Hue_alpha_falloff.png/320px-Hue_alpha_falloff.png"
    rgba_file = enso_project.root / "rgba.png"
    pending = case fetch rgba_addr rgba_file of
        Exit_Code.Failure _ ->
            "The Image.Read spec was not able to fetch the file from " + rgba_addr
        Exit_Code.Success ->
            Nothing

    Test.group "Image.read" pending=pending <|
        Test.specify "should return error when read failed" <|
            result = Image.read (enso_project.root / 'no_such_file.png')
            result . should_fail_with File_Error
            result.catch.should_be_a File_Error.IO_Error

        Test.specify "should read a color image" <|
            img = Image.read rgba_file
            img.rows.should_equal 160
            img.columns.should_equal 320
            img.channels.should_equal 3

        Test.specify "should read an image as grayscale" <|
            img = Image.read rgba_file Read_Flag.Grayscale
            img.rows.should_equal 160
            img.columns.should_equal 320
            img.channels.should_equal 1

        Test.specify "should read an image with an alpha channel" <|
            img = Image.read rgba_file Read_Flag.Alpha_Channel
            img.rows.should_equal 160
            img.columns.should_equal 320
            img.channels.should_equal 4

        Test.specify "should return error when write failed" <|
            out_file = enso_project.root / "no_such_directory" / "out.png"
            result = Image.read rgba_file . write out_file
            result.should_fail_with File_Error
            result.catch.should_be_a File_Error.IO_Error
        Test.specify "should write a PNG file with alpha channel" <|
            out_file = enso_project.root / "out_alpha.png"
            Image.read rgba_file Read_Flag.Alpha_Channel . write out_file
        Test.specify "should write a grayscale PNG file" <|
            out_file = enso_project.root / "out_gray.png"
            Image.read rgba_file Read_Flag.Grayscale . write out_file
        Test.specify "should write a PNG file with compression" <|
            out_file = enso_project.root / "out.png"
            Image.read rgba_file . write out_file (Write_Flag.PNG_Compression 3) . should_equal Nothing
        Test.specify "should write a JPEG file with compression" <|
            out_file = enso_project.root / "out.jpeg"
            flags = [Write_Flag.JPEG_Quality 75, Write_Flag.JPEG_Optimize, Write_Flag.JPEG_Progressive]
            Image.read rgba_file . write out_file flags . should_equal Nothing

    Test.group "Image File_Format" <|
        Test.specify "should recognise image files" <|
            Auto_Detect.get_reading_format (enso_project.data / "data.jpg") . should_be_a Image_File_Format
            Auto_Detect.get_reading_format (enso_project.data / "data.png") . should_be_a Image_File_Format
            Auto_Detect.get_reading_format (enso_project.data / "data.bmp") . should_be_a Image_File_Format

        Test.specify "should allow reading an Image" <|
            img = Data.read rgba_file
            img.rows.should_equal 160
            img.columns.should_equal 320
            img.channels.should_equal 3

    Test.group "Image Write" <|
        Test.specify "should write a Bitmap file" <|
            img = Image.read rgba_file

            out = enso_project.root / "out_alpha.bmp"
            img.write out
            out.exists.should_be_true

            bmp = Image.read out
            bmp.rows.should_equal 160
            bmp.columns.should_equal 320

            out.delete_if_exists

        Test.specify "should not write if Context.Output is disabled." <|
            img = Image.read rgba_file

            out = enso_project.root / "out_alpha.bmp"

            Context.Output.with_disabled <|
                img.write out . should_fail_with Forbidden_Operation
                out.exists.should_be_false

            out.delete_if_exists

main = Test_Suite.run_main spec
