from Standard.Base import all

from Standard.Image import Image, Read_Flag, Write_Flag

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

polyglot java import java.lang.System as Java_System

fetch addr file =
    Process.run "curl" [addr, "--silent", "--output", file.path]

spec =
    is_ci = Java_System.getenv "CI" == "true"
    rgba_addr = "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Hue_alpha_falloff.png/320px-Hue_alpha_falloff.png"
    rgba_file = enso_project.root / "rgba.png"
    pending = case is_ci of
        True ->
            case fetch rgba_addr rgba_file of
                Exit_Code.Failure _ ->
                    "The Image.Read spec was not able to fetch the file from " + rgba_addr
                Exit_Code.Success ->
                    Nothing
        False ->
            "The Image.Read spec only run when the `CI` environment variable is set to true"

    Test.group "Image.read" pending=pending <|
        Test.specify "should return error when read failed" <|
            Image.read (enso_project.root / 'no_such_file.png') . should_fail_with File_Error.IO_Error
        Test.specify "should read a color image" <|
            img = Image.read rgba_file
            img.rows.should_equal 160
            img.columns.should_equal 320
            img.channels.should_equal 3
        Test.specify "should read an image as grayscale" <|
            img = Image.read rgba_file Read_Flag.Grayscale
            img.rows.should_equal 160
            img.columns.should_equal 320
            img.channels.should_equal 1
        Test.specify "should read an image with an alpha channel" <|
            img = Image.read rgba_file Read_Flag.Alpha_Channel
            img.rows.should_equal 160
            img.columns.should_equal 320
            img.channels.should_equal 4

        Test.specify "should return error when write failed" <|
            out_file = enso_project.root / "no_such_directory" / "out.png"
            Image.read rgba_file . write out_file . should_fail_with File_Error.IO_Error
        Test.specify "should write a PNG file with alpha channel" <|
            out_file = enso_project.root / "out_alpha.png"
            Image.read rgba_file Read_Flag.Alpha_Channel . write out_file
        Test.specify "should write a grayscale PNG file" <|
            out_file = enso_project.root / "out_gray.png"
            Image.read rgba_file Read_Flag.Grayscale . write out_file
        Test.specify "should write a PNG file with compression" <|
            out_file = enso_project.root / "out.png"
            Image.read rgba_file . write out_file (Write_Flag.PNG_Compression 3) . should_equal Nothing
        Test.specify "should write a JPEG file with compression" <|
            out_file = enso_project.root / "out.jpeg"
            flags = [Write_Flag.JPEG_Quality 75, Write_Flag.JPEG_Optimize, Write_Flag.JPEG_Progressive]
            Image.read rgba_file . write out_file flags . should_equal Nothing

main = Test_Suite.run_main spec
