from Base import all

import Base.Test
import Base.Time.Duration
import Base.Time.Time

spec =
    describe "Duration" <|
        it "should create interval seconds" <|
            interval = 5.seconds
            interval.to_vector . should_equal [0, 0, 0, 0, 0, 5, 0]
        it "should create interval months" <|
            interval = 9.months
            interval.to_vector . should_equal [0, 9, 0, 0, 0, 0, 0]
        it "should add days to nanoseconds" <|
            interval = 7.nanoseconds + 3.days
            interval.to_vector . should_equal [0, 0, 3, 0, 0, 0, 7]
        it "should add milliseconds to years" <|
            interval = 4.years + 8.milliseconds
            interval.to_vector . should_equal [4, 0, 0, 0, 0, 0, 8000000]
        it "should substract seconds from months" <|
            interval = 8.months - 8.seconds
            interval.to_vector . should_equal [0, 8, 0, 0, 0, -8, 0]
        it "should subtract years from hours" <|
            interval = 2.hours - 11.years
            interval.to_vector . should_equal [-11, 0, 0, 2, 0, 0, 0]
        it "should support mixed operators" <|
            interval = 2.hours + 12.seconds - 11.years
            interval.to_vector . should_equal [-11, 0, 0, 2, 0, 12, 0]
        it "should create interval between two points in time" <|
            time1 = Time.new 2001 1 2
            time2 = Time.new 2001 2 1
            interval = Duration.between time1 time2
            interval.to_vector . should_equal [0, 0, 0, 720, 0, 0, 0]
        it "should check if time based" <|
            interval = 10.hours
            interval.is_date . should_be_false
            interval.is_time . should_be_true
        it "should check if date based" <|
            interval = 10.years
            interval.is_date . should_be_true
            interval.is_time . should_be_false
        it "should check if mixed based" <|
            interval = 10.years + 3.hours
            interval.is_date . should_be_true
            interval.is_time . should_be_true
        it "should check if empty" <|
            interval = 0.seconds
            interval.is_empty . should_be_true
