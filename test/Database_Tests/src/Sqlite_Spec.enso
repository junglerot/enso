from Standard.Base import all

from Standard.Database import all
from Standard.Database.Connection.Connection import Sql_Error
import Standard.Test
import Database_Tests.Common_Spec

sqlite_specific_spec connection =
    Test.group "[SQLite] Error Handling" <|
        Test.specify "should wrap errors" <|
            connection.execute_query "foobar" . should_fail_with Sql_Error
            connection.execute_update "foobar" . should_fail_with Sql_Error

            action = connection.execute_query "SELECT A FROM undefined_table"
            action . should_fail_with Sql_Error
            action.catch.to_text . should_equal "[SQLITE_ERROR] SQL error or missing database (no such table: undefined_table)"

    Test.group "[SQLite] Info" <|
        Test.specify "should return Table information" <|
            connection.execute_update 'CREATE TABLE "Tinfo" ("strs" VARCHAR, "ints" INTEGER, "bools" BOOLEAN, "decimals" DECIMAL)'
            t = connection.access_table "Tinfo"
            t.insert ["a", Nothing, False, 1.2]
            t.insert ["abc", Nothing, Nothing, 1.3]
            t.insert ["def", 42, True, 1.4]
            i = t.info
            i.index . to_vector . should_equal ["strs", "ints", "bools", "decimals"]
            i.at "Items Count" . to_vector . should_equal [3, 1, 2, 3]
            i.at "SQL Type" . to_vector . should_equal ["VARCHAR", "INTEGER", "BOOLEAN", "DECIMAL"]
        connection.execute_update 'DROP TABLE "Tinfo"'

spec =
    Enso_Project.data.create_directory
    file = Enso_Project.data / "sqlite_test.db"
    file.delete_if_exists
    connection = Database.open_sqlite_file file
    Common_Spec.spec "[SQLite] " connection
    here.sqlite_specific_spec connection
    connection.close
    file.delete
