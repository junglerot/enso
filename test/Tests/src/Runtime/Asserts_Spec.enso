from Standard.Base import all

from Standard.Base.Errors.Common import Assertion_Error
from Standard.Base.Errors.Common import Type_Error

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

foreign js js_check = """
    return (4 == 2 + 2)

spec = Test.group "Asserts" <|
    Test.specify "should be enabled in tests" <|
        p = Panic.catch Assertion_Error (Runtime.assert False) err->
            err.payload
        Meta.type_of p . should_be_a Assertion_Error

    Test.specify "should be able to take foreign functions as expressions" <|
        ret = Runtime.assert js_check
        ret . should_be_a Nothing

    Test.specify "should be able to take a block as expressions" <|
        ret = Runtime.assert <|
            4 == 2 + 2
        ret . should_be_a Nothing

    Test.specify "should be able to take values with warnings" <|
        foo x = Warning.attach "My warning" (x+2)
        Runtime.assert (foo 2 > 2) . should_be_a Nothing

    Test.specify "should fail with Type_Error if action does not return Boolean" <|
        p = Panic.catch Type_Error (Runtime.assert 42) err->
            err
        Meta.type_of p.payload . should_be_a Type_Error


main = Test_Suite.run_main spec
