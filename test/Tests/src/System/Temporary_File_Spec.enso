from Standard.Base import all
import Standard.Base.Errors.File_Error.File_Error
import Standard.Base.Errors.Illegal_State.Illegal_State
import Standard.Base.System.File.Advanced.Temporary_File.Temporary_File
import Standard.Base.System.Input_Stream.Input_Stream

from Standard.Test import Test, Test_Suite
from Standard.Test.Execution_Context_Helpers import run_with_and_without_output
import Standard.Test.Extensions

polyglot java import java.io.File as Java_File
polyglot java import java.io.ByteArrayInputStream
polyglot java import java.io.FileInputStream
polyglot java import java.io.InputStream

main = Test_Suite.run_main spec

spec =
    Test.group "Temporary_File facility" <|
        Test.specify "should allow to create a new file and allow to dispose it manually" <|
            tmp = Temporary_File.new
            tmp.with_file f->
                "test".write f
            r = tmp.with_file f->
                f.read Plain_Text
            r.should_equal "test"

            raw_file = tmp.unsafe_get
            raw_file.exists . should_be_true

            tmp.dispose

            Test.expect_panic Illegal_State <| tmp.with_file (f->f.read Plain_Text)
            raw_file.exists . should_be_false

        Test.specify "should allow to create a new file and allow to dispose it once the reference is dropped" <|
            f foo =
                # The tmp file is limited to the scope of the function.
                tmp = Temporary_File.new
                tmp.with_file f->
                    "["+foo+"]" . write f

                raw_file = tmp.unsafe_get
                raw_file.exists . should_be_true

                res = tmp.with_file f->
                    f.read Plain_Text
                [res, raw_file]

            result = f "foobar"
            # At this point the `tmp` from within the function is ready for collection.
            result.first.should_equal "[foobar]"
            raw_file = result.second

            repeat_gc count =
                if raw_file.exists.not then Nothing else
                    if count <= 0 then Test.fail "The temporary file was not cleaned up after numerous GC retries. Perhaps this is a bug?" else
                        if count % 100 == 0 then
                            IO.println "Trying to GC the temporary file (still "+count.to_text+" to go), but the file ("+raw_file.to_text+") still exists... "
                        Runtime.gc
                        @Tail_Call repeat_gc count-1

            repeat_gc 999
            raw_file.exists . should_be_false

        Test.specify "should allow to materialize an input stream, regardless of Output Context settings" <|
            run_with_and_without_output <|
                stream = make_stream "test payload 1"
                tmp = Temporary_File.from_stream stream
                tmp.with_file f->
                    f.read Plain_Text . should_equal "test payload 1"

        Test.specify "will fail if materializing an already closed input stream" <|
            stream = Input_Stream.new (InputStream.nullInputStream) (File_Error.handle_java_exceptions Nothing)
            stream.close

            Test.expect_panic File_Error <| Temporary_File.from_stream stream

        Test.specify "should be able to be converted to text, and indicate if it was disposed" <|
            tmp = Temporary_File.new "pref" ".suf"
            tmp.to_text.should_contain "Temporary_File"
            tmp.to_text.should_contain "pref"
            tmp.to_text.should_contain ".suf"

            tmp.dispose
            tmp.to_text.should_contain "(disposed)"
            tmp.to_text.should_contain "Temporary_File"
            tmp.to_text . should_not_contain "pref"
            tmp.to_text . should_not_contain "suf"

        Test.specify "should allow to materialize an input stream that is already associated with a temporary file without copying it" <|
            tmp = Temporary_File.new
            tmp.with_file f->
                "test payload 3" . write f

            java_file = Java_File.new tmp.unsafe_get.absolute.path
            stream = Input_Stream.new (FileInputStream.new java_file) (File_Error.handle_java_exceptions tmp.unsafe_get) associated_file=tmp

            tmp2 = Temporary_File.from_stream_light stream
            # The returned tmp file should be the same one as original.
            tmp2.should_be_a Temporary_File
            tmp2.unsafe_get.absolute.path . should_equal tmp.unsafe_get.absolute.path

            # If the raw file is associated, the stream will return that File descriptor (not as temporary file, but regular one):
            stream3 = Input_Stream.new (FileInputStream.new java_file) (File_Error.handle_java_exceptions tmp.unsafe_get) associated_file=tmp.unsafe_get
            f3 = Temporary_File.from_stream_light stream3
            f3.should_be_a File
            f3.absolute.path . should_equal tmp.unsafe_get.absolute.path

            # But if there's no association, a new temporary file gets created:
            stream4 = Input_Stream.new (FileInputStream.new java_file) (File_Error.handle_java_exceptions tmp.unsafe_get) associated_file=Nothing
            tmp4 = Temporary_File.from_stream_light stream4
            tmp4.should_be_a Temporary_File
            tmp4.unsafe_get.absolute.path . should_not_equal tmp.unsafe_get.absolute.path

            # The base variant of from_stream also always copies:
            stream5 = Input_Stream.new (FileInputStream.new java_file) (File_Error.handle_java_exceptions tmp.unsafe_get) associated_file=tmp
            tmp5 = Temporary_File.from_stream stream5
            tmp5.should_be_a Temporary_File
            tmp5.unsafe_get.absolute.path . should_not_equal tmp.unsafe_get.absolute.path

make_stream text =
    raw_stream = ByteArrayInputStream.new text.utf_8
    Input_Stream.new raw_stream (File_Error.handle_java_exceptions Nothing)
