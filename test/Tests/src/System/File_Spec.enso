from Standard.Base import all

from Standard.Test import Test, Test_Suite, Problems

spec =
    sample_file = enso_project.data / "sample.txt"
    windows_file = enso_project.data / "windows.txt"
    non_existent_file = File.new "does_not_exist.txt"

    Test.group "File Operations" <|
        Test.specify "should allow creating a new file" <|
            path = sample_file.path
            File.new path

        Test.specify "should have `new` be a no-op on a file" <|
            file = File.new sample_file
            file . should_equal sample_file

        Test.specify "should check if file exists" <|
            non_existent_file.exists.should_be_false
            sample_file.exists.should_be_true

        Test.specify "should get file name" <|
            sample_file.name.should_equal "sample.txt"

        Test.specify "should get file extension" <|
            sample_file.extension.should_equal ".txt"
            (File.new "this.is.a.silly.name.txt").extension.should_equal ".txt"
            (File.new "no_extension").extension.should_equal ""
            (File.new "file.").extension.should_equal ""

        Test.specify "should convert a file to absolute" <|
            abs = File.new "foo.txt" . absolute
            through_cwd = (File.current_directory / "foo.txt")
            abs.should_equal through_cwd

        Test.specify "should normalize file" <|
            f_1 = File.new "foo"
            f_2 = File.new "bar/../baz/../foo"
            f_2.normalize.should_equal f_1

        Test.specify "should allow reading a file byte by byte" <|
            f = enso_project.data / "short.txt"
            f.delete_if_exists
            f.exists.should_be_false
            "Cup".write f on_existing_file=Existing_File_Behavior.Overwrite
            f.with_input_stream stream->
                stream.read_byte.should_equal 67
                stream.read_byte.should_equal 117
                stream.read_byte.should_equal 112
                stream.read_byte.should_equal -1
            f.delete
            f.exists.should_be_false

        Test.specify "should handle exceptions when deleting a missing file" <|
            file = File.new "does_not_exist.txt"
            file.delete . should_fail_with File_Error.Not_Found

        if Platform.is_unix then
            Test.specify "should allow to check file permissions" <|
                f = enso_project.data / "transient" / "permissions.txt"
                f.delete_if_exists
                "foobar".write f

                Process.run "chmod" ["0777", f.absolute.path] . should_equal Exit_Code.Success
                rwx = [Permission.Read, Permission.Write, Permission.Execute]
                f.posix_permissions . should_equal <|
                    File_Permissions.Value rwx rwx rwx

                Process.run "chmod" ["0421", f.absolute.path] . should_equal Exit_Code.Success
                f.posix_permissions . should_equal <|
                    File_Permissions.Value [Permission.Read] [Permission.Write] [Permission.Execute]

                f.delete

    Test.group "read_bytes" <|
        Test.specify "should allow reading a file to byte vector" <|
            contents = sample_file.read_bytes
            contents.take (First 6) . should_equal [67, 117, 112, 99, 97, 107]

        Test.specify "should allow reading a file to byte vector via path" <|
            full_path = sample_file . path
            contents = File.new full_path . read_bytes
            contents.take (First 6) . should_equal [67, 117, 112, 99, 97, 107]

        Test.specify "should allow to read last n bytes from a file" <|
            file = enso_project.data / "transient" / "bytes.txt"
            data = [1, 0, 0, 1, 2, 100, 20]
            data.write_bytes file
            file.read_last_bytes 0 . should_equal []
            file.read_last_bytes 1 . should_equal [20]
            file.read_last_bytes 2 . should_equal [100, 20]
            file.read_last_bytes 5 . should_equal [0, 1, 2, 100, 20]
            file.read_last_bytes 1000 . should_equal data
            file.delete

        Test.specify "should handle exceptions when reading a non-existent file" <|
            file = File.new "does_not_exist.txt"
            file.read_bytes . should_fail_with File_Error.Not_Found
            non_existent_file.read_bytes . should_fail_with File_Error.Not_Found

        Test.specify "should open and read the file in one shot" <|
            path_name = sample_file.path
            contents = File.new path_name . read_bytes
            contents.take (First 6) . should_equal [67, 117, 112, 99, 97, 107]
            file = sample_file
            contents_2 = File.new file . read_bytes
            contents_2.take (First 6) . should_equal [67, 117, 112, 99, 97, 107]

    Test.group "read_text" <|
        Test.specify "should allow reading a UTF-8 file" <|
            contents = sample_file.read_text
            contents.should_start_with "Cupcake ipsum dolor sit amet."

        Test.specify "should allow reading a UTF-8 file via path" <|
            full_path = sample_file . path
            contents = Data.read_text_file full_path
            contents.should_start_with "Cupcake ipsum dolor sit amet."

        Test.specify "should allow reading a Windows file via path" <|
            contents = windows_file.read_text Encoding.windows_1252
            contents.should_equal "Hello World! $¢¤¥"

        Test.specify "should raise warnings when reading invalid characters" <|
            action = windows_file.read_text Encoding.ascii on_problems=_
            tester result = result.should_equal 'Hello World! $\uFFFD\uFFFD\uFFFD'
            problems = [Encoding_Error.Error "Encoding issues at 14, 15, 16."]
            Problems.test_problem_handling action problems tester

        Test.specify "should handle exceptions when reading a non-existent file" <|
            file = File.new "does_not_exist.txt"
            Data.read_text_file "does_not_exist.txt" . should_fail_with File_Error.Not_Found
            file.read_text . should_fail_with File_Error.Not_Found
            non_existent_file.read_text . should_fail_with File_Error.Not_Found

        Test.specify "should open and read the file in one shot" <|
            path_name = sample_file.path
            contents = Data.read_text_file path_name
            contents.should_start_with "Cupcake ipsum dolor sit amet."
            file = sample_file
            contents_2 = Data.read_text_file file
            contents_2.should_start_with "Cupcake ipsum dolor sit amet."

    Test.group "write operations" <|
        data = [32, 127, -128, 0]
        data_2 = [10, 15, 20, 30]

        transient = enso_project.data / "transient"
        Test.specify "should allow to writing bytes to a new file" <|
            f = transient / "new_file.dat"
            f.delete_if_exists
            f.exists.should_be_false
            data.write_bytes f
            f.exists.should_be_true
            f.read_bytes.should_equal data
            f.delete_if_exists

        Test.specify "should backup a file when overwriting with new bytes" <|
            f = transient / "work.txt"
            f.delete_if_exists
            f_bak = transient / "work.txt.bak"
            f_bak.delete_if_exists
            data.write_bytes f
            f.exists.should_be_true
            data_2.write_bytes f
            f.read_bytes.should_equal data_2
            f_bak.exists.should_be_true
            f.delete_if_exists
            f_bak.delete_if_exists

        Test.specify "should allow to overwriting a file with new bytes" <|
            f = transient / "work.txt"
            f.delete_if_exists
            f_bak = transient / "work.txt.bak"
            f_bak.delete_if_exists
            data.write_bytes f
            f.exists.should_be_true
            data_2.write_bytes f on_existing_file=Existing_File_Behavior.Overwrite
            f.read_bytes.should_equal data_2
            f_bak.exists.should_be_false
            f.delete_if_exists

        Test.specify "should allow appending bytes to a new file" <|
            f = transient / "new_file.dat"
            f.delete_if_exists
            f.exists.should_be_false
            data.write_bytes f
            data_2.write_bytes f on_existing_file=Existing_File_Behavior.Append . should_succeed
            f.read_bytes.should_equal (data + data_2)
            f.delete_if_exists

        Test.specify "should fail with Illegal_Argument_Error when trying to write invalid byte vector" <|
            f = transient / "work.txt"
            f.delete_if_exists
            f.exists.should_be_false
            [0, 1, 256].write_bytes f . should_fail_with Illegal_Argument_Error_Data
            [0, 1, Nothing].write_bytes f . should_fail_with Illegal_Argument_Error_Data

        Test.specify "should not change the file when trying to write an invalid byte vector" <|
            f = transient / "work.txt"
            f.delete_if_exists
            f_bak = transient / "work.txt.bak"
            f_bak.delete_if_exists
            data.write_bytes f
            [0, 1, 256].write_bytes f . should_fail_with Illegal_Argument_Error_Data
            f.read_bytes.should_equal data
            f_bak.exists.should_be_false
            [0, 1, 256].write_bytes f on_existing_file=Existing_File_Behavior.Overwrite . should_fail_with Illegal_Argument_Error_Data
            f.read_bytes.should_equal data
            [0, 1, 256].write_bytes f on_existing_file=Existing_File_Behavior.Append . should_fail_with Illegal_Argument_Error_Data
            f.read_bytes.should_equal data
            f.delete_if_exists

        Test.specify "should allow writing text to a new file" <|
            f = transient / "work.txt"
            f.delete_if_exists
            f.exists.should_be_false
            "line 1!".write f
            f.exists.should_be_true
            f.read_text.should_equal "line 1!"
            f.delete
            f.exists.should_be_false

        Test.specify "should allow appending text to a file" <|
            f = transient / "work.txt"
            f.delete_if_exists
            "line 1!".write f on_existing_file=Existing_File_Behavior.Append on_problems=Report_Error . should_succeed
            '\nline 2!'.write f on_existing_file=Existing_File_Behavior.Append on_problems=Report_Error . should_succeed
            f.read_text.should_equal 'line 1!\nline 2!'
            f.delete
            f.exists.should_be_false

        Test.specify "should allow to overwrite files" <|
            f = transient / "work.txt"
            f.delete_if_exists
            f.exists.should_be_false
            "line 1!".write f on_existing_file=Existing_File_Behavior.Overwrite on_problems=Report_Error . should_succeed . should_equal Nothing
            f.exists.should_be_true
            f.read_text.should_equal "line 1!"
            "line 2!".write f on_existing_file=Existing_File_Behavior.Overwrite on_problems=Report_Error . should_succeed . should_equal Nothing
            f.read_text.should_equal "line 2!"
            f.delete
            f.exists.should_be_false

        Test.specify "should fail if a file already exists, depending on the settings" <|
            f = transient / "work.txt"
            f.delete_if_exists
            f.exists.should_be_false
            "line 1!".write f on_existing_file=Existing_File_Behavior.Error on_problems=Report_Error . should_succeed . should_equal Nothing
            f.exists.should_be_true
            f.read_text.should_equal "line 1!"
            "line 2!".write f on_existing_file=Existing_File_Behavior.Error . should_fail_with File_Error.Already_Exists
            f.read_text.should_equal "line 1!"
            f.delete
            f.exists.should_be_false

        Test.specify "should create a backup when writing a file" <|
            f = transient / "work.txt"
            f.delete_if_exists
            f.exists.should_be_false
            "line 1!".write f on_problems=Report_Error . should_succeed . should_equal Nothing
            if f.exists.not then
                Test.fail "The file should have been created."
            f.read_text.should_equal "line 1!"

            bak = transient / "work.txt.bak"
            "backup content".write bak on_existing_file=Existing_File_Behavior.Overwrite

            n0 = transient / "work.txt.new"
            n1 = transient / "work.txt.new.1"
            n2 = transient / "work.txt.new.2"
            n3 = transient / "work.txt.new.3"
            n4 = transient / "work.txt.new.4"
            written_news = [n0, n1, n2, n4]
            written_news.each n->
                "new content".write n on_existing_file=Existing_File_Behavior.Overwrite
            n3.delete_if_exists

            "line 2!".write f on_problems=Report_Error . should_succeed . should_equal Nothing
            f.read_text.should_equal "line 2!"
            bak.read_text.should_equal "line 1!"
            if n3.exists then
                Test.fail "The temporary file should have been cleaned up."
            written_news.each n->
                n.read_text . should_equal "new content"
            [f, bak, n0, n1, n2, n4].each .delete

        Test.specify "should correctly handle failure of the write operation when working with the backup" <|
            f = transient / "work.txt"
            "OLD".write f on_existing_file=Existing_File_Behavior.Overwrite
            bak_file = transient / "work.txt.bak"
            new_file = transient / "work.txt.new"
            [bak_file, new_file].each .delete_if_exists

            result = Panic.catch Illegal_State_Error_Data handler=(caught_panic-> caught_panic.payload.message) <|
                Existing_File_Behavior.Backup.write f output_stream->
                    output_stream.write_bytes "foo".utf_8
                    Panic.throw (Illegal_State_Error_Data "baz")
                    output_stream.write_bytes "bar".utf_8
                Test.fail "Control flow should never get here, because the panic should have been propagated and handled."
            result.should_equal "baz"
            f.read_text . should_equal "OLD"
            if bak_file.exists then
                Test.fail "If the operation failed, we shouldn't have even created the backup."
            if new_file.exists then
                Test.fail "The temporary file should have been cleaned up."
            f.delete

            result2 = Panic.catch Illegal_State_Error_Data handler=(caught_panic-> caught_panic.payload.message) <|
                Existing_File_Behavior.Backup.write f output_stream->
                    output_stream.write_bytes "foo".utf_8
                    Panic.throw (Illegal_State_Error_Data "baz")
                    output_stream.write_bytes "bar".utf_8
                Test.fail "Control flow should never get here, because the panic should have been propagated and handled."
            result2.should_equal "baz"
            if f.exists.not then
                Test.fail "Since we were writing to the original destination, the partially written file should have been preserved even upon failure."
            f.read_text . should_equal "foo"
            if bak_file.exists then
                Test.fail "If the operation failed, we shouldn't have even created the backup."
            if new_file.exists then
                Test.fail "The temporary file should have been cleaned up."
            f.delete

            "OLD".write f on_existing_file=Existing_File_Behavior.Overwrite
            result3 = Existing_File_Behavior.Backup.write f output_stream->
                output_stream.write_bytes "foo".utf_8
                Error.throw (Illegal_State_Error_Data "HMM...")
            result3.should_fail_with Illegal_State_Error_Data
            result3.catch.message . should_equal "HMM..."
            f.read_text . should_equal "OLD"
            if bak_file.exists then
                Test.fail "If the operation failed, we shouldn't have even created the backup."
            if new_file.exists then
                Test.fail "The temporary file should have been cleaned up."
            f.delete

            result4 = Existing_File_Behavior.Backup.write f output_stream->
                output_stream.write_bytes "foo".utf_8
                Error.throw (Illegal_State_Error_Data "HMM...")
            result4.should_fail_with Illegal_State_Error_Data
            result4.catch.message . should_equal "HMM..."
            if f.exists.not then
                Test.fail "Since we were writing to the original destination, the partially written file should have been preserved even upon failure."
            f.read_text . should_equal "foo"
            if bak_file.exists then
                Test.fail "If the operation failed, we shouldn't have even created the backup."
            if new_file.exists then
                Test.fail "The temporary file should have been cleaned up."
            f.delete

    Test.group "folder operations" <|
        resolve files =
            base = enso_project.data
            files.map str->
                (base / str) . to_text

        Test.specify "should check if file is a directory" <|
            sample_file.is_directory.should_be_false
            enso_project.root.is_directory.should_be_true

        Test.specify "should list files in a directory" <|
            immediate = enso_project.data.list . map .to_text
            immediate.sort.should_equal (resolve ["books.json", "helloworld.txt", "sample.txt", "sample.xxx", "transient", "tree", "windows.log", "windows.txt"])

            filtered1 = enso_project.data.list name_filter="s[a-cw]mple.{t?t,md}" . map .to_text
            filtered1.should_equal (resolve ["sample.txt"])

            filtered2 = Data.list_directory enso_project.data name_filter="*re*" . map .to_text
            filtered2.should_equal (resolve ["tree"])

        Test.specify "should list files in a directory recursively" <|
            root = enso_project.data / "tree"
            resolve files = files.map str-> (root / str) . to_text

            all = root.list recursive=True . map .to_text
            all.sort.should_equal (resolve ["", "sample.csv", "sample.txt", "subdirectory", "subdirectory/a.txt", "subdirectory/nested", "subdirectory/nested/b.txt"])

            filtered1 = root.list name_filter="**.txt" recursive=True . map .to_text
            filtered1.sort.should_equal (resolve ["sample.txt", "subdirectory/a.txt", "subdirectory/nested/b.txt"])

            filtered2 = root.list name_filter="*/*/*" recursive=True . map .to_text
            filtered2.should_equal (resolve ["subdirectory/nested/b.txt"])

main = Test_Suite.run_main spec
