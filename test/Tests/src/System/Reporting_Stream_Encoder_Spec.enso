from Standard.Base import all
import Standard.Base.Error.Encoding_Error.Encoding_Error

polyglot java import org.enso.base.Encoding_Utils
polyglot java import java.nio.CharBuffer

from Standard.Test import Test, Test_Suite, Problems
import Standard.Test.Extensions

spec =
    Test.group "ReportingStreamEncoder" <|
        Test.specify "should allow writing a file codepoint by codepoint" <|
            f = enso_project.data / "transient" / "char-by-char.txt"
            f.delete_if_exists
            f.exists.should_be_false
            contents = 1.up_to 7 . map _->'CzeÅ›c\u0301 ðŸ˜ŽðŸš€ðŸš§!' . join '\n'
            f.with_output_stream [File_Access.Write, File_Access.Create_New] stream->
                stream.with_stream_encoder Encoding.utf_8 Problem_Behavior.Report_Error reporting_stream_encoder->
                    contents.char_vector.each char->
                        reporting_stream_encoder.write char
            f.read_text.should_equal contents

        Test.specify "should work correctly when writing chunks of varying sizes" <|
            f = enso_project.data / "transient" / "varying-utf16.txt"
            f.delete_if_exists
            f.exists.should_be_false
            encoding = Encoding.utf_16_be
            big = 1.up_to 7 . map _->'CzeÅ›c\u0301 ðŸ˜ŽðŸš€ðŸš§!' . join '\n'
            f.with_output_stream [File_Access.Write, File_Access.Create_New] stream->
                stream.with_stream_encoder encoding Problem_Behavior.Report_Error reporting_stream_encoder->
                    reporting_stream_encoder.write "A"
                    reporting_stream_encoder.write "Abc"
                    reporting_stream_encoder.write "Defghi"
                    reporting_stream_encoder.write 'O\u0301'
                    reporting_stream_encoder.write "X"
                    reporting_stream_encoder.write big
                    reporting_stream_encoder.write "Y"
                    reporting_stream_encoder.write "Å¹"

            contents = 'AAbcDefghiO\u0301X' + big + "YÅ¹"
            f.read_text encoding . should_equal contents

        Test.specify "should allow writing a Windows file" <|
            f = enso_project.data / "transient" / "windows.txt"
            encoding = Encoding.windows_1252
            contents = "Hello World! $Â¢Â¤Â¥"

            f.delete_if_exists
            f.with_output_stream [File_Access.Write, File_Access.Create_New] stream->
                stream.with_stream_encoder encoding Problem_Behavior.Report_Error reporting_stream_encoder->
                    reporting_stream_encoder.write contents

            f.read_text encoding . should_equal contents

        Test.specify "should raise warnings when writing characters that cannot be encoded and replace them with the Unicode replacement character or a question mark" <|
            f = enso_project.data / "transient" / "ascii.txt"
            encoding = Encoding.ascii
            contents = 'SÅ‚o\u0301wka!'
            f.delete_if_exists
            result = f.with_output_stream [File_Access.Write, File_Access.Create_New] stream->
                stream.with_stream_encoder encoding Problem_Behavior.Report_Warning reporting_stream_encoder->
                    reporting_stream_encoder.write contents
            result.should_succeed
            Problems.get_attached_warnings result . should_equal [Encoding_Error.Error "Encoding issues at codepoints 1, 3."]
            f.read_text encoding . should_equal "S?o?wka!"

            f.delete_if_exists
            result_2 = f.with_output_stream [File_Access.Write, File_Access.Create_New] stream->
                stream.with_stream_encoder encoding Problem_Behavior.Report_Warning reporting_stream_encoder->
                    reporting_stream_encoder.write "ABC"
                    reporting_stream_encoder.write "Ä…"
                    reporting_stream_encoder.write "foo"
                    reporting_stream_encoder.write " -ðŸš§- "
                    reporting_stream_encoder.write "bar"

            result_2.should_succeed
            Problems.get_attached_warnings result_2 . should_equal [Encoding_Error.Error "Encoding issues at codepoints 3, 9."]
            f.read_text encoding . should_equal "ABC?foo -?- bar"

        Test.specify "should work correctly if no data is written to it" <|
            f = enso_project.data / "transient" / "empty.txt"
            encoding = Encoding.ascii
            f.delete_if_exists
            result = f.with_output_stream [File_Access.Write, File_Access.Create_New] stream->
                stream.with_stream_encoder encoding Problem_Behavior.Report_Error _->Nothing
            result.should_succeed
            f.read_text encoding . should_equal ""

main = Test_Suite.run_main spec
