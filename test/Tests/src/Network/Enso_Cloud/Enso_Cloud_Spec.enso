from Standard.Base import all
import Standard.Base.Data.Enso_Cloud.Utils as Cloud_Utils
import Standard.Base.Errors.Common.No_Such_Conversion
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Network.HTTP.HTTP_Error.HTTP_Error

from Standard.Test import Test, Test_Suite
import Standard.Test.Test_Environment
import Standard.Test.Extensions

import project.Network.Enso_Cloud.Cloud_Tests_Setup.Cloud_Tests_Setup

## To run this test locally:
   $ sbt 'http-test-helper/run localhost 8080'
   $ export ENSO_HTTP_TEST_HTTPBIN_URL=http://localhost:8080/
spec setup:Cloud_Tests_Setup =
    setup.with_prepared_environment <|
        Test.group "Enso Cloud Basic Utils" pending=setup.pending <|
            Test.specify "will report Not_Logged_In if no credentials file is found" <|
                non_existent_file = (enso_project.data / "nonexistent-file") . absolute . normalize
                non_existent_file.exists.should_be_false

                Test_Environment.unsafe_with_environment_override "ENSO_CLOUD_CREDENTIALS_FILE" non_existent_file.path <|
                    # This test has to run before any other Cloud access, otherwise the token may already be cached.
                    Cloud_Utils.authorization_header.should_fail_with Cloud_Utils.Not_Logged_In

            Test.specify "should be able to get the cloud URL from environment" <|
                api_url = Cloud_Utils.cloud_root_uri
                api_url.should_equal setup.api_url.to_text

            Test.specify "should be able to read the authorization token" pending=setup.mock_only_pending <|
                Cloud_Utils.authorization_header.to_display_text.should_equal "Authorization: Bearer "+Cloud_Tests_Setup.test_token

        Test.group "Enso_User - offline logic tests" <|
            Test.specify "is correctly parsed from JSON" <|
                json = Json.parse """
                    {
                        "id": "organization-27xJM00p8jWoL2qByTo6tQfciWC",
                        "name": "Parsed user",
                        "email": "enso-parse-test@example.com",
                        "isEnabled": true,
                        "rootDirectoryId": "directory-27xJM00p8jWoL2qByTo6tQfciWC"
                    }
                parsed_user = Enso_User.from json
                parsed_user.id.should_equal "organization-27xJM00p8jWoL2qByTo6tQfciWC"
                parsed_user.name.should_equal "Parsed user"
                parsed_user.email.should_equal "enso-parse-test@example.com"
                parsed_user.is_enabled.should_be_true
                parsed_user.home . should_be_a Enso_File
                parsed_user.home.is_directory.should_be_true

                invalid_json = Json.parse "{}"
                Enso_User.from invalid_json . should_fail_with Illegal_Argument
                Test.expect_panic No_Such_Conversion (Enso_User.from (Json.parse "[]"))

        Test.group "Enso_User - local mock integration tests" <|
            # These tests should be kept in sync with tools/http-test-helper/src/main/java/org/enso/shttp/cloud_mock/UsersHandler.java
            Test.specify "current user can be fetched from mock API" pending=setup.mock_only_pending <|
                current = Enso_User.current
                current.id.should_equal "organization-27xJM00p8jWoL2qByTo6tQfciWC"
                current.name.should_equal "My test User 1"
                current.email.should_equal "enso-test-user-1@example.com"
                current.is_enabled.should_be_true

                # TODO separate Enso_File tests could test that this is a valid directory
                home = current.home
                home . should_be_a Enso_File
                home.is_directory.should_be_true

            Test.specify "user list can be fetched from mock API" pending=setup.mock_only_pending <|
                users = Enso_User.list

                users.length.should_equal 2
                users.at 0 . name . should_equal "My test User 1"
                users.at 1 . name . should_equal "My test User 2"
                users.at 1 . is_enabled . should_be_false

            Test.specify "will fail if the user is not logged in" <|
                non_existent_file = (enso_project.data / "nonexistent-file") . absolute . normalize
                non_existent_file.exists.should_be_false
                r = Test_Environment.unsafe_with_environment_override "ENSO_CLOUD_CREDENTIALS_FILE" non_existent_file.path <|
                    Cloud_Tests_Setup.reset_token
                    Enso_User.current
                r.should_fail_with Cloud_Utils.Not_Logged_In

            Test.specify "will fail if the token is invalid" pending=setup.pending <|
                invalid_token_file = File.create_temporary_file "enso-test-credentials" "-invalid.txt"
                "invalid-token".write invalid_token_file . should_succeed
                Cloud_Tests_Setup.reset_token
                r = Test_Environment.unsafe_with_environment_override "ENSO_CLOUD_CREDENTIALS_FILE" invalid_token_file.absolute.normalize.path <|
                    Enso_User.current
                r.should_fail_with HTTP_Error
                r.catch.should_be_a HTTP_Error.Status_Error
                [401, 403].should_contain r.catch.status_code.code

            # Ensure the token is reset after the last test, so that any other tests will again use the correct one.
            Cloud_Tests_Setup.reset_token

main = Test_Suite.run_main (spec Cloud_Tests_Setup.prepare)
