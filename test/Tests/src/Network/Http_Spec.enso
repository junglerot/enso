from Standard.Base import all
import Standard.Base.Error.Common.Syntax_Error

import Standard.Base.Network.HTTP.Form.Form
import Standard.Base.Network.HTTP.Header.Header
import Standard.Base.Network.HTTP.Request.Request
import Standard.Base.Network.HTTP.Request_Body.Request_Body
import Standard.Base.Network.HTTP.Request_Error
import Standard.Base.Network.Proxy.Proxy

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

polyglot java import java.lang.System

spec =
    base_url = System.getenv "ENSO_HTTP_TEST_HTTPBIN_URL"
    pending = if base_url != Nothing then Nothing else
        "The HTTP tests only run when the `ENSO_HTTP_TEST_HTTPBIN_URL` environment variable is set to URL of the httpbin server"

    Test.group "HTTP" pending=pending <|
        # httpbin is picky about slashes in URL path. We need exactly one at the
        # beginning of path. Otherwise, POST request with double slash would
        # fail with error 405.
        base_url_with_slash = if base_url.ends_with "/" then base_url else base_url + "/"
        url_get = base_url_with_slash + "get"
        url_post = base_url_with_slash + "post"
        Test.specify "should create HTTP client with timeout setting" <|
            http = HTTP.new (timeout = (Duration.new seconds=30))
            http.timeout.should_equal (Duration.new seconds=30)
        Test.specify "should create HTTP client with follow_redirects setting" <|
            http = HTTP.new (follow_redirects = False)
            http.follow_redirects.should_equal False
        Test.specify "should create HTTP client with proxy setting" <|
            proxy_setting = Proxy.Address "example.com" 80
            http = HTTP.new (proxy = proxy_setting)
            http.proxy.should_equal proxy_setting
        Test.specify "should create HTTP client with version setting" <|
            version_setting = HTTP_Version.HTTP_2
            http = HTTP.new (version = version_setting)
            http.version.should_equal version_setting
        Test.specify "should throw error when requesting invalid URI" <|
            HTTP.new.get "not a uri" . should_fail_with Syntax_Error.Error

        Test.specify "should send Get request using fetch" <|
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Content-Length": "0",
                    "User-Agent": "Java-http-client/11.0.18"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "args": {}
                }
            res = HTTP.new.get url_get
            res.code.should_equal HTTP_Status_Code.ok
            res.body.parse_json.should_equal expected_response
        Test.specify "should send Get request using module method" <|
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Content-Length": "0",
                    "User-Agent": "Java-http-client/11.0.18"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "args": {}
                }
            res = HTTP.new.get url_get
            res.code.should_equal HTTP_Status_Code.ok
            res.body.parse_json.should_equal expected_response

        Test.specify "should fetch the body of a Get request" <|
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Content-Length": "0",
                    "User-Agent": "Java-http-client/11.0.18"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "args": {}
                }
            res = HTTP.fetch url_get
            res.parse_json.should_equal expected_response
        Test.specify "should return error if the fetch method fails" <|
            HTTP.fetch "http://undefined_host" . should_fail_with Request_Error.Error

        Test.specify "should send Head request" <|
            res = HTTP.new.head url_get
            res.code.should_equal HTTP_Status_Code.ok
            res.body.to_text.should_equal ''

        Test.specify "should Post empty body" <|
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Content-Length": "0",
                    "User-Agent": "Java-http-client/11.0.18"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "args": {},
                  "data": "",
                  "files": null,
                  "form": null,
                  "json": null
                }
            body_empty = Request_Body.Empty
            res = HTTP.new.post url_post body_empty
            res.code.should_equal HTTP_Status_Code.ok
            res.body.parse_json.should_equal expected_response
        Test.specify "should Post empty body using module method" <|
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Content-Length": "0",
                    "User-Agent": "Java-http-client/11.0.18"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "args": {},
                  "data": "",
                  "files": null,
                  "form": null,
                  "json": null
                }
            body_empty = Request_Body.Empty
            res = HTTP.new.post url_post body_empty
            res.code.should_equal HTTP_Status_Code.ok
            res.body.parse_json.should_equal expected_response
        Test.specify "should Post text body" <|
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Content-Length": "12",
                    "Content-Type": "text/plain",
                    "User-Agent": "Java-http-client/11.0.18"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "args": {},
                  "data": "Hello World!",
                  "files": null,
                  "form": null,
                  "json": null
                }
            body_text = Request_Body.Text "Hello World!"
            res = HTTP.new.post url_post body_text
            res.code.should_equal HTTP_Status_Code.ok
            res.body.parse_json.should_equal expected_response
        Test.specify "should Post form text" <|
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Content-Length": "7",
                    "Content-Type": "application/x-www-form-urlencoded",
                    "User-Agent": "Java-http-client/11.0.18"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "args": {},
                  "data": "key=val",
                  "files": null,
                  "form": null,
                  "json": null
                }
            form_parts = [Form.text_field "key" "val"]
            res = HTTP.new.post_form url_post form_parts
            res.code.should_equal HTTP_Status_Code.ok
            res.body.parse_json.should_equal expected_response
        Test.specify "should Post form text using module method" <|
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Content-Length": "7",
                    "Content-Type": "application/x-www-form-urlencoded",
                    "User-Agent": "Java-http-client/11.0.18"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "args": {},
                  "data": "key=val",
                  "files": null,
                  "form": null,
                  "json": null
                }
            form_parts = [Form.text_field "key" "val"]
            res = HTTP.new.post_form url_post form_parts
            res.code.should_equal HTTP_Status_Code.ok
            res.body.parse_json.should_equal expected_response
        Test.specify "should Post form file" <|
            test_file = enso_project.data / "sample.txt"
            form_parts = [Form.text_field "key" "val", Form.file_field "sample" test_file]
            res = HTTP.new.post_form url_post form_parts
            res.code.should_equal HTTP_Status_Code.ok
        Test.specify "should Post form multipart" <|
            test_file = enso_project.data / "sample.txt"
            form_parts = [Form.text_field "key" "val", Form.file_field "sample" test_file]
            res = HTTP.new.post_form url_post form_parts [Header.multipart_form_data]
            res.code.should_equal HTTP_Status_Code.ok
        Test.specify "should Post Json" <|
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Content-Length": "13",
                    "Content-Type": "application/json",
                    "User-Agent": "Java-http-client/11.0.18"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "args": {},
                  "data": "{\\"key\\":\\"val\\"}",
                  "files": null,
                  "form": null,
                  "json": {
                    "key": "val"
                  }
                }
            json = '{"key":"val"}'
            res = HTTP.new.post_json url_post json
            res.code.should_equal HTTP_Status_Code.ok
            res.body.parse_json.should_equal expected_response
        Test.specify "should Post Json using module method" <|
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Content-Length": "13",
                    "Content-Type": "application/json",
                    "User-Agent": "Java-http-client/11.0.18"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "args": {},
                  "data": "{\\"key\\":\\"val\\"}",
                  "files": null,
                  "form": null,
                  "json": {
                    "key": "val"
                  }
                }
            json = '{"key":"val"}'
            res = HTTP.new.post_json url_post json
            res.code.should_equal HTTP_Status_Code.ok
            res.body.parse_json.should_equal expected_response
        Test.specify "should Post binary" <|
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Content-Length": "12",
                    "Content-Type": "application/octet-stream",
                    "User-Agent": "Java-http-client/11.0.18"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "args": {},
                  "data": "Hello World!",
                  "files": null,
                  "form": null,
                  "json": null
                }
            body_bytes = Request_Body.Bytes "Hello World!".utf_8
            res = HTTP.new.post url_post body_bytes
            res.code.should_equal HTTP_Status_Code.ok
            res.body.parse_json.should_equal expected_response

        Test.specify "should create and send Get request" <|
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Content-Length": "0",
                    "User-Agent": "Java-http-client/11.0.18"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "args": {}
                }
            req = Request.new HTTP_Method.Get url_get
            res = HTTP.new.request req
            res.code.should_equal HTTP_Status_Code.ok
            res.body.parse_json.should_equal expected_response
        Test.specify "should create and send Post request with json body" <|
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Content-Length": "13",
                    "Content-Type": "application/json",
                    "User-Agent": "Java-http-client/11.0.18"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "args": {},
                  "data": "{\\"key\\":\\"val\\"}",
                  "files": null,
                  "form": null,
                  "json": {
                    "key": "val"
                  }
                }
            json_body = '{"key":"val"}'
            req = Request.new HTTP_Method.Post url_post
            req_with_body = req.with_json json_body
            res = HTTP.new.request req_with_body
            res.code.should_equal HTTP_Status_Code.ok
            res.body.parse_json.should_equal expected_response
        Test.specify "should create and send Post request with json text" <|
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Content-Length": "16",
                    "Content-Type": "application/json",
                    "User-Agent": "Java-http-client/11.0.18"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "args": {},
                  "data": "{ \\"key\\": \\"val\\" }",
                  "files": null,
                  "form": null,
                  "json": {
                    "key": "val"
                  }
                }
            json_text = '''
                { "key": "val" }
            req = Request.new HTTP_Method.Post url_post
            req_with_body = req.with_json json_text
            res = HTTP.new.request req_with_body
            res.code.should_equal HTTP_Status_Code.ok
            res.body.parse_json.should_equal expected_response

main = Test_Suite.run_main spec
