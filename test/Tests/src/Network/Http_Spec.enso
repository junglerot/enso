from Standard.Base import all

import Standard.Base.Errors.Common.Forbidden_Operation
import Standard.Base.Errors.Common.Syntax_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Network.HTTP.Request.Request
import Standard.Base.Network.HTTP.Request_Body.Request_Body
import Standard.Base.Network.HTTP.Request_Error
import Standard.Base.Network.Proxy.Proxy
import Standard.Base.Runtime.Context
from Standard.Base.Network.HTTP import resolve_headers

import Standard.Test.Extensions
from Standard.Test import Test, Test_Suite
from Standard.Test.Execution_Context_Helpers import run_with_and_without_output

polyglot java import java.lang.System as Java_System

type Test_Type
    Aaa (s:Text)
    Bbb (i:Integer)

type Bad_To_Json
    Aaa (s:Text)
    to_json self = Error.throw (Illegal_Argument.Error "test")

spec =
    ## To run this test locally:
       $ sbt 'simple-httpbin/run localhost 8080'
       $ export ENSO_HTTP_TEST_HTTPBIN_URL=http://localhost:8080/
    base_url = Java_System.getenv "ENSO_HTTP_TEST_HTTPBIN_URL"
    pending_has_url = if base_url != Nothing then Nothing else
        "The HTTP tests only run when the `ENSO_HTTP_TEST_HTTPBIN_URL` environment variable is set to URL of the httpbin server"

    Test.group "HTTP_Method parse" <|
        Test.specify "should be able to parse a string value into a method" <|
            "GET" . to HTTP_Method . should_equal (HTTP_Method.Get)
            "POST" . to HTTP_Method . should_equal (HTTP_Method.Post)
            "PUT" . to HTTP_Method . should_equal (HTTP_Method.Put)
            "PATCH" . to HTTP_Method . should_equal (HTTP_Method.Patch)

        Test.specify "should be case insensitive" <|
            "get" . to HTTP_Method . should_equal (HTTP_Method.Get)
            "pOst" . to HTTP_Method . should_equal (HTTP_Method.Post)
            "puT" . to HTTP_Method . should_equal (HTTP_Method.Put)
            "PATCH" . to HTTP_Method . should_equal (HTTP_Method.Patch)

        Test.specify "should make a custom method" <|
            "CUSTOM" . to HTTP_Method . should_equal (HTTP_Method.Custom "CUSTOM")

    Test.group "HTTP client" pending=pending_has_url <|
        Test.specify "should create HTTP client with timeout setting" <|
            http = HTTP.new (timeout = (Duration.new seconds=30))
            http.timeout.should_equal (Duration.new seconds=30)

        Test.specify "should create HTTP client with follow_redirects setting" <|
            http = HTTP.new (follow_redirects = False)
            http.follow_redirects.should_equal False

        Test.specify "should create HTTP client with proxy setting" <|
            proxy_setting = Proxy.Address "example.com" 80
            http = HTTP.new (proxy = proxy_setting)
            http.proxy.should_equal proxy_setting

        Test.specify "should create HTTP client with version setting" <|
            version_setting = HTTP_Version.HTTP_2
            http = HTTP.new (version = version_setting)
            http.version.should_equal version_setting

    Test.group "fetch" pending=pending_has_url <|
        base_url_with_slash = if base_url.ends_with "/" then base_url else base_url + "/"
        url_get = base_url_with_slash + "get"
        url_head = base_url_with_slash + "head"
        url_options = base_url_with_slash + "options"

        Test.specify "Can perform a GET with a JSON response" <|
            response = Data.fetch url_get
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Length": "0"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "method": "GET",
                  "args": {}
                }
            response . should_equal expected_response

            uri_response = url_get.to_uri.fetch
            uri_response . should_equal expected_response

        Test.specify "Can perform a HEAD" <|
            response = Data.fetch url_head method=HTTP_Method.Head
            response.code.code . should_equal 200
            response.decode_as_text . should_equal ''

            uri_response = url_head.to_uri.fetch method=HTTP_Method.Head
            uri_response.code.code . should_equal 200
            uri_response.decode_as_text . should_equal ''

        Test.specify "Can perform an OPTIONS" <|
            response = Data.fetch url_options method=HTTP_Method.Options
            response.code.code . should_equal 200
            response.decode_as_text . should_equal ''

            uri_response = url_head.to_uri.fetch method=HTTP_Method.Options
            uri_response.code.code . should_equal 200
            uri_response.decode_as_text . should_equal ''

        Test.specify "Can perform auto-parse" <|
            response = Data.fetch url_get
            response.at "headers" . at "Content-Length" . should_equal "0"

        Test.specify "Can skip auto-parse" <|
            response = Data.fetch url_get try_auto_parse_response=False
            response.code.code . should_equal 200
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Length": "0"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "method": "GET",
                  "args": {}
                }
            response.decode_as_json . should_equal expected_response

            uri_response = url_get.to_uri.fetch try_auto_parse_response=False
            uri_response.code.code . should_equal 200
            uri_response.decode_as_json . should_equal expected_response

        Test.specify "Can still perform request when output context is disabled" <|
            run_with_and_without_output <|
                Data.fetch url_get try_auto_parse_response=False . code . code . should_equal 200
                Data.fetch url_get method=HTTP_Method.Head try_auto_parse_response=False . code . code . should_equal 200
                Data.fetch url_get method=HTTP_Method.Options try_auto_parse_response=False . code . code . should_equal 200

        Test.specify "Unsupported method" <|
            err = Data.fetch url_get method=HTTP_Method.Post
            err.catch.should_equal (Illegal_Argument.Error "Unsupported method Post")

        Test.specify "Cannot DELETE through fetch" <|
            err = Data.fetch url_get method=HTTP_Method.Delete
            err.catch.should_equal (Illegal_Argument.Error "Unsupported method Delete")

        Test.specify "unknown host" <|
            Data.fetch "http://undefined_host.invalid" . should_fail_with Request_Error

        Test.specify "Fails on a bad URL scheme" <|
            Data.fetch "zxcv://bad.scheme" . should_fail_with Request_Error
            Data.fetch "" . should_fail_with Request_Error

    Test.group "post" pending=pending_has_url <|
        base_url_with_slash = if base_url.ends_with "/" then base_url else base_url + "/"
        url_post = base_url_with_slash + "post"
        url_put = base_url_with_slash + "put"
        url_patch = base_url_with_slash + "patch"
        url_delete = base_url_with_slash + "delete"

        Test.specify "Can perform a Request_Body.Text POST" <|
            response = Data.post url_post (Request_Body.Text "hello world")
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "text/plain; charset=UTF-8",
                    "Content-Length": "11"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "method": "POST",
                  "form": null,
                  "files": null,
                  "data": "hello world",
                  "args": {}
                }
            response . should_equal expected_response

            url_response = url_post.to_uri.post (Request_Body.Text "hello world")
            url_response . should_equal expected_response

        Test.specify "Can perform a Request_Body.Json JSON POST" <|
            json = Json.parse '{"a": "asdf", "b": 123}'
            response = Data.post url_post (Request_Body.Json json)
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "application/json",
                    "Content-Length": "20"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "method": "POST",
                  "form": null,
                  "files": null,
                  "data": "{\\"a\\":\\"asdf\\",\\"b\\":123}",
                  "args": {}
                }
            response . should_equal expected_response

        Test.specify "Can perform a JSON POST" <|
            json = Json.parse '{"a": "asdf", "b": 123}'
            response = Data.post url_post json
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "application/json",
                    "Content-Length": "20"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "method": "POST",
                  "form": null,
                  "files": null,
                  "data": "{\\"a\\":\\"asdf\\",\\"b\\":123}",
                  "args": {}
                }
            response . should_equal expected_response

        Test.specify "Can perform an object Request_Body.Json POST" <|
            response = Data.post url_post (Request_Body.Json (Test_Type.Aaa "abc"))
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "application/json",
                    "Content-Length": "50"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "method": "POST",
                  "form": null,
                  "files": null,
                  "data": "{\\"type\\":\\"Test_Type\\",\\"constructor\\":\\"Aaa\\",\\"s\\":\\"abc\\"}",
                  "args": {}
                }
            response . should_equal expected_response

        Test.specify "Can perform an object JSON POST" <|
            response = Data.post url_post (Test_Type.Bbb 12)
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "application/json",
                    "Content-Length": "47"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "method": "POST",
                  "form": null,
                  "files": null,
                  "data": "{\\"type\\":\\"Test_Type\\",\\"constructor\\":\\"Bbb\\",\\"i\\":12}",
                  "args": {}
                }
            response . should_equal expected_response

        Test.specify "can handle a bad .to_json" <|
            Data.post url_post (Bad_To_Json.Aaa "abcd") . should_fail_with Illegal_Argument

        Test.specify "Can perform a Text POST with explicit encoding" <|
            body = Request_Body.Text 'Hello World!' encoding=Encoding.utf_16_le
            response = Data.post url_post body
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "text/plain; charset=UTF-16LE",
                    "Content-Length": "24"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "method": "POST",
                  "form": null,
                  "files": null,
                  "data": "Hello World!",
                  "args": {}
                }
            response . should_equal expected_response

        Test.specify "Can perform a Text POST with explicit content type" <|
            response = Data.post url_post (Request_Body.Text 'a,b,c\n' content_type="text/csv")
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "text/csv; charset=UTF-8",
                    "Content-Length": "6"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "method": "POST",
                  "form": null,
                  "files": null,
                  "data": "a,b,c\\n",
                  "args": {}
                }
            response . should_equal expected_response

        Test.specify "Can perform a File POST" <|
            test_file = enso_project.data / "sample.txt"
            response = Data.post url_post (Request_Body.Binary test_file)
            response.at "headers" . at "Content-Type" . should_equal "application/octet-stream"
            expected_text = test_file.read_text
            response . at "data" . should_equal expected_text

        Test.specify "Can perform a binary File POST" <|
            test_file = enso_project.data / "sample.png"
            response = Data.post url_post (Request_Body.Binary test_file)
            response.at "headers" . at "Content-Type" . should_equal "application/octet-stream"
            response.at "data" . should_start_with '\uFFFDPNG'

        Test.specify "Can perform a url-encoded form POST" <|
            test_file = enso_project.data / "sample.txt"
            form_data = Map.from_vector [["key", "val"], ["a_file", test_file]]
            response = Data.post url_post (Request_Body.Form_Data form_data url_encoded=True)
            response.at "headers" . at "Content-Type" . should_equal "application/x-www-form-urlencoded"
            response.at "data" . replace "%0D%" "%" . should_equal 'key=val&a_file=Cupcake+ipsum+dolor+sit+amet.+Caramels+tootsie+roll+cake+ice+cream.+Carrot+cake+apple+pie+gingerbread+chocolate+cake+pudding+tart+souffl%C3%A9+jelly+beans+gummies.%0A%0ATootsie+roll+chupa+chups+muffin+croissant+fruitcake+jujubes+danish+cotton+candy+danish.+Oat+cake+chocolate+fruitcake+halvah+icing+oat+cake+toffee+powder.+Pastry+drag%C3%A9e+croissant.+Ice+cream+candy+canes+dessert+muffin+sugar+plum+tart+jujubes.%0A'

        Test.specify "Can perform a multipart form POST" <|
            test_file = enso_project.data / "sample.png"
            form_data = Map.from_vector [["key", "val"], ["a_file", test_file]]
            response = Data.post url_post (Request_Body.Form_Data form_data)
            response_json = response
            response_json.at "headers" . at "Content-Type" . should_start_with "multipart/form-data; boundary="
            response_json.at "data" . is_empty . should_be_false

        Test.specify "Can perform a File POST with auto-conversion" <|
            test_file = enso_project.data / "sample.txt"
            response = Data.post url_post test_file
            response.at "headers" . at "Content-Type" . should_equal "application/octet-stream"
            expected_text = test_file.read_text
            response . at "data" . should_equal expected_text

        Test.specify "Can perform a Text POST with auto-conversion" <|
            response = Data.post url_post "hello world"
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "text/plain; charset=UTF-8",
                    "Content-Length": "11"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "method": "POST",
                  "form": null,
                  "files": null,
                  "data": "hello world",
                  "args": {}
                }
            response . should_equal expected_response

        Test.specify "Can perform a Request_Body.Text PUT" <|
            response = Data.post url_put (Request_Body.Text "hello world") method=HTTP_Method.Put
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "text/plain; charset=UTF-8",
                    "Content-Length": "11"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "method": "PUT",
                  "form": null,
                  "files": null,
                  "data": "hello world",
                  "args": {}
                }
            response . should_equal expected_response

        Test.specify "Can perform a Request_Body.Text PATCH" <|
            response = Data.post url_patch (Request_Body.Text "hello world" content_type="application/diff") method=HTTP_Method.Patch
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "application/diff; charset=UTF-8",
                    "Content-Length": "11"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "method": "PATCH",
                  "form": null,
                  "files": null,
                  "data": "hello world",
                  "args": {}
                }
            response . should_equal expected_response

        Test.specify "Can perform a DELETE" <|
            response = Data.post url_delete method=HTTP_Method.Delete
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Length": "0"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "method": "DELETE",
                  "form": null,
                  "files": null,
                  "data": "",
                  "args": {}
                }
            response . should_equal expected_response

        Test.specify "Can skip auto-parse" <|
            response = Data.post url_post (Request_Body.Text "hello world") try_auto_parse_response=False
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "text/plain; charset=UTF-8",
                    "Content-Length": "11"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "method": "POST",
                  "form": null,
                  "files": null,
                  "data": "hello world",
                  "args": {}
                }
            response.decode_as_json . should_equal expected_response

        Test.specify "Can send a custom header" <|
            response = Data.post url_post (Request_Body.Text "hello world") headers=[Header.new "Custom" "asdf"]
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "text/plain; charset=UTF-8",
                    "Content-Length": "11",
                    "Custom": "asdf"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "method": "POST",
                  "form": null,
                  "files": null,
                  "data": "hello world",
                  "args": {}
                }
            response . should_equal expected_response

        Test.specify "Cannot perform POST when output context is disabled" <|
            Context.Output.with_disabled <|
                Data.post url_post (Request_Body.Text "hello world") . should_fail_with Forbidden_Operation

        Test.specify "Cannot perform PATCH/PUT/DELETE when output context is disabled" <|
            Context.Output.with_disabled <|
                Data.post url_post (Request_Body.Text "hello world") . should_fail_with Forbidden_Operation
                Data.post url_put (Request_Body.Text "hello world") method=HTTP_Method.Put . should_fail_with Forbidden_Operation
                Data.post url_patch (Request_Body.Text "hello world") method=HTTP_Method.Patch . should_fail_with Forbidden_Operation
                Data.post url_delete method=HTTP_Method.Delete . should_fail_with Forbidden_Operation

        Test.specify "Unsupported method" <|
            err = Data.post url_post (Request_Body.Text "hello world") method=HTTP_Method.Get
            err.catch.should_equal (Illegal_Argument.Error "Unsupported method Get")

        Test.specify "unknown host" <|
            Data.post "http://undefined_host.invalid" (Request_Body.Text "hello world") . should_fail_with Request_Error

        Test.specify "Nonexistent file" <|
            test_file = enso_project.data / "does_not_exist.txt"
            Data.post url_post (Request_Body.Binary test_file) . should_fail_with Request_Error

    Test.group "Headers" pending=pending_has_url <|
        base_url_with_slash = if base_url.ends_with "/" then base_url else base_url + "/"
        url_post = base_url_with_slash + "post"

        Test.specify "Content-type in the body is respected" <|
            response = Data.post url_post (Request_Body.Text '{"a": "asdf", "b": 123}' content_type="application/json")
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "application/json; charset=UTF-8",
                    "Content-Length": "23"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "method": "POST",
                  "form": null,
                  "files": null,
                  "data": "{\\"a\\": \\"asdf\\", \\"b\\": 123}",
                  "args": {}
                }
            response . should_equal expected_response

        Test.specify "Content type in the header list is respected" <|
            response = Data.post url_post (Request_Body.Text '{"a": "asdf", "b": 123}') headers=[Header.content_type "application/json"]
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "application/json",
                    "Content-Length": "23"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "method": "POST",
                  "form": null,
                  "files": null,
                  "data": "{\\"a\\": \\"asdf\\", \\"b\\": 123}",
                  "args": {}
                }
            response . should_equal expected_response

        Test.specify "Multiple content types in the header list are respected" <|
            response = Data.post url_post (Request_Body.Text '{"a": "asdf", "b": 123}') headers=[Header.content_type "application/json", Header.content_type "text/plain"]
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "application/json",
                    "Content-Length": "23"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "method": "POST",
                  "form": null,
                  "files": null,
                  "data": "{\\"a\\": \\"asdf\\", \\"b\\": 123}",
                  "args": {}
                }
            response . should_equal expected_response

        Test.specify "Unspecified content type defaults to text/plain" <|
            response = Data.post url_post (Request_Body.Text '{"a": "asdf", "b": 123}')
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "text/plain; charset=UTF-8",
                    "Content-Length": "23"
                  },
                  "origin": "127.0.0.1",
                  "url": "",
                  "method": "POST",
                  "form": null,
                  "files": null,
                  "data": "{\\"a\\": \\"asdf\\", \\"b\\": 123}",
                  "args": {}
                }
            response . should_equal expected_response

        Test.specify "Cannot specify content type in both body and headers" <|
            Data.post url_post (Request_Body.Text "hello world" content_type="text/plain") headers=[Header.content_type "application/json"] . should_fail_with Illegal_Argument

        Test.specify "Cannot specify content type (implicitly via explicit text encoding) in both body and headers" <|
            Data.post url_post (Request_Body.Text "hello world" encoding=Encoding.utf_8) headers=[Header.content_type "application/json"] . should_fail_with Illegal_Argument

    Test.group "Header resolution" <|
        Test.specify "Default content type and encoding" <|
            expected = [Header.content_type "text/plain; charset=UTF-8"]
            resolve_headers (Request.new HTTP_Method.Get "" [] (Request_Body.Text "")) . should_contain_the_same_elements_as expected

        Test.specify "Content type specified in body" <|
            expected = [Header.content_type "application/json; charset=UTF-8"]
            resolve_headers (Request.new HTTP_Method.Get "" [] (Request_Body.Text "" content_type="application/json")) . should_contain_the_same_elements_as expected

        Test.specify "Content type specified in header list" <|
            expected = [Header.content_type "application/json"]
            resolve_headers (Request.new HTTP_Method.Get "" [Header.content_type "application/json"] (Request_Body.Text "")) . should_contain_the_same_elements_as expected

        Test.specify "Text encoding specified in body" <|
            expected = [Header.content_type "text/plain; charset=UTF-16LE"]
            resolve_headers (Request.new HTTP_Method.Get "" [] (Request_Body.Text "" encoding=Encoding.utf_16_le)) . should_contain_the_same_elements_as expected

        Test.specify "Can't specify content type in both places" <|
            resolve_headers (Request.new HTTP_Method.Get "" [Header.content_type "application/json"] (Request_Body.Text "" content_type="text/plain")) . should_fail_with Illegal_Argument

        Test.specify "Custom header" <|
            expected = [Header.new "some" "header", Header.content_type "application/json; charset=UTF-8"]
            resolve_headers (Request.new HTTP_Method.Get "" [Header.new "some" "header"] (Request_Body.Text "" content_type="application/json")) . should_contain_the_same_elements_as expected

        Test.specify "Multiple content types in header list are ok" <|
            expected = [Header.content_type "application/json", Header.content_type "text/plain"]
            resolve_headers (Request.new HTTP_Method.Get "" [Header.content_type "application/json", Header.content_type "text/plain"] (Request_Body.Text "")) . should_contain_the_same_elements_as expected

main = Test_Suite.run_main spec
