from Standard.Base import all
import Standard.Base.Data.Array as Array_Module
import Standard.Base.Data.Text as Text_Module
import Standard.Base.Data.Vector as Vector_Module

polyglot java import java.lang.Class
polyglot java import java.lang.Object as JObject
polyglot java import java.util.Random
polyglot java import java.util.AbstractList
polyglot java import java.util.ArrayList
polyglot java import java.util.List as JList


from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

spec = Test.group "Pattern Matches" <|
    Test.specify "should be able to match on the Boolean type" <|
        case Boolean of
            Boolean -> Nothing
            _ -> Test.fail "Expected the Boolean constructor to match."
        case True of
            Boolean -> Test.fail "Expected True to match on a Boolean type check."
            _ : Boolean -> Nothing
            _ -> Test.fail "Expected True to match on a Boolean type check."
        case False of
            Boolean -> Test.fail "Expected False to match on a Boolean type check."
            _ : Boolean -> Nothing
            _ -> Test.fail "Expected False to match on a Boolean type check."
    Test.specify "should be able to match on the Integer type" <|
        case 1 of
            Integer -> Test.fail "Expected an integer to match."
            _ : Integer -> Nothing
            _ -> Test.fail "Expected an integer to match."
        case 100000000000000000000000000000000000 of
            Integer -> Test.fail "Expected an integer to match."
            _ : Integer -> Nothing
            _ -> Test.fail "Expected an integer to match."
        case Integer of
            Integer -> Nothing
            _ -> Test.fail "Expected the Integer constructor to match."
    Test.specify "should be able to match on the Decimal type" <|
        case 1.7 of
            _ : Integer -> Test.fail "Expected a decimal to match."
            Decimal -> Test.fail "Expected a decimal to match."
            _ : Decimal -> Nothing
            _ -> Test.fail "Expected a decimal to match."
        case Decimal of
            Decimal -> Nothing
            _ -> Test.fail "Expected the Decimal constructor to match."
    Test.specify "should be able to match on the Number type" <|
        case 1 of
            _ : Number -> Nothing
            _ -> Test.fail "Expected a number to match."
        case 100000000000000000000000000000000000 of
            _ : Number -> Nothing
            _ -> Test.fail "Expected a number to match."
        case 1.7 of
            _ : Number -> Nothing
            _ -> Test.fail "Expected a number to match."
        case Number of
            _ : Number -> Nothing
            _ -> Test.fail "Expected the Number constructor to match."
        case Number of
            Number -> Nothing
            _ -> Test.fail "Expected the Number constructor to match."
        case Integer of
            _ : Number -> Nothing
            _ -> Test.fail "Expected the Integer constructor to match."
        case Decimal of
            _ : Number -> Nothing
            _ -> Test.fail "Expected the Decimal constructor to match."
    Test.specify "should be able to match on the Text type" <|
        case "foo" of
            Text -> Test.fail "Expected a text type to match."
            _ : Text -> Nothing
            _ -> Test.fail "Expected a text type to match."
        case Text of
            _ : Text -> Nothing
            Text_Module -> Test.fail "Expected the Text constructor to match4."
            Text -> Test.fail "Expected the Text constructor to match4."
            _ -> Test.fail "Expected the Text constructor to matc5h."
        case Text_Module of
            _ : Text -> Test.fail "Expected the Text module to match4."
            Text -> Test.fail "Expected the Text module to match4."
            Text_Module -> Nothing
            _ -> Test.fail "Expected the Text module to matc5h."
    Test.specify "should be able to match on the Array type" <|
        case [].to_array of
            Array -> Test.fail "Expected an array type to match."
            _ : Array -> Nothing
            _ -> Test.fail "Expected an array type  to match."
        case Array of
            Array_Module -> Test.fail "Expected the Array type to match."
            _ : Array -> Nothing
            Array -> Test.fail "Expected the Array type to match."
            _ -> Test.fail "Expected the Array Type to match."
        case Array_Module of
            _ : Array -> Test.fail "Expected the Array module to match."
            Array -> Test.fail "Expected the Array module to match."
            Array_Module -> Nothing
            _ -> Test.fail "Expected the Array module to match."
    Test.specify "should be able to match on the Polyglot type" <|
        random_gen = Random.new
        case random_gen of
            Polyglot.Polyglot -> Nothing
            _ -> Test.fail "Expected a polyglot object to match."
        case Polyglot.Polyglot of
            Polyglot.Polyglot -> Nothing
            _ -> Test.fail "Expected the Polyglot constructor to match."
    Test.specify "should be able to match on the Any type" <|
        value_1 = 1.23143
        value_2 = "foo bar"
        case value_1 of
            Any -> Test.fail "Expect any constructor to match Any type."
            _ : Any -> Nothing
            _ -> Test.fail "Expect any constructor to match Any type."
        case value_2 of
            Any -> Test.fail "Expect any constructor to match Any type."
            _ : Any -> Nothing
            _ -> Test.fail "Expect any constructor to match Any type."
        case Polyglot of
            Any -> Test.fail "Expect any constructor to match Any type."
            _ : Any -> Nothing
            _ -> Test.fail "Expect any constructor to match Any type."
        case Any of
            Any -> Nothing
            _ -> Test.fail "Expected the Any constructor to match."
    Test.specify "should be able to match on date/time values" <|
        new_date = Date.new 2020 6 1
        new_date_time = Date_Time.new 2020 6 1
        new_time = Time_Of_Day.new 11 11
        new_zone = Time_Zone.system

        case new_date of
            Date_Time -> Test.fail "Expected date value to match Date type."
            Time_Of_Day -> Test.fail "Expected date value to match Date type."
            Time_Zone -> Test.fail "Expected date value to match Date type."
            Date -> Test.fail "Expected date value to match Date type."
            _ : Date_Time -> Test.fail "Expected date value to match Date type."
            _ : Time_Of_Day -> Test.fail "Expected date value to match Date type."
            _ : Time_Zone -> Test.fail "Expected date value to match Date type."
            _ : Date -> Nothing
            _ -> Test.fail "Expected date value to match Date type."

        case new_date_time of
            Date -> Test.fail "Expected datetime value to match Date_Time type."
            Time_Of_Day -> Test.fail "Expected datetime value to match Date_Time type."
            Time_Zone -> Test.fail "Expected datetime value to match Date_Time type."
            Date_Time -> Test.fail "Expected datetime value to match Date_Time type."
            _ : Date -> Test.fail "Expected datetime value to match Date_Time type."
            _ : Time_Of_Day -> Test.fail "Expected datetime value to match Date_Time type."
            _ : Time_Zone -> Test.fail "Expected datetime value to match Date_Time type."
            _ : Date_Time -> Nothing

            _ -> Test.fail "Expected datetime value to match Date_Time type."

        case new_time of
            Date -> Test.fail "Expected time value to match Time_Of_Day type."
            Date_Time -> Test.fail "Expected time value to match Time_Of_Day type."
            Time_Zone -> Test.fail "Expected time value to match Time_Of_Day type."
            Time_Of_Day -> Test.fail "Expected time value to match Time_Of_Day type."
            _ : Date -> Test.fail "Expected time value to match Time_Of_Day type."
            _ : Date_Time -> Test.fail "Expected time value to match Time_Of_Day type."
            _ : Time_Zone -> Test.fail "Expected time value to match Time_Of_Day type."
            _ : Time_Of_Day -> Nothing
            _ -> Test.fail "Expected time value to match Time_Of_Day type."

        case new_zone of
            Date -> Test.fail "Expected timezone value to match Time_Zone type."
            Date_Time -> Test.fail "Expected timezone value to match Time_Zone type."
            Time_Of_Day -> Test.fail "Expected timezone value to match Time_Zone type."
            Time_Zone -> Test.fail "Expected timezone value to match Time_Zone type."
            _ : Date -> Test.fail "Expected timezone value to match Time_Zone type."
            _ : Date_Time -> Test.fail "Expected timezone value to match Time_Zone type."
            _ : Time_Of_Day -> Test.fail "Expected timezone value to match Time_Zone type."
            _ : Time_Zone -> Nothing
            _ -> Test.fail "Expected timezone value to match Time_Zone type."

    Test.specify "should be able to match on literal values" <|
        value_1 = 42
        value_2 = "foo"
        value_3 = 's\u0301'
        value_4 = '\u00E9'
        case value_1 of
            0     -> Test.fail "Expected value to match constant."
            "foo" -> Test.fail "Expected value to match constant."
            42    -> Nothing
            _     -> Test.fail "Expected value to match constant."
        case value_2 of
            "meh" -> Test.fail "Expected value to match constant."
            0     -> Test.fail "Expected value to match constant."
            "foo" -> Nothing
            _     -> Test.fail "Expected value to match constant."
        case value_3 of
            "s"   -> Test.fail "Expected value to match constant."
            "Å›"   -> Nothing
            _     -> Test.fail "Expected value to match constant."
        case value_4 of
            "e"   -> Test.fail "Expected value to match constant."
            "Ä™"   -> Test.fail "Expected value to match constant."
            '\u0065\u{301}' -> Nothing
            _     -> Test.fail "Expected value to match constant."
    Test.specify "should be able to match on literal values nested in constructors" <|
        value_1 = List.Cons 42 List.Nil
        value_2 = List.Cons (List.Cons 42 List.Nil) List.Nil
        case value_1 of
            42                                        -> Test.fail "Expected value to match constant."
            List.Cons (List.Cons 1 List.Nil) List.Nil -> Test.fail "Expected value to match constant."
            List.Cons 1 List.Nil                      -> Test.fail "Expected value to match constant."
            List.Cons 42 List.Nil                     -> Nothing
            _                                         -> Test.fail "Expected value to match constant."
        case value_2 of
            42                                        -> Test.fail "Expected value to match constant."
            List.Cons (List.Cons 1 List.Nil) List.Nil -> Test.fail "Expected value to match constant."
            List.Cons (List.Cons a List.Nil) List.Nil -> if a == 42 then Nothing else Test.fail "Expected variable to bind to 42"
            List.Cons 1 List.Nil                      -> Test.fail "Expected value to match constant."
            List.Cons _ List.Nil                      -> Test.fail "Expected value to match constant."
            _                                         -> Test.fail "Expected value to match constant."

    Test.specify "should be able to match on module rather than a type" <|
        case Vector_Module of
            _ : Vector        -> Test.fail "Expected to match on module."
            Vector            -> Test.fail "Expected to match on module."
            Vector_Module     -> Nothing
            _                 -> Test.fail "Expected to match on module."

    Test.specify "should be able to match on a type of a value rather tha module" <|
        case [1,2,3] of
            Vector_Module -> Test.fail "Expected to match on a type."
            Vector        -> Test.fail "Expected to match on a type."
            _ : Vector    -> Nothing
            _             -> Test.fail "Expected to match on a type."

    Test.specify "should correctly pattern match on array-like polyglot values" <|
        list = ArrayList.new
        list.add 1
        list.add 2

        case list of
            _ : Vector -> Test.fail "Expected to match on Array type."
            _ : Array -> Nothing
            _ : ArrayList -> Test.fail "Expected to match on Array type."
            _ -> Test.fail "Expected to match on Array type."

        case list of
            _ : Vector -> Test.fail "Expected to match on ArrayList type."
            _ : ArrayList -> Nothing
            _ : Array -> Test.fail "Expected to match on ArrayList type."
            _ -> Test.fail "Expected to match on ArrayList type."

        case Meta.type_of list of
            _ : Vector -> Test.fail "Expected to match in java.lang.Class case."
            _ : Array -> Test.fail "Expected to match in java.lang.Class case."
            _ : ArrayList -> Test.fail "Expected to match in java.lang.Class case."
            _ : Class -> Nothing
            _ : ArrayList -> Test.fail "Expected to match in java.lang.Class case."

        case Meta.type_of list of
            Vector -> Test.fail "Expected to match on a polyglot symbol."
            Array -> Test.fail "Expected to match on a polyglot symbol."
            ArrayList -> Nothing
            Class -> Test.fail "Expected to match on a polyglot symbol."
            _ -> Test.fail "Expected to match on a polyglot symbol."

    Test.specify "should correctly pattern match on supertype" <|
        case 1 of
            _ : Any -> Nothing
            _ -> Test.fail "Expected to match on Any type."

        case ArrayList.new of
            _ : JObject -> Nothing
            _ -> Test.fail "Expected to match on java.lang.Object type."

        case ArrayList.new of
            _ : AbstractList -> Nothing
            _ -> Test.fail "Expected to match on java.lang.Object type."

        case ArrayList.new of
            _ : JList -> Nothing
            _ -> Test.fail "Expected to match on java.lang.Object type."


main = Test_Suite.run_main spec
