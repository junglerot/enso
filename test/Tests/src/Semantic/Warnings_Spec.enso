from Standard.Base import all

polyglot java import java.lang.Long

import Standard.Test

type My_Warning reason

type My_Type a b c
My_Type.my_method = this.a + this.b + this.c

type Wrap foo

rewrap w = case w of
    Wrap a -> Wrap a+1

poly_sum x y =
    Long.sum x y

get_foo x = x.foo

unwrap x = Integer.from x

reassign_test x =
    consed = Wrap x
    reconsed = here.rewrap consed
    i = here.unwrap reconsed
    rereconsed = Wrap i
    x1 = here.get_foo rereconsed
    prim_sum = 1 + x1
    r = here.poly_sum prim_sum 1
    r

baz value = Warning.attach value "I have warned you"
bar value = here.baz value
foo value = here.bar value

Integer.from (that:Wrap) = that.foo

attach_four_warnings value =
    v1 = Warning.attach 4 value
    v2 = Warning.attach 3 v1
    v3 = Warning.attach 2 v2
    v4 = Warning.attach 1 v3
    v4

odd_warning_mapper payload = case payload of
    Integer -> if payload % 2 == 0 then Nothing else Maybe.Some (payload + 10)
    _ -> Nothing

map_odd_warnings value =
    Warning.map_attached_warnings here.odd_warning_mapper value

map_odd_warnings_and_errors value =
    Warning.map_warnings_and_errors here.odd_warning_mapper value

throw_a_bar =
    Panic.throw "bar"

spec = Test.group "Dataflow Warnings" <|
    Test.specify "should allow to attach multiple warnings and read them back" <|
        x = 1233
        y = Warning.attach "don't do this" x
        z = Warning.attach "I'm serious" y
        Warning.get_all z . map .value . should_equal ["I'm serious", "don't do this"]

    Test.specify "should thread warnings through constructor calls" <|
        z = Warning.attach (My_Warning "warn!!!") 3
        y = Warning.attach (My_Warning "warn!!") 2
        x = Warning.attach (My_Warning "warn!") 1
        mtp = My_Type x y z
        mtp.should_equal (My_Type 1 2 3)
        Warning.get_all mtp . map .value . should_equal [My_Warning "warn!", My_Warning "warn!!", My_Warning "warn!!!"]

    Test.specify "should thread warnings through method calls"
        mtp = My_Type 1 2 3
        warned = Warning.attach "omgggg" mtp
        r = warned.my_method
        r.should_equal 6
        Warning.get_all r . map .value . should_equal ["omgggg"]

    Test.specify "should thread warnings through polyglot calls" <|
        y = Warning.attach "warn!!" 2
        x = Warning.attach "warn!" 1
        r = Long.sum x y
        r.should_equal 3
        Warning.get_all r . map .value . should_equal ['warn!', 'warn!!']

    Test.specify "should thread warnings through case expressions" <|
        z = Warning.attach (My_Warning "warn!!!") 3
        y = Warning.attach (My_Warning "warn!!") 2
        x = Warning.attach (My_Warning "warn!") 1
        mtp = My_Type x y z
        r = case mtp of
            My_Type a b c -> a + b + c
        r.should_equal 6
        Warning.get_all r . map .value . should_equal [My_Warning "warn!", My_Warning "warn!!", My_Warning "warn!!!"]

    Test.specify "should thread warnings through conversions" <|
        z = Wrap (Warning.attach 'warn!' 1)
        i = Integer.from z
        Warning.get_all i . map .value . should_equal ['warn!']

    Test.specify "should attach correct stacktraces" <|
        current = Runtime.get_stack_trace
        warned = here.foo "value"
        warning_stack = Warning.get_all warned . head . origin
        relevant = warning_stack . drop_end current.length
        relevant.map .name . should_equal (['baz', 'bar', 'foo'].map ('Warnings_Spec.'+))

    Test.specify "should attach reassignment info in the last-reassigned-first order" <|
        x = Warning.attach "warn!" 1
        r = here.reassign_test x
        warn = Warning.get_all r . head
        reassignments = warn.reassignments.map .name
        reassignments.should_equal ['Warnings_Spec.poly_sum', 'Small_Integer.+', 'Warnings_Spec.get_foo', 'Warnings_Spec.Wrap', 'Warnings_Spec.unwrap', 'Warnings_Spec.rewrap', 'Warnings_Spec.Wrap']

    Test.specify "should allow to set all warnings" <|
        warned = Warning.attach 1 <| Warning.attach 2 <| Warning.attach 3 <| Warning.attach 4 "foo"
        warnings = Warning.get_all warned
        filtered = warnings.filter x-> x.value % 2 == 0
        rewarned = Warning.set warned filtered
        rewarned.should_equal 'foo'
        Warning.get_all rewarned . map .value . should_contain_the_same_elements_as [2,4]

    Test.specify "should allow to map the warnings, selectively" <|
        warned = here.attach_four_warnings "foo"
        mapped = here.map_odd_warnings warned
        mapped . should_equal 'foo'
        Warning.get_all mapped . map .value . should_contain_the_same_elements_as [11, 2, 13, 4]

    Test.specify "should allow to map warnings and errors, selectively" <|
        warned = here.attach_four_warnings "foo"
        mapped = here.map_odd_warnings_and_errors warned
        mapped . should_equal 'foo'
        Warning.get_all mapped . map .value . should_contain_the_same_elements_as [11, 2, 13, 4]
        Warning.get_all mapped . map (w-> w.origin.first.name) . should_contain_the_same_elements_as ["Warnings_Spec.map_odd_warnings_and_errors", "Warnings_Spec.attach_four_warnings"]

        errored_2 = Error.throw 7
        mapped_2 = here.map_odd_warnings_and_errors errored_2
        mapped_2.catch . should_equal 17
        Warning.get_all mapped_2 . catch . should_equal 17

        errored_3 = Panic.recover Any here.throw_a_bar
        mapped_3 = here.map_odd_warnings_and_errors errored_3
        mapped_3.catch . should_equal "bar"
        mapped_3.stack_trace.second.name . should_equal "Warnings_Spec.throw_a_bar"
        Warning.get_all mapped_3 . catch . should_equal "bar"

main = Test.Suite.run_main here.spec
