from Standard.Base import all

import Standard.Test

foreign js my_method a b = """
    return a + b;

foreign js debug = """
    debugger;

type My_Type
    type My_Type a b

    foreign js my_method this = """
        return this.a + this.b;

    my_method_2 self x = self.my_method * x

    foreign js my_method_3 this y = """
        var r = this.my_method_2(y)
        return r + 1;

    foreign js my_throw = """
        var err = new Error("JS Exc");
        throw err;

    do_throw self = Panic.throw self

    foreign js do_catch this = """
        try {
            this.do_throw();
        } catch (e) {
            return e.a;
        }

foreign js make_object = """
    return {
        x: 10,
        y: false,
        compare: function (guess) {
            return this.x < guess;
        }
    };

foreign js make_array = """
    return [{ x: 10}, {x: 20}, {x: 30}];

foreign js make_simple_array = """
    return [10, 20, 30];

foreign js make_str str = """
    return "foo " + str + " bar"

foreign js make_int = """
    return 10

foreign js make_true = """
    return true

foreign js make_false = """
    return false

foreign js make_double = """
    return 10.5

foreign js make_null = """
    return null;

foreign js does_not_parse = """
    return { x

foreign js test_multilevel = """
    return {a : 1, b: {x: 1, y: 2}}

foreign js test_array_properties = """
    var my_array = [1, 2, 3]
    my_array.groups = {a: 1, b: 2}
    my_array.index = 0
    return my_array

spec = Test.group "Polyglot JS" <|

    Test.specify "should allow declaring module-level methods in JS" <|
        my_method 1 2 . should_equal 3
        m = my_method 1
        m 2 . should_equal 3

    Test.specify "should allow mutual calling of instance-level methods" <|
        My_Type 3 4 . my_method_3 5 . should_equal 36

    Test.specify "should expose methods and fields of JS objects" <|
        obj = make_object
        obj.x . should_equal 10
        obj.y . should_be_false
        obj.compare 5 . should_be_false
        obj.compare 11 . should_be_true

    Test.specify "should expose array interfaces for JS arrays" <|
        vec = Vector.from_polyglot_array make_array
        vec.map .x . should_equal [10, 20, 30]
        vec2 = Vector.from_polyglot_array make_simple_array
        vec2.to_array.at 0 . should_equal 10

    Test.specify "should correctly marshall strings" <|
        str = make_str "x" + " baz"
        str.should_equal "foo x bar baz"

    Test.specify "should make JS strings type pattern-matchable" <|
        str = make_str "x"
        t = case str of
            Text -> True
            _ -> False
        t.should_be_true

    Test.specify "should make JS booleans type pattern-matchable" <|
        bool = make_true
        t = case bool of
            True -> True
            _ -> False
        t.should_be_true
        bool_2 = make_false
        f = case bool_2 of
            False -> True
            _ -> False
        f.should_be_true
        c = case bool of
            Boolean -> True
            _ -> False
        c.should_be_true
        c_2 = case bool_2 of
            Boolean -> True
            _ -> False
        c_2.should_be_true

    Test.specify "should make JS arrays type pattern-matchable as arrays" <|
        arr = make_array
        r = case arr of
            Array -> True
            _ -> False
        r.should_be_true

    Test.specify "should make JS null values equal to Nothing" <|
        js_null = make_null
        js_null . should_equal Nothing

    Test.specify "should make JS numbers type pattern-matchable" <|
        int_match = case make_int of
            Integer -> True
        int_match.should_be_true
        double_match = case make_double of
            Decimal -> True
        double_match.should_be_true
        num_int_match = case make_int of
            Number -> True
        num_int_match.should_be_true
        num_double_match = case make_double of
            Number -> True
        num_double_match.should_be_true

    Test.specify "should allow Enso to catch JS exceptions" <|
        value = My_Type 1 2
        result = Panic.recover Any <| value.my_throw
        err = result.catch
        err.cause.message . should_equal "JS Exc"
        err.cause.name . should_equal "Error"

    Test.specify "should allow JS to catch Enso exceptions" <|
        value = My_Type 7 2
        result = value.do_catch
        result . should_equal 7

    Test.specify "should properly handle parse errors" <|
        err = Panic.recover Any does_not_parse . catch
        err.cause.message.should .contain "Expected }"

    Test.specify "allow access to properties of nested objects" <|
        value = test_multilevel
        value.b.x . should_equal 1

    Test.specify "allow access to properties of array objects in JS" <|
        array = test_array_properties
        array.groups.a . should_equal 1
        array.index . should_equal 0

    Test.specify "allow access to the length property of a JS array in Enso" <|
        array = make_array
        array.length . should_equal 3

    Test.specify "should perform maths with mixed numbers" <|
        js_num = make_int
        enso_num = 10
        (enso_num + js_num) . should_equal 20
        (js_num - enso_num) . should_equal 0

    Test.specify "should propagate dataflow errors" <|
        error = Error.throw 42
        my_method error 0 . should_fail_with Integer

    Test.specify "allow use of JavaScript debugger statement" <|
        debug

main = Test.Suite.run_main spec
