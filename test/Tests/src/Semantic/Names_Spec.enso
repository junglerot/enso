from Standard.Base import all

from project.Semantic.Definitions.Names import another_method, another_constant, method_with_local_vars, Bar
import project.Semantic.Definitions.Names

from Standard.Test import Test
import Standard.Test.Extensions

Names.Foo.my_method self = case self of
    Names.Foo.Value x y z -> x * y * z

get_foo module = module.Foo

constant = 1

add_one (x = 0) = x + 1

spec =
    Test.group "Qualified Names" <|
        Test.specify "should allow to call constructors in a qualified manner" <|
            Names.Foo.Value 1 2 3 . sum . should_equal 6
        Test.specify "should allow pattern matching in a qualified manner" <|
            v = Names.Foo.Value 1 2 3
            res = case v of
                Names.Foo.Value a b c -> a + b + c
            res.should_equal 6
        Test.specify "should allow defining methods on qualified names" <|
            v = Names.Foo.Value 2 3 5
            v.my_method.should_equal 30
    Test.group "Lowercase Methods" <|
        Test.specify "should allow calling methods without a target" <|
            v = constant
            v.should_equal 1
        Test.specify "should allow calling this module's methods" <|
            add_one.should_equal 1
            add_one 100 . should_equal 101
        Test.specify "should allow calling methods imported from another module without name mangling" <|
            another_method 10 . should_equal 10
            another_constant . should_equal 10
        Test.specify "should allow calling methods with fully qualified module name" <|
            (Names.another_method 10).should_equal 10
            v = Names.another_method
            v 10 . should_equal 10
        Test.specify "should be resolved correctly in the presence of variables with the same name" <|
            method_with_local_vars 1 . should_equal 13
    Test.group "Methods" <|
        Test.specify "should be correctly resolved on instances" <|
            b = Bar.Value 1
            b.meh 2 . should_equal 3
        Test.specify "should be allowed to be called statically" pending="Needs changes to method dispatch logic" <|
            b = Bar.Value 1
            Bar.meh b 2 . should_equal 3
    Test.group "Fully Qualified Names" <|
        Test.specify "should be correctly resolved" <|
            a = Standard.Base.Data.Array.Array.new 10
            a.length . should_equal 10
            Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error.to_text . should_equal "Report_Error"
