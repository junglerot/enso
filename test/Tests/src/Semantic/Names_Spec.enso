from Standard.Base import all

from project.Semantic.Names.Definitions import another_method, another_constant, method_with_local_vars

import Standard.Test

Definitions.Foo.my_method self = case self of
    Definitions.Foo x y z -> x * y * z

get_foo module = module.Foo

constant = 1

add_one (x = 0) = x + 1

spec =
    Test.group "Qualified Names" <|
        Test.specify "should allow to call constructors in a qualified manner" <|
            Definitions.Foo 1 2 3 . sum . should_equal 6
            Definitions . Foo 1 2 3 . sum . should_equal 6
        Test.specify "should allow pattern matching in a qualified manner" <|
            v = Definitions.Foo 1 2 3
            res = case v of
                Definitions.Foo a b c -> a + b + c
            res.should_equal 6
        Test.specify "should allow defining methods on qualified names" <|
            v = Definitions.Foo 2 3 5
            v.my_method.should_equal 30
    Test.group "Lowercase Methods" <|
        Test.specify "should allow calling methods without a target" <|
            v = constant
            v.should_equal 1
        Test.specify "should allow calling this module's methods" <|
            add_one.should_equal 1
            add_one 100 . should_equal 101
        Test.specify "should allow calling methods imported from another module without name mangling" <|
            another_method 10 . should_equal 10
            another_constant . should_equal 10
        Test.specify "should allow calling methods with fully qualified module name" <|
            (Definitions.another_method 10).should_equal 10
            v = Definitions.another_method
            v 10 . should_equal 10
        Test.specify "should be resolved correctly in the presence of variables with the same name" <|
            method_with_local_vars 1 . should_equal 13
    Test.group "Methods" <|
        Test.specify "should be correctly resolved on instances" <|
            b = Bar 1
            b.meh 2 . should_equal 3
        Test.specify "should be allowed to be called statically" pending="Needs changes to method dispatch logic" <|
            b = Bar 1
            Bar.meh b 2 . should_equal 3
