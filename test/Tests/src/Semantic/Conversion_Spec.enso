from Standard.Base import all

import project.Semantic.Conversion.Methods
import project.Semantic.Conversion.Types

import Standard.Test

type Foo
    Foo_Data foo
type Bar
    Bar_Data bar
type Baz
    Baz_Data baz
type Quux
    Quux_Data quux
type Quaffle
type My_Error
    My_Error_Data err

type Not_Foo
    Not_Foo_Data notfoo

Foo.from (that:Bar) = Foo_Data that.bar
Foo.from (that:Baz) = Foo_Data that.baz
Foo.from (that:Text) = Foo_Data that.length
Foo.from (that:Number) first_param=0 second_param=0 third_param=0 = Foo_Data [that, first_param, second_param, third_param]
Foo.from (that:Function) = Foo_Data (that 5)
Foo.from (that:Boolean) = Foo_Data that
Foo.from (that:Array) = Foo_Data that.length

Not_Foo.from (_:Boolean) = Not_Foo_Data True
Not_Foo.from (_:Any) = Not_Foo_Data "ANY!!!"

Foo.from (_:Quaffle) = Foo_Data "quaffle"
Foo.from (_:Error) = Foo_Data "oops"

foreign js make_str x = """
   return "js string"

foreign js call_function fn arg_1 = """
    return fn(arg_1, "a string");

Number.foo = "foo called"

spec =
    Test.group "Conversion" <|
        Test.specify "should be able to convert atoms" <|
            ((Foo.from (Baz_Data 10)).foo + (Foo.from (Bar_Data 20)).foo) . should_equal 30
            Foo.from Quaffle . foo . should_equal "quaffle"
        Test.specify "should be able to convert text" <|
            Foo.from "123" . foo . should_equal 3
        Test.specify "should be able to convert foreign text" <|
            Foo.from (make_str 4) . foo . should_equal 9
        Test.specify "should be able to convert numbers" <|
            Foo.from 4 . should_equal (Foo_Data [4, 0, 0, 0])
            Foo.from (10^100) . should_equal (Foo_Data [10^100, 0, 0, 0])
            Foo.from 4.5 . should_equal (Foo_Data [4.5, 0, 0, 0])
        Test.specify "should be able to convert dataflow errors" <|
            Foo.from (Error.throw <| My_Error_Data "i was bad") . should_equal (Foo_Data "oops")
        Test.specify "should be able to convert functions" <|
            Foo.from (e -> e) . foo . should_equal 5
        Test.specify "should be able to convert booleans" <|
            Foo.from True . foo . should_be_true
            Foo.from False . foo . should_be_false
        Test.specify "should be able to convert arrays" <|
            Foo.from [1,2,3].to_array . foo . should_equal 3
        Test.specify "should be able to convert Any" <|
            Not_Foo.from that=Quaffle . notfoo . should_equal "ANY!!!"
            Not_Foo.from 4 . notfoo . should_equal "ANY!!!"
            Not_Foo.from (e -> e) . notfoo . should_equal "ANY!!!"
            Not_Foo.from [1,2,3].to_array . notfoo . should_equal "ANY!!!"
        Test.specify "should call intrinsic object conversions for unimported constructors" <|
            Vector.from Methods.get_foo . should_equal ["foo"]
        Test.specify "should call extension conversions" <|
            Text.from Methods.get_bar . should_equal "'bar'"

        Test.specify "should fail graciously when there is no conversion" <|
            Panic.recover Any (Foo.from (Quux_Data 10)) . catch Any .to_display_text . should_equal "Could not find a conversion from `Quux_Data` to `Foo`"
        Test.specify "should fail graciously when the conversion target is invalid" <|
            Panic.recover Any (123.from (Quux_Data 10)) . catch Any .to_display_text . should_equal "123 is not a valid conversion target. Expected a type."

        Test.specify "should be callable with by-name arguments" <|
            .from self=Foo that=4 first_param=2 . should_equal (Foo_Data [4, 2, 0, 0])
        Test.specify "should support the use of multiple arguments" <|
            Foo.from that=4 second_param=1 2 . should_equal (Foo_Data [4, 2, 1, 0])

        Test.specify "should play nicely with polyglot" <|
            call_function .from Foo . should_equal (Foo_Data 8)

        Test.specify "should support the meta functions" <|
            meta_from = Meta.meta .from
            is_symbol = case meta_from of
                Meta.Unresolved_Symbol_Data _ -> True
                _ -> False
            is_symbol.should_be_true

            .from . is_a Meta.Unresolved_Symbol . should_be_true

            meta_from.name.should_equal "from"

            Meta.meta .foo . rename "from" . should_equal .from
            Meta.meta .foo . rename "from" Foo "hello" . should_equal (Foo_Data 5)

            meta_from.rename "foo" 123 . should_equal "foo called"
            meta_from.rename "foo" . should_equal .foo
