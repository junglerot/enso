from Base import all
import Test

type My_Type foo bar baz

My_Type.my_method = this.foo + this.bar + this.baz

spec = describe "Meta-Value Manipulation" <|
    it "should allow manipulating unresolved symbols" <|
        sym = does_not_exist
        meta_sym = Meta.meta sym
        meta_sym.name.should equal "does_not_exist"
        new_sym = meta_sym . rename "my_method"
        object = My_Type 1 2 3
        new_sym object . should equal 6
    it "should allow manipulating atoms" <|
        atom = My_Type 1 "foo" Unit
        meta_atom = Meta.meta atom
        meta_atom.constructor.should equal My_Type
        meta_atom.fields.should equal [1, "foo", Unit]
        Meta.meta (meta_atom.constructor) . new [1, "foo", Unit] . should equal atom
    it "should correctly return representations of different classes of objects" <|
        Meta.meta 1 . should equal (Meta.Primitive 1)
        Meta.meta "foo" . should equal (Meta.Primitive "foo")
