from Standard.Base import all
import Standard.Base.Errors.File_Error.File_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
from Standard.Base.Errors.Common import Uninitialized_State, Type_Error

polyglot java import java.lang.Object as JObject
polyglot java import java.lang.Long as JLong
polyglot java import java.lang.Exception as JException
polyglot java import java.io.IOException
polyglot java import java.util.ArrayList
polyglot java import java.util.Random as Java_Random
polyglot java import java.util.Locale as JavaLocale

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions
import Standard.Test.Test_Result.Test_Result

type My_Type
    @foo (test_method)
    @baz (My_Type.Value 1 2 3)
    Value foo bar baz

    @param (test_method 5 6)
    first_method self param = param

    second_method self param = param

    @a (test_method 5)
    @b (self -> self.foo)
    other_method self a = a

    create foo bar = My_Type.Value foo bar 3

type My_Ascribed_Type
    Value_With_Type foo:Number bar:Number baz:Number

@self ("se" + "lf")
My_Type.my_method self = self.foo + self.bar + self.baz

My_Type.factory = My_Type.create 1 2

@a (test_method 3 4)
@b (Test_Type.Value 49)
@c (Error.throw "Error Value")
test_method a b = a + b

type Test_Type
    Value x

type Sum_Type
    Variant_A x
    Variant_B y

spec =
    Test.group "Meta-Value Manipulation" <|
        Test.specify "should allow manipulating unresolved symbols" <|
            sym = .does_not_exist
            meta_sym = Meta.meta sym
            meta_sym.name.should_equal "does_not_exist"
            new_sym = meta_sym . rename "my_method"
            object = My_Type.Value 1 2 3
            new_sym object . should_equal 6
        Test.specify "should allow manipulating atoms" <|
            atom = My_Type.Value 1 "foo" Nothing
            meta_atom = Meta.meta atom
            meta_atom.constructor.value.should_equal My_Type.Value
            meta_atom.fields.should_equal [1, "foo", Nothing]
            Meta.meta (meta_atom.constructor.value) . new [1, "foo", Nothing] . should_equal atom
        Test.specify "should allow getting a value's constructor's name" <|
            Meta.meta List.Nil . constructor . name . should_equal "Nil"
            Meta.meta (List.Cons 1 List.Nil) . constructor . name . should_equal "Cons"
        Test.specify "should allow getting a value's constructor's fields" <|
            Meta.meta List.Nil . constructor . fields . should_equal []
            Meta.meta (List.Cons 1 List.Nil) . constructor . fields . should_equal ["x", "xs"]
        Test.specify "should allow creating atoms from atom constructors" <|
            atom_1 = Meta.new_atom My_Type.Value [1,"foo", Nothing]
            (Meta.meta atom_1).constructor.value . should_equal My_Type.Value
            atom_2 = Meta.new_atom My_Type.Value [1,"foo", Nothing].to_array
            (Meta.meta atom_2).constructor.value . should_equal My_Type.Value
        Test.specify "should correctly return representations of different classes of objects" <|
            Meta.meta 1 . should_equal (Meta.Primitive.Value 1)
            Meta.meta "foo" . should_equal (Meta.Primitive.Value "foo")
        Test.specify "should allow manipulation of error values" <|
            err = Error.throw "My Error"
            meta_err = Meta.meta err
            meta_err.is_a Meta.Error . should_be_true
            meta_err.value . should_equal "My Error"
        Test.specify "should allow checking if a value is of a certain type" <|
            1.is_a Any . should_be_true
            1.2.is_a Any . should_be_true
            (My_Type.Value 1 "foo" Nothing).is_a Any . should_be_true

            Array.is_a Array . should_be_false
            [].to_array.is_a Array . should_be_true
            [].to_array.is_a Decimal . should_be_false
            [1,2,3].is_a Vector . should_be_true
            [1,2,3].is_a Array . should_be_false

            Boolean.is_a Boolean . should_be_false
            True.is_a Boolean . should_be_true
            False.is_a Boolean . should_be_true
            True.is_a Integer . should_be_false

            "".is_a Text . should_be_true
            "".is_a Decimal . should_be_false

            1.is_a Array . should_be_false
            1.is_a Integer . should_be_true
            1.is_a Number . should_be_true
            1.is_a Decimal . should_be_false
            1.is_a Date . should_be_false

            1.0.is_a Number . should_be_true
            1.0.is_a Decimal . should_be_true
            1.0.is_a Integer . should_be_false
            1.0.is_a Text . should_be_false

            random_gen = Java_Random.new
            Meta.is_a random_gen Java_Random . should_be_true
            Meta.is_a random_gen Integer . should_be_false

            (My_Type.Value 1 "foo" Nothing).is_a My_Type . should_be_true
            (My_Type.Value 1 "foo" Nothing).is_a Test_Type . should_be_false
            (My_Type.Value 1 "foo" Nothing).is_a Number . should_be_false

            err = Error.throw "Error Value"
            1.is_a Error . should_be_false
            err.is_a Error . should_be_true
            err.is_a Text . should_be_false
            Meta.is_a err Error . should_be_true
            Meta.is_a err Text . should_be_false

            Meta.is_a Date.today Date . should_be_true
            Meta.is_a Date_Time.now Date_Time . should_be_true
            Meta.is_a Date_Time.now Date . should_be_false
            Meta.is_a Time_Of_Day.now Time_Of_Day . should_be_true
            Meta.is_a Time_Of_Day.now Date . should_be_false
            Meta.is_a Date_Time.now.zone Time_Zone . should_be_true
            Meta.is_a Date_Time.now.zone Date . should_be_false

        Test.specify "constructor variants check" <|
            (Sum_Type.Variant_A 42).is_a Sum_Type . should_be_true
            (Sum_Type.Variant_A 42).is_a Sum_Type.Variant_A . should_be_false
            (Sum_Type.Variant_A 42).is_a Sum_Type.Variant_B . should_be_false

        Test.specify "constructor variants case of" <|
            case (Sum_Type.Variant_A 42) of
                _ : Sum_Type -> Nothing
                e -> Test.fail "Expected "+e.to_text+" to be a Sum_Type"

        Test.specify "constructor True check" <|
            True . should_be_a True
            True . should_be_a Boolean
            Panic.recover Any (True . should_be_a False) . should_fail_with Test_Result

        Test.specify "constructor Case.Lower check" <|
            Case.Lower . should_be_a Case.Lower
            Case.Lower . should_be_a Case
            Panic.recover Any (Case.Lower . should_be_a Case.Upper) . should_fail_with Test_Result

        Test.specify "5 isn't a constructor" <|
            Panic.recover Any (5.should_be_a File_Error.Not_Found) . should_fail_with Test_Result

        Test.specify "should allow for returning the type of a value" <|
            n_1 = Meta.type_of 42
            n_1 . should_equal_type Integer
            n_1 . should_not_equal_type Decimal

            n_2 = Meta.type_of 2.81
            n_2 . should_equal_type Decimal
            n_2 . should_not_equal_type Integer

            n_3 = Meta.type_of (JLong.MAX_VALUE * 2)
            n_3 . should_equal_type Integer
            n_3 . should_not_equal_type Decimal

            v_tpe = Meta.type_of [1,2,3]
            v_tpe . should_equal_type Vector
            v_tpe . should_not_equal_type Array
            Meta.type_of [1,2,3].to_array . should_equal_type Array

            Meta.type_of "foo" . should_equal_type Text
            Meta.type_of "0" . should_not_equal_type Integer

            Meta.type_of True . should_equal_type Boolean
            Meta.type_of False . should_not_equal_type Any

            (Meta.type_of Date.today) . should_equal_type Date
            (Meta.type_of Date.today) . should_not_equal_type Date_Time
            (Meta.type_of Date_Time.now) . should_equal_type Date_Time
            (Meta.type_of Date_Time.now) . should_not_equal_type Date
            (Meta.type_of Time_Of_Day.now) . should_equal_type Time_Of_Day
            (Meta.type_of Time_Of_Day.now) . should_not_equal_type Date
            (Meta.type_of Date_Time.now.zone) . should_equal_type Time_Zone
            (Meta.type_of Date_Time.now.zone) . should_not_equal_type Date
            (Meta.type_of Time_Zone.local) . should_equal_type Time_Zone
            (Meta.type_of Time_Zone.system) . should_equal_type Time_Zone

            list = ArrayList.new
            list.add 123
            list_tpe = Meta.type_of list
            list_tpe . should_not_equal_type JObject
            list_tpe . should_not_equal_type ArrayList
            list_tpe . should_equal_type Array

            e = IOException.new "meh"
            e_tpe = Meta.type_of e
            e_tpe . should_equal_type IOException
            e_tpe . should_not_equal_type JException

        Test.specify "constructors of Boolean" <|
            typ = Boolean

            Meta.is_atom typ . should_be_false
            meta_typ = Meta.meta typ
            meta_typ . should_be_a Meta.Type
            meta_typ.name . should_equal "Boolean"
            cons = case meta_typ of
                Meta.Type.Value _ -> meta_typ.constructors
                _ -> Test.fail "Should be a Meta.Type.Value: " + meta_typ.to_text

            cons.length . should_equal 2
            cons.at 0 . should_be_a Meta.Constructor
            cons.at 1 . should_be_a Meta.Constructor
            cons . map (x -> x.name) . sort . should_equal [ "False", "True" ]

        Test.specify "constructors of MyType" <|
            typ = My_Type

            Meta.is_atom typ . should_be_false
            meta_typ = Meta.meta typ
            meta_typ . should_be_a Meta.Type
            meta_typ.name . should_equal "My_Type"
            cons = case meta_typ of
                Meta.Type.Value _ -> meta_typ.constructors
                _ -> Test.fail "Should be a Meta.Type.Value: " + meta_typ.to_text

            cons.length . should_equal 1
            cons.at 0 . should_be_a Meta.Constructor
            cons . map (x -> x.name) . sort . should_equal [ "Value" ]
            cons.each ctor->
                ctor.declaring_type . should_equal meta_typ

        Test.specify "methods of MyType" <|
            typ = My_Type

            Meta.is_atom typ . should_be_false
            meta_typ = Meta.meta typ
            meta_typ . should_be_a Meta.Type
            methods = case meta_typ of
                _ : Meta.Type -> meta_typ.methods
                _ -> Test.fail "Should be a Meta.Type: " + meta_typ.to_text

            methods.sort . should_equal ['bar', 'baz', 'first_method', 'foo', 'my_method', 'other_method', 'second_method']

        Test.specify "static methods of MyType" <|
            methods = Meta.meta (Meta.type_of My_Type) . methods
            methods.sort . should_equal ['Value', 'create', 'factory', 'first_method', 'my_method', 'other_method', 'second_method']

        Test.specify "methods of Integer" <|
            Meta.meta Integer . methods . sort . should_equal ['bit_shift_l', 'round', 'truncate']

        Test.specify "static methods of Integer" <|
            Meta.meta (Meta.type_of Integer) . methods . sort . should_equal ['bit_shift_l', 'parse', 'parse_builtin', 'round', 'truncate']

        Test.specify "methods of Any" <|
            Meta.meta Any . methods . should_contain "to_text"

        Test.specify "should correctly handle Java values" <|
            java_meta = Meta.meta Java_Random.new
            java_meta . should_be_a Meta.Polyglot
            java_meta . get_language . should_equal Meta.Language.Java

        Test.specify "should correctly handle equality of Java values" <|
            a = JavaLocale.new "en"
            b = JavaLocale.new "en"
            c = JavaLocale.new "pl"

            a==a . should_be_true
            a==b . should_be_true
            a==c . should_be_false

            (Test_Type.Value a)==(Test_Type.Value a) . should_be_true
            (Test_Type.Value a)==(Test_Type.Value b) . should_be_true
            (Test_Type.Value a)==(Test_Type.Value c) . should_be_false

        Test.specify "get annotations" <|
            Meta.get_annotation Meta_Spec .test_method "a" . should_equal 7
            Meta.get_annotation Meta_Spec .test_method "b" . should_equal (Test_Type.Value 49)
            Meta.get_annotation Meta_Spec .test_method "c" . should_fail_with Text
            Meta.get_annotation Meta_Spec .test_method "c" . catch . should_equal "Error Value"
            Meta.get_annotation Meta_Spec .test_method "x" . should_equal Nothing

            value = My_Type.Value 99 "bar" True
            Meta.get_annotation value .first_method "param" . should_equal 11
            Meta.get_annotation value .second_method "param" . should_equal Nothing
            Meta.get_annotation value .third_method "param" . should_equal Nothing
            Meta.get_annotation value .other_method "a" 7 . should_equal 12
            Meta.get_annotation value .other_method "b" value . should_equal 99
            Meta.get_annotation value .other_method "c" . should_equal Nothing

            Meta.get_annotation value .my_method "self" . should_equal "self"

        Test.specify "no constructor annotations on value" <|
            value = My_Type.Value 99 "bar" True
            Meta.get_annotation value .Value "foo" . should_equal Nothing
            Meta.get_annotation value .Value "bar" . should_equal Nothing
            Meta.get_annotation value .Value "baz" . should_equal Nothing

        Test.specify "get annotations on constructor" <|
            Meta.get_annotation My_Type .Value "foo" 7 8 . should_equal 15
            Meta.get_annotation My_Type .Value "bar" . should_equal Nothing
            Meta.get_annotation My_Type .Value "baz" . should_equal (My_Type.Value 1 2 3)

    Test.group "Check Nothing and NaN" <|
        Test.specify "Nothing.is_a Nothing" <|
            Nothing.is_a Nothing . should_be_true
            Meta.is_same_object Nothing Nothing . should_be_true

        Test.specify "type_of Nothing is Nothing" <|
            Meta.type_of Nothing . should_equal Nothing

        Test.specify "NaN and NaN should be the same object" <|
            Meta.is_same_object Number.nan Number.nan . should_be_true
            (Number.nan == Number.nan) . should_be_false

    Test.group "Atom with holes" <|
        Test.specify "construct and fill" <|
            pair = Meta.atom_with_hole (e -> My_Type.Value 1 e 3)

            atom = pair.value
            fill = pair.fill

            Meta.is_atom atom . should_be_true

            atom.foo . should_equal 1
            atom.baz . should_equal 3
            case atom.bar of
                n : Number -> Test.fail "Shouldn't be number yet: "+n
                _ -> Nothing

            tpe_of_bar = Meta.type_of atom.bar
            tpe_of_bar.is_error . should_equal True

            fill 2
            atom.bar . should_equal 2
            tpe_of_bar_after_fill = Meta.type_of atom.bar
            tpe_of_bar_after_fill . should_equal Integer

            fill 10 # no change
            atom.bar . should_equal 2

        Test.specify "construct and fill with type" <|
            pair = Meta.atom_with_hole (e -> My_Ascribed_Type.Value_With_Type 1 e 3)

            atom = pair.value
            fill = pair.fill

            Meta.is_atom atom . should_be_true

            atom.foo . should_equal 1
            atom.baz . should_equal 3
            case atom.bar of
                n : Number -> Test.fail "Shouldn't be number yet: "+n
                _ -> Nothing

            tpe_of_bar = Meta.type_of atom.bar
            tpe_of_bar.is_error . should_equal True

            fill 2
            atom.bar . should_equal 2
            tpe_of_bar_after_fill = Meta.type_of atom.bar
            tpe_of_bar_after_fill . should_equal Integer

            fill 10 # no change
            atom.bar . should_equal 2

        Test.specify "reject wrong type" <|
            pair = Meta.atom_with_hole (e -> My_Ascribed_Type.Value_With_Type 1 e 3)
            fill = pair.fill
            Panic.catch Any (fill "Two") err->err.convert_to_dataflow_error . should_fail_with Type_Error

        Test.specify "direct use of pair.fill" <|
            pair = Meta.atom_with_hole (e -> My_Ascribed_Type.Value_With_Type 1 e 3)
            pair.fill 2
            pair.value.bar . should_equal 2

        Test.specify "fail if atom_with_hole isn't used" <|
            key = Panic.catch Uninitialized_State handler=(caught_panic-> caught_panic.payload.key) <|
                Meta.atom_with_hole (_ -> My_Type.Value 1 2 3)
            case key of
                t : My_Type ->
                    t.foo . should_equal 1
                    t.bar . should_equal 2
                    t.baz . should_equal 3

        Test.specify "fail if non-atom is created" <|
            key = Panic.catch Uninitialized_State handler=(caught_panic-> caught_panic.payload.key) <|
                Meta.atom_with_hole (_ -> 2)
            case key of
                t : Number ->
                    t . should_equal 2

        Test.specify "only one atom_with_hole is used" <|
            pair = Meta.atom_with_hole (e -> My_Type.Value e e e)
            atom = pair.value
            fill = pair.fill

            Meta.is_atom atom . should_be_true

            case atom.foo of
                n : Number -> Test.fail "Shouldn't be number yet: "+n
                _ -> Nothing
            case atom.baz of
                n : Number -> Test.fail "Shouldn't be number yet: "+n
                _ -> Nothing
            case atom.bar of
                n : Number -> Test.fail "Shouldn't be number yet: "+n
                _ -> Nothing

            fill 2
            atom.foo . should_equal 2

            fill 10 # no change
            atom.foo . should_equal 2

            case atom.baz of
                n : Number -> Test.fail "Not changed to number: "+n
                _ -> Nothing
            case atom.bar of
                n : Number -> Test.fail "Not changed to number: "+n
                _ -> Nothing
    Test.group "Unresolved symbol"
        Test.specify "should be treated as a Function" <|
            (_.is_nothing) . is_a Function . should_equal True
            (.is_nothing) . is_a Function . should_equal True
            Meta.type_of (_.is_nothing) . should_equal Function
            Meta.type_of (.is_nothing) . should_equal Function

main = Test_Suite.run_main spec
