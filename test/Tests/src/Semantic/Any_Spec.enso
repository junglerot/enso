from Standard.Base import all

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions
from project.Semantic.Definitions.Any_Types import all

spec =
    Test.group "Any.map_nothing" <|
        Test.specify "should apply the function to a value" <|
            10.map_nothing *2 . should_equal 20

        Test.specify "should return `Nothing` unchanged" <|
            Nothing.map_nothing *2 . should_equal Nothing

    Test.group "Callables" <|
        Test.specify "should be able to be applied in a pipeline using |>" <|
            (1 |> *2) . should_equal 2
            (2 |> My_Type.Value) . should_equal (My_Type.Value 2)
            (2.3 |> .floor) . should_equal 2

        Test.specify "should be able to be applied to an argument using <|" <|
            (*2 <| 1) . should_equal 2
            (My_Type.Value <| 2) . should_equal (My_Type.Value 2)
            (.floor <| 2.3) . should_equal 2

        Test.specify "should be able to be composed backward using <<" <|
            (+1 << *2) 2 . should_equal 5
            (My_Type.Value << *2) 2 . should_equal <| My_Type.Value 4
            (.floor << *2.25) 2 . should_equal 4

        Test.specify "should be able to be composed forward using >>" <|
            (+1 >> *2) 2 . should_equal 6
            (*2 >> My_Type.Value) 2 . should_equal <| My_Type.Value 4
            (*2 >> .floor) 2.75 . should_equal 5

        Test.specify "should define generic inequality on values" <|
            (1 != 2) . should_be_true
            (1 != 1) . should_be_false

    Test.group "Any's methods" <|
        Test.specify "should not be overridable when called statically" <|
            My_Type.Value 33 . x . should_equal "Any:(My_Type.Value 33)"
            With_X.Value 44 . x . should_equal "With_X:(With_X.Value 44)"
            With_Y.Value 44 . x . should_equal "With_Y:With_Y(44)"
            Any.x . to_text . should_equal "Any.type.x[Any_Types.enso:6-26]"
            My_Type.x . should_equal "Any:My_Type"
            With_X.x . to_text . should_equal "Any:With_X"
            With_X.y . to_text . should_equal "With_X.type.y[Any_Types.enso:12-32]"
            With_Y.x . to_text . should_equal "Any:With_Y"
            With_Y.y . to_text . should_equal "With_Y.type.y[Any_Types.enso:18-38]"
            With_X.to_text . to_text . should_equal "With_X"
            With_Y.to_text . to_text . should_equal "With_Y"
            Any.x self=With_X . should_equal "Any:With_X"
            Any.x self=With_Y . should_equal "Any:With_Y"
            Any.x (My_Type.Value 22) . should_equal "Any:(My_Type.Value 22)"
            Any.x (With_X.Value 22) . should_equal "Any:(With_X.Value 22)"
            Any.x (With_Y.Value 22) . should_equal "Any:With_Y(22)"
            Date.to_display_text . should_equal "Date"

main = Test_Suite.run_main spec
