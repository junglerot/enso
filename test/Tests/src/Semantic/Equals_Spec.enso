from Standard.Base import all

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

polyglot java import java.nio.file.Path as JavaPath
polyglot java import java.util.Random as Java_Random

type CustomEqType
    C1 f1
    C2 f1 f2

    sum self = case self of
        CustomEqType.C1 f1 -> f1
        CustomEqType.C2 f1 f2 -> f1 + f2

type CustomEqType_Comparator
    compare o1 o2 = if o1.sum == o2.sum then Ordering.Equal else Nothing
    hash o =
        comp = Comparable.from o.sum
        comp.hash o.sum

Comparable.from (_:CustomEqType) = CustomEqType_Comparator

type Child
    Value number

type Child_Comparator
    compare child1 child2 = if child1.number % 100 == child2.number % 100 then Ordering.Equal else Nothing
    hash child =
        comp = Comparable.from child.number
        comp.hash (child.number % 100)

Comparable.from (_:Child) = Child_Comparator

type Parent
    Value child

type GrandParent
    Value parent

type ManyFieldType
    Value f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 f13 f14 f15

type FourFieldType
    Value f1 f2 f3 f4

type Point
    Value x y

type Rect
    Value (a:Point) (b:Point)

type Node
    C1 f1
    C2 f1 f2
    C3 f1 f2 f3
    C4 f1 f2 f3 f4
    C5 f1 f2 f3 f4 f5
    Nil
    Value value

    ## Deep copy the tree to ensure that we cannot do Meta.is_same_object shortcut.
    deep_copy : Node
    deep_copy self =
        case self of
            Node.Nil -> Node.Nil
            Node.Value value -> Node.Value value
            Node.C1 f1 -> Node.C1 (f1.deep_copy)
            Node.C2 f1 f2 -> Node.C2 (f1.deep_copy) (f2.deep_copy)
            Node.C3 f1 f2 f3 -> Node.C3 (f1.deep_copy) (f2.deep_copy) (f3.deep_copy)
            Node.C4 f1 f2 f3 f4 -> Node.C4 (f1.deep_copy) (f2.deep_copy) (f3.deep_copy) (f4.deep_copy)
            Node.C5 f1 f2 f3 f4 f5 -> Node.C5 (f1.deep_copy) (f2.deep_copy) (f3.deep_copy) (f4.deep_copy) (f5.deep_copy)
            _ -> Error.throw ("Unexpected type " + self.to_text)


create_random_tree : Integer -> Java_Random -> Integer
create_random_tree max_depth rnd cur_depth=0 =
    if cur_depth == max_depth then Node.Nil else
        next_depth = cur_depth + 1
        children_count = rnd.nextInt 6
        children = (0.up_to children_count).map _-> @Tail_Call create_random_tree max_depth rnd next_depth
        case children_count of
            0 -> Node.Value 42
            1 -> Node.C1 (children.at 0)
            2 -> Node.C2 (children.at 0) (children.at 1)
            3 -> Node.C3 (children.at 0) (children.at 1) (children.at 2)
            4 -> Node.C4 (children.at 0) (children.at 1) (children.at 2) (children.at 3)
            5 -> Node.C5 (children.at 0) (children.at 1) (children.at 2) (children.at 3) (children.at 4)
            _ -> Error.throw ("Unexpected number of children: " + children_count.to_text)


foreign js js_false = """
    return false


foreign js js_true = """
    return true

foreign js js_text_foo = """
    return 'foo'


spec =
    Test.group "Operator ==" <|
        Test.specify "should handle primitive values" <|
            (2 == (2.0)).should_be_true
            (2 == (2.1)).should_be_false
            (2.0).should_equal 2
            (js_true == True).should_be_true
            (js_false == False).should_be_true
            (js_true == False).should_be_false
            (js_text_foo == "foo").should_be_true

        Test.specify "should handle Text via NFD normalization" <|
            ('ś' == 's\u0301') . should_be_true
            ('e\u0301abc' == 'éabc') . should_be_true
            ('e\u0301abc' == 'é') . should_be_false
            ((Point.Value 'ś' 23.0) == (Point.Value 's\u0301' 23)) . should_be_true

        Test.specify "should dispatch to overriden `==` on atoms" <|
            (Child.Value 11 == Child.Value 111) . should_be_true

        Test.specify "should dispatch to overriden `==` on atoms transitively" <|
            child1 = Child.Value 11
            parent1 = Parent.Value child1
            grand_parent1 = GrandParent.Value parent1

            child2 = Child.Value 111
            parent2 = Parent.Value child2
            grand_parent2 = GrandParent.Value parent2

            (grand_parent1 == grand_parent2).should_be_true

        Test.specify "should handle `==` on types with many fields with custom comparator" <|
            many_fields1 = ManyFieldType.Value (Child.Value 1) (Child.Value 2) (Child.Value 3) (Child.Value 4) (Child.Value 5) (Child.Value 6) (Child.Value 7) (Child.Value 8) (Child.Value 9) (Child.Value 10) (Child.Value 11) (Child.Value 12) (Child.Value 13) (Child.Value 14) (Child.Value 15)
            many_fields2 = ManyFieldType.Value (Child.Value 101) (Child.Value 102) (Child.Value 103) (Child.Value 104) (Child.Value 105) (Child.Value 106) (Child.Value 107) (Child.Value 108) (Child.Value 109) (Child.Value 110) (Child.Value 111) (Child.Value 112) (Child.Value 113) (Child.Value 114) (Child.Value 115)

            (many_fields1 == many_fields2).should_be_true

        Test.specify "should handle `==` on atoms with fields with mixed comparators" <|
            obj_1 = FourFieldType.Value (Child.Value 1) 42 (Child.Value 2) 83
            obj_2 = FourFieldType.Value (Child.Value 101) 42 (Child.Value 102) 83
            (obj_1 == obj_2).should_be_true

        Test.specify "should be able to compare atoms with different constructors" <|
            ((CustomEqType.C1 10) == (CustomEqType.C2 7 3)).should_be_true
            ((CustomEqType.C1 0) == (CustomEqType.C2 7 3)).should_be_false

        Test.specify "should dispatch to equals on host values" <|
            path1 = JavaPath.of "home" "user" . resolve "file.txt"
            path2 = JavaPath.of "home" "user" "file.txt"
            (path1 == path2).should_be_true
            path3 = path1.resolve "subfile.txt"
            (path3 == path2).should_be_false

        Test.specify "should return False for different Atoms with same fields" <|
            rect = Rect.Value (Point.Value 1 2) (Point.Value 3 4)
            four_field = FourFieldType.Value 1 2 3 4
            (rect == four_field).should_be_false

        Test.specify "should handle `==` on types" <|
            (Child == Child).should_be_true
            (Child == Point).should_be_false
            (Point == Child).should_be_false
            (Boolean == Any).should_be_false
            (Boolean == Boolean).should_be_true

        Test.specify "should handle `==` on types with Any as first operand" pending="Any == Boolean resolves to Any.type.== static method call" <|
            (Any == Boolean).should_be_false
            (Any == Any).should_be_true

        Test.specify "should dispatch to overriden `==` in vectors" <|
            ([(Child.Value 1)] == [(Child.Value 101)]).should_be_true
            ([(Child.Value 1)] == [(Child.Value 2)]).should_be_false

        Test.specify "should dispatch to overriden `==` in arrays" <|
            ((Array.new_1 (Child.Value 1)) == (Array.new_1 (Child.Value 101))).should_be_true

        Test.specify "should handle recursive atoms without custom `==`" <|
            rnd = (Random.new seed=42).java_random
            trees = (0.up_to 5).map _->
                create_random_tree 5 rnd
            trees.each tree->
                dupl_tree = tree.deep_copy
                Test.with_clue "Seed sed to 42" (tree == dupl_tree).should_be_true


main = Test_Suite.run_main spec
