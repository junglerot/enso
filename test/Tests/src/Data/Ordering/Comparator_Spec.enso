from Standard.Base import all

import Standard.Base.Data.Ordering.Comparator

polyglot java import java.lang.ClassCastException

import Standard.Test

# === Test Resources ===

type Ord
    Ord_Data number

Ord.compare_to : Ord -> Ordering
Ord.compare_to self that = that.number.compare_to self.number

type No_Ord
    No_Ord_Data number

# Tests

spec = Test.group "Object Comparator" <|
    handle_classcast = Panic.catch ClassCastException handler=(Error.throw Vector.Incomparable_Values_Error)
    default_comparator a b = handle_classcast <| Comparator.new.compare a b
    case_insensitive a b = handle_classcast <| Comparator.for_text_ordering (Text_Ordering_Data False Case_Insensitive_Data) . compare a b

    Test.specify "can compare numbers" <|
        ((default_comparator 1 2) < 0) . should_equal True
        ((default_comparator 1 1.2) < 0) . should_equal True
        ((default_comparator 1 1) == 0) . should_equal True

    Test.specify "can compare booleans" <|
        ((default_comparator True False) > 0) . should_equal True
        ((default_comparator True True) == 0) . should_equal True
        ((default_comparator False False) == 0) . should_equal True

    Test.specify "can compare Nothing and it ends up as lowest value" <|
        ((default_comparator 1 Nothing) > 0) . should_equal True
        ((default_comparator Nothing 1.235) < 0) . should_equal True
        ((default_comparator True Nothing) > 0) . should_equal True
        ((default_comparator Nothing False) < 0) . should_equal True
        ((default_comparator "A" Nothing) > 0) . should_equal True
        ((default_comparator Nothing "ZSA") < 0) . should_equal True
        ((default_comparator Nothing Nothing) == 0) . should_equal True

    Test.specify "can compare Text with Enso standard defaults" <|
        ((default_comparator "A" "a") < 0) . should_equal True
        ((default_comparator "ABBA" "ABBA") == 0) . should_equal True
        ((default_comparator '\u00E9' '\u0065\u{301}') == 0) . should_equal True

    Test.specify "can compare Text with case-insensitive comparisons" <|
        ((case_insensitive "A" "a") == 0) . should_equal True
        ((case_insensitive "ABBA" "abba") == 0) . should_equal True
        ((case_insensitive '\u00E9' '\u0065\u{301}') == 0) . should_equal True

    Test.specify "can compare custom types" <|
        ((default_comparator (Ord_Data 1) (Ord_Data 0)) < 0) . should_equal True
        ((default_comparator (Ord_Data 1) (Ord_Data 1)) == 0) . should_equal True

    Test.specify "should fail gracefully for incomparable items" <|
        (default_comparator 1 True).should_fail_with Vector.Incomparable_Values_Error
        (default_comparator (No_Ord_Data 1) (No_Ord_Data 2)).should_fail_with Vector.Incomparable_Values_Error

main = Test.Suite.run_main spec
