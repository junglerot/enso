from Standard.Base import all
import Standard.Base.Errors.Common.Incomparable_Values

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

spec =
    Test.group "Period" <|
        Test.specify "should create period years" <|
            period = (Period.new years=5)
            period.years . should_equal 5
            period.days . should_equal 0

        Test.specify "should add two Periods" <|
            ((Period.new years=1) + (Period.new years=2)).years . should_equal 3
            ((Period.new days=1) + (Period.new months=2)).days . should_equal 1
            ((Period.new days=1) + (Period.new months=2)).months . should_equal 2
            ((Period.new months=2) + (Period.new days=1)).days . should_equal 1
            ((Period.new months=2) + (Period.new days=1)).months . should_equal 2

        Test.specify "should subtract two Periods" <|
            ((Period.new years=2) - (Period.new years=1)).years . should_equal 1
            ((Period.new years=1) - (Period.new months=2)).months . should_equal (-2)
            ((Period.new years=1) - (Period.new months=2)).years . should_equal 1

        Test.specify "should get Period between two dates" <|
            (Period.between (Date.new year=100) (Date.new year=150)) . should_equal (Period.new years=50)
            (Period.between (Date.new year=150) (Date.new year=100)) . should_equal (Period.new years=(-50))
            (Period.between (Date.new 2022 10 19) (Date.new 2022 11 01)) . should_equal (Period.new days=13)

        Test.specify "should not compare between two periods" <|
            ((Period.new days=10) > (Period.new days=1)) . should_fail_with Incomparable_Values
            ((Period.new years=10) > (Period.new days=1)) . should_fail_with Incomparable_Values
            ((Period.new years=10 months=3) > (Period.new months=5)) . should_fail_with Incomparable_Values

        Test.specify "two Periods are equal iff their fields are equal" <|
            ((Period.new days=1) == (Period.new days=1)) . should_be_true
            ((Period.new months=12) == (Period.new years=1)) . should_be_false
            ((Period.new months=3) == (Period.new months=3)) . should_be_true
            ((Period.new days=(-5)) == (Period.new days=(-5))) . should_be_true
            ((Period.new years=1 days=10) == (Period.new years=1 days=10)) . should_be_true
            ((Period.new days=1) != (Period.new months=1)) . should_be_true

        Test.specify "should render a friendly to display text" <|
            Period.new . to_display_text . should_equal "0D"
            Period.new years=2 . to_display_text . should_equal "2Y"
            Period.new months=24 . to_display_text . should_equal "2Y"
            Period.new months=4 . to_display_text . should_equal "4M"
            Period.new months=18 . to_display_text . should_equal "1Y 6M"
            Period.new years=2 days=3 . to_display_text . should_equal "2Y 0M 3D"
            Period.new days=18 . to_display_text . should_equal "18D"

main = Test_Suite.run_main spec
