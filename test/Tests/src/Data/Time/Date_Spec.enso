from Standard.Base import all

import Standard.Base.Data.Text.Text_Sub_Range
import Standard.Base.Data.Time.Date_Period
import Standard.Base.Data.Time.Duration
from Standard.Base.Error.Common import Time_Error

import Standard.Test

import project.Data.Time.Date_Part_Spec

polyglot java import java.time.LocalDate
polyglot java import java.time.format.DateTimeFormatter

spec =
    spec_with "Date" Date.new Date.parse
    spec_with "JavaScriptDate" js_date js_parse
    spec_with "JavaDate" java_date java_parse
    spec_with "JavaScriptArrayWithADate" js_array_date js_parse

spec_with name create_new_date parse_date =
    Test.group name <|

        Test.specify "should create local date" <|
            date = create_new_date 2020 1 1
            date . year . should_equal 2020
            date . month . should_equal 1
            date . day . should_equal 1

        Test.specify "should handle errors when creating local date" <|
            case create_new_date 2020 30 30 . catch of
                Time_Error_Data msg ->
                    msg . should_equal "Invalid value for MonthOfYear (valid values 1 - 12): 30"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)

        Test.specify "should format local date using provided pattern" <|
            text = create_new_date 2020 12 21 . format "yyyyMMdd"
            text . should_equal "20201221"

        Test.specify "should format local date using default pattern" <|
            text = create_new_date 2020 12 21 . to_text
            text . should_equal "2020-12-21"

        Test.specify "should parse default time format" <|
            text = create_new_date 2020 12 21 . to_text
            date = parse_date text
            date . year . should_equal 2020
            date . month . should_equal 12
            date . day . should_equal 21

        Test.specify "should throw error when parsing invalid date" <|
            case parse_date "birthday" . catch of
                Time_Error_Data msg ->
                    msg . should_equal "Text 'birthday' could not be parsed at index 0"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)

        Test.specify "should parse local date" <|
            date = parse_date "1999-01-01"
            date . year . should_equal 1999
            date . month . should_equal 1
            date . day . should_equal 1

        Test.specify "should parse custom format" <|
            date = parse_date "1999 1 1" "yyyy M d"
            date . year . should_equal 1999
            date . month . should_equal 1
            date . day . should_equal 1

        Test.specify "should throw error when parsing custom format" <|
            date = parse_date "1999-01-01" "yyyy M d"
            case date.catch of
                Time_Error_Data msg ->
                    msg . should_equal "Text '1999-01-01' could not be parsed at index 4"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)

        Test.specify "should convert to time" <|
            time = create_new_date 2000 12 21 . to_date_time (Time_Of_Day.new 12 30 45) Time_Zone.utc
            time . year . should_equal 2000
            time . month . should_equal 12
            time . day . should_equal 21
            time . hour . should_equal 12
            time . minute . should_equal 30
            time . second . should_equal 45
            time . nanosecond . should_equal 0
            time . zone . zone_id . should_equal Time_Zone.utc.zone_id

        Test.specify "should convert to Json" <|
            date = create_new_date 2001 12 21
            date.to_json.should_equal <|
                Json.from_pairs [["type", "Date"], ["day", date.day], ["month", date.month], ["year", date.year]]

        Test.specify "should add date-based interval" <|
            date = create_new_date 1970 + 1.day
            date . year . should_equal 1970
            date . month . should_equal 1
            date . day . should_equal 2

        Test.specify "should subtract date-based interval" <|
            date = create_new_date 1970 - 1.year
            date . year . should_equal 1969
            date . month . should_equal 1
            date . day . should_equal 1

        Test.specify "should support mixed interval operators" <|
            date = create_new_date 1970 + 1.month - 1.year
            date . year . should_equal 1969
            date . month . should_equal 2
            date . day . should_equal 1

        Test.specify "should throw error when adding time-based interval" <|
            case (create_new_date 1970 + 1.hour) . catch of
                Time_Error_Data message ->
                    message . should_equal "Date does not support time intervals"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)

        Test.specify "should throw error when subtracting time-based interval" <|
            case (create_new_date 1970 - (1.day - 1.minute)) . catch of
                Time_Error_Data message ->
                    message . should_equal "Date does not support time intervals"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)

        Test.specify "should be comparable" <|
            date_1 = parse_date "2021-01-02"
            date_2 = parse_date "2021-01-01"
            (date_1 == date_2) . should_be_false
            date_1==date_1 . should_be_true
            date_1!=date_2 . should_be_true
            date_1>date_2 . should_be_true
            date_1<date_2 . should_be_false

        Test.specify "should allow to find start and end of a Date_Period containing the current date" <|
            d1 = create_new_date 2022 9 12
            d1.start_of Date_Period.Year . should_equal (Date.new 2022 1 1)
            d1.end_of Date_Period.Year . should_equal (Date.new 2022 12 31)
            d1.start_of Date_Period.Quarter . should_equal (Date.new 2022 7 1)
            d1.end_of Date_Period.Quarter . should_equal (Date.new 2022 9 30)
            d1.start_of Date_Period.Month . should_equal (Date.new 2022 9 1)
            d1.end_of Date_Period.Month . should_equal (Date.new 2022 9 30)

            d2 = create_new_date 2022 2 7
            d2.start_of Date_Period.Quarter . should_equal (Date.new 2022 1 1)
            d2.end_of Date_Period.Quarter . should_equal (Date.new 2022 3 31)
            d2.start_of Date_Period.Month . should_equal (Date.new 2022 2 1)
            d2.end_of Date_Period.Month . should_equal (Date.new 2022 2 28)

            d3 = create_new_date 2020 2 17
            d3.start_of Date_Period.Year . should_equal (Date.new 2020 1 1)
            d3.end_of Date_Period.Year . should_equal (Date.new 2020 12 31)
            d3.start_of Date_Period.Month . should_equal (Date.new 2020 2 1)
            d3.end_of Date_Period.Month . should_equal (Date.new 2020 2 29)

            d4 = create_new_date 1970 12 31
            d4.start_of Date_Period.Year . should_equal (Date.new 1970 1 1)
            d4.end_of Date_Period.Year . should_equal (Date.new 1970 12 31)
            d4.start_of Date_Period.Quarter . should_equal (Date.new 1970 10 1)
            d4.end_of Date_Period.Quarter . should_equal (Date.new 1970 12 31)
            d4.start_of Date_Period.Month . should_equal (Date.new 1970 12 1)
            d4.end_of Date_Period.Month . should_equal (Date.new 1970 12 31)

            d5 = create_new_date 2040 1 1
            d5.start_of Date_Period.Year . should_equal (Date.new 2040 1 1)
            d5.end_of Date_Period.Year . should_equal (Date.new 2040 12 31)
            d5.start_of Date_Period.Quarter . should_equal (Date.new 2040 1 1)
            d5.end_of Date_Period.Quarter . should_equal (Date.new 2040 3 31)
            d5.start_of Date_Period.Month . should_equal (Date.new 2040 1 1)
            d5.end_of Date_Period.Month . should_equal (Date.new 2040 1 31)

            (create_new_date 2000 7 1).start_of Date_Period.Quarter . should_equal (Date.new 2000 7 1)
            (create_new_date 2000 6 30).start_of Date_Period.Quarter . should_equal (Date.new 2000 4 1)

            (create_new_date 2000 7 1).end_of Date_Period.Quarter . should_equal (Date.new 2000 9 30)
            (create_new_date 2000 6 30).end_of Date_Period.Quarter . should_equal (Date.new 2000 6 30)

    Date_Part_Spec.spec name create_new_date


main = Test.Suite.run_main spec

parseNormally x y = (Date.parse x y) . to_text

js_parse text format=Nothing =
    d = Date.parse text format
    js_date d.year d.month d.day

## JSDate is not only a date but also time and timezone.
## Here, we explicitly convert JS ZonedDateTime to LocalDate
js_set_zone local_datetime =
    zone = Time_Zone.utc
    datetime_with_tz = local_datetime.at_zone zone
    diff = Duration.between datetime_with_tz local_datetime (timezone_aware=False)
    (datetime_with_tz + diff).to_localdate_builtin

js_date year month=1 day=1 =
    Panic.catch Any (js_set_zone (js_date_impl year month day)) (err -> Error.throw (Time_Error_Data err.payload.cause))

js_array_date year month=1 day=1 =
    arr = Panic.catch Any (js_array_dateCreate year month day) (err -> Error.throw (Time_Error_Data err.payload.cause))
    js_set_zone arr.at(0)

java_parse date_text pattern=Nothing =
    Panic.catch Polyglot_Error_Data handler=(err -> Error.throw (Time_Error_Data err.payload.cause.getMessage)) <|
        if pattern.is_nothing then LocalDate.parse date_text else
            formatter = DateTimeFormatter.ofPattern pattern
            LocalDate.parse date_text formatter

java_date year month=1 day=1 =
    Panic.catch Any (LocalDate.of year month day) (err -> Error.throw (Time_Error_Data <| err.payload.to_display_text.drop (Text_Sub_Range.First 16)))

foreign js js_date_impl year month=1 day=1 = """
    if (month > 12) {
        throw `Invalid value for MonthOfYear (valid values 1 - 12): ${month}`;
    }
    return new Date(year, month - 1, day);

foreign js js_array_dateCreate year month day = """
    if (month > 12) {
        throw `Invalid value for MonthOfYear (valid values 1 - 12): ${month}`;
    }
    return [ new Date(year, month - 1, day) ];
