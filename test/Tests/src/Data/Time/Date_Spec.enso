from Standard.Base import all
import Standard.Base.Errors.Common.Incomparable_Values
import Standard.Base.Errors.Common.Type_Error
import Standard.Base.Errors.Time_Error.Time_Error

from Standard.Test import Problems, Test, Test_Suite
import Standard.Test.Extensions

import project.Data.Time.Date_Part_Spec

polyglot java import java.time.LocalDate
polyglot java import java.time.format.DateTimeFormatter

spec =
    spec_with "Date" Date.new Date.parse
    spec_with "JavaScriptDate" js_date js_parse
    spec_with "JavaDate" java_date java_parse
    spec_with "JavaScriptArrayWithADate" js_array_date js_parse

spec_with name create_new_date parse_date =
    Test.group name <|

        Test.specify "should create local date" <|
            date = create_new_date 2020 1 1
            date . year . should_equal 2020
            date . month . should_equal 1
            date . day . should_equal 1

        Test.specify "should handle errors when creating local date" <|
            case create_new_date 2020 30 30 . catch of
                Time_Error.Error msg ->
                    msg . should_equal "Invalid value for MonthOfYear (valid values 1 - 12): 30"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)

        Test.specify "should format local date using provided pattern" <|
            text = create_new_date 2020 12 21 . format "yyyyMMdd"
            text . should_equal "20201221"

        Test.specify "should format local date using provided pattern and US locale" <|
            d = create_new_date 2020 6 21
            d.format "d. MMM yyyy" . should_equal "21. Jun 2020"
            d.format "d. MMMM yyyy" . should_equal "21. June 2020"

        Test.specify "should format local date using provided pattern and locale" <|
            d = create_new_date 2020 6 21
            d.format "d. MMMM yyyy" (Locale.new "gb") . should_equal "21. Jun 2020"
            d.format "d. MMMM yyyy" (Locale.new "fr") . should_equal "21. juin 2020

        Test.specify "should format local date using default pattern" <|
            text = create_new_date 2020 12 21 . to_text
            text . should_equal "2020-12-21"

        Test.specify "should parse default time format" <|
            text = create_new_date 2020 12 21 . to_text
            date = parse_date text
            date . year . should_equal 2020
            date . month . should_equal 12
            date . day . should_equal 21

        Test.specify "should throw error when parsing invalid date" <|
            case parse_date "birthday" . catch of
                Time_Error.Error msg ->
                    msg . should_equal "Text 'birthday' could not be parsed at index 0"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)

        Test.specify "should parse local date" <|
            date = parse_date "1999-01-01"
            date . year . should_equal 1999
            date . month . should_equal 1
            date . day . should_equal 1

        Test.specify "should parse custom format" <|
            date = parse_date "1999 1 1" "yyyy M d"
            date . year . should_equal 1999
            date . month . should_equal 1
            date . day . should_equal 1

        Test.specify "should parse text month formats" <|
            date = parse_date "1999 Jan 1" "yyyy MMM d"
            date . year . should_equal 1999
            date . month . should_equal 1
            date . day . should_equal 1

        Test.specify "should parse text long month formats" <|
            date = parse_date "1999 January 1" "yyyy MMMM d"
            date . year . should_equal 1999
            date . month . should_equal 1
            date . day . should_equal 1

        Test.specify "should throw error when parsing custom format" <|
            date = parse_date "1999-01-01" "yyyy M d"
            case date.catch of
                Time_Error.Error msg ->
                    msg . should_equal "Text '1999-01-01' could not be parsed at index 4"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)

        Test.specify "should convert to time" <|
            time = create_new_date 2000 12 21 . to_date_time (Time_Of_Day.new 12 30 45) Time_Zone.utc
            time . year . should_equal 2000
            time . month . should_equal 12
            time . day . should_equal 21
            time . hour . should_equal 12
            time . minute . should_equal 30
            time . second . should_equal 45
            time . nanosecond . should_equal 0
            time . zone . zone_id . should_equal Time_Zone.utc.zone_id

        Test.specify "date-time conversion should work with interop values" <|
            date = create_new_date 2000 12 21
            time = Time_Of_Day.new 12 30 45
            datetime = time.to_date_time date
            datetime.date . should_equal date
            datetime.time_of_day . should_equal time

        Test.specify "should convert to Json" <|
            date = create_new_date 2001 12 21
            date.to_json.should_equal <|
                JS_Object.from_pairs [["type", "Date"], ["constructor", "new"], ["day", date.day], ["month", date.month], ["year", date.year]] . to_text

        Test.specify "should add date-based interval" <|
            date = create_new_date 1970 + (Period.new days=1)
            date . year . should_equal 1970
            date . month . should_equal 1
            date . day . should_equal 2

        Test.specify "should subtract date-based interval" <|
            date = create_new_date 1970 - (Period.new years=1)
            date . year . should_equal 1969
            date . month . should_equal 1
            date . day . should_equal 1

        Test.specify "should support mixed interval operators" <|
            date = create_new_date 1970 + (Period.new months=1) - (Period.new years=1)
            date . year . should_equal 1969
            date . month . should_equal 2
            date . day . should_equal 1

        Test.specify "should throw error when adding time-based Duration" <|
            Test.expect_panic_with matcher=Type_Error <|
                 create_new_date 1970 + (Duration.new hours=1)

        Test.specify "should throw error when subtracting time-based Duration" <|
            Test.expect_panic_with matcher=Type_Error <|
                 create_new_date 1970 - (Duration.new minutes=1)

        Test.specify "should support addition of Date_Period" <|
            time = create_new_date 1970
            time+Date_Period.Year . should_equal <| create_new_date 1971
            time+Date_Period.Quarter . should_equal <| create_new_date 1970 4
            time+Date_Period.Month . should_equal <| create_new_date 1970 2
            time+Date_Period.Week . should_equal <| create_new_date 1970 1 8
            time+Date_Period.Day . should_equal <| create_new_date 1970 1 2

        Test.specify "should support subtraction of Date_Period" <|
            time = create_new_date 1970
            time-Date_Period.Year . should_equal <| create_new_date 1969
            time-Date_Period.Quarter . should_equal <| create_new_date 1969 10
            time-Date_Period.Month . should_equal <| create_new_date 1969 12
            time-Date_Period.Week . should_equal <| create_new_date 1969 12 25
            time-Date_Period.Day . should_equal <| create_new_date 1969 12 31

        Test.specify "should support mixed addition and subtraction of Date_Period" <|
            time = create_new_date 1970
            time+Date_Period.Quarter-Date_Period.Month . should_equal <| create_new_date 1970 3 1
            time-Date_Period.Month+Date_Period.Year . should_equal <| create_new_date 1970 12 1

        Test.specify "should be comparable" <|
            date_1 = parse_date "2021-01-02"
            date_2 = parse_date "2021-01-01"
            (date_1 == date_2) . should_be_false
            date_1==date_1 . should_be_true
            date_1!=date_2 . should_be_true
            date_1>date_2 . should_be_true
            date_1<date_2 . should_be_false

            datetime = Date_Time.new 2021 1 2 12 40
            Ordering.compare date_1 datetime . should_fail_with Incomparable_Values
            date_1<datetime . should_fail_with Incomparable_Values
            date_1>=datetime . should_fail_with Incomparable_Values
            date_1==datetime . should_be_false

        Test.specify "should create date before epoch start" <|
            (create_new_date 100 1 2).year   . should_equal 100
            (create_new_date 100 1 2).month  . should_equal 1
            (create_new_date 100 1 2).day    . should_equal 2

        Test.specify "Gregorian calendar related functionality should produce warning before epoch start" <|
            is_time_error v = case v of
                _ : Time_Error -> True
                _ -> False
            expect_warning value = (Problems.get_attached_warnings value . any is_time_error) . should_be_true
            dates_before_epoch = [(create_new_date 100), (create_new_date 500 6 3)]
            dates_before_epoch.each date->
                expect_warning date.week_of_year
                expect_warning date.is_leap_year
                expect_warning date.day_of_week
                expect_warning date.length_of_month
                expect_warning date.length_of_year
                expect_warning date.week_of_year

        Test.specify "Gregorian calendar related functionality should work after epoch start" <|
            expect_no_warning value =
                ((Warning.get_all value).length == 0) . should_be_true
            dates_after_epoch = [(create_new_date 1583), (create_new_date 1582 10 16), (create_new_date 2020)]
            dates_after_epoch.each date->
                expect_no_warning date.week_of_year
                expect_no_warning date.is_leap_year
                expect_no_warning date.day_of_week
                expect_no_warning date.length_of_month
                expect_no_warning date.length_of_year
                expect_no_warning date.week_of_year

        Test.specify "should correctly determine the type of date" <|
            new_date = create_new_date 2020 6 1
            parsed_date = parse_date "2021-01-02"

            Meta.type_of new_date . should_equal_type Date
            Meta.type_of parsed_date . should_equal_type Date

        Test.specify "should allow to find start and end of a Date_Period containing the current date" <|
            d1 = create_new_date 2022 9 12
            d1.start_of Date_Period.Year . should_equal (Date.new 2022 1 1)
            d1.end_of Date_Period.Year . should_equal (Date.new 2022 12 31)
            d1.start_of Date_Period.Quarter . should_equal (Date.new 2022 7 1)
            d1.end_of Date_Period.Quarter . should_equal (Date.new 2022 9 30)
            d1.start_of Date_Period.Month . should_equal (Date.new 2022 9 1)
            d1.end_of Date_Period.Month . should_equal (Date.new 2022 9 30)
            d1.start_of (Date_Period.Week) . should_equal (Date.new 2022 9 12)
            d1.end_of (Date_Period.Week) . should_equal (Date.new 2022 9 18)
            d1.start_of (Date_Period.Week first_day=Day_Of_Week.Sunday) . should_equal (Date.new 2022 9 11)
            d1.end_of (Date_Period.Week first_day=Day_Of_Week.Sunday) . should_equal (Date.new 2022 9 17)
            d1.start_of (Date_Period.Week first_day=Day_Of_Week.Saturday) . should_equal (Date.new 2022 9 10)
            d1.end_of (Date_Period.Week first_day=Day_Of_Week.Saturday) . should_equal (Date.new 2022 9 16)

            d2 = create_new_date 2022 2 7
            d2.start_of Date_Period.Quarter . should_equal (Date.new 2022 1 1)
            d2.end_of Date_Period.Quarter . should_equal (Date.new 2022 3 31)
            d2.start_of Date_Period.Month . should_equal (Date.new 2022 2 1)
            d2.end_of Date_Period.Month . should_equal (Date.new 2022 2 28)

            d3 = create_new_date 2020 2 19
            d3.start_of Date_Period.Year . should_equal (Date.new 2020 1 1)
            d3.end_of Date_Period.Year . should_equal (Date.new 2020 12 31)
            d3.start_of Date_Period.Month . should_equal (Date.new 2020 2 1)
            d3.end_of Date_Period.Month . should_equal (Date.new 2020 2 29)
            d3.start_of (Date_Period.Week) . should_equal (Date.new 2020 2 17)
            d3.end_of (Date_Period.Week) . should_equal (Date.new 2020 2 23)
            d3.start_of (Date_Period.Week first_day=Day_Of_Week.Sunday) . should_equal (Date.new 2020 2 16)
            d3.end_of (Date_Period.Week first_day=Day_Of_Week.Sunday) . should_equal (Date.new 2020 2 22)

            d4 = create_new_date 1970 12 31
            d4.start_of Date_Period.Year . should_equal (Date.new 1970 1 1)
            d4.end_of Date_Period.Year . should_equal (Date.new 1970 12 31)
            d4.start_of Date_Period.Quarter . should_equal (Date.new 1970 10 1)
            d4.end_of Date_Period.Quarter . should_equal (Date.new 1970 12 31)
            d4.start_of Date_Period.Month . should_equal (Date.new 1970 12 1)
            d4.end_of Date_Period.Month . should_equal (Date.new 1970 12 31)

            d5 = create_new_date 2040 1 1
            d5.start_of Date_Period.Year . should_equal (Date.new 2040 1 1)
            d5.end_of Date_Period.Year . should_equal (Date.new 2040 12 31)
            d5.start_of Date_Period.Quarter . should_equal (Date.new 2040 1 1)
            d5.end_of Date_Period.Quarter . should_equal (Date.new 2040 3 31)
            d5.start_of Date_Period.Month . should_equal (Date.new 2040 1 1)
            d5.end_of Date_Period.Month . should_equal (Date.new 2040 1 31)

            (create_new_date 2000 7 1).start_of Date_Period.Quarter . should_equal (Date.new 2000 7 1)
            (create_new_date 2000 6 30).start_of Date_Period.Quarter . should_equal (Date.new 2000 4 1)

            (create_new_date 2000 7 1).end_of Date_Period.Quarter . should_equal (Date.new 2000 9 30)
            (create_new_date 2000 6 30).end_of Date_Period.Quarter . should_equal (Date.new 2000 6 30)

        Test.specify "should allow to compute the next Date_Period after a date" <|
            create_new_date 2000 2 1 . next Date_Period.Day . should_equal <| create_new_date 2000 2 2
            create_new_date 2000 2 1 . next Date_Period.Month . should_equal <| create_new_date 2000 3 1
            create_new_date 2000 2 1 . next Date_Period.Year . should_equal <| create_new_date 2001 2 1

        Test.specify "should allow to compute the previous Date_Period after a date" <|
            create_new_date 2000 2 1 . previous Date_Period.Day . should_equal <| create_new_date 2000 1 31
            create_new_date 2000 2 1 . previous Date_Period.Month . should_equal <| create_new_date 2000 1 1
            create_new_date 2000 2 1 . previous Date_Period.Year . should_equal <| create_new_date 1999 2 1

        Test.specify "should allow to compute the Period between two dates." <|
            create_new_date 2000 2 1 . until (create_new_date 2000 2 12) . should_equal <| Period.new 0 0 11
            create_new_date 2000 2 1 . until (create_new_date 2000 12 12) . should_equal <| Period.new 0 10 11
            create_new_date 2000 2 1 . until (create_new_date 2010 2 12) . should_equal <| Period.new 10 0 11

            create_new_date 2000 2 12 . until (create_new_date 2000 2 1) . should_equal <| Period.new 0 0 -11
            create_new_date 2000 12 12 . until (create_new_date 2000 2 1) . should_equal <| Period.new 0 -10 -11
            create_new_date 2010 2 12 . until (create_new_date 2000 2 1) . should_equal <| Period.new -10 0 -11

        Test.specify "should allow to compute the number of days until a date" <|
            create_new_date 2000 2 1 . days_until (create_new_date 2000 2 1) . should_equal 0
            create_new_date 2000 2 1 . days_until (create_new_date 2000 2 2) . should_equal 1
            create_new_date 2000 2 2 . days_until (create_new_date 2000 2 1) . should_equal -1
            create_new_date 2001 3 1 . days_until (create_new_date 2001 4 1) . should_equal 31
            create_new_date 2000 3 1 . days_until (create_new_date 2001 3 1) . should_equal 365
            create_new_date 2001 3 1 . days_until (create_new_date 2000 3 1) . should_equal -365

        Test.specify "should allow to compute the number of days until a date including the end date" <|
            create_new_date 2000 2 1 . days_until (create_new_date 2000 2 1) include_end_date=True . should_equal 1
            create_new_date 2000 2 1 . days_until (create_new_date 2000 2 2) include_end_date=True . should_equal 2
            create_new_date 2000 2 2 . days_until (create_new_date 2000 2 1) include_end_date=True . should_equal -2
            create_new_date 2001 3 1 . days_until (create_new_date 2001 4 1) include_end_date=True . should_equal 32
            create_new_date 2000 3 1 . days_until (create_new_date 2001 3 1) include_end_date=True . should_equal 366
            create_new_date 2001 3 1 . days_until (create_new_date 2000 3 1) include_end_date=True . should_equal -366

        Test.specify "should allow to compute the number of working days until a later date" <|
            # 2000-2-1 is a Tuesday
            create_new_date 2000 2 1 . work_days_until (create_new_date 2000 2 1) . should_equal 0
            create_new_date 2000 2 1 . work_days_until (create_new_date 2000 2 2) . should_equal 1

            ## 2000-2-3 is a Thursday, so we have 2 days until the weekend, then a full week,
               and then 2 more days in the following week.
            create_new_date 2000 2 3 . work_days_until (create_new_date 2000 2 16) . should_equal 2+5+2

            # 2000-2-4 is a Friday
            create_new_date 2000 2 4 . work_days_until (create_new_date 2000 2 5) . should_equal 1
            create_new_date 2000 2 4 . work_days_until (create_new_date 2000 2 6) . should_equal 1
            create_new_date 2000 2 4 . work_days_until (create_new_date 2000 2 7) . should_equal 1
            create_new_date 2000 2 4 . work_days_until (create_new_date 2000 2 8) . should_equal 2

            # 2000-2-5 is a Saturday
            create_new_date 2000 2 5 . work_days_until (create_new_date 2000 2 5) . should_equal 0
            create_new_date 2000 2 5 . work_days_until (create_new_date 2000 2 6) . should_equal 0
            create_new_date 2000 2 5 . work_days_until (create_new_date 2000 2 7) . should_equal 0
            create_new_date 2000 2 5 . work_days_until (create_new_date 2000 2 8) . should_equal 1

            # 2000-2-6 is a Sunday
            create_new_date 2000 2 6 . work_days_until (create_new_date 2000 2 6) . should_equal 0
            create_new_date 2000 2 6 . work_days_until (create_new_date 2000 2 7) . should_equal 0
            create_new_date 2000 2 6 . work_days_until (create_new_date 2000 2 8) . should_equal 1

            # If the end date precedes the start date, 0 is returned.
            create_new_date 2000 2 6 . work_days_until (create_new_date 2000 2 5) . should_equal 0
            create_new_date 2000 2 6 . work_days_until (create_new_date 1997 1 1) . should_equal 0

            # Behavior with leap years.
            create_new_date 2000 2 1 . work_days_until (create_new_date 2000 3 1) . should_equal 21
            create_new_date 1999 2 1 . work_days_until (create_new_date 1999 3 1) . should_equal 20
            create_new_date 2022 2 1 . work_days_until (create_new_date 2022 3 1) . should_equal 20

            # 2022-10-30 and 2022-03-27 are DST switch days, Sundays.
            create_new_date 2022 10 27 . work_days_until (create_new_date 2022 11 3) . should_equal 5
            create_new_date 2022 10 30 . work_days_until (create_new_date 2022 10 31) . should_equal 0
            create_new_date 2022 10 29 . work_days_until (create_new_date 2022 10 31) . should_equal 0
            create_new_date 2022 3 25 . work_days_until (create_new_date 2022 3 30) . should_equal 3
            create_new_date 2022 3 27 . work_days_until (create_new_date 2022 3 28) . should_equal 0

            create_new_date 2000 7 1 . work_days_until (create_new_date 2000 8 1) . should_equal 21
            create_new_date 2000 8 1 . work_days_until (create_new_date 2000 9 1) . should_equal 23
            create_new_date 2000 7 1 . work_days_until (create_new_date 2000 10 1) . should_equal 21+23+21

        holiday_november year =
            [create_new_date year 11 1, create_new_date year 11 2, create_new_date year 11 11]
        # We duplicate the holiday entries to check that the functions are resilient to such input data.
        duplicated_holiday_november year =
            holiday_november year + holiday_november year + holiday_november year
        Test.specify "should allow to compute the number of working days until a date, skipping custom set holidays" <|
            holiday_february = Vector.new 29 (i -> create_new_date 2000 2 i+1)
            create_new_date 2000 2 1 . work_days_until (create_new_date 2000 3 1) holiday_february . should_equal 0
            create_new_date 2000 2 10 . work_days_until (create_new_date 2000 2 12) holiday_february . should_equal 0
            create_new_date 2000 2 10 . work_days_until (create_new_date 2000 2 11) holiday_february . should_equal 0
            create_new_date 2000 2 10 . work_days_until (create_new_date 2000 2 10) holiday_february . should_equal 0
            create_new_date 2000 1 30 . work_days_until (create_new_date 2000 3 2) holiday_february . should_equal 2

            create_new_date 2000 11 1 . work_days_until (create_new_date 2000 12 1) (holiday_november 2000) . should_equal 20
            create_new_date 2000 11 1 . work_days_until (create_new_date 2000 12 1) (holiday_november 2020) . should_equal 22
            create_new_date 1999 11 1 . work_days_until (create_new_date 1999 12 1) (holiday_november 1999) . should_equal 19
            create_new_date 2000 11 1 . work_days_until (create_new_date 2000 12 1) (duplicated_holiday_november 2000) . should_equal 20
            create_new_date 2000 11 1 . work_days_until (create_new_date 2000 12 1) (duplicated_holiday_november 2020) . should_equal 22
            create_new_date 1999 11 1 . work_days_until (create_new_date 1999 12 1) (duplicated_holiday_november 1999) . should_equal 19

        Test.specify "should allow to compute the number of working days including the end, in a manner consistent with NETWORKDAYS" <|
            create_new_date 2000 2 1 . work_days_until (create_new_date 2000 2 1) include_end_date=True . should_equal 1
            create_new_date 2000 2 1 . work_days_until (create_new_date 2000 2 2) include_end_date=True . should_equal 2
            create_new_date 2000 2 3 . work_days_until (create_new_date 2000 2 16) include_end_date=True . should_equal 10
            create_new_date 2000 2 4 . work_days_until (create_new_date 2000 2 5) include_end_date=True . should_equal 1
            create_new_date 2000 2 4 . work_days_until (create_new_date 2000 2 6) include_end_date=True . should_equal 1
            create_new_date 2000 2 4 . work_days_until (create_new_date 2000 2 7) include_end_date=True . should_equal 2
            create_new_date 2000 2 4 . work_days_until (create_new_date 2000 2 8) include_end_date=True . should_equal 3
            create_new_date 2000 2 5 . work_days_until (create_new_date 2000 2 5) include_end_date=True . should_equal 0
            create_new_date 2000 2 5 . work_days_until (create_new_date 2000 2 6) include_end_date=True . should_equal 0
            create_new_date 2000 2 5 . work_days_until (create_new_date 2000 2 7) include_end_date=True . should_equal 1
            create_new_date 2000 2 5 . work_days_until (create_new_date 2000 2 8) include_end_date=True . should_equal 2
            create_new_date 2000 2 6 . work_days_until (create_new_date 2000 2 6) include_end_date=True . should_equal 0
            create_new_date 2000 2 6 . work_days_until (create_new_date 2000 2 7) include_end_date=True . should_equal 1
            create_new_date 2000 2 6 . work_days_until (create_new_date 2000 2 8) include_end_date=True . should_equal 2
            create_new_date 2000 2 6 . work_days_until (create_new_date 2000 2 5) include_end_date=True . should_equal 0

        Test.specify "should allow to shift the date by N working days" <|
            # 2000-2-1 is a Tuesday
            create_new_date 2000 2 1 . add_work_days 0 . should_equal (Date.new 2000 2 1)
            create_new_date 2000 2 1 . add_work_days . should_equal (Date.new 2000 2 2)
            create_new_date 2000 2 1 . add_work_days 2 . should_equal (Date.new 2000 2 3)

            create_new_date 2000 2 1 . add_work_days 21 . should_equal (Date.new 2000 3 1)

            # 2000-2-4 is a Friday
            create_new_date 2000 2 4 . add_work_days 0 . should_equal (Date.new 2000 2 4)
            create_new_date 2000 2 4 . add_work_days 1 . should_equal (Date.new 2000 2 7)
            create_new_date 2000 2 4 . add_work_days 2 . should_equal (Date.new 2000 2 8)

            # 2000-2-5 is a Saturday
            create_new_date 2000 2 5 . add_work_days 0 . should_equal (Date.new 2000 2 7)
            create_new_date 2000 2 5 . add_work_days 1 . should_equal (Date.new 2000 2 8)
            create_new_date 2000 2 5 . add_work_days 2 . should_equal (Date.new 2000 2 9)

            # 2000-2-6 is a Sunday
            create_new_date 2000 2 6 . add_work_days 0 . should_equal (Date.new 2000 2 7)
            create_new_date 2000 2 6 . add_work_days 1 . should_equal (Date.new 2000 2 8)

            # Behaviour in February depending on leap year.
            create_new_date 2000 2 27 . add_work_days 3 . should_equal (Date.new 2000 3 2)
            create_new_date 1999 2 27 . add_work_days 3 . should_equal (Date.new 1999 3 4)

            # 2022-10-30 and 2022-03-27 are DST switch days, Sundays.
            create_new_date 2022 10 30 . add_work_days 0 . should_equal (Date.new 2022 10 31)
            create_new_date 2022 10 30 . add_work_days 1 . should_equal (Date.new 2022 11 1)
            create_new_date 2022 3 27 . add_work_days 0 . should_equal (Date.new 2022 3 28)
            create_new_date 2022 3 27 . add_work_days 1 . should_equal (Date.new 2022 3 29)

        Test.specify "should allow to shift the date by negative amount of working days" <|
            # 2000-2-1 is a Tuesday
            create_new_date 2000 2 1 . add_work_days -1 . should_equal (Date.new 2000 1 31)
            create_new_date 2000 2 1 . add_work_days -2 . should_equal (Date.new 2000 1 28)
            create_new_date 2000 2 1 . add_work_days -3 . should_equal (Date.new 2000 1 27)
            create_new_date 2000 2 1 . add_work_days -5 . should_equal (Date.new 2000 1 25)
            create_new_date 2000 2 1 . add_work_days -7 . should_equal (Date.new 2000 1 21)

            # 2000-1-31 is a Monday
            create_new_date 2000 1 31 . add_work_days -1 . should_equal (Date.new 2000 1 28)
            create_new_date 2000 1 31 . add_work_days -2 . should_equal (Date.new 2000 1 27)
            create_new_date 2000 1 31 . add_work_days -4 . should_equal (Date.new 2000 1 25)
            create_new_date 2000 1 31 . add_work_days -5 . should_equal (Date.new 2000 1 24)
            create_new_date 2000 1 31 . add_work_days -6 . should_equal (Date.new 2000 1 21)

            # 2000-2-5 is a Saturday
            create_new_date 2000 2 5 . add_work_days -1 . should_equal (Date.new 2000 2 4)
            create_new_date 2000 2 5 . add_work_days -2 . should_equal (Date.new 2000 2 3)
            create_new_date 2000 2 5 . add_work_days -4 . should_equal (Date.new 2000 2 1)
            create_new_date 2000 2 5 . add_work_days -5 . should_equal (Date.new 2000 1 31)
            create_new_date 2000 2 5 . add_work_days -6 . should_equal (Date.new 2000 1 28)

            # 2000-2-6 is a Sunday
            create_new_date 2000 2 6 . add_work_days -1 . should_equal (Date.new 2000 2 4)
            create_new_date 2000 2 6 . add_work_days -2 . should_equal (Date.new 2000 2 3)
            create_new_date 2000 2 6 . add_work_days -4 . should_equal (Date.new 2000 2 1)
            create_new_date 2000 2 6 . add_work_days -5 . should_equal (Date.new 2000 1 31)
            create_new_date 2000 2 6 . add_work_days -6 . should_equal (Date.new 2000 1 28)

        Test.specify "should allow to shift the date by N working days, skipping custom holidays" <|
            all_year_holiday year =
                first_day = create_new_date year 1 1
                Vector.new first_day.length_of_year (n -> first_day + (Period.new days=n))

            two_years_vacation = all_year_holiday 1999 + all_year_holiday 2000

            # The whole years 1999 and 2000 are skipped as they are marked as holiday.
            create_new_date 1999 3 23 . add_work_days 0 two_years_vacation . should_equal (Date.new 2001 1 1)
            create_new_date 1999 3 23 . add_work_days 1 two_years_vacation . should_equal (Date.new 2001 1 2)

            # When going backwards, again whole 1999 is skipped and we wind back at Thursday 31 December 1998.
            create_new_date 1999 3 23 . add_work_days -1 (all_year_holiday 1999) . should_equal (Date.new 1998 12 31)

            create_new_date 1999 10 30 . add_work_days 0 (holiday_november 1999) . should_equal (Date.new 1999 11 3)
            create_new_date 1999 10 30 . add_work_days 1 (holiday_november 1999) . should_equal (Date.new 1999 11 4)
            create_new_date 1999 10 30 . add_work_days -1 (holiday_november 1999) . should_equal (Date.new 1999 10 29)
            create_new_date 1999 11 3 . add_work_days -1 (holiday_november 1999) . should_equal (Date.new 1999 10 29)
            create_new_date 1999 10 30 . add_work_days 0 (duplicated_holiday_november 1999) . should_equal (Date.new 1999 11 3)
            create_new_date 1999 10 30 . add_work_days 1 (duplicated_holiday_november 1999) . should_equal (Date.new 1999 11 4)

        Test.specify "add_work_days and work_days_until should be consistent with each other"  <|
            first_day = create_new_date 2020 1 1
            dates = Vector.new 100 (n -> first_day + (Period.new days=n))
            holidays = [1, 2, 10, 11, 12, 13, 14, 15, 30, 40, 41, 42, 50, 60].map (n -> first_day + (Period.new days=n))
            shifts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 90, 100]
            dates.each date->
                date.work_days_until (date.add_work_days 0) . should_equal 0
                date.work_days_until (date.add_work_days 0 holidays) holidays . should_equal 0

                shifts.each n->
                    date.work_days_until (date.add_work_days n) . should_equal n
                    date.work_days_until (date.add_work_days n holidays) holidays . should_equal n

                    (date.add_work_days -n).work_days_until date . should_equal n
                    (date.add_work_days -n holidays).work_days_until date holidays . should_equal n

    Date_Part_Spec.spec name create_new_date


main = Test_Suite.run_main spec

parseNormally x y = (Date.parse x y) . to_text

js_parse text format="" =
    d = Date.parse text format
    js_date d.year d.month d.day

## JSDate is not only a date but also time and timezone.
## Here, we explicitly convert JS ZonedDateTime to LocalDate
js_set_zone local_datetime =
    zone = Time_Zone.utc
    datetime_with_tz = local_datetime.at_zone zone
    diff = Duration.between datetime_with_tz local_datetime (timezone_aware=False)
    (datetime_with_tz + diff).date

js_date year month=1 day=1 =
    Panic.catch Any (js_set_zone (js_date_impl year month day)) (err -> Error.throw (Time_Error.Error err.payload))

js_array_date year month=1 day=1 =
    arr = Panic.catch Any (js_array_dateCreate year month day) (err -> Error.throw (Time_Error.Error err.payload))
    js_set_zone arr.at(0)

java_parse date_text pattern=Nothing =
    Panic.catch Any handler=(err -> Error.throw (Time_Error.Error err.payload.getMessage)) <|
        if pattern.is_nothing then LocalDate.parse date_text else
            formatter = DateTimeFormatter.ofPattern pattern
            LocalDate.parse date_text formatter

java_date year month=1 day=1 =
    Panic.catch Any (LocalDate.of year month day) (err -> Error.throw (Time_Error.Error <| err.payload.getMessage))

foreign js js_date_impl year month=1 day=1 = """
    if (month > 12) {
        throw `Invalid value for MonthOfYear (valid values 1 - 12): ${month}`;
    }
    return new Date(year, month - 1, day);

foreign js js_array_dateCreate year month day = """
    if (month > 12) {
        throw `Invalid value for MonthOfYear (valid values 1 - 12): ${month}`;
    }
    return [ new Date(year, month - 1, day) ];
