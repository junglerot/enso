from Standard.Base import all
import Standard.Base.Errors.Common.Incomparable_Values
import Standard.Base.Errors.Common.Type_Error
import Standard.Base.Errors.Time_Error.Time_Error

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

polyglot java import java.time.LocalTime
polyglot java import java.time.format.DateTimeFormatter

spec =
    specWith "Time_Of_Day" enso_time Time_Of_Day.parse
    specWith "JavaLocalTime" java_time java_parse

specWith name create_new_time parse_time =
    Test.group name <|

        Test.specify "should create local time" <|
            time = create_new_time 1 0 0
            time . hour . should_equal 1
            time . minute . should_equal 0
            time . second . should_equal 0
            time . to_seconds . should_equal 3600

        Test.specify "should handle errors when creating a time" <|
            case create_new_time 24 0 0 . catch of
                Time_Error.Error msg ->
                    msg . should_equal "Invalid value for HourOfDay (valid values 0 - 23): 24"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)

        Test.specify "should format local time using provided pattern" <|
            text = create_new_time 12 20 44 . format "HHmmss"
            text . should_equal "122044"

        Test.specify "should format using provided pattern and locale" <|
            d = create_new_time 12 20 44
            # Note that the results are all the same.
            d.format "HH:mm" . should_equal "12:20"
            d.format "HH:mm" (Locale.new "gb") . should_equal "12:20"
            d.format "HH:mm" (Locale.new "fr") . should_equal "12:20"

        Test.specify "should format local time using default pattern" <|
            text = create_new_time 12 20 44 . to_text
            text . should_equal "12:20:44"

        Test.specify "should convert to Json" <|
            time = create_new_time 1 2 3
            time.to_json.should_equal <|
                time_pairs = [["hour", time.hour], ["minute", time.minute], ["second", time.second], ["nanosecond", time.nanosecond]]
                JS_Object.from_pairs ([["type", "Time_Of_Day"], ["constructor", "new"]] + time_pairs) . to_text

        Test.specify "should parse default time format" <|
            text = create_new_time 12 20 44 . to_text
            time = Time_Of_Day.parse text
            time.to_seconds . should_equal 44444

        Test.specify "should parse local time" <|
            time = parse_time "10:00:00"
            time.to_seconds . should_equal 36000

        Test.specify "should throw error when parsing invalid time" <|
            case parse_time "1200" . catch of
                Time_Error.Error msg ->
                    msg . should_equal "Text '1200' could not be parsed at index 2"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)

        Test.specify "should parse custom format" <|
            time = parse_time "12:30AM" "hh:mma"
            time.to_seconds . should_equal 1800

        Test.specify "should throw error when parsing custom format" <|
            time = parse_time "12:30" "HH:mm:ss"
            case time.catch of
                Time_Error.Error msg ->
                    msg . should_equal "Text '12:30' could not be parsed at index 5"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)

        Test.specify "should convert to time" <|
            datetime = create_new_time 1 0 0 . to_date_time (Date.new 2000 12 21) Time_Zone.utc
            datetime . year . should_equal 2000
            datetime . month . should_equal 12
            datetime . day . should_equal 21
            datetime . hour . should_equal 1
            datetime . minute . should_equal 0
            datetime . second . should_equal 0
            datetime . nanosecond . should_equal 0
            datetime . zone . zone_id . should_equal Time_Zone.utc.zone_id

        Test.specify "should add time-based interval" <|
            time = create_new_time 0 + (Duration.new minutes=1)
            time . to_seconds . should_equal 60

        Test.specify "should subtract time-based interval" <|
            time = create_new_time 0 - (Duration.new minutes=1)
            time . to_seconds . should_equal 86340

        Test.specify "should support mixed interval operators" <|
            time = create_new_time 0 + (Duration.new hours=1) - (Duration.new seconds=1)
            time . to_seconds . should_equal 3599

        Test.specify "should throw error when adding date-based interval" <|
            case (create_new_time 0 + (Period.new days=1)) . catch of
                Time_Error.Error message ->
                    message . should_equal "Time_Of_Day does not support date intervals (periods)"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)

        Test.specify "should throw error when subtracting date-based interval" <|
            case (create_new_time 0 - (Period.new days=1)) . catch of
                Time_Error.Error message ->
                    message . should_equal "Time_Of_Day does not support date intervals (periods)"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)

        Test.specify "should be comparable" <|
            time_1 = parse_time "12:30:12.7102"
            time_2 = parse_time "04:00:10.0"
            (time_1 == time_2) . should_be_false
            time_1==time_1 . should_be_true
            time_1!=time_2 . should_be_true
            time_1>time_2 . should_be_true
            time_1<time_2 . should_be_false
            time_2<(Date_Time.new 1999 1 1 4 0 10) . should_fail_with Incomparable_Values

        Test.specify "should correctly determine the type of timeofday" <|
            new_timeofday = create_new_time 15 37 58
            parsed_timeofday =  parse_time "10:00:00"

            Meta.type_of new_timeofday . should_equal_type Time_Of_Day
            Meta.type_of parsed_timeofday . should_equal_type Time_Of_Day

        max_nanos = 999999999
        Test.specify "should allow to find start/end of a Time_Period containing the current time of day" <|
            d1 = create_new_time 15 37 58 123456789
            d1.start_of Time_Period.Day . should_equal (Time_Of_Day.new)
            d1.end_of Time_Period.Day . should_equal (Time_Of_Day.new 23 59 59 nanosecond=max_nanos)
            d1.start_of Time_Period.Hour . should_equal (Time_Of_Day.new 15 0 0 0)
            d1.end_of Time_Period.Hour . should_equal (Time_Of_Day.new 15 59 59 nanosecond=max_nanos)
            d1.start_of Time_Period.Minute . should_equal (Time_Of_Day.new 15 37 0 0)
            d1.end_of Time_Period.Minute . should_equal (Time_Of_Day.new 15 37 59 nanosecond=max_nanos)
            d1.start_of Time_Period.Second . should_equal (Time_Of_Day.new 15 37 58 0)
            d1.end_of Time_Period.Second . should_equal (Time_Of_Day.new 15 37 58 nanosecond=max_nanos)

            d2 = create_new_time 0 0 0
            d2.start_of Time_Period.Day . should_equal (Time_Of_Day.new)
            d2.end_of Time_Period.Day . should_equal (Time_Of_Day.new 23 59 59 nanosecond=max_nanos)
            d2.start_of Time_Period.Hour . should_equal (Time_Of_Day.new 0 0 0 0)
            d2.end_of Time_Period.Hour . should_equal (Time_Of_Day.new 0 59 59 nanosecond=max_nanos)
            d2.start_of Time_Period.Minute . should_equal (Time_Of_Day.new 0 0 0 0)
            d2.end_of Time_Period.Minute . should_equal (Time_Of_Day.new 0 0 59 nanosecond=max_nanos)
            d2.start_of Time_Period.Second . should_equal (Time_Of_Day.new 0 0 0 0)
            d2.end_of Time_Period.Second . should_equal (Time_Of_Day.new 0 0 0 nanosecond=max_nanos)

            d3 = create_new_time 23 59 59 max_nanos
            d3.start_of Time_Period.Day . should_equal (Time_Of_Day.new)
            d3.end_of Time_Period.Day . should_equal (Time_Of_Day.new 23 59 59 nanosecond=max_nanos)
            d3.start_of Time_Period.Hour . should_equal (Time_Of_Day.new 23 0 0 0)
            d3.end_of Time_Period.Hour . should_equal (Time_Of_Day.new 23 59 59 nanosecond=max_nanos)
            d3.start_of Time_Period.Minute . should_equal (Time_Of_Day.new 23 59 0 0)
            d3.end_of Time_Period.Minute . should_equal (Time_Of_Day.new 23 59 59 nanosecond=max_nanos)
            d3.start_of Time_Period.Second . should_equal (Time_Of_Day.new 23 59 59 0)
            d3.end_of Time_Period.Second . should_equal (Time_Of_Day.new 23 59 59 nanosecond=max_nanos)


enso_time hour minute=0 second=0 nanoOfSecond=0 =
    Time_Of_Day.new hour minute second nanosecond=nanoOfSecond

java_time hour minute=0 second=0 nanoOfSecond=0 =
    Panic.catch Any (LocalTime.of hour minute second nanoOfSecond) (err -> Error.throw (Time_Error.Error <| err.payload.getMessage))

java_parse time_text pattern=Nothing =
    Panic.catch Any handler=(err -> Error.throw (Time_Error.Error err.payload.getMessage)) <|
        if pattern.is_nothing then LocalTime.parse time_text else
            formatter = DateTimeFormatter.ofPattern pattern
            LocalTime.parse time_text (formatter.withLocale Locale.default.java_locale)

main = Test_Suite.run_main spec
