from Base import all

import Test
import Base.Data.Time.Date
import Base.Data.Time.Duration
import Base.Data.Time.Time
import Base.Data.Time.Time_Of_Day
import Base.Data.Time.Zone

spec =
    describe "Time_Of_Day" <|
        it "should create local time" <|
            time = Time_Of_Day.new 1 0 0
            time . hour . should_equal 1
            time . minute . should_equal 0
            time . second . should_equal 0
            time . to_seconds . should_equal 3600
        it "should handle erros when creating time" <|
            case Time_Of_Day.new 24 0 0 . catch (x -> x) of
                Time.Time_Error msg ->
                    msg . should_equal "Invalid value for HourOfDay (valid values 0 - 23): 24"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)
        it "should format local time using provided pattern" <|
            text = Time_Of_Day.new 12 20 44 . format "HHmmss"
            text . should_equal "122044"
        it "should format local time using default pattern" <|
            text = Time_Of_Day.new 12 20 44 . to_text
            text . should_equal "12:20:44"
        it "should convert to Json" <|
            time = Time_Of_Day.new 1 2 3
            time.to_json.should_equal <|
                time_pairs = [["hour", time.hour], ["minute", time.minute], ["second", time.second], ["nanosecond", time.nanosecond]]
                Json.from_pairs ([["type", "Time_Of_Day"]] + time_pairs)
        it "should parse default time format" <|
            text = Time_Of_Day.new 12 20 44 . to_text
            time = Time_Of_Day.parse text
            time.to_seconds . should_equal 44444
        it "should parse local time" <|
            time = Time_Of_Day.parse "10:00:00"
            time.to_seconds . should_equal 36000
        it "should throw error when parsing invalid time" <|
            case Time_Of_Day.parse "1200" . catch (x -> x) of
                Time.Time_Error msg ->
                    msg . should_equal "Text '1200' could not be parsed at index 2"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)
        it "should parse custom format" <|
            time = Time_Of_Day.parse_format "12:30AM" "hh:mma"
            time.to_seconds . should_equal 1800
        it "should throw error when parsing custom format" <|
            time = Time_Of_Day.parse_format "12:30" "HH:mm:ss"
            case time.catch (x -> x) of
                Time.Time_Error msg ->
                    msg . should_equal "Text '12:30' could not be parsed at index 5"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)
        it "should convert to time" <|
            time = Time_Of_Day.new 1 0 0 . to_time (Date.new 2000 12 21) Zone.utc
            time . year . should_equal 2000
            time . month . should_equal 12
            time . day . should_equal 21
            time . hour . should_equal 1
            time . minute . should_equal 0
            time . second . should_equal 0
            time . nanosecond . should_equal 0
            time . zone . zone_id . should_equal Zone.utc.zone_id
        it "should add time-based interval" <|
            time = Time_Of_Day.new + 1.minute
            time . to_seconds . should_equal 60
        it "should subtract time-based interval" <|
            time = Time_Of_Day.new - 1.minute
            time . to_seconds . should_equal 86340
        it "should support mixed interval operators" <|
            time = Time_Of_Day.new + 1.hour - 1.second
            time . to_seconds . should_equal 3599
        it "should throw error when adding date-based interval" <|
            case (Time_Of_Day.new + 1.day) . catch (x -> x) of
                Time.Time_Error message ->
                    message . should_equal "Time_Of_Day does not support date intervals"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)
        it "should throw error when subtracting date-based interval" <|
            case (Time_Of_Day.new - (1.day - 1.minute)) . catch (x -> x) of
                Time.Time_Error message ->
                    message . should_equal "Time_Of_Day does not support date intervals"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)
