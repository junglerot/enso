from Standard.Base import all

import Standard.Base.Data.Time
import Standard.Base.Data.Time.Duration
import Standard.Base.Data.Time.Time_Of_Day
import Standard.Base.Data.Time.Zone

import Standard.Test

polyglot java import java.time.LocalTime
polyglot java import java.time.format.DateTimeFormatter

spec =
    specWith "Time_Of_Day" enso_time Time_Of_Day.parse
    specWith "JavaLocalTime" java_time java_parse

specWith name create_new_time parse_time =
    Test.group name <|

        Test.specify "should create local time" <|
            time = create_new_time 1 0 0
            time . hour . should_equal 1
            time . minute . should_equal 0
            time . second . should_equal 0
            time . to_seconds . should_equal 3600

        Test.specify "should handle errors when creating a time" <|
            case create_new_time 24 0 0 . catch of
                Time.Time_Error msg ->
                    msg . should_equal "Invalid value for HourOfDay (valid values 0 - 23): 24"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)

        Test.specify "should format local time using provided pattern" <|
            text = create_new_time 12 20 44 . format "HHmmss"
            text . should_equal "122044"

        Test.specify "should format local time using default pattern" <|
            text = create_new_time 12 20 44 . to_text
            text . should_equal "12:20:44"

        Test.specify "should convert to Json" <|
            time = create_new_time 1 2 3
            time.to_json.should_equal <|
                time_pairs = [["hour", time.hour], ["minute", time.minute], ["second", time.second], ["nanosecond", time.nanosecond]]
                Json.from_pairs ([["type", "Time_Of_Day"]] + time_pairs)

        Test.specify "should parse default time format" <|
            text = create_new_time 12 20 44 . to_text
            time = Time_Of_Day.parse text
            time.to_seconds . should_equal 44444

        Test.specify "should parse local time" <|
            time = parse_time "10:00:00"
            time.to_seconds . should_equal 36000

        Test.specify "should throw error when parsing invalid time" <|
            case parse_time "1200" . catch of
                Time.Time_Error msg ->
                    msg . should_equal "Text '1200' could not be parsed at index 2"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)

        Test.specify "should parse custom format" <|
            time = parse_time "12:30AM" "hh:mma"
            time.to_seconds . should_equal 1800

        Test.specify "should throw error when parsing custom format" <|
            time = parse_time "12:30" "HH:mm:ss"
            case time.catch of
                Time.Time_Error msg ->
                    msg . should_equal "Text '12:30' could not be parsed at index 5"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)

        Test.specify "should convert to time" <|
            datetime = create_new_time 1 0 0 . to_time (Date.new 2000 12 21) Zone.utc
            datetime . year . should_equal 2000
            datetime . month . should_equal 12
            datetime . day . should_equal 21
            datetime . hour . should_equal 1
            datetime . minute . should_equal 0
            datetime . second . should_equal 0
            datetime . nanosecond . should_equal 0
            datetime . zone . zone_id . should_equal Zone.utc.zone_id

        Test.specify "should add time-based interval" <|
            time = create_new_time 0 + 1.minute
            time . to_seconds . should_equal 60

        Test.specify "should subtract time-based interval" <|
            time = create_new_time 0 - 1.minute
            time . to_seconds . should_equal 86340

        Test.specify "should support mixed interval operators" <|
            time = create_new_time 0 + 1.hour - 1.second
            time . to_seconds . should_equal 3599

        Test.specify "should throw error when adding date-based interval" <|
            case (create_new_time 0 + 1.day) . catch of
                Time.Time_Error message ->
                    message . should_equal "Time_Of_Day does not support date intervals"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)

        Test.specify "should throw error when subtracting date-based interval" <|
            case (create_new_time 0 - (1.day - 1.minute)) . catch of
                Time.Time_Error message ->
                    message . should_equal "Time_Of_Day does not support date intervals"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)

        Test.specify "should be comparable" <|
            time_1 = parse_time "12:30:12.7102"
            time_2 = parse_time "04:00:10.0"
            (time_1 == time_2) . should_be_false
            time_1==time_1 . should_be_true
            time_1!=time_2 . should_be_true
            time_1>time_2 . should_be_true
            time_1<time_2 . should_be_false

enso_time hour minute=0 second=0 nanoOfSecond=0 =
    Time_Of_Day.new hour minute second nanoOfSecond

java_time hour minute=0 second=0 nanoOfSecond=0 =
    Panic.catch Any (LocalTime.of hour minute second nanoOfSecond) (err -> Error.throw (Time.Time_Error <| err.payload.to_display_text.drop (Text_Sub_Range.First 16)))

java_parse time_text pattern=Nothing =
    if pattern == Nothing then Panic.catch Polyglot_Error (LocalTime.parse time_text) (err -> Error.throw (Time.Time_Error err.payload.cause.getMessage)) else
        formatter = DateTimeFormatter.ofPattern(pattern)
        Panic.catch Polyglot_Error (LocalTime.parse time_text formatter) (err -> Error.throw (Time.Time_Error err.payload.cause.getMessage))

main = Test.Suite.run_main spec
