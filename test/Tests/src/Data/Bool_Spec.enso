from Standard.Base import all

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

Boolean.method self = self

type My_Error
    Value a

crash =
  Error.throw (My_Error.Value "foo")

spec =
    Test.group "Booleans" <|
        Test.specify "should allow converting Bools to Text values" <|
            True.to_text . should_equal "True"
            False.to_text . should_equal "False"

        Test.specify "should allow for comparing Bools" <|
            True.compare_to True . should_equal Ordering.Equal
            False.compare_to False . should_equal Ordering.Equal
            True.compare_to False . should_equal Ordering.Greater
            False.compare_to True . should_equal Ordering.Less

        Test.specify "should allow == operator" <|
            True.should_equal True
            False.should_equal False
            True.should_not_equal False
            False.should_not_equal True
            (1 == 1).should_equal True

        Test.specify "should allow for extending Bools in a local module" <|
            test = 1 == 2
            test.method . should_equal test

        Test.specify "should short-circuit ||" <|
            (1 == 1) || (crash) . should_equal True
            (1 == 0) || (1 == 1) . should_equal True
            (1 == 0) || (crash) . should_fail_with My_Error.Value
            (1 == 1) || "foo" . should_equal True
            (1 == 0) || "foo" . should_equal "foo"

        Test.specify "should short-circuit &&" <|
            (1 == 0) && (crash) . should_equal False
            (1 == 1) && (1 == 0) . should_equal False
            (1 == 1) && (1 == 1) . should_equal True
            (1 == 1) && (crash) . should_fail_with My_Error.Value
            (1 == 0) && "foo" . should_equal False
            (1 == 1) && "foo" . should_equal "foo"

main = Test_Suite.run_main spec
