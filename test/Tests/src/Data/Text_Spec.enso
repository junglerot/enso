from Base import all
import Test

type Auto a

type Manual b

Manual.to_text = "[[[MyREP " + this.b.to_text + "]]]"

spec = describe "Text" <|
    kshi = '\u0915\u094D\u0937\u093F'
    kshi_utf_8 = [-32, -92, -107, -32, -91, -115, -32, -92, -73, -32, -92, -65]
    facepalm = '\u{1F926}\u{1F3FC}\u200D\u2642\uFE0F'
    facepalm_codes = [129318, 127996, 8205, 9794, 65039]
    accent_1 = '\u00E9'
    accent_2 = '\u0065\u{301}'
    it "should allow naive length computation over grapheme clusters" <|
        kshi.length . should_equal 1
        facepalm.length . should_equal 1
    it "should compare strings using utf normalization" <|
        "abc"=="def" . should_be_false
        accent_1 . should_equal accent_2
    it "should split the text into grapheme clusters" <|
        str = kshi + facepalm + accent_1 + accent_2
        str.characters . should_equal [kshi, facepalm, accent_1, accent_2]
    it "should split the text on arbitrary sequence" <|
        "foo, bar, baz" . split ", " . should_equal ["foo", "bar", "baz"]
    it "should dump utf-8 bytes to a vector" <|
        kshi.utf_8.should_equal kshi_utf_8
    it "should convert an array of bytes to text" <|
        Text.from_utf_8 kshi_utf_8 . should_equal kshi
    it "should dump utf codepoints to a vector" <|
        facepalm.codepoints.should_equal facepalm_codes
    it "should convert an array of codepoints to text" <|
        Text.from_codepoints facepalm_codes . should_equal facepalm
    it "should convert any type to text automatically and using provided methods" <|
        t = Auto (Manual 123) . to_text
        t.should_equal "(Auto [[[MyREP 123]]])"
    it "should escape special characters when debug-printing text" <|
        text_1 = '''
            foo
            bar\r\tbaz
        text_1.to_text.should_equal "'foo\\nbar\\r\\tbaz'"
        text_2 = '\n\t\a\b\f\r\v\e\''
        text_2.to_text.should_equal "'\\n\\t\\a\\b\\f\\r\\v\\e\\''"
