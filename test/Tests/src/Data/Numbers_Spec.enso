from Standard.Base import all
import Standard.Base.Errors.Common.Arithmetic_Error
import Standard.Base.Errors.Common.Incomparable_Values
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Base.Data.Numbers import Number_Parse_Error

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

Integer.is_even self = self % 2 == 0

Decimal.get_fun_factor self = "Wow, " + self.to_text + " is such a fun number!"

spec =
    eps = 0.000001
    almost_max_long = 9223372036854775806
    almost_max_long_times_three = 27670116110564327418
    almost_max_long_times_three_plus_1 = 27670116110564327419
    almost_max_long_times_three_decimal = 27670116110564327418.8
    hundred_factorial = 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
    very_negative = -99223372036854775808

    Test.group "Integers" <|

        Test.specify "should be of unbound size when multiplied" <|
            1.up_to 101 . fold 1 (*) . should_equal hundred_factorial

        Test.specify "should be of unbound size when added" <|
            (almost_max_long + almost_max_long + almost_max_long).should_equal almost_max_long_times_three

        Test.specify "should be of unbound size when subtracted" <|
            (0 - almost_max_long - almost_max_long - almost_max_long).should_equal almost_max_long_times_three.negate

        Test.specify "should be of unbound size when dividing" <|
            expected = 3372816184472482867110284450043137767873196479305249187406461598235841786750685581361224832688174410089430537516012695688121622150430744676
            ((1.up_to 101 . fold 1 (*)).div  3*almost_max_long).should_equal expected

        Test.specify "should be of unbound size when taking remainder" <|
            expected = 3191479909175673432
            ((1.up_to 101 . fold 1 (*)) % 3*almost_max_long).should_equal expected

        Test.specify "should allow defining extension methods through the Integer type for any number size" <|
            876543.is_even.should_be_false
            (1.up_to 101 . fold 1 (*)).is_even.should_be_true

        Test.specify "should handle the negation edge cases" <|
            x = 9223372036854775808
            y = -x
            z = -9223372036854775808
            y.should_equal z

        Test.specify "should handle equality between small and big integers" <|
            (1 == hundred_factorial).should_be_false
            (hundred_factorial == 1).should_be_false

        Test.specify "should properly handle going to big numbers and back" <|
            ((almost_max_long * 3) / 3) . should_equal almost_max_long

        Test.specify "should use floating point arithmetic for division" <|
            (3 / 4) . should_equal 0.75 epsilon=eps
            (almost_max_long * 2 / almost_max_long_times_three) . should_equal 0.6666666 epsilon=eps

        Test.specify "should support integer division" <|
            (10.div 3) . should_equal 3
            (10.div 0).should_fail_with Arithmetic_Error

        Test.specify "should support integral binary literals" <|
            lit = 2_01101101
            lit . should_equal 109

        Test.specify "should support integral hexadecimal literals" <|
            lit = 16_6D
            lit . should_equal 109

        Test.specify "should support bitwise and" <|
            left  = 2_01101101
            right = 2_11000100
            big_left = 16_17ffffffffffffffa
            big_right = 16_17ffffffffffffffc
            left.bit_and right . should_equal 2_01000100
            left.bit_and big_right . should_equal 2_01101100
            big_left.bit_and right . should_equal 2_11000000
            big_left.bit_and big_right . should_equal 16_17ffffffffffffff8

        Test.specify "should support bitwise or" <|
            left  = 2_01101101
            right = 2_11000100
            big_left = 16_17ffffffffffffffa
            big_right = 16_17ffffffffffffffc
            left.bit_or right . should_equal 2_11101101
            left.bit_or big_right . should_equal 16_17ffffffffffffffd
            big_left.bit_or right . should_equal 16_17ffffffffffffffe
            big_left.bit_or right . should_equal 16_17ffffffffffffffe

        Test.specify "should support bitwise exclusive or" <|
            left  = 2_01101101
            right = 2_11000100
            big_left = 16_17ffffffffffffffa
            big_right = 16_17ffffffffffffffc
            left.bit_xor right . should_equal 2_10101001
            left.bit_xor big_right . should_equal 16_17fffffffffffff91
            big_left.bit_xor right . should_equal 16_17fffffffffffff3e
            big_left.bit_xor big_right . should_equal 2_00000110

        Test.specify "should support bitwise negation" <|
            bits  = 2_01101101
            big_bits = 16_17ffffffffffffffa
            bits.bit_not . should_equal -2_01101110
            bits.bit_not.bit_not . should_equal bits
            big_bits.bit_not . should_equal -16_17ffffffffffffffb
            big_bits.bit_not.bit_not . should_equal big_bits

        Test.specify "should support left bit shifts" <|
            positive_bits = 2_01101101
            negative_bits = -2_01101101
            positive_big_bits = almost_max_long_times_three
            negative_big_bits = -almost_max_long_times_three

            positive_bits.bit_shift_l 2 . should_equal 2_0110110100
            positive_bits.bit_shift_l 64 . should_equal 16_6d0000000000000000
            positive_bits.bit_shift_l -2 . should_equal 2_011011
            positive_bits.bit_shift_l -64 . should_equal 0
            (positive_bits.bit_shift_l positive_big_bits).should_fail_with Arithmetic_Error
            positive_bits.bit_shift_l negative_big_bits . should_equal 0

            negative_bits.bit_shift_l 2 . should_equal -436
            negative_bits.bit_shift_l 64 . should_equal -2010695104034341126144
            negative_bits.bit_shift_l -2 . should_equal -28
            negative_bits.bit_shift_l -64 . should_equal -1
            (negative_bits.bit_shift_l positive_big_bits).should_fail_with Arithmetic_Error
            negative_bits.bit_shift_l negative_big_bits . should_equal -1

            positive_big_bits.bit_shift_l 2 . should_equal 110680464442257309672
            positive_big_bits.bit_shift_l 64 . should_equal 510423550381407695084381446705395007488
            positive_big_bits.bit_shift_l -2 . should_equal 6917529027641081854
            positive_big_bits.bit_shift_l -100 . should_equal 0
            (positive_big_bits.bit_shift_l positive_big_bits).should_fail_with Arithmetic_Error
            positive_big_bits.bit_shift_l negative_big_bits . should_equal 0

            negative_big_bits.bit_shift_l 2 . should_equal -110680464442257309672
            negative_big_bits.bit_shift_l 64 . should_equal -510423550381407695084381446705395007488
            negative_big_bits.bit_shift_l -2 . should_equal -6917529027641081855
            negative_big_bits.bit_shift_l -100 . should_equal -1
            (negative_big_bits.bit_shift_l positive_big_bits).should_fail_with Arithmetic_Error
            negative_big_bits.bit_shift_l negative_big_bits . should_equal -1

        Test.specify "should support right bit shifts, preserving sign" <|
            positive_bits = 2_01101101
            negative_bits = -2_01101101
            positive_big_bits = almost_max_long_times_three
            negative_big_bits = -almost_max_long_times_three

            positive_bits.bit_shift_r 2 . should_equal (positive_bits.bit_shift_l -2)
            positive_bits.bit_shift_r 64 . should_equal (positive_bits.bit_shift_l -64)
            positive_bits.bit_shift_r -2 . should_equal (positive_bits.bit_shift_l 2)
            positive_bits.bit_shift_r -64 . should_equal (positive_bits.bit_shift_l 64)
            (positive_bits.bit_shift_r negative_big_bits).should_fail_with Arithmetic_Error
            positive_bits.bit_shift_r positive_big_bits . should_equal 0

            negative_bits.bit_shift_r 2 . should_equal (negative_bits.bit_shift_l -2)
            negative_bits.bit_shift_r 64 . should_equal (negative_bits.bit_shift_l -64)
            negative_bits.bit_shift_r -2 . should_equal (negative_bits.bit_shift_l 2)
            negative_bits.bit_shift_r -64 . should_equal (negative_bits.bit_shift_l 64)
            (negative_bits.bit_shift_r negative_big_bits).should_fail_with Arithmetic_Error
            negative_bits.bit_shift_r positive_big_bits . should_equal -1

            positive_big_bits.bit_shift_r 2 . should_equal (positive_big_bits.bit_shift_l -2)
            positive_big_bits.bit_shift_r 64 . should_equal (positive_big_bits.bit_shift_l -64)
            positive_big_bits.bit_shift_r -2 . should_equal (positive_big_bits.bit_shift_l 2)
            positive_big_bits.bit_shift_r -100 . should_equal (positive_big_bits.bit_shift_l 100)
            (positive_big_bits.bit_shift_r negative_big_bits).should_fail_with Arithmetic_Error
            positive_big_bits.bit_shift_r positive_big_bits . should_equal 0

            negative_big_bits.bit_shift_r 2 . should_equal (negative_big_bits.bit_shift_l -2)
            negative_big_bits.bit_shift_r 64 . should_equal (negative_big_bits.bit_shift_l -64)
            negative_big_bits.bit_shift_r -2 . should_equal (negative_big_bits.bit_shift_l 2)
            negative_big_bits.bit_shift_r -100 . should_equal (negative_big_bits.bit_shift_l 100)
            (negative_big_bits.bit_shift_r negative_big_bits).should_fail_with Arithmetic_Error
            negative_big_bits.bit_shift_r positive_big_bits . should_equal -1

        Test.specify "should be able to parse" <|
            Integer.parse "1245623" . should_equal 1245623
            Integer.parse "012345" . should_equal 12345
            Integer.parse "-1234567" . should_equal -1234567
            Integer.parse "00000" . should_equal 0
            Integer.parse "00000123" . should_equal 123
            Integer.parse "123.45" . should_fail_with Number_Parse_Error
            Integer.parse "123A" . should_fail_with Number_Parse_Error
            Integer.parse "aaaa" . should_fail_with Number_Parse_Error

        Test.specify "should parse hundred factorial" <|
            txt = hundred_factorial.to_text
            number = Integer.parse txt
            number . should_equal hundred_factorial

        Test.specify "should fail on too huge decimal" <|
            txt = hundred_factorial.to_text + ".345"
            number = Integer.parse txt
            number . should_fail_with Number_Parse_Error

        Test.specify "should be able to parse alternate bases" <|
            Integer.parse "1245623" 8 . should_equal 347027
            Integer.parse "-1245623" 8 . should_equal -347027
            Integer.parse "0001245623" 8 . should_equal 347027
            Integer.parse "00000" 8 . should_equal 0
            Integer.parse "9847" 8 . should_fail_with Number_Parse_Error
            Integer.parse "8479" 8 . should_fail_with Number_Parse_Error
            Integer.parse "ABC123" 16 . should_equal 11256099
            Integer.parse "123ABC" 16 . should_equal 1194684
            Integer.parse "123aBc" 16 . should_equal 1194684
            Integer.parse "-ABC123" 16 . should_equal -11256099
            Integer.parse "00000ABC123" 16 . should_equal 11256099
            Integer.parse "123aBcG" 16 . should_fail_with Number_Parse_Error
            Integer.parse "10101010" 2 . should_equal 170
            Integer.parse "00001111" 2 . should_equal 15
            Integer.parse "-10101010" 2 . should_equal -170
            Integer.parse "-101021010" 2 . should_fail_with Number_Parse_Error
            Integer.parse "123" 128 . should_fail_with Number_Parse_Error

    Test.group "Decimals" <|

        Test.specify "should exist and expose basic arithmetic operations" <|
            ((1.5 + 1.5)*1.3 / 2 - 3) . should_equal -1.05 epsilon=eps

        Test.specify "should allow defining extension methods through the Decimal type" <|
            32.5.get_fun_factor.should_equal "Wow, 32.5 is such a fun number!"

        Test.specify "should be able to be parsed" <|
            Decimal.parse "32.5" . should_equal 32.5
            Decimal.parse "0122.5" . should_equal 122.5
            Decimal.parse "-98.5" . should_equal -98.5
            Decimal.parse "000000" . should_equal 0
            Decimal.parse "000000.0001" . should_equal 0.0001
            Decimal.parse "aaaa" . should_fail_with Number_Parse_Error

        Test.specify "parse with locale" <|
            l = Locale.new "cs"
            Decimal.parse "32,5" l . should_equal 32.5
            Decimal.parse "0122,5" l . should_equal 122.5
            Decimal.parse "-98,5" l . should_equal -98.5
            Decimal.parse "000000" l . should_equal 0
            Decimal.parse "000000,0001" l . should_equal 0.0001
            Decimal.parse "aaaa" l . should_fail_with Number_Parse_Error

        Test.specify "decimal should parse hundred factorial well" <|
            txt = hundred_factorial.to_text + ".345"
            decimal = Decimal.parse txt
            is_huge = decimal > (hundred_factorial / 5)
            is_huge . should_equal True

    Test.group "Numbers" <|

        Test.specify "should define addition" <|
            2+3 . should_equal 5

        Test.specify "should define multiplication" <|
            2*3 . should_equal 6

        Test.specify "should define modulo for integers and decimals" <|
            5%3 . should_equal 2
            5%3 . should_be_a Integer

            5.0%3.0 . should_equal 2.0
            5%3.0 . should_equal 2.0
            5.0%3 . should_equal 2.0
            5.0%3.0 . should_be_a Decimal
            5%3.0 . should_be_a Decimal
            5.0%3 . should_be_a Decimal

            3.5%2 . should_equal 1.5
            10.5%1.0 . should_equal 0.5

            3%1 . should_equal 0
            3%1 . should_be_a Integer

            3.5%1 . should_equal 0.5

            almost_max_long_times_three%10 . should_equal 8
            1000%almost_max_long_times_three . should_equal 1000

            1%0 . should_fail_with Arithmetic_Error
            almost_max_long_times_three%0 . should_fail_with Arithmetic_Error

            1.0%0.0 . is_nan . should_be_true
            1%0.0 . is_nan . should_be_true
            1.0%0 . is_nan . should_be_true
            almost_max_long_times_three%0.0 . is_nan . should_be_true

            1/0 . is_infinite . should_be_true
            -1/0 . is_infinite . should_be_true

        Test.specify "should support less than operator" <|
            (1 < 2).should_be_true
            (1 < 1).should_be_false
            (1 < 0).should_be_false
            (1 < 1.01).should_be_true
            (1 < 0.99).should_be_false
            (3 < hundred_factorial).should_be_true
            (3 < very_negative).should_be_false
            (3 < Nothing).should_fail_with Incomparable_Values
            (1.01 < 0.99).should_be_false
            (1.01 < 1.02).should_be_true
            (1.01 < 1).should_be_false
            (1.01 < 2).should_be_true
            (3.14 < hundred_factorial).should_be_true
            (3.14 < very_negative).should_be_false
            (1.5 < Nothing).should_fail_with Incomparable_Values
            (hundred_factorial < 1).should_be_false
            (hundred_factorial < 1.5).should_be_false
            (very_negative < 1).should_be_true
            (very_negative < 1.5).should_be_true
            (hundred_factorial < very_negative).should_be_false
            (very_negative < hundred_factorial).should_be_true
            (very_negative < Nothing).should_fail_with Incomparable_Values

        Test.specify "should support less than or equal to operator" <|
            (1 <= 2).should_be_true
            (1 <= 1).should_be_true
            (1 <= 0).should_be_false
            (1 <= 1.01).should_be_true
            (1 <= 0.99).should_be_false
            (3 <= hundred_factorial).should_be_true
            (3 <= very_negative).should_be_false
            (3 <= Nothing).should_fail_with Incomparable_Values
            (1.01 <= 0.99).should_be_false
            (1.01 <= 1.02).should_be_true
            (1.01 <= 1).should_be_false
            (1.01 <= 2).should_be_true
            (3.14 <= hundred_factorial).should_be_true
            (3.14 <= very_negative).should_be_false
            (1.5 <= Nothing).should_fail_with Incomparable_Values
            (hundred_factorial <= 1).should_be_false
            (hundred_factorial <= 1.5).should_be_false
            (very_negative <= 1).should_be_true
            (very_negative <= 1.5).should_be_true
            (hundred_factorial <= very_negative).should_be_false
            (very_negative <= hundred_factorial).should_be_true
            (very_negative <= Nothing).should_fail_with Incomparable_Values

        Test.specify "should support greater than operator" <|
            (1 > 2).should_be_false
            (1 > 1).should_be_false
            (1 > 0).should_be_true
            (1 > 1.01).should_be_false
            (1 > 0.99).should_be_true
            (3 > hundred_factorial).should_be_false
            (3 > very_negative).should_be_true
            (3 > Nothing).should_fail_with Incomparable_Values
            (1.01 > 0.99).should_be_true
            (1.01 > 1.02).should_be_false
            (1.01 > 1).should_be_true
            (1.01 > 2).should_be_false
            (3.14 > hundred_factorial).should_be_false
            (3.14 > very_negative).should_be_true
            (1.5 > Nothing).should_fail_with Incomparable_Values
            (hundred_factorial > 1).should_be_true
            (hundred_factorial > 1.5).should_be_true
            (very_negative > 1).should_be_false
            (very_negative > 1.5).should_be_false
            (hundred_factorial > very_negative).should_be_true
            (very_negative > hundred_factorial).should_be_false
            (very_negative > Nothing).should_fail_with Incomparable_Values

        Test.specify "should support greater than or equal to operator" <|
            (1 >= 2).should_be_false
            (1 >= 1).should_be_true
            (1 >= 0).should_be_true
            (1 >= 1.01).should_be_false
            (1 >= 0.99).should_be_true
            (3 >= hundred_factorial).should_be_false
            (3 >= very_negative).should_be_true
            (3 >= Nothing).should_fail_with Incomparable_Values
            (1.01 >= 0.99).should_be_true
            (1.01 >= 1.02).should_be_false
            (1.01 >= 1).should_be_true
            (1.01 >= 2).should_be_false
            (3.14 >= hundred_factorial).should_be_false
            (3.14 >= very_negative).should_be_true
            (1.5 >= Nothing).should_fail_with Incomparable_Values
            (hundred_factorial >= 1).should_be_true
            (hundred_factorial >= 1.5).should_be_true
            (very_negative >= 1).should_be_false
            (very_negative >= 1.5).should_be_false
            (hundred_factorial >= very_negative).should_be_true
            (very_negative >= hundred_factorial).should_be_false
            (very_negative >= Nothing).should_fail_with Incomparable_Values

        Test.specify "should be ordered by the default comparator" <|
            Ordering.compare 1 2 . should_equal Ordering.Less
            Ordering.compare 1 1 . should_equal Ordering.Equal
            Ordering.compare 1 0 . should_equal Ordering.Greater
            Ordering.compare 1 1.01 . should_equal Ordering.Less
            Ordering.compare 1 0.99 . should_equal Ordering.Greater
            Ordering.compare 3 hundred_factorial . should_equal Ordering.Less
            Ordering.compare 3 very_negative . should_equal Ordering.Greater
            Ordering.compare 3 Nothing . should_fail_with Incomparable_Values
            Ordering.compare 1.01 0.99 . should_equal Ordering.Greater
            Ordering.compare 1.01 1.02 . should_equal Ordering.Less
            Ordering.compare 1.01 1 . should_equal Ordering.Greater
            Ordering.compare 1.01 2 . should_equal Ordering.Less
            Ordering.compare 3.14 hundred_factorial . should_equal Ordering.Less
            Ordering.compare 3.14 very_negative . should_equal Ordering.Greater
            Ordering.compare 1.5 Nothing . should_fail_with Incomparable_Values
            Ordering.compare hundred_factorial 1 . should_equal Ordering.Greater
            Ordering.compare hundred_factorial 1.5 . should_equal Ordering.Greater
            Ordering.compare very_negative 1 . should_equal Ordering.Less
            Ordering.compare very_negative 1.5 . should_equal Ordering.Less
            Ordering.compare hundred_factorial very_negative . should_equal Ordering.Greater
            Ordering.compare very_negative hundred_factorial . should_equal Ordering.Less
            Ordering.compare very_negative Nothing . should_fail_with Incomparable_Values

        Test.specify "should expose exponentiation operations" <|
            (3.14 ^ 2.71).should_equal 22.216689546 epsilon=eps
            (3.14 ^ 14).should_equal 9057640.36635 epsilon=eps
            a = almost_max_long
            (a ^ 4).should_equal (a * a * a * a)
            (2 ^ 10).should_equal 1024
            (2 ^ 0.5).should_equal 1.41421356237 epsilon=eps
            (a^2)^0.5 . should_equal a epsilon=eps

        Test.specify "should expose more involved mathematical functions" <|
            Math.pi.sin.should_equal 0 epsilon=eps
            (Math.pi / 4).sin.should_equal (2 ^ 0.5)/2 epsilon=eps
            (Math.pi / 6).cos.should_equal (3.sqrt / 2) epsilon=eps
            (17 ^ 0.13).log base=17 . should_equal 0.13 epsilon=eps
            0.exp.should_equal 1

        Test.specify "should allow calculating the floor value" <|
            1.2314.floor . should_equal 1
            1.floor . should_equal 1
            almost_max_long_times_three_decimal.floor.to_decimal . should_equal almost_max_long_times_three.to_decimal
            almost_max_long_times_three.floor . should_equal almost_max_long_times_three

        Test.specify "should allow calculating the ceil value" <|
            1.2314.ceil . should_equal 2
            1.ceil . should_equal 1
            almost_max_long_times_three_decimal.ceil.to_decimal . should_equal almost_max_long_times_three_plus_1.to_decimal
            almost_max_long_times_three_plus_1.ceil . should_equal almost_max_long_times_three_plus_1

        Test.specify "should expose a NaN value" <|
            Number.nan.is_nan . should_be_true
            0.is_nan . should_be_false
            Number.positive_infinity.is_nan . should_be_false
            Number.negative_infinity.is_nan . should_be_false

            Number.nan.is_infinite . should_be_false
            0.is_infinite . should_be_false
            Number.positive_infinity.is_infinite . should_be_true
            Number.negative_infinity.is_infinite . should_be_true

            Number.nan==Number.nan . should_be_false
            Number.nan==0 . should_be_false
            Number.nan!=Number.nan . should_be_true

        Test.specify "should support inexact equality comparisons" <|
            1.0001 . equals 1.0002 epsilon=0.01 . should_be_true
            1.0001 . equals 1.0002 epsilon=0.0000001 . should_be_false

            1 . equals 2 . should_be_false
            1 . equals (0+1) . should_be_true

            Number.positive_infinity . equals Number.positive_infinity . should_be_true

            Number.negative_infinity . equals Number.negative_infinity . should_be_true
            Number.negative_infinity . equals Number.positive_infinity . should_be_false

            Number.negative_infinity . should_equal (-Number.positive_infinity)
            Number.negative_infinity . equals (-Number.positive_infinity) . should_be_true

            Number.nan . equals Number.nan . should_fail_with Incomparable_Values
            Number.nan . equals 0 . should_fail_with Incomparable_Values

    Test.group "Decimal.round" <|
        Test.specify "Can round positive decimals correctly" <|
            3.0 . round . should_equal 3
            3.00001 . round . should_equal 3
            3.3 . round . should_equal 3
            3.49999 . round . should_equal 3
            3.5 . round . should_equal 4
            3.50001 . round . should_equal 4
            3.99999 . round . should_equal 4

        Test.specify "Can round negative decimals correctly" <|
            -3.0 . round . should_equal -3
            -3.00001 . round . should_equal -3
            -3.3 . round . should_equal -3
            -3.49999 . round . should_equal -3
            -3.5 . round . should_equal -3
            -3.50001 . round . should_equal -4
            -3.99999 . round . should_equal -4

        Test.specify "Explicit and implicit 0 decimal places work the same" <|
            3.00001 . round 0 . should_equal 3
            3.3 . round 0 . should_equal 3
            3.00001 . round . should_equal 3
            3.3 . round . should_equal 3

        Test.specify "Can round zero and small decimals correctly" <|
            0.0 . round . should_equal 0
            0.00001 . round . should_equal 0
            -0.00001 . round . should_equal 0

        Test.specify "Can round decimals to a specified number of decimal places" <|
            3.0001 . round 2 . should_equal 3.0
            3.1414 . round 2 . should_equal 3.14
            3.1415 . round 2 . should_equal 3.14
            3.1416 . round 2 . should_equal 3.14
            3.9999 . round 2 . should_equal 4.0

            3.0001 . round 3 . should_equal 3.0
            3.1414 . round 3 . should_equal 3.141
            3.1415 . round 3 . should_equal 3.142
            3.1416 . round 3 . should_equal 3.142
            3.9999 . round 3 . should_equal 4.0

        Test.specify "Can round positive decimals to a specified negative number of decimal places" <|
            1234.0 . round -1 . should_equal 1230
            1234.0 . round -2 . should_equal 1200
            1234.0 . round -3 . should_equal 1000
            1234.0 . round -4 . should_equal 0

            1499.0 . round -1 . should_equal 1500
            1499.0 . round -2 . should_equal 1500
            1499.0 . round -3 . should_equal 1000

            1495.0 . round -1 . should_equal 1500
            1494.0 . round -1 . should_equal 1490
            1495.0 . round -2 . should_equal 1500
            1494.0 . round -2 . should_equal 1500

        Test.specify "Can round negative decimals to a specified negative number of decimal places" <|
            -1234.0 . round -1 . should_equal -1230
            -1234.0 . round -2 . should_equal -1200
            -1234.0 . round -3 . should_equal -1000
            -1234.0 . round -4 . should_equal 0

            -1499.0 . round -1 . should_equal -1500
            -1499.0 . round -2 . should_equal -1500
            -1499.0 . round -3 . should_equal -1000

            -1495.0 . round -1 . should_equal -1490
            -1494.0 . round -1 . should_equal -1490
            -1495.0 . round -2 . should_equal -1500
            -1494.0 . round -2 . should_equal -1500

        Test.specify "Banker's rounding handles half-way values correctly" <|
            -3.5 . round use_bankers=True . should_equal -4
            -2.5 . round use_bankers=True . should_equal -2
            -1.5 . round use_bankers=True . should_equal -2
            -0.5 . round use_bankers=True . should_equal 0
            0.5 . round use_bankers=True . should_equal 0
            1.5 . round use_bankers=True . should_equal 2
            2.5 . round use_bankers=True . should_equal 2
            3.5 . round use_bankers=True . should_equal 4

            0.235 . round 2 use_bankers=True . should_equal 0.24
            0.225 . round 2 use_bankers=True . should_equal 0.22
            -0.235 . round 2 use_bankers=True . should_equal -0.24
            -0.225 . round 2 use_bankers=True . should_equal -0.22

            12350.0 . round -2 use_bankers=True . should_equal 12400
            12250.0 . round -2 use_bankers=True . should_equal 12200
            -12350.0 . round -2 use_bankers=True . should_equal -12400
            -12250.0 . round -2 use_bankers=True . should_equal -12200

        Test.specify "Banker's rounding handles non-half-way values just like normal rounding" <|
            3.0 . round use_bankers=True . should_equal 3
            3.00001 . round use_bankers=True . should_equal 3
            3.3 . round use_bankers=True . should_equal 3
            3.49999 . round use_bankers=True . should_equal 3
            3.50001 . round use_bankers=True . should_equal 4
            3.99999 . round use_bankers=True . should_equal 4

            -3.0 . round . should_equal -3
            -3.00001 . round . should_equal -3
            -3.3 . round . should_equal -3
            -3.49999 . round . should_equal -3
            -3.50001 . round . should_equal -4
            -3.99999 . round . should_equal -4

        Test.specify "Returns the correct type" <|
            231.2 . round 1 . should_be_a Decimal
            231.2 . round 0 . should_be_a Integer
            231.2 . round . should_be_a Integer
            231.2 . round -1 . should_be_a Integer

        Test.specify "Edge cases" <|
            max_double = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0
            max_double . should_equal max_double
            max_double_minus_point_five = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858367.5
            max_double_minus_point_six = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858367.4
            max_double_minus_one = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858367.0
            max_double_minus_point_five . round . should_equal max_double
            max_double_minus_point_six . round . should_equal max_double_minus_one

            neg_max_double = -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0
            neg_max_double . should_equal neg_max_double
            neg_max_double_minus_point_four = -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858367.6
            neg_max_double_minus_point_five = -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858367.5
            neg_max_double_minus_one = -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858367.0
            neg_max_double_minus_point_four . round . should_equal neg_max_double
            neg_max_double_minus_point_five . round . should_equal neg_max_double_minus_one

        Test.specify "Decimal places out of range" <|
            3.1 . round 16 . should_fail_with Illegal_Argument
            3.1 . round -16 . should_fail_with Illegal_Argument

        Test.specify "NaN/Inf" <|
            Number.nan . round . should_fail_with Arithmetic_Error
            Number.positive_infinity . round . should_fail_with Arithmetic_Error
            Number.negative_infinity . round . should_fail_with Arithmetic_Error

        Test.specify "Banker's rounding failure" pending="Fails because of basic floating-point inaccuracy when adding 0.5" <|
            1.225 . round 2 use_bankers=True . should_equal 1.22 # Actual result 1.23

    Test.group "Integer.round" <|
        Test.specify "Can round small integers to a specified number of decimal places correctly (value is unchanged)"
            0 . round . should_equal 0
            3 . round . should_equal 3
            -3 . round . should_equal -3
            3 . round 0 . should_equal 3
            -3 . round 0 . should_equal -3
            3 . round 1 . should_equal 3
            -3 . round 1 . should_equal -3

        Test.specify "Can round small integers to a specified number of negative places correctly"
            4 . round -1 . should_equal 0
            24 . round -1 . should_equal 20
            25 . round -1 . should_equal 30
            29 . round -1 . should_equal 30
            30 . round -1 . should_equal 30
            31 . round -1 . should_equal 30

            2412 . round -3 . should_equal 2000
            2499 . round -3 . should_equal 2000
            2500 . round -3 . should_equal 3000
            2511 . round -3 . should_equal 3000
            2907 . round -3 . should_equal 3000
            3000 . round -3 . should_equal 3000
            3098 . round -3 . should_equal 3000
            3101 . round -3 . should_equal 3000

        Test.specify "Can round negative small integers to a specified number of negative places correctly"
            -4 . round -1 . should_equal 0
            -24 . round -1 . should_equal -20
            -25 . round -1 . should_equal -20
            -29 . round -1 . should_equal -30
            -30 . round -1 . should_equal -30
            -31 . round -1 . should_equal -30

            -2412 . round -3 . should_equal -2000
            -2499 . round -3 . should_equal -2000
            -2500 . round -3 . should_equal -2000
            -2511 . round -3 . should_equal -3000
            -2907 . round -3 . should_equal -3000
            -3000 . round -3 . should_equal -3000
            -3098 . round -3 . should_equal -3000
            -3101 . round -3 . should_equal -3000

        Test.specify "Banker's rounding handles half-way values correctly" <|
            12350 . round -2 use_bankers=True . should_equal 12400
            12250 . round -2 use_bankers=True . should_equal 12200
            -12350 . round -2 use_bankers=True . should_equal -12400
            -12250 . round -2 use_bankers=True . should_equal -12200

        Test.specify "Banker's rounding handles non-half-way values just like normal rounding" <|
            12330 . round -2 use_bankers=True . should_equal 12300
            12370 . round -2 use_bankers=True . should_equal 12400
            12430 . round -2 use_bankers=True . should_equal 12400
            12470 . round -2 use_bankers=True . should_equal 12500

            -12330 . round -2 use_bankers=True . should_equal -12300
            -12370 . round -2 use_bankers=True . should_equal -12400
            -12430 . round -2 use_bankers=True . should_equal -12400
            -12470 . round -2 use_bankers=True . should_equal -12500

        Test.specify "Returns the correct type" <|
            231 . round 1 . should_be_a Integer
            231 . round 0 . should_be_a Integer
            231 . round . should_be_a Integer
            231 . round -1 . should_be_a Integer

        Test.specify "Decimal places out of range" <|
            3 . round 16 . should_fail_with Illegal_Argument
            3 . round -16 . should_fail_with Illegal_Argument

        Test.specify "Number out of range" <|
            100000000000000 . round . should_fail_with Illegal_Argument
            -100000000000000 . round . should_fail_with Illegal_Argument
            100000000000000 . round -2 . should_fail_with Illegal_Argument
            -100000000000000 . round -2 . should_fail_with Illegal_Argument
            99999999999999 . round -2 . should_equal 100000000000000
            -99999999999999 . round -2 . should_equal -100000000000000

    Test.group "Decimal.truncate"
        Test.specify "Correctly converts to Integer" <|
            0.1.truncate . should_equal 0
            0.9.truncate . should_equal 0
            3.1.truncate . should_equal 3
            3.9.truncate . should_equal 3
            -0.1.truncate . should_equal 0
            -0.9.truncate . should_equal 0
            -3.1.truncate . should_equal -3
            -3.9.truncate . should_equal -3

    Test.group "Integer.truncate"
        Test.specify "Returns its argument" <|
            0.truncate . should_equal 0
            3.truncate . should_equal 3
            -3.truncate . should_equal -3

main = Test_Suite.run_main spec
