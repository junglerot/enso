from Standard.Base import all
from Standard.Base.Data.Index_Sub_Range import While, By_Index, Sample, Every

import Standard.Test

type T
    Value a b

T.== self that = self.a == that.a
T.compare_to self that = if self == that then Ordering.Equal else
    if self.a > that.a then Ordering.Greater else Ordering.Less

type My_Error
    Value a

type Foo
    Value vec

compare_tco a b = case a.vec.length == b.vec.length of
    False -> a.vec.length . compare_to b.vec.length
    True ->
        go ix = if ix > a.vec.length then Ordering.Equal else
            cmp = (a.vec.at ix) . compare_to (b.vec.at ix)
            case cmp of
                Ordering.Equal -> @Tail_Call go ix+1
                _ -> cmp
        go 0

foreign js generate_js_array = """
    return [1, 2, 3, 4, 5]

foreign js generate_nested_js_array = """
    return [[1, 2, 3], [4, 5]]

foreign python generate_py_array = """
    return [1, 2, 3, 4, None]

foreign python generate_nested_py_array = """
    return [[1, 2, 3], [4, 5]]

spec = Test.group "Vectors" <|
    pending_python_missing = if Polyglot.is_language_installed "python" then Nothing else """
        Can't run Python tests, Python is not installed.

    Test.specify "text bytes" <|
        "Lore".utf_8 . should_equal [76, 111, 114, 101]

    Test.specify "should allow vector creation with a programmatic constructor" <|
        Vector.new 100 (ix -> ix + 1) . fold 0 (+) . should_equal 5050

    Test.specify "should allow vector creation with a constant constructor" <|
        Vector.fill 100 1 . fold (0) (+) . should_equal 100

    Test.specify "should allow creation from arrays without mutability" <|
        built_from_js = Vector.from_polyglot_array generate_js_array
        built_from_js . should_equal [1, 2, 3, 4, 5]

    Test.specify "should allow creation from arrays without mutability in Python" pending=pending_python_missing <|
        built_from_py = Vector.from_polyglot_array generate_py_array
        built_from_py . should_equal [1, 2, 3, 4, Nothing]

    Test.specify "should allow creation from nested arrays from JavaScript" <|
        built_from_js = Vector.from_polyglot_array generate_nested_js_array
        built_from_js . should_equal [[1, 2, 3], [4, 5]]

    Test.specify "should allow creation from nested arrays from Python" pending=pending_python_missing <|
        built_from_py = Vector.from_polyglot_array generate_nested_py_array
        built_from_py . should_equal [[1, 2, 3], [4, 5]]

    Test.specify "should allow accessing elements" <|
        [1,2,3].at 0 . should_equal 1
        [1,2,3].at 2 . should_equal 3

    Test.specify "should allow to store dataflow errors and raise them on access" <|
        vec = [Error.throw (My_Error.Value "foo"), "bar"]
        vec.at 1 . should_equal "bar"
        vec.at 0 . should_fail_with My_Error.Value

    Test.specify "should allow accessing elements with negative indices" <|
        [1,2,3].at -1 . should_equal 3
        [1,2,3].at -2 . should_equal 2
        [1,2,3].at -3 . should_equal 1

    Test.specify "should return a dataflow error when accessing elements out of bounds" <|
        [1,2,3].at -4 . should_fail_with Index_Out_Of_Bounds_Error_Data
        [1,2,3].at 3 . should_fail_with Index_Out_Of_Bounds_Error_Data

    Test.specify "should have a well-defined length" <|
        [1,2,3].length . should_equal 3

    Test.specify "should allow folding an operator over its elements" <|
        [1,2,3].fold 0 (+) . should_equal 6

    Test.specify "should allow to reduce elements if it is non-empty" <|
        [1,2,3].reduce (+) . should_equal 6
        [].reduce (+) . should_fail_with Vector.Empty_Error

    Test.specify "should allow summing elements if they define +" <|
        [1,2,3].sum . should_equal 6
        [].sum . should_fail_with Vector.Empty_Error
        [T.Value 1 2, T.Value 3 4].sum . should_fail_with No_Such_Method_Error_Data

    Test.specify "should check exists" <|
        vec = [1, 2, 3, 4, 5]
        vec.exists (ix -> ix > 3) . should_be_true
        vec.exists (ix -> ix < 0) . should_be_false

    Test.specify "should check any" <|
        vec = [1, 2, 3, 4, 5]
        vec.any (ix -> ix > 3) . should_be_true
        vec.any (ix -> ix < 0) . should_be_false

    Test.specify "should check all" <|
        vec = [1, 2, 3, 4, 5]
        vec.all (ix -> ix > 0) . should_be_true
        vec.all (ix -> ix < 5) . should_be_false

    Test.specify "should check contains" <|
        vec = [1, 2, 3, 4, 5]
        vec.contains 1 . should_be_true
        vec.contains 0 . should_be_false

    Test.specify "should check for emptiness" <|
        non_empty = [1]
        empty = []
        non_empty.is_empty . should_be_false
        empty.is_empty . should_be_true

    Test.specify "should check for non-emptiness" <|
        non_empty = [1]
        empty = []
        non_empty.not_empty . should_be_true
        empty.not_empty . should_be_false

    Test.specify "should filter elements by a predicate" <|
        vec = [1, 2, 3, 4, 5]
        vec.filter (x -> x > 3) . should_equal [4, 5]
        vec.filter (x -> x == 1) . should_equal [1]
        vec.filter (x -> x < 0) . should_equal []
        vec.filter (x -> if x == 2 then Error.throw <| My_Error.Value "foo" else True) . should_fail_with My_Error.Value

    Test.specify "should filter elements by Filter_Condition" <|
        vec = [1, 2, 3, 4, 5]
        vec.filter (Filter_Condition.Greater than=3) . should_equal [4, 5]
        vec.filter (Filter_Condition.Less than=3.5) . should_equal [1, 2, 3]
        vec.filter (Filter_Condition.Equal to=3) . should_equal [3]
        vec.filter (Filter_Condition.Equal_Or_Greater than=3) . should_equal [3, 4, 5]
        vec.filter (Filter_Condition.Equal_Or_Less than=(-1)) . should_equal []
        vec.filter (Filter_Condition.Between 2 4) . should_equal [2, 3, 4]
        vec.filter (Filter_Condition.Between 2.1 4.5) . should_equal [3, 4]

        Test.expect_panic_with (vec.filter (Filter_Condition.Starts_With "a")) No_Such_Method_Error_Data
        vec.filter Filter_Condition.Is_True . should_equal []
        vec.filter Filter_Condition.Is_False . should_equal []
        vec.filter Filter_Condition.Is_Nothing . should_equal []
        vec.filter Filter_Condition.Not_Nothing . should_equal vec

        txtvec = ["aaa", "bbb", "abab", "cccc", "baaa", "ś"]
        txtvec.filter (Filter_Condition.Contains "a") . should_equal ["aaa", "abab", "baaa"]
        txtvec.filter (Filter_Condition.Contains 's\u0301') . should_equal ["ś"]
        txtvec.filter (Filter_Condition.Starts_With "a") . should_equal ["aaa", "abab"]
        txtvec.filter (Filter_Condition.Ends_With "a") . should_equal ["aaa", "baaa"]
        txtvec.filter (Filter_Condition.Less than="a") . should_equal []
        txtvec.filter (Filter_Condition.Greater than="b") . should_equal ["bbb", "cccc", "baaa", "ś"]
        txtvec.filter (Filter_Condition.Between "b" "c") . should_equal ["bbb", "baaa"]
        Test.expect_panic_with (txtvec.filter (Filter_Condition.Starts_With 42)) Unsupported_Argument_Types_Data

        mixed = [1, Nothing, "b"]
        mixed.filter Filter_Condition.Is_Nothing . should_equal [Nothing]
        mixed.filter Filter_Condition.Not_Nothing . should_equal [1, "b"]

        boolvec = [True, False, Nothing, True]
        boolvec.filter Filter_Condition.Is_True . should_equal [True, True]
        boolvec.filter Filter_Condition.Is_False . should_equal [False]

    Test.specify "should filter elements with indices" <|
        [0, 10, 2, 2].filter_with_index (==) . should_equal [0, 2]
        ([1, 2, 3, 4].filter_with_index ix-> _-> ix < 2) . should_equal [1, 2]
        ([1, 2, 3, 4].filter_with_index ix-> _-> if ix == 1 then Error.throw <| My_Error.Value "foo" else True) . should_fail_with My_Error.Value

    Test.specify "should partition elements" <|
        [1, 2, 3, 4, 5].partition (x -> x % 2 == 0) . should_equal <| Pair_Data [2, 4] [1, 3, 5]
        ([1, 2, 3, 4].partition x-> if x == 1 then Error.throw <| My_Error.Value "foo" else True) . should_fail_with My_Error.Value

    Test.specify "should partition elements with indices" <|
        ["a", "b", "c", "d"].partition_with_index (ix -> _ -> ix % 2 == 0) == (Pair_Data ["a", "c"] ["b", "d"])
        ["a", "b", "c", "d"].partition_with_index (ix -> _ -> if ix % 2 == 0 then Error.throw <| My_Error.Value "foo" else True) . should_fail_with My_Error.Value

    Test.specify "should allow to join a vector of text elements to form a single text" <|
        ["a", "b", "c"].join . should_equal "abc"
        ["a", "b", "c"].join ";" "{" "}" . should_equal "{a;b;c}"

    Test.specify "should allow mapping an operation, returning a new vector" <|
        vec = [1, 2, 3, 4]
        mapped = vec.map x-> x * x
        vec.to_text.should_equal "[1, 2, 3, 4]"
        mapped.to_text.should_equal "[1, 4, 9, 16]"

    Test.specify "should allow flat_mapping an operation, returning a new vector" <|
        vec = [1, 2, 0, 3]
        mapped = vec.flat_map n-> Vector.fill n n
        mapped.should_equal [1, 2, 2, 3, 3, 3]

    Test.specify "should allow to flatten a nested vector" <|
        [[1, 2, 3], [4, 10], [], [0], [0]] . flatten . should_equal [1, 2, 3, 4, 10, 0, 0]
        [].flatten . should_equal []
        [[]].flatten . should_equal []
        [[], []].flatten . should_equal []
        [[1]].flatten . should_equal [1]
        [[[1], [2, 3]], [[4]]].flatten . should_equal [[1], [2, 3], [4]]
        [["a", 2], [], [[[3]]], [T.Value 1 2, 44]].flatten . should_equal ["a", 2, [[3]], T.Value 1 2, 44]
        (["polyglot", " ", "array"].map .utf_8).flatten . should_equal "polyglot array".utf_8

    Test.specify "should allow applying a function to each element" <|
        vec = [1, 2, 3, 4]
        vec_mut = Vector.new_builder
        vec.each vec_mut.append
        vec_mut.to_vector . should_equal vec

    Test.specify "should allow reversing" <|
        [1, 2, 3].reverse . should_equal [3, 2, 1]

    Test.specify "should have a well-defined text conversion" <|
        [].to_text.should_equal "[]"
        [1,2,3].to_text.should_equal "[1, 2, 3]"
        [Nothing].to_text.should_equal "[Nothing]"
        ['a'].to_text . should_equal "['a']"

    Test.specify "should allow to generate a short text representation for display" <|
        [].short_display_text max_entries=3 . should_equal "[]"
        [1].short_display_text max_entries=3 . should_equal "[1]"
        [1, 2].short_display_text max_entries=3 . should_equal "[1, 2]"
        [1, 2, 3].short_display_text max_entries=3 . should_equal "[1, 2, 3]"
        [1, 2, 3, 4].short_display_text max_entries=3 . should_equal "[1, 2, 3 and 1 more element]"
        [1, 2, 3, 4, 5, 6].short_display_text max_entries=3 . should_equal "[1, 2, 3 and 3 more elements]"
        (0.up_to 100).to_vector.short_display_text max_entries=2 . should_equal "[0, 1 and 98 more elements]"

        [].short_display_text max_entries=0 . should_fail_with Illegal_Argument_Error_Data

    Test.specify "should define equality" <|
        [1,2,3]==[1,2] . should_be_false
        [1,2,3]==[1,2,3] . should_be_true
        [1,2,3]==[3,4,5] . should_be_false

    Test.specify "should define concatenation" <|
        concat = [1, 2, 3] + [4, 5, 6]
        concat.should_equal [1, 2, 3, 4, 5, 6]

    Test.specify "should be convertible to a list" <|
        [].to_list . should_equal Nil
        ["A"].to_list . should_equal (Cons "A" Nil)
        [1, 2, "B", 3].to_list . should_equal (Cons 1 (Cons 2 (Cons "B" (Cons 3 Nil))))

    Test.specify "Vector slice should return a Vector" <|
        vec = [1, 2, 3, 4, 5, 6]
        vec.slice 0 3 . should_equal [1, 2, 3]
        vec.slice 1 3 . should_equal [2, 3]
        vec.slice 1 1 . should_equal []
        vec.slice 0 100 . should_equal [1, 2, 3, 4, 5, 6]
        Meta.is_same_object vec (vec.slice 0 100) . should_be_true
        Meta.get_qualified_type_name vec . should_equal (Meta.get_qualified_type_name (vec.slice 1 1))

    Test.specify "should define take and drop family of operations" <|
        vec = [1, 2, 3, 4, 5, 6]
        first_four = [1, 2, 3, 4]
        last_four = [3, 4, 5, 6]

        vec.take . should_equal [1]
        vec.drop . should_equal [2, 3, 4, 5, 6]

        vec.take (Range_Data 2 4) . should_equal [3, 4]
        vec.take (Range_Data 0 0) . should_equal []
        vec.take (Range_Data 100 100) . should_fail_with Index_Out_Of_Bounds_Error_Data
        vec.take (Range_Data 100 100) . catch . should_equal (Index_Out_Of_Bounds_Error_Data 100 6)
        vec.take (Range_Data 0 100) . should_equal vec
        [].take (Range_Data 0 0) . should_fail_with Index_Out_Of_Bounds_Error_Data
        [].take (Range_Data 0 0) . catch . should_equal (Index_Out_Of_Bounds_Error_Data 0 0)
        vec.take (Range_Data 100 99) . should_fail_with Index_Out_Of_Bounds_Error_Data

        vec.drop (Range_Data 2 4) . should_equal [1, 2, 5, 6]
        vec.drop (Range_Data 0 0) . should_equal vec
        vec.drop (Range_Data 100 100) . should_fail_with Index_Out_Of_Bounds_Error_Data
        vec.drop (Range_Data 100 100) . catch . should_equal (Index_Out_Of_Bounds_Error_Data 100 6)
        vec.drop (Range_Data 0 100) . should_equal []
        [].drop (Range_Data 0 0) . should_fail_with Index_Out_Of_Bounds_Error_Data
        [].drop (Range_Data 0 0) . catch . should_equal (Index_Out_Of_Bounds_Error_Data 0 0)
        vec.drop (Range_Data 100 99) . should_fail_with Index_Out_Of_Bounds_Error_Data

        vec.take (First 4) . should_equal first_four
        vec.take (First 0) . should_equal []
        vec.take (First -1) . should_equal []
        vec.take (First 100) . should_equal vec

        vec.drop (First 2) . should_equal last_four
        vec.drop (First 0) . should_equal vec
        vec.drop (First -1) . should_equal vec
        vec.drop (First 100) . should_equal []

        vec.take (Last 4) . should_equal last_four
        vec.take (Last 0) . should_equal []
        vec.take (Last -1) . should_equal []
        vec.take (Last 100) . should_equal vec

        vec.drop (Last 2) . should_equal first_four
        vec.drop (Last 0) . should_equal vec
        vec.drop (Last -1) . should_equal vec
        vec.drop (Last 100) . should_equal []

        vec.take (Every 1) . should_equal vec
        vec.take (Every 3) . should_equal [1, 4]
        vec.take (Every 3 first=1) . should_equal [2, 5]
        vec.take (Every 2 first=1) . should_equal [2, 4, 6]
        vec.take (Every 2 first=100) . should_equal []
        vec.take (Every 200) . should_equal [1]
        [].take (Every 2) . should_equal []
        vec.take (Every 0) . should_fail_with Illegal_Argument_Error_Data
        [].take (Every 0) . should_fail_with Illegal_Argument_Error_Data

        vec.drop (Every 1) . should_equal []
        vec.drop (Every 3) . should_equal [2, 3, 5, 6]
        vec.drop (Every 3 first=1) . should_equal [1, 3, 4, 6]
        vec.drop (Every 2 first=1) . should_equal [1, 3, 5]
        vec.drop (Every 2 first=100) . should_equal vec
        vec.drop (Every 200) . should_equal [2, 3, 4, 5, 6]
        [].drop (Every 2) . should_equal []
        vec.drop (Every 0) . should_fail_with Illegal_Argument_Error_Data
        [].drop (Every 0) . should_fail_with Illegal_Argument_Error_Data

        vec.take (By_Index 0) . should_equal [1]
        [].take (By_Index 0) . should_fail_with Index_Out_Of_Bounds_Error_Data
        vec.take (By_Index []) . should_equal []
        vec.take (By_Index [-1, -1]) . should_equal [6, 6]
        vec.take (By_Index [0, 0, Range_Data 3 100]) . should_equal [1, 1, 4, 5, 6]
        vec.take (Range_Data 0 100 2) . should_equal [1, 3, 5]
        vec.take (By_Index [Range_Data 0 100 2, Range_Data 1 6 2]) . should_equal [1, 3, 5, 2, 4, 6]
        vec.take (By_Index [Range_Data 1 3, Range_Data 2 5]) . should_equal [2, 3, 3, 4, 5]
        vec.take (By_Index [Range_Data 2 5, Range_Data 1 3]) . should_equal [3, 4, 5, 2, 3]
        vec.take (By_Index [0, 1, Range_Data 100 200]) . should_fail_with Index_Out_Of_Bounds_Error_Data
        vec.take (By_Index 100) . should_fail_with Index_Out_Of_Bounds_Error_Data

        vec.drop (By_Index 0) . should_equal [2, 3, 4, 5, 6]
        vec.drop (By_Index []) . should_equal vec
        vec.drop (By_Index [-1, -1]) . should_equal [1, 2, 3, 4, 5]
        vec.drop (By_Index [0, 0, Range_Data 3 100]) . should_equal [2, 3]
        vec.drop (Range_Data 0 100 2) . should_equal [2, 4, 6]
        vec.drop (By_Index [Range_Data 0 100 2, Range_Data 1 6 2]) . should_equal []
        vec.drop (By_Index [Range_Data 1 3, Range_Data 2 5]) . should_equal [1, 6]
        vec.drop (By_Index [Range_Data 2 5, Range_Data 1 3]) . should_equal [1, 6]
        vec.drop (By_Index [0, 1, Range_Data 100 200]) . should_fail_with Index_Out_Of_Bounds_Error_Data
        vec.drop (By_Index 100) . should_fail_with Index_Out_Of_Bounds_Error_Data

        [1, 3, 5, 6, 8, 9, 10, 11, 13].take (While (x-> x%2 == 1)) . should_equal [1, 3, 5]
        [1, 2, 3] . take (While (_ > 10)) . should_equal []
        [1, 2, 3] . take (While (_ < 10)) . should_equal [1, 2, 3]

        [1, 3, 5, 6, 8, 9, 10, 11, 13].drop (While (x-> x%2 == 1)) . should_equal [6, 8, 9, 10, 11, 13]
        [1, 2, 3] . drop (While (_ > 10)) . should_equal [1, 2, 3]
        [1, 2, 3] . drop (While (_ < 10)) . should_equal []

        vec.take (Sample 0) . should_equal []
        [].take (Sample 0) . should_equal []
        [].take (Sample 1) . should_equal []
        ["a"].take (Sample 1) . should_equal ["a"]
        ["a", "a", "a"].take (Sample 1) . should_equal ["a"]
        ["a", "a", "a"].take (Sample 100) . should_equal ["a", "a", "a"]

        vec.drop (Sample 0) . should_equal vec
        [].drop (Sample 0) . should_equal []
        [].drop (Sample 1) . should_equal []
        ["a"].drop (Sample 1) . should_equal []
        ["a", "a", "a"].drop (Sample 1) . should_equal ["a", "a"]
        ["a", "a", "a"].drop (Sample 100) . should_equal []

    Test.specify "should allow getting the head element" <|
        non_empty_vec = [1, 2, 3, 4, 5]
        singleton_vec = [1]
        empty_vec = []
        non_empty_vec.head . should_equal 1
        singleton_vec.head . should_equal 1
        empty_vec.head . should_fail_with Vector.Empty_Error

    Test.specify "should allow getting the tail of the vector" <|
        non_empty_vec = [1, 2, 3, 4, 5]
        singleton_vec = [1]
        empty_vec = []
        non_empty_vec.tail . should_equal [2, 3, 4, 5]
        singleton_vec.tail . should_equal []
        empty_vec.tail . should_fail_with Vector.Empty_Error

    Test.specify "should allow getting the init of the vector" <|
        non_empty_vec = [1, 2, 3, 4, 5]
        singleton_vec = [1]
        empty_vec = []
        non_empty_vec.init . should_equal [1, 2, 3, 4]
        singleton_vec.init . should_equal []
        empty_vec.init . should_fail_with Vector.Empty_Error

    Test.specify "should allow getting the last element of the vector" <|
        non_empty_vec = [1, 2, 3, 4, 5]
        singleton_vec = [1]
        empty_vec = []
        non_empty_vec.last . should_equal 5
        singleton_vec.last . should_equal 1
        empty_vec.last . should_fail_with Vector.Empty_Error

    Test.specify "should allow getting the first element" <|
        non_empty_vec = [1, 2, 3, 4, 5]
        singleton_vec = [1]
        empty_vec = []
        non_empty_vec.first . should_equal 1
        singleton_vec.first . should_equal 1
        empty_vec.first . should_fail_with Vector.Empty_Error

    Test.specify "should allow getting the rest of the vector" <|
        non_empty_vec = [1, 2, 3, 4, 5]
        singleton_vec = [1]
        empty_vec = []
        non_empty_vec.rest . should_equal [2, 3, 4, 5]
        singleton_vec.rest . should_equal []
        empty_vec.rest . should_fail_with Vector.Empty_Error

    Test.specify "should be able to be sorted" <|
        empty_vec = []
        short_vec = [2, 4, 38, -1, -1000, 3671, -32]
        short_expected = [-1000, -32, -1, 2, 4, 38, 3671]
        empty_vec.sort . should_equal []
        short_vec.sort . should_equal short_expected

        ["aa", "bb", "ba"].sort . should_equal ["aa", "ba", "bb"]
        [Date.new 2000, Date.new 1999 10 11, Date.new 1990].sort . should_equal [Date.new 1990, Date.new 1999 10 11, Date.new 2000]
        [Time_Of_Day.new 12, Time_Of_Day.new 10 30].sort . should_equal [Time_Of_Day.new 10 30, Time_Of_Day.new 12]
        [Date_Time.new 2000 12 30 12 30, Date_Time.new 2000 12 30 12 00].sort . should_equal [Date_Time.new 2000 12 30 12 00, Date_Time.new 2000 12 30 12 30]

        ["aa", 2].sort . should_fail_with Incomparable_Values_Error
        [2, Date.new 1999].sort . should_fail_with Incomparable_Values_Error
        [Date_Time.new 1999 1 1 12 30, Date.new 1999].sort . should_fail_with Incomparable_Values_Error
        [Date_Time.new 1999 1 1 12 30, Time_Of_Day.new 12 30].sort . should_fail_with Incomparable_Values_Error

    Test.specify "should leave the original vector unchanged" <|
        non_empty_vec = [2, 4, 2, 3, 2, 3]
        sorted = non_empty_vec.sort
        non_empty_vec . should_equal [2, 4, 2, 3, 2, 3]
        sorted . should_equal [2, 2, 2, 3, 3, 4]

    Test.specify "should have a stable sort" <|
        small_vec = [T.Value 1 8, T.Value 1 3, T.Value -20 0, T.Value -1 1, T.Value -1 10, T.Value 4 0]
        small_expected = [T.Value -20 0, T.Value -1 1, T.Value -1 10, T.Value 1 8, T.Value 1 3, T.Value 4 0]
        small_vec.sort . should_equal small_expected

    Test.specify "should be able to use a custom element projection" <|
        small_vec = [T.Value 1 8, T.Value 1 3, T.Value -20 0, T.Value -1 1, T.Value -1 10, T.Value 4 0]
        small_expected = [T.Value -20 0, T.Value 4 0, T.Value -1 1, T.Value 1 3, T.Value 1 8, T.Value -1 10]
        small_vec.sort (on = _.b) . should_equal small_expected

    Test.specify "should be able to use a custom comparator" <|
        small_vec = [2, 7, -3, 383, -392, 28, -90]
        small_expected = [383, 28, 7, 2, -3, -90, -392]
        small_vec.sort (by = l -> r -> r.compare_to l) . should_equal small_expected

    Test.specify "should allow tail-recursive comparators in sort" <|
         v = [Foo.Value [4,2,2], Foo.Value [1,2,3], Foo.Value [1,2,4]]
         r = [Foo.Value [1,2,3], Foo.Value [1,2,4], Foo.Value [4,2,2]]
         v.sort by=compare_tco . should_equal r

    Test.specify "should be able to use a custom comparator and projection" <|
        small_vec = [T.Value 1 8, T.Value 1 3, T.Value -20 0, T.Value -1 1, T.Value -1 10, T.Value 4 0]
        small_expected = [T.Value -1 10, T.Value 1 8, T.Value 1 3, T.Value -1 1, T.Value -20 0, T.Value 4 0]
        small_vec.sort (on = _.b) (by = l -> r -> r.compare_to l) . should_equal small_expected

    Test.specify "should be able to sort in descending order" <|
        small_vec = [2, 7, -3, 383, -392, 28, -90]
        small_expected = [383, 28, 7, 2, -3, -90, -392]
        small_vec.sort order=Sort_Direction.Descending . should_equal small_expected

    Test.specify "should be stable in descending order" <|
        small_vec = [T.Value 1 8, T.Value 1 3, T.Value -20 0, T.Value -1 1, T.Value -1 10, T.Value 4 0]
        small_expected = [T.Value 4 0, T.Value 1 3, T.Value 1 8, T.Value -1 10, T.Value -1 1, T.Value -20 0]
        small_vec.sort order=Sort_Direction.Descending . should_equal small_expected

    Test.specify "should correctly propagate error through map" <|
        [1, 2, 3].map Error.throw . catch . should_equal 1
        fun a = if a == 3 then Error.throw (My_Error.Value a) else a
        [1, 2, 3, 4].map fun . catch My_Error.Value . should_equal (My_Error.Value 3)

    Test.specify "should be able to be efficiently converted to a visualisation" <|
        vec = Vector.fill 1000 0
        text = vec.to_default_visualization_data
        json = Json.parse text
        as_vec = json.into (Vector.fill 1 Number)
        as_vec.should_equal <| Vector.fill 100 0

    Test.specify "should pad elements" <|
        [].pad 3 0 . should_equal [0, 0, 0]
        [1, 2, 3].pad 0 0 . should_equal [1, 2, 3]
        [1, 2, 3].pad 3 0 . should_equal [1, 2, 3]
        [1].pad 3 0 . should_equal [1, 0, 0]

    Test.specify "should zip elements" <|
        [1, 2, 3].zip [] (+) . should_equal []
        [1, 2, 3].zip [4] (+) . should_equal [5]
        [1, 2, 3].zip [4, 5, 6] (+) . should_equal [5, 7, 9]
        [1, 2, 3].zip [4, 5, 6, 7] (+) . should_equal [5, 7, 9]
        [].zip [4, 5, 6] (+) . should_equal []

    Test.specify "should flat_map elements" <|
        [1, 2, 3].flat_map (_ -> []) . should_equal []
        [1, 2, 3].flat_map (_ -> [0, 1]) . should_equal [0, 1, 0, 1, 0, 1]
        [1, 2, 3].flat_map (_ -> [0, [1]]) . should_equal [0, [1], 0, [1], 0, [1]]
        [0, 1, 0].flat_map (i -> if i == 1 then [1, 1] else [i]) . should_equal [0, 1, 1, 0]
        [0, 0, 0].flat_map (i -> [i]) . should_equal [0, 0, 0]

    Test.specify "should prepend elements" <|
        [2, 3].prepend 1 . should_equal [1, 2, 3]

    Test.specify "should append elements" <|
        [1, 2].append 3 . should_equal [1, 2, 3]

    Test.specify "should return a vector containing only unique elements" <|
        [1, 3, 1, 2, 2, 1].distinct . should_equal [1, 3, 2]
        ["a", "a", "a"].distinct . should_equal ["a"]
        [1, 1.0, 2, 2.0].distinct . should_equal [1, 2]
        [].distinct . should_equal []

    Test.specify "should throw a clean error for incomparable types" <|
        ["a", 2].distinct . should_fail_with Incomparable_Values_Error
        [2, "a", Integer, "a", 2].distinct . should_fail_with Incomparable_Values_Error
        [Pair_Data 1 2, Pair_Data 3 4].distinct . should_fail_with Incomparable_Values_Error

    Test.specify "should correctly handle distinct with custom types like Atoms that implement compare_to" <|
        [T.Value 1 2, T.Value 3 3, T.Value 1 2].distinct . should_equal [T.Value 1 2, T.Value 3 3]

    Test.specify "should return a vector containing only unique elements up to some criteria" <|
        [Pair_Data 1 "a", Pair_Data 2 "b", Pair_Data 1 "c"] . distinct (on = _.first) . should_equal [Pair_Data 1 "a", Pair_Data 2 "b"]

    Test.specify "should be able to sort a polyglot vector" <|
        input = "beta".utf_8
        expected = "abet".utf_8
        input.sort . should_equal expected

    v1 = [1, 2, 3]
    a1 = v1.to_array

    v2 = [1, 2, 3]
    a2 = v2.to_array

    Test.specify "vector1 should be equal to vector1" <|
        v1.should_equal v1

    Test.specify "vector1 should be equal to vector2" <|
        v1.should_equal v2

    Test.specify "vector1 should be equal to array1" <|
        v1.should_equal a1

    Test.specify "vector1 should be equal to array2" <|
        v1.should_equal a2

    Test.specify "array1 should be equal to vector1" <|
        a1.should_equal v1

    Test.specify "array1 should be equal to vector2" <|
        a1.should_equal v2

    Test.specify "array1 should be equal to array1" <|
        a1.should_equal a1

    Test.specify "array1 should be equal to array2" <|
        a1.should_equal a2

main = Test.Suite.run_main spec
