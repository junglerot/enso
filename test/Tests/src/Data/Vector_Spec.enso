from Standard.Base import all
from Standard.Base.Data.Array_Proxy import Array_Proxy
import Standard.Base.Data.Vector.Empty_Error
import Standard.Base.Errors.Common.Incomparable_Values
import Standard.Base.Errors.Common.Index_Out_Of_Bounds
import Standard.Base.Errors.Common.No_Such_Method
import Standard.Base.Errors.Common.Not_Found
import Standard.Base.Errors.Common.Type_Error
import Standard.Base.Errors.Common.Unsupported_Argument_Types
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Runtime.Ref.Ref
import Standard.Base.Runtime.State
from Standard.Base.Data.Index_Sub_Range.Index_Sub_Range import While, By_Index, Sample, Every

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

polyglot java import java.util.ArrayList

type T
    Value a b

type T_Comparator
    compare t1 t2 = Comparable.from t1.a . compare t1.a t2.a
    hash t = Comparable.from t.a . hash t.a

Comparable.from (_:T) = T_Comparator

## Type that violates reflexivity
type My_Nan
    Value value

type My_Nan_Comparator
    compare _ _ = Nothing
    hash _ = 0

Comparable.from (_:My_Nan) = My_Nan_Comparator

type My_Error
    Value a

type Foo
    Value vec

compare_tco a b = case a.vec.length == b.vec.length of
    False -> Ordering.compare a.vec.length b.vec.length
    True ->
        go ix = if ix > a.vec.length then Ordering.Equal else
            cmp = Ordering.compare (a.vec.at ix) (b.vec.at ix)
            case cmp of
                Ordering.Equal -> @Tail_Call go ix+1
                _ -> cmp
        go 0

foreign js generate_js_array = """
    return [1, 2, 3, 4, 5]

foreign js generate_nested_js_array = """
    return [[1, 2, 3], [4, 5]]

foreign python generate_py_array = """
    return [1, 2, 3, 4, None]

foreign python generate_nested_py_array = """
    return [[1, 2, 3], [4, 5]]

type_spec name alter = Test.group name <|
    pending_python_missing = if Polyglot.is_language_installed "python" then Nothing else
        "Can't run Python tests, Python is not installed."

    Test.specify "text bytes" <|
        "Lore".utf_8 . should_equal [76, 111, 114, 101]

    Test.specify "should allow vector creation with a programmatic constructor" <|
        Vector.new 100 (ix -> ix + 1) . fold 0 (+) . should_equal 5050

        r = Ref.new 0
        next =
            r.put r.get+1
        const = Vector.new 4 _->next
        const.should_equal [0, 1, 2, 3]

    Test.specify "should allow vector creation with a constant constructor" <|
        Vector.fill 100 1 . fold (0) (+) . should_equal 100

        r = Ref.new 0
        next =
            r.put r.get+1
        const = Vector.fill 4 next
        const.should_equal [0, 0, 0, 0]

    Test.specify "should allow creation from arrays without mutability" <|
        built_from_js = Vector.from_polyglot_array generate_js_array
        built_from_js . should_equal (alter [1, 2, 3, 4, 5])

    Test.specify "should allow creation from arrays without mutability in Python" pending=pending_python_missing <|
        built_from_py = Vector.from_polyglot_array generate_py_array
        built_from_py . should_equal (alter [1, 2, 3, 4, Nothing])

    Test.specify "should allow creation from nested arrays from JavaScript" <|
        built_from_js = Vector.from_polyglot_array generate_nested_js_array
        built_from_js . should_equal (alter [[1, 2, 3], [4, 5]])

    Test.specify "should allow creation from nested arrays from Python" pending=pending_python_missing <|
        built_from_py = Vector.from_polyglot_array generate_nested_py_array
        built_from_py . should_equal (alter [[1, 2, 3], [4, 5]])

    Test.specify "should allow accessing elements" <|
        alter [1,2,3] . at 0 . should_equal 1
        alter [1,2,3] . at 2 . should_equal 3

    Test.specify "should allow to store dataflow errors and raise them on access" <|
        vec = [Error.throw (My_Error.Value "foo"), "bar"]
        vec.at 1 . should_equal "bar"
        vec.at 0 . should_fail_with My_Error
        vec.get 1 . should_equal "bar"
        vec.get 0 . should_fail_with My_Error

    Test.specify "should allow accessing elements with negative indices" <|
        alter [1,2,3] . at -1 . should_equal 3
        alter [1,2,3] . at -2 . should_equal 2
        alter [1,2,3] . at -3 . should_equal 1
        alter [1,2,3] . get -1 . should_equal 3
        alter [1,2,3] . get -2 . should_equal 2
        alter [1,2,3] . get -3 . should_equal 1

    Test.specify "should correctly handle out of bounds access" <|
        alter [1,2,3] . at -4 . should_fail_with Index_Out_Of_Bounds
        alter [1,2,3] . at 3 . should_fail_with Index_Out_Of_Bounds
        alter [1,2,3] . get -4 . should_equal Nothing
        alter [1,2,3] . get 3 . should_equal Nothing
        alter [1,2,3] . get -4 "???" . should_equal "???"
        alter [1,2,3] . get 3 "???" . should_equal "???"

    Test.specify "should have a well-defined length" <|
        alter [1,2,3] . length . should_equal 3

    Test.specify "should allow folding an operator over its elements" <|
        alter [1,2,3] . fold 0 (+) . should_equal 6
        alter [] . fold 123 (+) . should_equal 123

    Test.specify "should allow a running fold operator over its elements" <|
        alter [1,2,3] . running_fold 0 (+) . should_equal [1, 3, 6]
        alter [] . running_fold 123 (+) . should_equal []

    Test.specify "should allow to reduce elements if it is non-empty" <|
        alter [1,2,3] . reduce (+) . should_equal 6
        alter [] . reduce (+) . should_fail_with Empty_Error
        alter [] . reduce (+) 0 . should_equal 0

    Test.specify "should check any" <|
        vec = alter [1, 2, 3, 4, 5]
        vec.any (ix -> ix > 3) . should_be_true
        vec.any (ix -> ix < 0) . should_be_false

        vec.any (Filter_Condition.Greater 0) . should_be_true
        vec.any (Filter_Condition.Less 3) . should_be_true
        vec.any (Filter_Condition.Less 0) . should_be_false

        Test.expect_panic_with matcher=Type_Error (vec.any "invalid argument")

    Test.specify "should check all" <|
        vec = alter [1, 2, 3, 4, 5]
        vec.all (ix -> ix > 0) . should_be_true
        vec.all (ix -> ix < 5) . should_be_false

        vec.all (Filter_Condition.Greater 0) . should_be_true
        vec.all (Filter_Condition.Less 3) . should_be_false

        Test.expect_panic_with matcher=Type_Error (vec.all "invalid argument")

    Test.specify "should check contains" <|
        vec = alter [1, 2, 3, 4, 5]
        vec.contains 1 . should_be_true
        vec.contains 0 . should_be_false

    Test.specify "should check for emptiness" <|
        non_empty = alter [1]
        empty = alter []
        non_empty.is_empty . should_be_false
        empty.is_empty . should_be_true

    Test.specify "should check for non-emptiness" <|
        non_empty = alter [1]
        empty = alter []
        non_empty.not_empty . should_be_true
        empty.not_empty . should_be_false

    Test.specify "should filter elements by a predicate" <|
        vec = alter [1, 2, 3, 4, 5]
        vec.filter (x -> x > 3) . should_equal [4, 5]
        vec.filter (x -> x == 1) . should_equal [1]
        vec.filter (x -> x < 0) . should_equal []
        vec.filter (x -> if x == 2 then Error.throw <| My_Error.Value "foo" else True) . should_fail_with My_Error

    Test.specify "should filter elements by Filter_Condition" <|
        vec = alter [1, 2, 3, 4, 5]
        vec.filter (Filter_Condition.Greater than=3) . should_equal [4, 5]
        vec.filter (Filter_Condition.Less than=3.5) . should_equal [1, 2, 3]
        vec.filter (Filter_Condition.Equal to=3) . should_equal [3]
        vec.filter (Filter_Condition.Equal to=3.0) . should_equal [3]
        vec.filter (Filter_Condition.Equal to=3.1) . should_equal []
        vec.filter (Filter_Condition.Not_Equal to=3) . should_equal [1, 2, 4, 5]
        vec.filter (Filter_Condition.Equal_Or_Greater than=3) . should_equal [3, 4, 5]
        vec.filter (Filter_Condition.Equal_Or_Less than=(-1)) . should_equal []
        vec.filter (Filter_Condition.Between 2 4) . should_equal [2, 3, 4]
        vec.filter (Filter_Condition.Between 2.1 4.5) . should_equal [3, 4]
        vec.filter (Filter_Condition.Is_In [7, 3, 2, 2, 2]) . should_equal [2, 3]
        vec.filter (Filter_Condition.Is_In []) . should_equal []
        vec.filter (Filter_Condition.Not_In [7, 3, 2, 2]) . should_equal [1, 4, 5]

        Test.expect_panic_with (vec.filter (Filter_Condition.Starts_With "a")) No_Such_Method
        vec.filter Filter_Condition.Is_True . should_equal []
        vec.filter Filter_Condition.Is_False . should_equal []
        vec.filter Filter_Condition.Is_Nothing . should_equal []
        vec.filter Filter_Condition.Not_Nothing . should_equal vec

        txtvec = ["aaa", "bbb", "abab", "cccc", "baaa", "ś"]
        txtvec.filter (Filter_Condition.Contains "a") . should_equal ["aaa", "abab", "baaa"]
        txtvec.filter (Filter_Condition.Contains 'A' Case_Sensitivity.Sensitive) . should_equal []
        txtvec.filter (Filter_Condition.Contains 'A' Case_Sensitivity.Insensitive) . should_equal ["aaa", "abab", "baaa"]
        txtvec.filter (Filter_Condition.Contains 's\u0301') . should_equal ["ś"]
        txtvec.filter (Filter_Condition.Contains 'S\u0301' Case_Sensitivity.Sensitive) . should_equal []
        txtvec.filter (Filter_Condition.Contains 'S\u0301' Case_Sensitivity.Insensitive) . should_equal ["ś"]
        txtvec.filter (Filter_Condition.Not_Contains "a") . should_equal ["bbb", "cccc", "ś"]
        txtvec.filter (Filter_Condition.Not_Contains "A" Case_Sensitivity.Sensitive) . should_equal ["aaa", "bbb", "abab", "cccc", "baaa", "ś"]
        txtvec.filter (Filter_Condition.Not_Contains "A" Case_Sensitivity.Insensitive) . should_equal ["bbb", "cccc", "ś"]
        txtvec.filter (Filter_Condition.Not_Contains 's\u0301') . should_equal ["aaa", "bbb", "abab", "cccc", "baaa"]
        txtvec.filter (Filter_Condition.Not_Contains 'S\u0301' Case_Sensitivity.Sensitive) . should_equal ["aaa", "bbb", "abab", "cccc", "baaa", "ś"]
        txtvec.filter (Filter_Condition.Not_Contains 'S\u0301' Case_Sensitivity.Insensitive) . should_equal ["aaa", "bbb", "abab", "cccc", "baaa"]
        txtvec.filter (Filter_Condition.Starts_With "a") . should_equal ["aaa", "abab"]
        txtvec.filter (Filter_Condition.Starts_With "A" Case_Sensitivity.Sensitive) . should_equal []
        txtvec.filter (Filter_Condition.Starts_With "A" Case_Sensitivity.Insensitive) . should_equal ["aaa", "abab"]
        txtvec.filter (Filter_Condition.Ends_With "a") . should_equal ["aaa", "baaa"]
        txtvec.filter (Filter_Condition.Ends_With "A" Case_Sensitivity.Sensitive) . should_equal []
        txtvec.filter (Filter_Condition.Ends_With "A" Case_Sensitivity.Insensitive) . should_equal ["aaa", "baaa"]
        txtvec.filter (Filter_Condition.Less than="a") . should_equal []
        txtvec.filter (Filter_Condition.Greater than="b") . should_equal ["bbb", "cccc", "baaa", "ś"]
        txtvec.filter (Filter_Condition.Between "b" "c") . should_equal ["bbb", "baaa"]
        Test.expect_panic_with (txtvec.filter (Filter_Condition.Starts_With 42)) Unsupported_Argument_Types
        txtvec.filter Filter_Condition.Is_True . should_equal []
        txtvec.filter (Filter_Condition.Is_In [1, 2]) . should_equal []
        txtvec.filter (Filter_Condition.Is_In ["bbb", 's\u0301', "bbb", "FOOBAR"]) . should_equal ["bbb", "ś"]

        alter ["", Nothing, " ", "a"] . filter (Filter_Condition.Is_Empty) . should_equal ["", Nothing]
        alter ["", Nothing, " ", "a"] . filter (Filter_Condition.Not_Empty) . should_equal [" ", "a"]
        alter ["abab", "aaabaaaa", "ba"] . filter (Filter_Condition.Like "ba") . should_equal ["ba"]
        alter ["abab", "aaabaaaa"] . filter (Filter_Condition.Like "_ba_") . should_equal ["abab"]
        alter ["abab", "aaabaaaa"] . filter (Filter_Condition.Like "%ba__%") . should_equal ["aaabaaaa"]
        alter ["aaaa", "bbbbb", "[ab]aaaa"] . filter (Filter_Condition.Like "[ab]%") . should_equal ["[ab]aaaa"]
        alter ["f.txt", "abc.*"] . filter (Filter_Condition.Like "%.*") . should_equal ["abc.*"]
        alter ["f.txt", "abc.*"] . filter (Filter_Condition.Not_Like "%.*") . should_equal ["f.txt"]

        txt2 = alter ['a\n\n\n', 'a\n', 'a\n\n\nb', 'a\nb', 'caa\nbb']
        txt2.filter (Filter_Condition.Like 'a_') . should_equal ['a\n']
        txt2.filter (Filter_Condition.Like 'a%') . should_equal ['a\n\n\n', 'a\n', 'a\n\n\nb', 'a\nb']
        txt2.filter (Filter_Condition.Like 'a_b') . should_equal ['a\nb']
        txt2.filter (Filter_Condition.Like '%\nb') . should_equal ['a\n\n\nb', 'a\nb']

        txt3 = alter ['śnieg', 's\u0301nieg', 'X', 'połać', 'połac\u0301']
        txt3.filter (Filter_Condition.Starts_With 'ś') . should_equal ['śnieg', 's\u0301nieg']
        txt3.filter (Filter_Condition.Contains 'ś') . should_equal ['śnieg', 's\u0301nieg']
        txt3.filter (Filter_Condition.Not_Contains 'ś') . should_equal ['X', 'połać', 'połac\u0301']
        txt3.filter (Filter_Condition.Ends_With 'ś') . should_equal []
        txt3.filter (Filter_Condition.Ends_With 'ć') . should_equal ['połać', 'połac\u0301']
        ## There is a bug with Java Regex in Unicode normalized mode (CANON_EQ) with quoting.
           https://bugs.java.com/bugdatabase/view_bug.do?bug_id=8032926
        # txt3.filter (Filter_Condition.Like 'ś%') . should_equal ['śnieg', 's\u0301nieg']
        # This should be replaced with the disabled test above, once the related bug is fixed.
        txt3.filter (Filter_Condition.Like 'ś%') . should_equal ['śnieg']

        mixed = alter [1, Nothing, "b"]
        mixed.filter Filter_Condition.Is_Nothing . should_equal [Nothing]
        mixed.filter Filter_Condition.Not_Nothing . should_equal [1, "b"]
        mixed.filter Filter_Condition.Is_Empty . should_equal [Nothing]
        mixed.filter Filter_Condition.Not_Empty . should_equal [1, "b"]

        boolvec = [True, False, Nothing, True]
        boolvec.filter Filter_Condition.Is_True . should_equal [True, True]
        boolvec.filter Filter_Condition.Is_False . should_equal [False]

    Test.specify "should have a friendly error when missing Filter_Condition arguments" <|
        v = alter [0, 1, 2]

        r1 = v.filter Filter_Condition.Less
        r1 . should_fail_with Illegal_Argument
        r1.catch.to_display_text . should_contain "missing arguments"

        v.filter (Filter_Condition.Between 10) . should_fail_with Illegal_Argument

    Test.specify "should filter elements with indices" <|
        (alter [0, 10, 2, 2] . filter_with_index (==)) . should_equal [0, 2]
        (alter [1, 2, 3, 4] . filter_with_index ix-> _-> ix < 2) . should_equal [1, 2]
        (alter [1, 2, 3, 4] . filter_with_index ix-> _-> if ix == 1 then Error.throw <| My_Error.Value "foo" else True) . should_fail_with My_Error

    Test.specify "should partition elements" <|
        vec = alter [1, 2, 3, 4, 5]
        vec.partition (x -> x % 2 == 0) . should_equal <| Pair.new [2, 4] [1, 3, 5]
        (vec . partition x-> if x == 1 then Error.throw <| My_Error.Value "foo" else True) . should_fail_with My_Error

        vec.partition (Filter_Condition.Between 2 4) . should_equal <| Pair.new [2, 3, 4] [1, 5]

        Test.expect_panic_with matcher=Type_Error (vec.partition "invalid arg")

    Test.specify "should partition elements with indices" <|
        alter ["a", "b", "c", "d"] . partition_with_index (ix -> _ -> ix % 2 == 0) == (Pair.new ["a", "c"] ["b", "d"])
        alter ["a", "b", "c", "d"] . partition_with_index (ix -> _ -> if ix % 2 == 0 then Error.throw <| My_Error.Value "foo" else True) . should_fail_with My_Error

    Test.specify "should allow to join a vector of text elements to form a single text" <|
        alter ["a", "b", "c"] . join . should_equal "abc"
        alter ["a", "b", "c"] . join ";" "{" "}" . should_equal "{a;b;c}"

    Test.specify "should allow mapping an operation, returning a new vector" <|
        vec = alter [1, 2, 3, 4]
        mapped = vec.map x-> x * x
        vec.to_text.should_equal "[1, 2, 3, 4]"
        mapped.to_text.should_equal "[1, 4, 9, 16]"

    Test.specify "should allow flat_mapping an operation, returning a new vector" <|
        vec = alter [1, 2, 0, 3]
        mapped = vec.flat_map n-> Vector.fill n n
        mapped.should_equal [1, 2, 2, 3, 3, 3]

    Test.specify "should allow to flatten a nested vector" <|
        alter [[1, 2, 3], [4, 10], [], [0], [0]] . flatten . should_equal [1, 2, 3, 4, 10, 0, 0]
        alter [] . flatten . should_equal []
        alter [[]] . flatten . should_equal []
        alter [[], []] . flatten . should_equal []
        alter [[1]] . flatten . should_equal [1]
        alter [[[1], [2, 3]], [[4]]] . flatten . should_equal [[1], [2, 3], [4]]
        alter [["a", 2], [], [[[3]]], [T.Value 1 2, 44]] . flatten . should_equal ["a", 2, [[3]], T.Value 1 2, 44]
        (alter ["polyglot", " ", "array"] . map .utf_8).flatten . should_equal "polyglot array".utf_8

    Test.specify "should allow applying a function to each element" <|
        vec = alter [1, 2, 3, 4]
        vec_mut = Vector.new_builder
        vec.each vec_mut.append
        vec_mut.to_vector . should_equal vec

    Test.specify "should accept changed elements" <|
        vec_mut = Vector.new_builder
        vec_mut.append 1
        vec_mut.append 1.1
        vec_mut.append Nothing

        vec = alter vec_mut.to_vector
        vec.length . should_equal 3
        vec.at 0 . should_equal 1
        vec.at 1 . should_equal 1.1
        vec.at 2 . should_equal Nothing

    Test.specify "should accept Nothing" <|
        vec_mut = Vector.new_builder
        vec_mut.append Nothing

        vec = alter vec_mut.to_vector
        vec.length . should_equal 1
        vec.at 0 . should_equal Nothing

    Test.specify "should allow reversing" <|
        alter [1, 2, 3] . reverse . should_equal [3, 2, 1]

    Test.specify "should have a well-defined text conversion" <|
        alter [] . to_text . should_equal "[]"
        alter [1,2,3] . to_text . should_equal "[1, 2, 3]"
        alter [Nothing] . to_text . should_equal "[Nothing]"
        alter ['a'] . to_text . should_equal "[a]"

    Test.specify "should allow to generate a short text representation for display" <|
        alter [] . short_display_text max_entries=3 . should_equal "[]"
        alter [1] . short_display_text max_entries=3 . should_equal "[1]"
        alter [1, 2] . short_display_text max_entries=3 . should_equal "[1, 2]"
        alter [1, 2, 3] . short_display_text max_entries=3 . should_equal "[1, 2, 3]"
        alter [1, 2, 3, 4] . short_display_text max_entries=3 . should_equal "[1, 2, 3 and 1 more element]"
        alter [1, 2, 3, 4, 5, 6] . short_display_text max_entries=3 . should_equal "[1, 2, 3 and 3 more elements]"
        alter (0.up_to 100).to_vector . short_display_text max_entries=2 . should_equal "[0, 1 and 98 more elements]"

        alter [1, 2] . to_display_text . should_equal "[1, 2]"

        alter [] . short_display_text max_entries=0 . should_fail_with Illegal_Argument

    Test.specify "should define equality" <|
        (alter [1,2,3])==[1,2] . should_be_false
        (alter [1,2,3])==[1,2,3] . should_be_true
        (alter [1,2,3])==[3,4,5] . should_be_false

    Test.specify "should define concatenation" <|
        concat = (alter [1, 2, 3]) + (alter [4, 5, 6])
        concat.should_equal [1, 2, 3, 4, 5, 6]
        Test.expect_panic_with matcher=Type_Error ((alter [1, 2, 3])+1)

    Test.specify "should allow finding a value" <|
        input = alter [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        input.find (x -> x == 5) . should_equal 5
        input.find (x -> x%3 == 2) . should_equal 2
        input.find (x -> x%3 == 3) . should_fail_with Not_Found
        input.find (x -> x%3 == 2) start=3 . should_equal 5
        input.find (x -> x%3 == 2) start=-3 . should_equal 8
        input.find (x -> x%3 == 2) start=10 . should_fail_with Not_Found
        input.find (x -> x%3 == 2) start=11 . should_fail_with Index_Out_Of_Bounds
        input.find (x -> x%3 == 2) start=11 . catch . should_equal (Index_Out_Of_Bounds.Error 11 11)
        input.find (x -> x%3 == 2) start=100 . should_fail_with Index_Out_Of_Bounds
        input.find (x -> x%3 == 2) start=-100 . should_fail_with Index_Out_Of_Bounds
        input.find (x -> x%3 == 3) if_missing=Nothing . should_equal Nothing

        input.find (Filter_Condition.Greater 5) . should_equal 6
        Test.expect_panic_with matcher=Type_Error (input.find "invalid arg")

    Test.specify "should allow finding the index of a value" <|
        input = alter [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
        input.index_of 4 . should_equal 3
        input.index_of (>3) . should_equal 3
        input.index_of 5 . should_equal Nothing
        [].index_of 5 . should_equal Nothing
        input.index_of 2 start=3 . should_equal 5
        input.index_of 2 start=-2 . should_equal 8
        input.index_of 2 start=10 . should_equal Nothing
        input.index_of 2 start=11 . should_fail_with Index_Out_Of_Bounds
        input.index_of 2 start=11 . catch . should_equal (Index_Out_Of_Bounds.Error 11 11)
        input.index_of 2 start=-11 . should_fail_with Index_Out_Of_Bounds

        input.index_of (Filter_Condition.Equal_Or_Greater 2) . should_equal 1
        input.index_of "text" . should_equal Nothing

    Test.specify "should allow finding the last index of a value" <|
        input = alter [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]
        input.last_index_of 2 . should_equal 8
        input.last_index_of 5 . should_equal Nothing
        [].last_index_of 5 . should_equal Nothing
        input.last_index_of 2 start=4 . should_equal 1
        input.last_index_of 2 start=-1 . should_equal 8
        input.last_index_of 2 start=10 . should_fail_with Index_Out_Of_Bounds
        input.last_index_of 2 start=10 . catch . should_equal (Index_Out_Of_Bounds.Error 10 10)
        input.last_index_of 2 start=-11 . should_fail_with Index_Out_Of_Bounds

        input.last_index_of (Filter_Condition.Equal_Or_Greater 2) . should_equal input.length-2
        input.last_index_of "text" . should_equal Nothing

    Test.specify "should be convertible to a list" <|
        alter [] . to_list . should_equal List.Nil
        alter ["A"] . to_list . should_equal (List.Cons "A" List.Nil)
        alter [1, 2, "B", 3] . to_list . should_equal (List.Cons 1 (List.Cons 2 (List.Cons "B" (List.Cons 3 List.Nil))))

    Test.specify "Vector slice should return a Vector" <|
        vec = alter [1, 2, 3, 4, 5, 6]
        vec.slice 0 3 . should_equal [1, 2, 3]
        vec.slice 1 3 . should_equal [2, 3]
        vec.slice 1 1 . should_equal []
        vec.slice 0 100 . should_equal [1, 2, 3, 4, 5, 6]
        Meta.is_same_object vec (vec.slice 0 100) . should_be_true
        Meta.get_qualified_type_name (vec.slice 1 1) . should_equal (Meta.meta Vector . qualified_name)

    Test.specify "should define take and drop family of operations" <|
        vec = alter [1, 2, 3, 4, 5, 6]
        first_four = alter [1, 2, 3, 4]
        last_four = alter [3, 4, 5, 6]

        vec.take . should_equal [1]
        vec.drop . should_equal [2, 3, 4, 5, 6]

        vec.take (2.up_to 4) . should_equal [3, 4]
        vec.take (0.up_to 0) . should_equal []
        vec.take (100.up_to 100) . should_fail_with Index_Out_Of_Bounds
        vec.take (100.up_to 100) . catch . should_equal (Index_Out_Of_Bounds.Error 100 6)
        vec.take (0.up_to 100) . should_equal vec
        [].take (0.up_to 0) . should_fail_with Index_Out_Of_Bounds
        [].take (0.up_to 0) . catch . should_equal (Index_Out_Of_Bounds.Error 0 0)
        vec.take (100.up_to 99) . should_fail_with Index_Out_Of_Bounds

        vec.drop (2.up_to 4) . should_equal [1, 2, 5, 6]
        vec.drop (0.up_to 0) . should_equal vec
        vec.drop (100.up_to 100) . should_fail_with Index_Out_Of_Bounds
        vec.drop (100.up_to 100) . catch . should_equal (Index_Out_Of_Bounds.Error 100 6)
        vec.drop (0.up_to 100) . should_equal []
        [].drop (0.up_to 0) . should_fail_with Index_Out_Of_Bounds
        [].drop (0.up_to 0) . catch . should_equal (Index_Out_Of_Bounds.Error 0 0)
        vec.drop (100.up_to 99) . should_fail_with Index_Out_Of_Bounds

        vec.take (First 4) . should_equal first_four
        vec.take (First 0) . should_equal []
        vec.take (First -1) . should_equal []
        vec.take (First 100) . should_equal vec

        vec.drop (First 2) . should_equal last_four
        vec.drop (First 0) . should_equal vec
        vec.drop (First -1) . should_equal vec
        vec.drop (First 100) . should_equal []

        vec.take 4 . should_equal first_four
        vec.take 0 . should_equal []
        vec.take -1 . should_equal []
        vec.take 100 . should_equal vec

        vec.drop 2 . should_equal last_four
        vec.drop 0 . should_equal vec
        vec.drop -1 . should_equal vec
        vec.drop 100 . should_equal []

        vec.take (Last 4) . should_equal last_four
        vec.take (Last 0) . should_equal []
        vec.take (Last -1) . should_equal []
        vec.take (Last 100) . should_equal vec

        vec.drop (Last 2) . should_equal first_four
        vec.drop (Last 0) . should_equal vec
        vec.drop (Last -1) . should_equal vec
        vec.drop (Last 100) . should_equal []

        vec.take (Every 1) . should_equal vec
        vec.take (Every 3) . should_equal [1, 4]
        vec.take (Every 3 first=1) . should_equal [2, 5]
        vec.take (Every 2 first=1) . should_equal [2, 4, 6]
        vec.take (Every 2 first=100) . should_equal []
        vec.take (Every 200) . should_equal [1]
        [].take (Every 2) . should_equal []
        vec.take (Every 0) . should_fail_with Illegal_Argument
        [].take (Every 0) . should_fail_with Illegal_Argument

        vec.drop (Every 1) . should_equal []
        vec.drop (Every 3) . should_equal [2, 3, 5, 6]
        vec.drop (Every 3 first=1) . should_equal [1, 3, 4, 6]
        vec.drop (Every 2 first=1) . should_equal [1, 3, 5]
        vec.drop (Every 2 first=100) . should_equal vec
        vec.drop (Every 200) . should_equal [2, 3, 4, 5, 6]
        [].drop (Every 2) . should_equal []
        vec.drop (Every 0) . should_fail_with Illegal_Argument
        [].drop (Every 0) . should_fail_with Illegal_Argument

        vec.take (By_Index 0) . should_equal [1]
        [].take (By_Index 0) . should_fail_with Index_Out_Of_Bounds
        vec.take (By_Index []) . should_equal []
        vec.take (By_Index [-1, -1]) . should_equal [6, 6]
        vec.take (By_Index [0, 0, 3.up_to 100]) . should_equal [1, 1, 4, 5, 6]
        vec.take (0.up_to 100 . with_step 2) . should_equal [1, 3, 5]
        vec.take (By_Index [0.up_to 100 . with_step 2, 1.up_to 6 . with_step 2]) . should_equal [1, 3, 5, 2, 4, 6]
        vec.take (By_Index [1.up_to 3, 2.up_to 5]) . should_equal [2, 3, 3, 4, 5]
        vec.take (By_Index [2.up_to 5, 1.up_to 3]) . should_equal [3, 4, 5, 2, 3]
        vec.take (By_Index [0, 1, 100.up_to 200]) . should_fail_with Index_Out_Of_Bounds
        vec.take (By_Index 100) . should_fail_with Index_Out_Of_Bounds

        vec.drop (By_Index 0) . should_equal [2, 3, 4, 5, 6]
        vec.drop (By_Index []) . should_equal vec
        vec.drop (By_Index [-1, -1]) . should_equal [1, 2, 3, 4, 5]
        vec.drop (By_Index [0, 0, 3.up_to 100]) . should_equal [2, 3]
        vec.drop (0.up_to 100 . with_step 2) . should_equal [2, 4, 6]
        vec.drop (By_Index [0.up_to 100 . with_step 2, 1.up_to 6 . with_step 2]) . should_equal []
        vec.drop (By_Index [1.up_to 3, 2.up_to 5]) . should_equal [1, 6]
        vec.drop (By_Index [2.up_to 5, 1.up_to 3]) . should_equal [1, 6]
        vec.drop (By_Index [0, 1, 100.up_to 200]) . should_fail_with Index_Out_Of_Bounds
        vec.drop (By_Index 100) . should_fail_with Index_Out_Of_Bounds

        [1, 3, 5, 6, 8, 9, 10, 11, 13].take (While (x-> x%2 == 1)) . should_equal [1, 3, 5]
        alter [1, 2, 3] . take (While (_ > 10)) . should_equal []
        alter [1, 2, 3] . take (While (_ < 10)) . should_equal [1, 2, 3]

        [1, 3, 5, 6, 8, 9, 10, 11, 13].drop (While (x-> x%2 == 1)) . should_equal [6, 8, 9, 10, 11, 13]
        alter [1, 2, 3] . drop (While (_ > 10)) . should_equal [1, 2, 3]
        alter [1, 2, 3] . drop (While (_ < 10)) . should_equal []

        vec.take (Sample 0) . should_equal []
        alter [] . take (Sample 0) . should_equal []
        alter [] . take (Sample 1) . should_fail_with Illegal_Argument
        alter ["a"] . take (Sample 1) . should_equal ["a"]
        alter ["a", "a", "a"] . take (Sample 1) . should_equal ["a"]
        alter ["a", "a", "a"] . take (Sample 3) . should_equal ["a", "a", "a"]
        alter ["a", "a", "a"] . take (Sample 100) . should_fail_with Illegal_Argument

        vec.drop (Sample 0) . should_equal vec
        alter [] . drop (Sample 0) . should_equal []
        alter [] . drop (Sample 1) . should_equal []
        alter ["a"] . drop (Sample 1) . should_equal []
        alter ["a", "a", "a"] . drop (Sample 1) . should_equal ["a", "a"]
        alter ["a", "a", "a"] . drop (Sample 100) . should_equal []

    Test.group "take/drop Sample non-determinism" <|
        v = 0.up_to 20 . to_vector

        Test.specify "sampling should be deterministic when a seed is supplied" <|
            v.take (Sample 3 seed=4200000) . should_equal (v.take (Sample 3 seed=4200000))

        Test.specify "sampling should be non-deterministic when a seed is not supplied" <|
            0.up_to 3 . map _->
                v.take (Sample 3) . should_not_equal (v.take (Sample 3))

    Test.specify "take/drop should gracefully handle missing constructor arguments" <|
        [].take "FOO" . should_fail_with Type_Error
        [].drop "FOO" . should_fail_with Type_Error

        r1 = [].take (Index_Sub_Range.While)
        r1.should_fail_with Illegal_Argument
        r1.catch.to_display_text . should_contain "The constructor While is missing some arguments"

        r2 = [].drop (Index_Sub_Range.Every ...)
        r2.should_fail_with Illegal_Argument
        r2.catch.to_display_text . should_contain "The constructor Every is missing some arguments"

        r3 = [].take (Index_Sub_Range.First _)
        r3.should_fail_with Illegal_Argument
        r3.catch.to_display_text . should_contain "Got a Function instead of a range, is a constructor argument missing?"

    Test.specify "should allow getting the last element of the vector" <|
        non_empty_vec = alter [1, 2, 3, 4, 5]
        singleton_vec = alter [1]
        empty_vec = alter []
        non_empty_vec.last . should_equal 5
        singleton_vec.last . should_equal 1
        empty_vec.last . should_fail_with Index_Out_Of_Bounds

    Test.specify "should allow getting the first element" <|
        non_empty_vec = alter [1, 2, 3, 4, 5]
        singleton_vec = alter [1]
        empty_vec = alter []
        non_empty_vec.first . should_equal 1
        singleton_vec.first . should_equal 1
        empty_vec.first . should_fail_with Index_Out_Of_Bounds

    Test.specify "should allow getting the second element" <|
        non_empty_vec = alter [1, 2, 3, 4, 5]
        singleton_vec = alter [1]
        empty_vec = alter []
        non_empty_vec.second . should_equal 2
        singleton_vec.second . should_fail_with Index_Out_Of_Bounds
        empty_vec.second . should_fail_with Index_Out_Of_Bounds

    Test.specify "should be able to be sorted" <|
        empty_vec = alter []
        short_vec = alter [2, 4, 38, -1, -1000, 3671, -32]
        short_expected = alter [-1000, -32, -1, 2, 4, 38, 3671]
        empty_vec.sort . should_equal []
        short_vec.sort . should_equal short_expected

        alter ["aa", "bb", "ba"] . sort . should_equal ["aa", "ba", "bb"]
        alter [Date.new 2000, Date.new 1999 10 11, Date.new 1990] . sort . should_equal [Date.new 1990, Date.new 1999 10 11, Date.new 2000]
        alter [Time_Of_Day.new 12, Time_Of_Day.new 10 30] . sort . should_equal [Time_Of_Day.new 10 30, Time_Of_Day.new 12]
        alter [Date_Time.new 2000 12 30 12 30, Date_Time.new 2000 12 30 12 00] . sort . should_equal [Date_Time.new 2000 12 30 12 00, Date_Time.new 2000 12 30 12 30]

        alter ["aa", 2] . sort . should_equal [2, "aa"]
        alter [2, Date.new 1999] . sort . should_equal [2, Date.new 1999]

    Test.specify "should leave the original vector unchanged" <|
        non_empty_vec = alter [2, 4, 2, 3, 2, 3]
        sorted = non_empty_vec.sort
        non_empty_vec . should_equal [2, 4, 2, 3, 2, 3]
        sorted . should_equal [2, 2, 2, 3, 3, 4]

    Test.specify "should have a stable sort" <|
        small_vec = alter [T.Value 1 8, T.Value 1 3, T.Value -20 0, T.Value -1 1, T.Value -1 10, T.Value 4 0]
        small_expected = [T.Value -20 0, T.Value -1 1, T.Value -1 10, T.Value 1 8, T.Value 1 3, T.Value 4 0]
        small_vec.sort . should_equal small_expected

    Test.specify "should fail the sort if Report_Error problem_behavior specified" <|
        alter [T.Value 1 8, Nothing] . sort on_incomparable=Problem_Behavior.Report_Error . should_fail_with Incomparable_Values
        alter [Nothing, Number.nan] . sort on_incomparable=Problem_Behavior.Report_Error . should_fail_with Incomparable_Values

    Test.specify "should be able to use a custom element projection" <|
        small_vec = alter [T.Value 1 8, T.Value 1 3, T.Value -20 0, T.Value -1 1, T.Value -1 10, T.Value 4 0]
        small_expected = [T.Value -20 0, T.Value 4 0, T.Value -1 1, T.Value 1 3, T.Value 1 8, T.Value -1 10]
        small_vec.sort (on = _.b) . should_equal small_expected
        small_vec.sort (on = .b) . should_equal small_expected

    Test.specify "should be able to use a custom compare function" <|
        small_vec = alter [2, 7, -3, 383, -392, 28, -90]
        small_expected = [383, 28, 7, 2, -3, -90, -392]
        small_vec.sort (by = l -> r -> Ordering.compare r l) . should_equal small_expected

    Test.specify "should allow tail-recursive comparators in sort" <|
         v = alter [Foo.Value [4,2,2], Foo.Value [1,2,3], Foo.Value [1,2,4]]
         r = alter [Foo.Value [1,2,3], Foo.Value [1,2,4], Foo.Value [4,2,2]]
         v.sort by=compare_tco . should_equal r

    Test.specify "should be able to use a custom compare function and projection" <|
        small_vec = alter [T.Value 1 8, T.Value 1 3, T.Value -20 0, T.Value -1 1, T.Value -1 10, T.Value 4 0]
        small_expected = alter [T.Value -1 10, T.Value 1 8, T.Value 1 3, T.Value -1 1, T.Value -20 0, T.Value 4 0]
        small_vec.sort (on = _.b) (by = l -> r -> Ordering.compare r l) . should_equal small_expected

    Test.specify "should be able to sort in descending order" <|
        small_vec = alter [2, 7, -3, 383, -392, 28, -90]
        small_expected = alter [383, 28, 7, 2, -3, -90, -392]
        small_vec.sort Sort_Direction.Descending . should_equal small_expected

    Test.specify "should be stable in descending order" <|
        small_vec = alter [T.Value 1 8, T.Value 1 3, T.Value -20 0, T.Value -1 1, T.Value -1 10, T.Value 4 0]
        small_expected = alter [T.Value 4 0, T.Value 1 3, T.Value 1 8, T.Value -1 10, T.Value -1 1, T.Value -20 0]
        small_vec.sort Sort_Direction.Descending . should_equal small_expected

    Test.specify "should correctly propagate error through map" <|
        alter [1, 2, 3] . map Error.throw . catch . should_equal 1
        fun a = if a == 3 then Error.throw (My_Error.Value a) else a
        alter [1, 2, 3, 4] . map fun . catch My_Error . should_equal (My_Error.Value 3)

    Test.specify "should correctly propagate state through each" <|
        v = State.run Number 77 <|
            b = Vector.new_builder
            (alter ["A", "B"]).each x->
                b.append x
                b.append (State.get Number).to_text
            b.to_vector

        v.should_equal ['A', '77', 'B', '77']

    Test.specify "should correctly propagate state through map" <|
        v = State.run Number 55 <|
            b = Vector.new_builder
            (alter ["X", "Y"]).map x->
                b.append x
                b.append (State.get Number).to_text
            b.to_vector

        v.should_equal ['X', '55', 'Y', '55']

    Test.specify "should pad elements" <|
        alter [] . pad 3 0 . should_equal [0, 0, 0]
        alter [1, 2, 3] . pad 0 0 . should_equal [1, 2, 3]
        alter [1, 2, 3] . pad 3 0 . should_equal [1, 2, 3]
        alter [1] . pad 3 0 . should_equal [1, 0, 0]

    Test.specify "should zip elements" <|
        alter [1, 2, 3] . zip [] (+) . should_equal []
        alter [1, 2, 3] . zip [4] (+) . should_equal [5]
        alter [1, 2, 3] . zip [4, 5, 6] (+) . should_equal [5, 7, 9]
        alter [1, 2, 3] . zip [4, 5, 6, 7] (+) . should_equal [5, 7, 9]
        alter [] . zip [4, 5, 6] (+) . should_equal []

    Test.specify "should flat_map elements" <|
        alter [1, 2, 3] . flat_map (_ -> []) . should_equal []
        alter [1, 2, 3] . flat_map (_ -> [0, 1]) . should_equal [0, 1, 0, 1, 0, 1]
        alter [1, 2, 3] . flat_map (_ -> [0, [1]]) . should_equal [0, [1], 0, [1], 0, [1]]
        alter [0, 1, 0] . flat_map (i -> if i == 1 then [1, 1] else [i]) . should_equal [0, 1, 1, 0]
        alter [0, 0, 0] . flat_map (i -> [i]) . should_equal [0, 0, 0]

    Test.specify "should allow inserting elements" <|
        alter [2, 3] . insert . should_equal [2, 3, Nothing]
        alter [2, 3] . insert item=1 . should_equal [2, 3, 1]
        alter [2, 3] . insert 100 item=1 . should_fail_with Index_Out_Of_Bounds
        alter [2, 3] . insert 0 item=1 . should_equal [1, 2, 3]
        alter [2, 3] . insert 0 . should_equal [Nothing, 2, 3]
        alter [2, 3] . insert 2 . should_equal [2, 3, Nothing]
        alter [1, 2, 3] . insert -1 item=4 . should_equal [1, 2, 4, 3]
        alter [1, 2, 3] . insert -20 item=4 . should_fail_with Index_Out_Of_Bounds

    Test.specify "should allow removing elements" <|
        alter [1, 2, 3] . remove . should_equal [1, 2]
        alter [1, 2, 3] . remove 100 . should_fail_with Index_Out_Of_Bounds
        alter [1, 2, 3] . remove -123 . should_fail_with Index_Out_Of_Bounds
        alter [1, 2, 3] . remove 0 . should_equal [2, 3]
        alter [1, 2, 3] . remove -1 . should_equal [1, 2]

    Test.specify "should return a vector containing only unique elements" <|
        alter [1, 3, 1, 2, 2, 1] . distinct . should_equal [1, 3, 2]
        alter ["a", "a", "a"] . distinct . should_equal ["a"]
        alter ['ś', 's', 's\u0301'] . distinct . should_equal ['ś', 's']
        alter [1, 1.0, 2, 2.0] . distinct . should_equal [1, 2]
        alter [] . distinct . should_equal []

    Test.specify "should be able to handle distinct on different primitive values" <|
        alter [1, "a"] . distinct . should_equal [1, "a"]
        alter ["a", 1] . distinct . should_equal ["a", 1]
        alter [Nothing, Nothing] . distinct . should_equal [Nothing]
        alter [Number.nan, Number.nan] . distinct . to_text . should_equal "[NaN]"
        alter [Nothing, Number.nan, Nothing, Number.nan] . distinct . to_text . should_equal "[Nothing, NaN]"
        alter [1, Nothing] . distinct . should_equal [1, Nothing]
        alter [Nothing, 1, Nothing] . distinct . should_equal [Nothing, 1]
        alter [1, Number.nan] . distinct . to_text . should_equal "[1, NaN]"
        alter [Number.nan, 1, Number.nan] . distinct . to_text . should_equal "[NaN, 1]"
        alter [1, Number.nan, 1] . distinct . to_text . should_equal "[1, NaN]"
        alter [Number.nan, My_Nan.Value 42, My_Nan.Value 23] . distinct . to_text . should_equal "[NaN, (My_Nan.Value 42), (My_Nan.Value 23)]"
        my_nan = My_Nan.Value 42
        alter [my_nan, Number.nan, my_nan] . distinct . to_text . should_equal "[(My_Nan.Value 42), NaN]"

    Test.specify "should correctly handle distinct with types that have custom comparators" <|
        alter [T.Value 1 2, T.Value 3 3, T.Value 1 2] . distinct . should_equal [T.Value 1 2, T.Value 3 3]
        alter [T.Value 1 2, T.Value 3 3, T.Value 1 2, Nothing] . distinct . should_equal [T.Value 1 2, T.Value 3 3, Nothing]
        alter [Nothing, T.Value 1 2, T.Value 3 3, T.Value 1 2, Nothing] . distinct . should_equal [Nothing, T.Value 1 2, T.Value 3 3]
        alter [T.Value 1 2, Date.new year=1973] . distinct . should_equal [T.Value 1 2, Date.new year=1973]

    Test.specify "should return a vector containing only unique elements up to some criteria" <|
        alter [Pair.new 1 "a", Pair.new 2 "b", Pair.new 1 "c"] . distinct (on = _.first) . should_equal [Pair.new 1 "a", Pair.new 2 "b"]

    Test.specify "should be able to sort a heterogenous vector" <|
        arr = alter [ 1, 1.3, "hi", Date.today, Date_Time.now, [ 0 ] ]
        (arr.sort on=(.to_text) . map .to_text) . should_equal (arr.map .to_text . sort)
        (arr.sort on=(_.to_text) . map .to_text) . should_equal (arr.map .to_text . sort)
        (arr.sort on=(x-> x.to_text) . map .to_text) . should_equal (arr.map .to_text . sort)

    Test.specify "should be able to sort a polyglot vector" <|
        input = "beta".utf_8
        expected = "abet".utf_8
        input.sort . should_equal expected

    Test.specify "should report only a limited number of warnings for incomparable values" <|
        gen x = case (x % 10) of
            0 -> Nothing
            1 -> "foo"+x.to_text
            2 -> x
            3 -> Number.nan
            4 -> Date.new
            5 -> []
            6 -> -x
            7 -> Number.nan
            8 -> Time_Of_Day.new
            _ -> x
        input = 0.up_to 500 . map gen
        sorted = input.sort on_incomparable=Problem_Behavior.Report_Warning
        Warning.get_all sorted . length . should_equal 10
        Warning.limit_reached sorted . should_equal True

spec =
    Test.group "Vector builder" <|
        Test.specify "empty builder.get" <|
            b = Vector.new_builder
            e = Panic.catch Index_Out_Of_Bounds (b.at 0) err->
                err.payload
            Meta.type_of e . should_equal Index_Out_Of_Bounds
            e.index . should_equal 0
            e.length . should_equal 0

        Test.specify "one number builder.get" <|
            b = Vector.new_builder
            b.append 32
            e = Panic.catch Index_Out_Of_Bounds (b.at 1) err->
                err.payload
            Meta.type_of e . should_equal Index_Out_Of_Bounds
            e.index . should_equal 1
            e.length . should_equal 1
            b.at 0 . should_equal 32

        Test.specify "Vector.collect lazy" <|
            seq = Fib.sequence
            seq.take 5 . should_equal [1, 1, 2, 3, 5]

        Test.specify "Vector.collect empty list" <|
            l = List.Nil
            v = Vector.collect l .x .xs limit=30 stop_at=(_==List.Nil)
            v . should_equal []

        Test.specify "Vector.collect finite" <|
            l = List.Cons 1 <| List.Cons 2 <| List.Cons 3 <| List.Nil
            v = Vector.collect l .x .xs limit=30 stop_at=(_==List.Nil)
            v . should_equal [1, 2, 3]

    Test.group "Vector/Array equality" <|
        v1 = [1, 2, 3]
        a1 = v1.to_array

        v2 = [1, 2, 3]
        a2 = v2.to_array

        Test.specify "vector1 should be equal to vector1" <|
            v1.should_equal v1

        Test.specify "vector1 should be equal to vector2" <|
            v1.should_equal v2

        Test.specify "vector1 should be equal to array1" <|
            v1.should_equal a1

        Test.specify "vector1 should be equal to array2" <|
            v1.should_equal a2

        Test.specify "array1 should be equal to vector1" <|
            a1.should_equal v1

        Test.specify "array1 should be equal to vector2" <|
            a1.should_equal v2

        Test.specify "array1 should be equal to array1" <|
            a1.should_equal a1

        Test.specify "array1 should be equal to array2" <|
            a1.should_equal a2

        Test.specify "should have a well-defined debug-printing method" <|
            [].pretty.should_equal "[]"
            [1,2,3].pretty.should_equal "[1, 2, 3]"
            [Nothing].pretty.should_equal "[Nothing]"
            [True, False, 'a'].pretty . should_equal "[True, False, 'a']"
            [Foo.Value True].pretty . should_equal "[(Foo.Value True)]"

    type_spec "Use Vector as vectors" identity
    type_spec "Use Array as vectors" (v -> v.to_array)
    type_spec "Use Java ArrayList as vectors" v->
        arr = ArrayList.new
        v.each (x -> arr.add x)
        arr
    type_spec "Use Array_Proxy as vectors" v->
        Array_Proxy.new v.length (ix -> v.at ix)
    type_spec "Use a slice of an array as vectors" v->
        v2 = v+[Nothing]
        sliced_vector = v2.slice 0 v.length
        sliced_array = sliced_vector.to_array
        sliced_array



type Fib
    Number n:Integer ~next:Fib

    take self limit:Integer = Vector.collect self .n .next limit

    sequence =
        sum_two seq = Fib.Number seq.n+seq.next.n (sum_two seq.next)
        start = Fib.Number 1 <| Fib.Number 1 (sum_two start)
        start



main = Test_Suite.run_main spec
