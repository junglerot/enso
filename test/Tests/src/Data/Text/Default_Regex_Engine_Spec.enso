from Standard.Base import all
import Standard.Base.Data.Text.Span.Utf_16_Span
import Standard.Base.Error.Common.Syntax_Error

import Standard.Base.Data.Text.Matching_Mode.Matching_Mode
from Standard.Base.Data.Text.Regex import No_Such_Group, Invalid_Option
import Standard.Base.Data.Text.Regex.Engine.Default as Default_Engine
import Standard.Base.Data.Text.Regex.Regex_Option.Regex_Option

polyglot java import java.util.regex.Pattern as Java_Pattern

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

default_mask = Java_Pattern.CANON_EQ.bit_or Java_Pattern.UNICODE_CASE . bit_or Java_Pattern.UNICODE_CHARACTER_CLASS

spec =
    Test.group "The default regex engine's options handling" <|

        Test.specify "should convert options to Java" <|
            options = [Regex_Option.Comments, Regex_Option.Multiline, Default_Engine.Option.Unix_Lines]
            expected_mask = Java_Pattern.UNIX_LINES.bit_or Java_Pattern.COMMENTS . bit_or Java_Pattern.MULTILINE . bit_or default_mask
            actual_mask = Default_Engine.from_enso_options options

            actual_mask . should_equal expected_mask

        Test.specify "should specify the unicode options by default" <|
            actual_mask = Default_Engine.from_enso_options []

            actual_mask . should_equal default_mask

        Test.specify "should handle ascii matching by disabling unicode" <|
            actual_mask = Default_Engine.from_enso_options [Regex_Option.Ascii_Matching]
            actual_mask . should_equal 0

        Test.specify "should result in an error when an option is invalid" <|
            Default_Engine.from_enso_options [""] . should_fail_with Invalid_Option.Error
            Default_Engine.from_enso_options ["", Regex_Option.Ascii_Matching] . should_fail_with Invalid_Option.Error

    Test.group "The default regex engine (Default_Engine)" <|

        Test.specify "should be able to compile patterns with no options" <|
            engine = Default_Engine.new
            pattern = engine.compile "^a$" []
            pattern.engine . should_equal engine
            pattern.options . should_equal []
            pattern.internal_pattern.flags . should_equal default_mask

        Test.specify "should be able to compile patterns with global options" <|
            engine = Default_Engine.new
            pattern = engine.compile "^a$" [Regex_Option.Multiline]
            pattern.engine . should_equal engine
            pattern.options . should_equal [Regex_Option.Multiline]
            pattern.internal_pattern.flags . should_equal (default_mask.bit_or Java_Pattern.MULTILINE)

        Test.specify "should be able to compile patterns with engine-specific options" <|
            engine = Default_Engine.new [Default_Engine.Option.Literal_Pattern]
            pattern = engine.compile "^a$" []
            pattern.engine . should_equal engine
            pattern.options . should_equal [Default_Engine.Option.Literal_Pattern]
            pattern.internal_pattern.flags . should_equal (default_mask.bit_or Java_Pattern.LITERAL)

        Test.specify "should be able to compile patterns with combined options" <|
            engine = Default_Engine.new [Default_Engine.Option.Literal_Pattern]
            pattern = engine.compile "^a$" [Regex_Option.Comments]
            pattern.engine . should_equal engine
            pattern.options.contains Default_Engine.Option.Literal_Pattern . should_be_true
            pattern.options.contains Regex_Option.Comments . should_be_true
            pattern.internal_pattern.flags . should_equal (default_mask . bit_or Java_Pattern.LITERAL . bit_or Java_Pattern.COMMENTS)

        Test.specify "should return a syntax error of the regex syntax is invalid" <|
            engine = Default_Engine.new
            engine.compile "^(a" [] . should_fail_with Syntax_Error.Error

        Test.specify "should throw an invalid options error if an option is invalid" <|
            engine = Default_Engine.new
            engine.compile "^a$" ["invalid"] . should_fail_with Invalid_Option.Error

        Test.specify "should escape an expression for use as a literal" <|
            pattern = "http://example.com"
            engine = Default_Engine.new
            engine.escape pattern . should_equal "\Qhttp://example.com\E"

    Test.group "The default regex engine's Pattern.matches" <|
        engine = Default_Engine.new

        Test.specify "should return True when the pattern matches against the input" <|
            pattern = engine.compile "(.. .. )(?<letters>.+)()??(?<empty>)??" []
            input = "aa ab abc a bc bcd"
            pattern.matches input . should_be_true

        Test.specify "should return False when the pattern doesn't match against the input" <|
            pattern = engine.compile "aaz" []
            input = "aa ab abc a bc bcd"
            pattern.matches input . should_be_false

        Test.specify "should check for full matches" <|
            pattern = engine.compile "f.o" []
            pattern.matches "foo" . should_be_true
            pattern.matches "foobar" . should_be_false

    Test.group "The default regex engine's Pattern.match" <|
        engine = Default_Engine.new

        Test.specify "should be able to `match` the first instance of the pattern in the input" <|
            pattern = engine.compile "(.. .. )(?<letters>.+)()??(?<empty>)??" []
            input = "aa ab abc a bc bcd"
            match = pattern.match input mode=Matching_Mode.First
            match . should_be_a Default_Engine.Match.Value
            match.group 0 . should_equal input

        Test.specify "should return `Nothing` if there are no matches in first mode" <|
            pattern = engine.compile "(.. .. )(?<letters>.+)()??(?<empty>)??" []
            input = "abc"
            match = pattern.match input mode=Matching_Mode.First
            match . should_equal Nothing

        Test.specify "should be able to `match` at most N instances of the pattern in the input" <|
            pattern = engine.compile "(..)" []
            input = "abcdefghij"
            match = pattern.match input mode=3
            match.length . should_equal 3
            match.at 0 . group 0 . should_equal "ab"
            match.at 1 . group 0 . should_equal "cd"
            match.at 2 . group 0 . should_equal "ef"

        Test.specify "should `match` fewer than N instances when there are fewer than N in the input" <|
            pattern = engine.compile "(..)" []
            input = "abcdef"
            match = pattern.match input mode=5
            match.length . should_equal 3
            match.at 0 . group 0 . should_equal "ab"
            match.at 1 . group 0 . should_equal "cd"
            match.at 2 . group 0 . should_equal "ef"

        Test.specify "should return `Nothing` when a counted match fails" <|
            pattern = engine.compile "(aa)" []
            input = "abcdefghij"
            match = pattern.match input mode=3
            match . should_equal Nothing

        Test.specify "should be able to `match` the all instances of the pattern in the input" <|
            pattern = engine.compile "(..)" []
            input = "abcdefghij"
            match = pattern.match input mode=Regex_Mode.All
            match.length . should_equal 5
            match.at 0 . group 0 . should_equal "ab"
            match.at 1 . group 0 . should_equal "cd"
            match.at 2 . group 0 . should_equal "ef"
            match.at 3 . group 0 . should_equal "gh"
            match.at 4 . group 0 . should_equal "ij"

        Test.specify "should return `Nothing` when an all match match fails" <|
            pattern = engine.compile "(aa)" []
            input = "abcdefghij"
            match = pattern.match input mode=Regex_Mode.All
            match . should_equal Nothing

        Test.specify "should be able to `match` the pattern against the entire input" <|
            pattern = engine.compile "(.. .. )(?<letters>.+)()??(?<empty>)??" []
            input = "aa ab abc a bc bcd"
            match = pattern.match input mode=Regex_Mode.Full
            match . should_be_a Default_Engine.Match.Value
            match.group 0 . should_equal input

        Test.specify "should return `Nothing` if a full match does not match the entire input" <|
            pattern = engine.compile "(..)" []
            input = "aa ab"
            full_match = pattern.match input mode=Regex_Mode.Full
            full_match . should_equal Nothing
            match = pattern.match input mode=Matching_Mode.First
            match . should_be_a Default_Engine.Match.Value

        Test.specify "should be able to `match` the pattern against bounded input" <|
            pattern = engine.compile "(..)" []
            input = "abcdefghij"
            match = pattern.match input mode=(Regex_Mode.Bounded 2 8)
            match.length . should_equal 3
            match.at 0 . group 0 . should_equal "cd"
            match.at 1 . group 0 . should_equal "ef"
            match.at 2 . group 0 . should_equal "gh"

        Test.specify "should correctly handle empty patterns" pending="Figure out how to make Regex correctly handle empty patterns." <|
           pattern = engine.compile "" []
           match_1 = pattern.match "" mode=Regex_Mode.All
           match_1.length . should_equal 1
           match_1.at 0 . start 0 . should_equal 0
           match_1.at 0 . end 0 . should_equal 0

           match_2 = pattern.match "ABC" mode=Regex_Mode.All
           match_2.length . should_equal 4
           match_2.at 0 . start 0 . should_equal 0
           match_2.at 0 . end 0 . should_equal 0
           match_2.at 1 . start 0 . should_equal 1
           match_2.at 1 . end 0 . should_equal 1
           match_2.at 3 . start 0 . should_equal 3
           match_2.at 3 . end 0 . should_equal 3

    Test.group "The default regex engine's Pattern.find" <|
        engine = Default_Engine.new

        Test.specify "should be able to `find` the first instance of the pattern in the input" <|
            pattern = engine.compile "(..)" []
            input = "abcdefghij"
            match = pattern.find input mode=Matching_Mode.First
            match . should_be_a Text
            match . should_equal "ab"

        Test.specify "should return `Nothing` if there are no matches in first mode" <|
            pattern = engine.compile "(aa)" []
            input = "abcdefghij"
            match = pattern.find input mode=Matching_Mode.First
            match . should_equal Nothing

        Test.specify "should be able to `find` at most N instances of the pattern in the input" <|
            pattern = engine.compile "(..)" []
            input = "abcdefghij"
            match = pattern.find input mode=3
            match.length . should_equal 3
            match.at 0 . should_equal "ab"
            match.at 1 . should_equal "cd"
            match.at 2 . should_equal "ef"

        Test.specify "should `find` fewer than N instances when there are fewer than N in the input" <|
            pattern = engine.compile "(..)" []
            input = "abcdef"
            match = pattern.find input mode=5
            match.length . should_equal 3
            match.at 0 . should_equal "ab"
            match.at 1 . should_equal "cd"
            match.at 2 . should_equal "ef"

        Test.specify "should return `Nothing` when a counted match fails" <|
            pattern = engine.compile "(aa)" []
            input = "abcdefghij"
            match = pattern.find input mode=3
            match . should_equal Nothing

        Test.specify "should be able to `find` the all instances of the pattern in the input" <|
            pattern = engine.compile "(..)" []
            input = "abcdefghij"
            match = pattern.find input mode=Regex_Mode.All
            match.length . should_equal 5
            match.at 0 . should_equal "ab"
            match.at 1 . should_equal "cd"
            match.at 2 . should_equal "ef"
            match.at 3 . should_equal "gh"
            match.at 4 . should_equal "ij"

        Test.specify "should return `Nothing` when an all match match fails" <|
            pattern = engine.compile "(aa)" []
            input = "abcdefghij"
            match = pattern.find input mode=Regex_Mode.All
            match . should_equal Nothing

        Test.specify "should be able to `find` the pattern against the entire input" <|
            pattern = engine.compile "(.. .. )(?<letters>.+)()??(?<empty>)??" []
            input = "aa ab abc a bc bcd"
            match = pattern.find input mode=Regex_Mode.Full
            match . should_be_a Text
            match . should_equal input

        Test.specify "should return `Nothing` if a full find does not match the entire input" <|
            pattern = engine.compile "(..)" []
            input = "aa ab"
            full_match = pattern.find input mode=Regex_Mode.Full
            full_match . should_equal Nothing

        Test.specify "should be able to `find` the pattern against bounded input" <|
            pattern = engine.compile "(..)" []
            input = "abcdefghij"
            match = pattern.find input mode=(Regex_Mode.Bounded 2 8)
            match.length . should_equal 3
            match.at 0 . should_equal "cd"
            match.at 1 . should_equal "ef"
            match.at 2 . should_equal "gh"

            match_2 = pattern.find input mode=(Regex_Mode.Bounded 2 8 mode=10)
            match_2.length . should_equal 3
            match_2.at 0 . should_equal "cd"
            match_2.at 1 . should_equal "ef"
            match_2.at 2 . should_equal "gh"

            match_3 = pattern.find input mode=(Regex_Mode.Bounded 2 8 mode=2)
            match_3.length . should_equal 2
            match_3.at 0 . should_equal "cd"
            match_3.at 1 . should_equal "ef"

        Test.specify "should correctly handle edge cases where one-letter matches happen at the end of the word" <|
            engine.compile "(a+|1+)" [] . find "a1a1" . should_equal ["a", "1", "a", "1"]
            engine.compile "([a]+|[1]+)" [] . find "a1a1" . should_equal ["a", "1", "a", "1"]
            engine.compile "([0-9]+|[^0-9]+)" [] . find "a1b2" . should_equal ["a", "1", "b", "2"]

            engine.compile "([0-9]+|[^0-9]+)" [] . find "a1b2" mode=5 . should_equal ["a", "1", "b", "2"]
            engine.compile "([0-9]+|[^0-9]+)" [] . find "a1b2" mode=4 . should_equal ["a", "1", "b", "2"]
            engine.compile "([0-9]+|[^0-9]+)" [] . find "a1b2" mode=3 . should_equal ["a", "1", "b"]
            engine.compile "([0-9]+|[^0-9]+)" [] . find "a1b2" mode=(Regex_Mode.Bounded 1 3) . should_equal ["1", "b"]

    Test.group "The default regex engine's Pattern.split" <|
        engine = Default_Engine.new

        Test.specify "should be able to `split` on the first instance of the pattern" <|
            pattern = engine.compile "cd" []
            input = "abcdefghij"
            match = pattern.split input mode=Matching_Mode.First
            match.length . should_equal 2
            match.at 0 . should_equal "ab"
            match.at 1 . should_equal "efghij"

        Test.specify "should return the original text if there are no matches in first mode" <|
            pattern = engine.compile "(aa)" []
            input = "abcdefghij"
            match = pattern.split input mode=Matching_Mode.First
            match . should_equal ["abcdefghij"]

        Test.specify "should be able to `split` on at most N instances of the pattern in the input" <|
            pattern = engine.compile "a" []
            input = "bacadaeaf"
            match = pattern.split input mode=3
            match.length . should_equal 4
            match.at 0 . should_equal "b"
            match.at 1 . should_equal "c"
            match.at 2 . should_equal "d"
            match.at 3 . should_equal "eaf"

        Test.specify "should `split` on fewer than N instances when there are fewer than N in the input" <|
            pattern = engine.compile "a" []
            input = "bacadaeaf"
            match = pattern.split input mode=10
            match.length . should_equal 5
            match.at 0 . should_equal "b"
            match.at 1 . should_equal "c"
            match.at 2 . should_equal "d"
            match.at 3 . should_equal "e"
            match.at 4 . should_equal "f"

        Test.specify "should be able to `split` on the all instances of the pattern in the input" <|
            pattern = engine.compile "(a)" []
            input = "bacadaeaf"
            match = pattern.split input mode=Regex_Mode.All
            match.length . should_equal 5
            match.at 0 . should_equal "b"
            match.at 1 . should_equal "c"
            match.at 2 . should_equal "d"
            match.at 3 . should_equal "e"
            match.at 4 . should_equal "f"

    Test.group "The default regex engine's Pattern.replace" <|
        engine = Default_Engine.new

        Test.specify "should be able to `replace` the first instance of the pattern in the input" <|
            pattern = engine.compile "abc" []
            input = "aa ab abc a bc abc"
            match = pattern.replace input "REPLACED" mode=Matching_Mode.First
            match . should_be_a Text
            match . should_equal "aa ab REPLACED a bc abc"

        Test.specify "should return the string unchanged if there are no matches to replace in first mode" <|
            pattern = engine.compile "xyz" []
            input = "aa ab ac ad"
            match = pattern.replace input "REPLACED" mode=Matching_Mode.First
            match . should_equal input

        Test.specify "should be able to replace at most N instances of the pattern in the input" <|
            pattern = engine.compile "aa" []
            input = "aa ab aa ac ad aa aa ax"
            match = pattern.replace input "REPLACED" mode=3
            match . should_equal "REPLACED ab REPLACED ac ad REPLACED aa ax"

        Test.specify "should replace fewer than N instances when there are fewer than N in the input" <|
            pattern = engine.compile "aa" []
            input = "aa ab aa ac ad aa aa ax"
            match = pattern.replace input "REPLACED" mode=10
            match . should_equal "REPLACED ab REPLACED ac ad REPLACED REPLACED ax"

        Test.specify "should return the input when a counted replace fails" <|
            pattern = engine.compile "aa" []
            input = "abcdefghij"
            match = pattern.replace input "REPLACED" mode=3
            match . should_equal input

        Test.specify "should be able to replace the all instances of the pattern in the input" <|
            pattern = engine.compile "aa" []
            input = "aa ab aa ac ad aa aa ax"
            match = pattern.replace input "REPLACED" mode=Regex_Mode.All
            match . should_equal "REPLACED ab REPLACED ac ad REPLACED REPLACED ax"

        Test.specify "should return the input when an all replace fails" <|
            pattern = engine.compile "aa" []
            input = "abcdefghij"
            match = pattern.replace input "REPLACED" mode=Regex_Mode.All
            match . should_equal input

        Test.specify "should be able to replace the entire input only if it matches" <|
            pattern = engine.compile "(.. .. )(?<letters>.+)()??(?<empty>)??" []
            input = "aa ab abc a bc bcd"
            match = pattern.replace input "REPLACED" mode=Regex_Mode.Full
            match . should_equal "REPLACED"

        Test.specify "should correctly replace entire input in Full mode even if partial matches are possible" <|
            pattern = engine.compile "(aa)+" []
            pattern.replace "aaa" "REPLACED" mode=Regex_Mode.Full . should_equal "aaa"
            pattern.replace "aaaa" "REPLACED" mode=Regex_Mode.Full . should_equal "REPLACED"

        Test.specify "should return the input for a full replace if the pattern doesn't match the entire input" <|
            pattern = engine.compile "(..)" []
            input = "aa ab"
            full_match = pattern.replace input "REPLACED" mode=Regex_Mode.Full
            full_match . should_equal input

        Test.specify "should not perform overlapping replacements in counted mode" <|
            pattern = engine.compile "(..)" []
            input = "abcdefghij"
            result = pattern.replace input "REPLACED" mode=3
            result . should_equal "REPLACEDREPLACEDREPLACEDghij"

        Test.specify "should not perform overlapping replacements in all mode" <|
            pattern = engine.compile "(..)" []
            input = "aa ab"
            match = pattern.replace input "REPLACED" mode=Regex_Mode.All
            match . should_equal "REPLACEDREPLACEDb"

        Test.specify "should handle capture groups in replacement" <|
            pattern = engine.compile "(?<capture>[a-z]+)" []
            pattern.replace "foo bar, baz" "[$1]" mode=Regex_Mode.All . should_equal "[foo] [bar], [baz]"
            pattern.replace "foo bar, baz" "[$1]" mode=0 . should_equal "foo bar, baz"
            pattern.replace "foo bar, baz" "[$1]" mode=1 . should_equal "[foo] bar, baz"
            pattern.replace "foo bar, baz" "[$1]" mode=2 . should_equal "[foo] [bar], baz"
            pattern.replace "foo bar, baz" "[$1]" mode=3 . should_equal "[foo] [bar], [baz]"
            pattern.replace "foo bar, baz" "[$1]" mode=4 . should_equal "[foo] [bar], [baz]"
            pattern.replace "foo bar, baz" "[$1]" mode=Matching_Mode.First . should_equal "[foo] bar, baz"
            pattern.replace "foo bar, baz" "[$1]" mode=Matching_Mode.Last . should_equal "foo bar, [baz]"

            pattern.replace "foo bar, baz" "[${capture}]" mode=Regex_Mode.All . should_equal "[foo] [bar], [baz]"
            pattern.replace "foo bar, baz" "[${capture}]" mode=0 . should_equal "foo bar, baz"
            pattern.replace "foo bar, baz" "[${capture}]" mode=1 . should_equal "[foo] bar, baz"
            pattern.replace "foo bar, baz" "[${capture}]" mode=2 . should_equal "[foo] [bar], baz"
            pattern.replace "foo bar, baz" "[${capture}]" mode=3 . should_equal "[foo] [bar], [baz]"
            pattern.replace "foo bar, baz" "[${capture}]" mode=4 . should_equal "[foo] [bar], [baz]"
            pattern.replace "foo bar, baz" "[${capture}]" mode=Matching_Mode.First . should_equal "[foo] bar, baz"
            pattern.replace "foo bar, baz" "[${capture}]" mode=Matching_Mode.Last . should_equal "foo bar, [baz]"

        Test.specify "should handle capture groups in replacement in All mode" <|
            pattern = engine.compile "([a-z]+)" []
            pattern.replace "foo bar, baz" "[$1]" mode=Regex_Mode.Full . should_equal "foo bar, baz"
            pattern.replace "foo" "[$1]" mode=Regex_Mode.Full . should_equal "[foo]"

            pattern_2 = engine.compile '<a href="(?<addr>.*?)">(?<name>.*?)</a>' []
            pattern_2.replace '<a href="url">content</a>' "$2 <- $1" mode=Regex_Mode.Full . should_equal "content <- url"
            pattern_2.replace '<a href="url">content</a>' "${name} <- ${addr}" mode=Regex_Mode.Full . should_equal "content <- url"

    Test.group "Match.group" <|
        engine = Default_Engine.new
        pattern = engine.compile "(.. .. )(?<letters>.+)()??(?<empty>)??" []
        input = "aa ab abc a bc bcd"
        match = pattern.match input mode=Matching_Mode.First
        match . should_be_a Default_Engine.Match.Value

        Test.specify "should return the full match with index 0" <|
            match.group 0 . should_equal "aa ab abc a bc bcd"

        Test.specify "should return the group contents if it matches by index" <|
            match.group 1 . should_equal "aa ab "

        Test.specify "should return the group contents if it matches by name" <|
            match.group "letters" . should_equal "abc a bc bcd"

        Test.specify "should return Nothing if the group did not match" <|
            match.group 3 . should_equal Nothing

        Test.specify "should fail with No_Such_Group_Error if the group did not exist" <|
            match.group "fail" . should_fail_with No_Such_Group.Error
            match.group 5 . should_fail_with No_Such_Group.Error

        Test.specify "should make named groups accessible by index" <|
            match.group 2 . should_equal (match.group "letters")

    Test.group "Match.groups" <|
        engine = Default_Engine.new
        pattern = engine.compile "(.. .. )(?<letters>.+)()??(?<empty>)??" []
        input = "aa ab abc a bc bcd"
        match = pattern.match input mode=Matching_Mode.First
        match . should_be_a Default_Engine.Match.Value

        Test.specify "should return the results of all groups" <|
            groups = match.groups
            groups.length . should_equal 5
            groups.should_equal ["aa ab abc a bc bcd", "aa ab ", "abc a bc bcd", Nothing, Nothing]

        Test.specify "should replace unmatched groups by a user-specified value" <|
            groups = match.groups "UNMATCHED"
            groups.length . should_equal 5
            groups.should_equal ["aa ab abc a bc bcd", "aa ab ", "abc a bc bcd", "UNMATCHED", "UNMATCHED"]

    Test.group "Match.named_groups" <|
        engine = Default_Engine.new
        pattern = engine.compile "(.. .. )(?<letters>.+)()??(?<empty>)??" []
        input = "aa ab abc a bc bcd"
        match = pattern.match input mode=Matching_Mode.First
        match . should_be_a Default_Engine.Match.Value

        Test.specify "should return the results of all named groups" <|
            groups = match.named_groups
            groups.size . should_equal 2
            groups.at "letters" . should_equal "abc a bc bcd"
            groups.at "empty" . should_equal Nothing

        Test.specify "should replace unmatched groups by a user-specified value" <|
            groups = match.named_groups "UNMATCHED"
            groups.size . should_equal 2
            groups.at "letters" . should_equal "abc a bc bcd"
            groups.at "empty" . should_equal "UNMATCHED"

    Test.group "Match.start" <|
        engine = Default_Engine.new
        pattern = engine.compile "(.. .. )(?<letters>.+)()??(?<empty>)??" []
        input = "aa ab abc a bc bcd"
        match = pattern.match input mode=Matching_Mode.First
        match . should_be_a Default_Engine.Match.Value

        Test.specify "should return the start of a group by index" <|
            match.start 1 . should_equal 0

        Test.specify "should return the start of a group by name" <|
            match.start "letters" . should_equal 6

        Test.specify "should return Nothing if the group didn't match" <|
            match.start 3 . should_equal Nothing
            match.start "empty" . should_equal Nothing

        Test.specify "should return No_Such_Group_Error if the group doesn't exist" <|
            match.start 5 . should_fail_with No_Such_Group.Error
            match.start "nonexistent" . should_fail_with No_Such_Group.Error

    Test.group "Match.end" <|
        engine = Default_Engine.new
        pattern = engine.compile "(.. .. )(?<letters>.+)()??(?<empty>)??" []
        input = "aa ab abc a bc bcd"
        match = pattern.match input mode=Matching_Mode.First
        match . should_be_a Default_Engine.Match.Value

        Test.specify "should return the end of a group by index" <|
            match.end 1 . should_equal 6

        Test.specify "should return the end of a group by name" <|
            match.end "letters" . should_equal 18

        Test.specify "should return Nothing if the group didn't match" <|
            match.end 3 . should_equal Nothing
            match.end "empty" . should_equal Nothing

        Test.specify "should return No_Such_Group_Error if the group doesn't exist" <|
            match.end 5 . should_fail_with No_Such_Group.Error
            match.end "nonexistent" . should_fail_with No_Such_Group.Error

    Test.group "Match.span" <|
        engine = Default_Engine.new
        pattern = engine.compile "(.. .. )(?<letters>.+)()??(?<empty>)??" []
        input = "aa ab abc a bc bcd"
        match = pattern.match input mode=Matching_Mode.First
        match . should_be_a Default_Engine.Match.Value

        Test.specify "should get the span of a group by index" <|
            match.span 1 . should_equal (Utf_16_Span.Value (0.up_to 6) input)

        Test.specify "should get the span of a group by name" <|
            match.span "letters" . should_equal (Utf_16_Span.Value (6.up_to 18) input)

        Test.specify "should return Nothing if the group didn't match" <|
            match.span 3 . should_equal Nothing
            match.span "empty" . should_equal Nothing

        Test.specify "should fail with a No_Such_Group_Error if the group doesn't exist" <|
            match.span 5 . should_fail_with No_Such_Group.Error
            match.span "nonexistent" . should_fail_with No_Such_Group.Error

    Test.group "Match.start_position" <|
        engine = Default_Engine.new
        pattern = engine.compile "(.. .. )(?<letters>.+)()??(?<empty>)??" []
        input = "aa ab abc a bc bcd"
        match = pattern.match input mode=Matching_Mode.First
        match . should_be_a Default_Engine.Match.Value

        Test.specify "should return the region start over which self match was performed" <|
            match.start_position . should_equal 0

    Test.group "Match.end_position" <|
        engine = Default_Engine.new
        pattern = engine.compile "(.. .. )(?<letters>.+)()??(?<empty>)??" []
        input = "aa ab abc a bc bcd"
        match = pattern.match input mode=Matching_Mode.First
        match . should_be_a Default_Engine.Match.Value

        Test.specify "should return the region end over which self match was performed" <|
            match.end_position . should_equal 18

main = Test_Suite.run_main spec
