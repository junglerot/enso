from Standard.Base import all
import Standard.Base.Data.List.Empty_Error
import Standard.Base.Error.Common.Index_Out_Of_Bounds
import Standard.Base.Error.Common.No_Such_Method
import Standard.Base.Error.Common.Not_Found
import Standard.Base.Error.Common.Unsupported_Argument_Types
import Standard.Base.Runtime.State

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

spec = Test.group "List" <|
    l = List.Cons 1 <| List.Cons 2 <| List.Cons 3 <| List.Nil
    empty = List.Nil
    Test.specify "should have properly defined length" <|
        l.length.should_equal 3
    Test.specify "should have well defined length when empty" <|
        List.Nil.length.should_equal 0
    Test.specify "should allow folding the list with an arbitrary operation with .fold" <|
        l.fold 0 (+) . should_equal 6
        l.fold 1 (*) . should_equal 6
    Test.specify "should allow reducing the list with an arbitrary operation with .reduce" <|
        l.reduce (+) . should_equal 6
        l.reduce (*) . should_equal 6
        empty.reduce (+) . should_fail_with Empty_Error
        empty.reduce (+) 0 . should_equal 0
    Test.specify "should allow checking if an element satisfies a predicate with .any" <|
        any_even = l.any (x -> x % 2 == 0)
        any_eq_five = l.any (== 5)
        any_even.should_be_true
        any_eq_five.should_be_false
    Test.specify "should allow checking if all elements satisfy a predicate with `.all`" <|
        all_even = l.all(x -> x % 2 == 0)
        all_less_than_four = l.all (< 4)
        all_even . should_be_false
        all_less_than_four . should_be_true
    Test.specify "should allow checking if an element is in the list with `.contains`" <|
        l.contains 4 . should_be_false
        l.contains 3 . should_be_true
        empty.contains 10 . should_be_false
    Test.specify "should allow finding an element in the list with `.find`" <|
        l.find (==2) . should_equal 2
        l.find (==3) . should_equal 3
        l.find (==4) . should_fail_with Not_Found
        l.find (==2) start=1 . should_equal 2
        l.find (==2) start=2 . should_fail_with Not_Found
        l.find (==2) start=3 . should_fail_with Not_Found
        l.find (==2) start=-1 . should_fail_with Not_Found
        l.find (==2) start=-2 . should_equal 2
        l.find (==2) start=4 . should_fail_with Index_Out_Of_Bounds
        l.find (==2) start=4 . catch . should_equal (Index_Out_Of_Bounds.Error 4 4)
        empty.find (==1) . should_fail_with Not_Found
        empty.find (==1) if_missing=Nothing . should_equal Nothing
    Test.specify "should allow finding the index of an element in the list with `.index_of`" <|
        l.index_of (==2) . should_equal 1
        l.index_of 3 . should_equal 2
        l.index_of (==4) . should_equal Nothing
        empty.index_of (==1) . should_equal Nothing
        l.index_of (==2) start=1 . should_equal 1
        l.index_of 2 start=2 . should_equal Nothing
        l.index_of 2 start=3 . should_equal Nothing
        l.index_of 2 start=-1 . should_equal Nothing
        l.index_of (==2) start=-2 . should_equal 1
        l.index_of 2 start=4 . should_fail_with Index_Out_Of_Bounds
        l.index_of 2 start=4 . catch . should_equal (Index_Out_Of_Bounds.Error 4 4)
        l.index_of 2 start=-3 . should_equal 1
        l.index_of 2 start=-4 . should_fail_with Index_Out_Of_Bounds
        l.index_of 2 start=-4 . should_fail_with Index_Out_Of_Bounds
    Test.specify "should allow finding the last index of an element in the list with `.last_index_of`" <|
        ll = List.Cons 1 <| List.Cons 2 <| List.Cons 3 <| List.Cons 1 <| List.Cons 2 <| List.Cons 3 <| List.Nil
        ll.last_index_of (==2) . should_equal 4
        ll.last_index_of 3 . should_equal 5
        ll.last_index_of (==4) . should_equal Nothing
        ll.last_index_of (==2) start=3 . should_equal 1
        empty.last_index_of (==1) . should_equal Nothing
        ll.last_index_of 3 start=1 . should_equal Nothing
        ll.last_index_of 3 start=5 . should_equal 5
        ll.last_index_of 3 start=6 . should_fail_with Index_Out_Of_Bounds
        ll.last_index_of 3 start=6 . catch . should_equal (Index_Out_Of_Bounds.Error 6 6)
        ll.last_index_of 2 start=-3 . should_equal 1
        ll.last_index_of 2 start=-6 . should_equal Nothing
        ll.last_index_of 3 start=-7 . should_fail_with Index_Out_Of_Bounds
        ll.last_index_of (==2) start=-2 . should_equal 4
    Test.specify "should allow checking if the list is empty with `.is_empty`" <|
        l.is_empty . should_be_false
        empty.is_empty . should_be_true
    Test.specify "should allow checking if the list is not empty `.not_empty`" <|
        l.not_empty . should_be_true
        empty.not_empty . should_be_false
    Test.specify "should be convertible to a vector" <|
        (List.Cons 3 (List.Cons "a" (List.Cons 1 List.Nil))).to_vector.should_equal [3, "a", 1]
    Test.specify "should allow filtering of the list using `.filter`" <|
        l.filter (> 2) . should_equal (List.Cons 3 List.Nil)
    Test.specify "should filter elements by Filter_Condition" <|
        list = [1, 2, 3, 4, 5].to_list
        list.filter (Filter_Condition.Greater than=3) . should_equal [4, 5].to_list
        list.filter (Filter_Condition.Less than=3.5) . should_equal [1, 2, 3].to_list
        list.filter (Filter_Condition.Equal to=3) . should_equal (List.Cons 3 List.Nil)
        list.filter (Filter_Condition.Not_Equal to=3) . should_equal [1, 2, 4, 5].to_list
        list.filter (Filter_Condition.Equal_Or_Greater than=3) . should_equal [3, 4, 5].to_list
        list.filter (Filter_Condition.Equal_Or_Less than=(-1)) . should_equal List.Nil
        list.filter (Filter_Condition.Between 2 4) . should_equal [2, 3, 4].to_list
        list.filter (Filter_Condition.Is_In [7, 3, 2]) . should_equal [2, 3].to_list
        list.filter (Filter_Condition.Not_In [7, 3, 2]) . should_equal [1, 4, 5].to_list

        Test.expect_panic_with (list.filter (Filter_Condition.Starts_With "a")) No_Such_Method
        list.filter Filter_Condition.Is_True . should_equal List.Nil
        list.filter Filter_Condition.Is_False . should_equal List.Nil
        list.filter Filter_Condition.Is_Nothing . should_equal List.Nil
        list.filter Filter_Condition.Not_Nothing . should_equal list

        txt = ["aaa", "bbb", "abab", "cccc", "baaa", "ś"].to_list
        txt.filter (Filter_Condition.Contains "a") . should_equal ["aaa", "abab", "baaa"].to_list
        txt.filter (Filter_Condition.Contains 'A' Case_Sensitivity.Sensitive) . should_equal [].to_list
        txt.filter (Filter_Condition.Contains 'A' Case_Sensitivity.Insensitive) . should_equal ["aaa", "abab", "baaa"].to_list
        txt.filter (Filter_Condition.Contains 's\u0301') . should_equal ["ś"].to_list
        txt.filter (Filter_Condition.Contains 'S\u0301' Case_Sensitivity.Sensitive) . should_equal [].to_list
        txt.filter (Filter_Condition.Contains 'S\u0301' Case_Sensitivity.Insensitive) . should_equal ["ś"].to_list
        txt.filter (Filter_Condition.Not_Contains "a") . should_equal ["bbb", "cccc", "ś"].to_list
        txt.filter (Filter_Condition.Not_Contains "A" Case_Sensitivity.Sensitive) . should_equal ["aaa", "bbb", "abab", "cccc", "baaa", "ś"].to_list
        txt.filter (Filter_Condition.Not_Contains "A" Case_Sensitivity.Insensitive) . should_equal ["bbb", "cccc", "ś"].to_list
        txt.filter (Filter_Condition.Not_Contains 's\u0301') . should_equal ["aaa", "bbb", "abab", "cccc", "baaa"].to_list
        txt.filter (Filter_Condition.Not_Contains 'S\u0301' Case_Sensitivity.Sensitive) . should_equal ["aaa", "bbb", "abab", "cccc", "baaa", "ś"].to_list
        txt.filter (Filter_Condition.Not_Contains 'S\u0301' Case_Sensitivity.Insensitive) . should_equal ["aaa", "bbb", "abab", "cccc", "baaa"].to_list
        txt.filter (Filter_Condition.Starts_With "a") . should_equal ["aaa", "abab"].to_list
        txt.filter (Filter_Condition.Starts_With "A" Case_Sensitivity.Sensitive) . should_equal [].to_list
        txt.filter (Filter_Condition.Starts_With "A" Case_Sensitivity.Insensitive) . should_equal ["aaa", "abab"].to_list
        txt.filter (Filter_Condition.Ends_With "a") . should_equal ["aaa", "baaa"].to_list
        txt.filter (Filter_Condition.Ends_With "A" Case_Sensitivity.Sensitive) . should_equal [].to_list
        txt.filter (Filter_Condition.Ends_With "A" Case_Sensitivity.Insensitive) . should_equal ["aaa", "baaa"].to_list
        txt.filter (Filter_Condition.Less than="a") . should_equal List.Nil
        txt.filter (Filter_Condition.Greater than="b") . should_equal ["bbb", "cccc", "baaa", "ś"].to_list
        txt.filter (Filter_Condition.Between "b" "c") . should_equal ["bbb", "baaa"].to_list
        Test.expect_panic_with (txt.filter (Filter_Condition.Starts_With 42)) Unsupported_Argument_Types

        ["", Nothing, " ", "a"].to_list.filter (Filter_Condition.Is_Empty) . should_equal ["", Nothing].to_list
        ["", Nothing, " ", "a"].to_list.filter (Filter_Condition.Not_Empty) . should_equal [" ", "a"].to_list
        ["abab", "aaabaaaa", "ba"].to_list.filter (Filter_Condition.Like "ba") . should_equal (List.Cons "ba" List.Nil)
        ["abab", "aaabaaaa"].to_list.filter (Filter_Condition.Like "_ba_") . should_equal ["abab"].to_list
        ["abab", "aaabaaaa"].to_list.filter (Filter_Condition.Like "%ba__%") . should_equal ["aaabaaaa"].to_list
        ["abab", "aaabaaaa"].to_list.filter (Filter_Condition.Not_Like "%ba%") . should_equal List.Nil

        mixed = [1, Nothing, "b"].to_list
        mixed.filter Filter_Condition.Is_Nothing . should_equal (List.Cons Nothing List.Nil)
        mixed.filter Filter_Condition.Not_Nothing . should_equal (List.Cons 1 (List.Cons "b" List.Nil))

        bools = [True, False, Nothing, True].to_list
        bools.filter Filter_Condition.Is_True . should_equal [True, True].to_list
        bools.filter Filter_Condition.Is_False . should_equal [False].to_list
    Test.specify "should allow mapping a function over its elements with .map" <|
        l.map +1 . first . should_equal 2
    Test.specify "should allow executing an action for each element with .each" <|
        sum = State.run Number 0 <|
            l.each el->
                s = State.get Number
                State.put Number s+el
            State.get Number
        sum.should_equal 6
    Test.specify "should allow reversing with .reverse" <|
        l.reverse.first.should_equal 3
    Test.specify "should allow dropping elements from the left with `.drop`" <|
        l.drop_start 1 . should_equal (List.Cons 2 (List.Cons 3 List.Nil))
        empty.drop_start 1 . should_equal List.Nil
    Test.specify "should allow taking elements from the left with `.take_start`" <|
        l.take_start 2 . should_equal (List.Cons 1 (List.Cons 2 List.Nil))
        empty.take_start 2 . should_equal List.Nil
    Test.specify "should allow getting the tail of the list with `.tail`" <|
        l.tail . should_equal (List.Cons 2 (List.Cons 3 List.Nil))
        empty.tail.should_fail_with Index_Out_Of_Bounds
    Test.specify "single element list.init yields Nil" <|
        (List.Cons 1 List.Nil).init . should_equal List.Nil
    Test.specify "two element list.init yields one element" <|
        (List.Cons 1 (List.Cons 2 List.Nil)).init . should_equal (List.Cons 1 List.Nil)
    Test.specify "should allow getting the init of the list with `.init`" <|
        l.init . should_equal (List.Cons 1 (List.Cons 2 List.Nil))
        empty.init.should_fail_with Index_Out_Of_Bounds
    Test.specify "should allow getting the last element of the list with `.last`" <|
        l.last . should_equal 3
        empty.last.should_fail_with Index_Out_Of_Bounds
    Test.specify "should allow getting the head of the list with `.first`" <|
        l.first . should_equal 1
        empty.first.should_fail_with Index_Out_Of_Bounds
        empty.first.catch.should_equal (Index_Out_Of_Bounds.Error 0 0)
    Test.specify "should allow getting the second item of the list with `.second`" <|
        l.second . should_equal 2
        empty.second.should_fail_with Index_Out_Of_Bounds
        empty.second.catch.should_equal (Index_Out_Of_Bounds.Error 1 0)
        (List.Cons 1 List.Nil).second.should_fail_with Index_Out_Of_Bounds
        (List.Cons 1 List.Nil).second.catch.should_equal (Index_Out_Of_Bounds.Error 1 1)
    Test.specify "should allow getting the last element of the list with `.last`" <|
        l.last . should_equal 3
        empty.last.should_fail_with Index_Out_Of_Bounds
        empty.last.catch.should_equal (Index_Out_Of_Bounds.Error -1 0)
    Test.specify "should allow getting the items of the list with `.at`" <|
        l.at 0 . should_equal 1
        l.at 1 . should_equal 2
        l.at 2 . should_equal 3
        l.at -3 . should_equal 1
        l.at -2 . should_equal 2
        l.at -1 . should_equal 3
        empty.at 0 . should_fail_with Index_Out_Of_Bounds
        l.at 3 . should_fail_with Index_Out_Of_Bounds
        l.at -4 . should_fail_with Index_Out_Of_Bounds
    Test.specify "should allow getting the items of the list with `.get`" <|
        l.get 0 . should_equal 1
        l.get 1 . should_equal 2
        l.get 2 . should_equal 3
        l.get -3 . should_equal 1
        l.get -2 . should_equal 2
        l.get -1 . should_equal 3
        empty.get 0 . should_equal Nothing
        empty.get 0 "A" . should_equal "A"
        l.get 3 . should_equal Nothing
        l.get -4 . should_equal Nothing

main = Test_Suite.run_main spec
