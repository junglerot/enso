from Standard.Base import all
import Standard.Base.Errors.Common.Index_Out_Of_Bounds
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.No_Such_Key.No_Such_Key
from Standard.Base.Data.Json import Invalid_JSON

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions
import Standard.Test.Test_Result.Test_Result

type Author
    Value name year_of_birth

type Book
    Value title author

Text.should_fail_parsing_with self expected =
    as_fail = case Json.parse self of
        _ -> Test_Result.Failure "Expected a parse error, but no error reported."
    result = as_fail.catch Any e-> case e of
        Invalid_JSON.Error msg ->
            if msg.contains expected then Test_Result.Success else
                fail_msg = "The reported message " + msg.to_text + " did not contain " + expected.to_text + "."
                Test_Result.Failure fail_msg
        _ ->
            fail_msg = "Expected a parser error, but " + e.to_text + " was thrown."
            Test_Result.Failure fail_msg
    case result of
        Test_Result.Success -> Test_Result.Success
        _ -> Panic.throw result

Text.should_parse_as self expected =
    Json.parse self . should_equal expected

Text.should_render_itself self =
    Json.parse self . to_json . should_equal self

spec =
    Test.group "JSON Deserialization" <|
        Test.specify "should parse JSON structures" <|
            "0    ".should_parse_as 0
            " 123    ".should_parse_as 123
            "15.0643".should_parse_as 15.0643
            "32.5E-1".should_parse_as 3.25
            "32.5E+1".should_parse_as 325.0
            "32.5e1".should_parse_as 325.0
            "false".should_parse_as False
            "true".should_parse_as True
            "null".should_parse_as Nothing
            "[null, null, true, false]".should_parse_as [Nothing, Nothing, True, False]
            "[]".should_parse_as []
            '[[1, 3], [5 , "foo"], 7, 8]'.should_parse_as [[1, 3], [5, 'foo'], 7, 8]
            '"foo"'.should_parse_as 'foo'
            '"foo\\n\\t\\u20AC\\u20AC"'.should_parse_as 'foo\n\t€€'
            '["foo", "foo\\n\\u00aB", null, true]'.should_parse_as ["foo", 'foo\n\u{AB}', Nothing, True]
            object_json = '{"foo": "bar", "baz": ["foo", "x", false], "y": {"z": null, "w": null} }'
            object_json.should_parse_as <|
                y_v = JS_Object.from_pairs [["z", Nothing], ["w", Nothing]]
                JS_Object.from_pairs [["foo", "bar"], ["baz", ["foo", "x", False]], ["y", y_v]]

        Test.specify "should report meaningful parsing errors" <|
            "foo".should_fail_parsing_with "Unexpected token f in JSON at position 0"
            "[,]".should_fail_parsing_with "Unexpected token , in JSON at position 1"
            "{,}".should_fail_parsing_with "Unexpected token , in JSON at position 1"
            deep_err = '{ "foo": "bar", "baz": ["foo", "x"", false], "y": {"z": null, "w": null} }'
            deep_err.should_fail_parsing_with "closing quote ] expected at position 34"
            "123 4".should_fail_parsing_with "JSON cannot be fully parsed at position 4"

    Test.group "JSON Serialization" <|
        Test.specify "should print JSON structures to valid json" <|
            "0".should_render_itself
            "123".should_render_itself
            "15.0643".should_render_itself
            "false".should_render_itself
            "true".should_render_itself
            "null".should_render_itself
            "[null,null,true,false]".should_render_itself
            "[]".should_render_itself
            '[[1,3],[5,"foo"],7,8]'.should_render_itself
            '"foo"'.should_render_itself
            '"foo\\n\\t\\r\\f\\b\\"\\\\"'.should_render_itself
            '["foo","foo\\n",null,true]'.should_render_itself
            object_json = '{"baz":["foo","x",false],"foo":"bar","y":{"w":null,"z":null}}'
            object_json.should_render_itself

        Test.specify "should convert arbitrary types to JSON" <|
            1.to_json.should_equal "1"
            1.54.to_json.should_equal "1.54"
            ["foo", "bar", "baz"].to_json.should_equal '["foo","bar","baz"]'
            Author.Value "Tolkien" 1892 . to_json . should_equal <|
                '{"type":"Author","constructor":"Value","name":"Tolkien","year_of_birth":1892}'

        Test.specify "should render NaN and Infinity to null" <|
            Number.nan.to_json . should_equal "null"
            Number.positive_infinity.to_json . should_equal "null"
            Number.negative_infinity.to_json . should_equal "null"

    Test.group "JS_Object" <|
        Test.specify "should be buildable from pairs" <|
            JS_Object.from_pairs [["foo", "bar"]] . to_json . should_equal '{"foo":"bar"}'
            JS_Object.from_pairs [["foo", "bar"], ["baz", Nothing]] . to_json . should_equal '{"foo":"bar","baz":null}'

        Test.specify "should be handle equality on a key level" <|
            JS_Object.from_pairs [["a", 42]] . should_equal <| Json.parse '{"a": 42}'
            JS_Object.from_pairs [["a", 42]] . should_not_equal <| JS_Object.from_pairs [["a", 43]]
            JS_Object.from_pairs [["a", 42]] . should_not_equal <| JS_Object.from_pairs [["b", 42]]

            JS_Object.from_pairs [["a", 42], ["b", Nothing]] . should_equal <| JS_Object.from_pairs [["b", Nothing], ["a", 42]]
            JS_Object.from_pairs [["a", 42], ["b", Nothing]] . should_not_equal <| JS_Object.from_pairs [["c", Nothing], ["a", 42]]

            obj1 = JS_Object.from_pairs [["a", 42], ["b", JS_Object.from_pairs [["c",1], ["d",2]]]]
            obj1 . should_equal <| JS_Object.from_pairs [["a", 42], ["b", JS_Object.from_pairs [["c",1], ["d",2]]]]
            obj1 . should_equal <| JS_Object.from_pairs [["b", JS_Object.from_pairs [["d",2], ["c",1]]], ["a", 42]]
            obj1 . should_not_equal <| JS_Object.from_pairs [["a", 43], ["b", 123]]
            obj1 . should_not_equal <| JS_Object.from_pairs [["a", 42], ["b", JS_Object.from_pairs [["c",1], ["d",3]]]]

    Test.group "JSON" <|
        Test.specify "should allow getting object fields" <|
            object = Json.parse '{ "foo": "bar", "baz": ["foo", "x", false],"y": {"z": null, "w": null} }'
            object.get "foo" . should_equal "bar"
            object.get "bar" . should_equal Nothing
            object.get "bar" 1 . should_equal 1
            object.at "foo" . should_equal "bar"
            object.at "bar" . should_fail_with No_Such_Key
            Json.parse "null" . get "foo" . should_equal Nothing
            Json.parse "null" . get "foo" 1 . should_equal 1

        Test.specify "should be able to get field_names" <|
            Json.parse '{ "foo": "bar", "baz": ["foo", "x", false] }' . field_names . should_equal ["foo", "baz"]
            Json.parse '{}' . field_names . should_equal []

        Test.specify "should be able to get a value by index" <|
            Json.parse "[1, 2, 3, 4, 5]" . at 2 . should_equal 3
            Json.parse "[1, 2, 3, 4, 5]" . at -2 . should_equal 4
            Json.parse "[1, 2, 3, 4, 5]" . at 5 . should_fail_with Index_Out_Of_Bounds
            Json.parse "[1, 2, 3, 4, 5]" . get 2 . should_equal 3
            Json.parse "[1, 2, 3, 4, 5]" . get -2 . should_equal 4
            Json.parse "[1, 2, 3, 4, 5]" . get 5 . should_equal Nothing
            Json.parse "[1, 2, 3, 4, 5]" . get 5 "?" . should_equal "?"

        Test.specify "should be able to get length" <|
            Json.parse "{}" . length . should_equal 0
            Json.parse "[]" . length . should_equal 0
            Json.parse '{ "foo": "bar", "baz": ["foo", "x", false] }' . length . should_equal 2
            Json.parse '[1, 2, 3, 4, 5]' . length . should_equal 5
            Json.parse '"foo"' . length . should_equal 3
            Json.parse '""' . length . should_equal 0

main = Test_Suite.run_main spec
