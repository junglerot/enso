from Standard.Base import all

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

polyglot java import java.util.LinkedHashSet

Array.method self = 0

## Returns an array with the same contents as the given vector, surely backed by
   the Enso Array primitive.
make_enso_array vector =
    enso_array = Array.new vector.length
    Array.copy vector.to_array 0 enso_array 0 vector.length
    enso_array

## Returns an array with the same contents as the given vector, surely backed by
   a Java array.
make_java_array vector =
    builder = LinkedHashSet.new
    vector.each x->
        builder.add x
    builder.toArray

test_arrays array_from_vector =
    Test.specify "should allow accessing elements" <|
        arr = array_from_vector [1, 2, 3]
        arr.at 0 . should_equal 1
        arr.at 2 . should_equal 3
        arr.at -1 . should_equal 3

    Test.specify "should panic on out of bounds access" <|
        arr = array_from_vector [1, 2, 3]
        (arr.at -4) . should_fail_with Index_Out_Of_Bounds_Error_Data
        (arr.at 3) . should_fail_with Index_Out_Of_Bounds_Error_Data

spec =
    Test.group "Enso Arrays" <|
        test_arrays make_enso_array

        Test.specify "should allow for functional dispatch on a method defined in this module" <|
            arr = make_enso_array [1, 2, 3]
            arr.method . should_equal 0

        Test.specify "should propagate dataflow errors" <|
            err = Error.throw (Illegal_State.Error "Foo")
            res = Array.new err
            res . should_fail_with Illegal_State.Error

        Test.specify "should be able to be converted to a visualization rep" <|
            arr = make_enso_array (Vector.fill 1000 0)
            text = arr.to_default_visualization_data
            json = Json.parse text
            as_vec = json.into (Vector.fill 1 Number)
            as_vec.should_equal <| Vector.fill 100 0

    Test.group "Polyglot Arrays" <|
        test_arrays make_java_array

        Test.specify "should be able to be converted to a visualization rep" pending="`to_default_visualization_data` does not work for polyglot arrays" <|
            arr = make_java_array (Vector.fill 1000 0)
            text = arr.to_default_visualization_data
            json = Json.parse text
            as_vec = json.into (Vector.fill 1 Number)
            as_vec.should_equal <| Vector.fill 100 0

main = Test_Suite.run_main spec
