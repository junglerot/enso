from Standard.Base import all
import Standard.Base.Error.Common.Index_Out_Of_Bounds
import Standard.Base.Error.Illegal_State.Illegal_State

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

Array.method self = 0

## Returns an array with the same contents as the given vector, surely backed by
   the Enso Array primitive.
make_enso_array vector =
    enso_array = Array.new vector.length
    Array.copy vector.to_array 0 enso_array 0 vector.length
    enso_array

test_arrays array_from_vector =
    Test.specify "should allow accessing elements" <|
        arr = array_from_vector [1, 2, 3]
        arr.at 0 . should_equal 1
        arr.at 2 . should_equal 3
        arr.at -1 . should_equal 3

    Test.specify "should panic on out of bounds access" <|
        arr = array_from_vector [1, 2, 3]
        (arr.at -4) . should_fail_with Index_Out_Of_Bounds.Error
        (arr.at 3) . should_fail_with Index_Out_Of_Bounds.Error

spec =
    Test.group "Enso Arrays" <|
        test_arrays make_enso_array

        Test.specify "should allow for functional dispatch on a method defined in this module" <|
            arr = make_enso_array [1, 2, 3]
            arr.method . should_equal 0

        Test.specify "should handle ==" <|
            (make_enso_array [1,2,3]).should_equal (make_enso_array [1,2,3])
            (make_enso_array [1]).should_not_equal (make_enso_array [2])

        Test.specify "should propagate dataflow errors" <|
            err = Error.throw (Illegal_State.Error "Foo")
            res = Array.new err
            res . should_fail_with Illegal_State.Error

main = Test_Suite.run_main spec
