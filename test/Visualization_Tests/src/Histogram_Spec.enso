from Standard.Base import all

import Standard.Table.Data.Column
import Standard.Table.Data.Table
import Standard.Test
import Standard.Visualization.Histogram
import project

spec =
    expect value expected_label expected_values =
        text = Histogram.process_to_json_text value
        json = Json.parse text
        expected_data = Json.from_pairs [['values', expected_values]]
        expected_json = case expected_label of
            Nothing -> Json.from_pairs [['data', expected_data]]
            _       ->
                expected_x = Json.from_pairs [['label', expected_label]]
                expected_axis = ['axis', Json.from_pairs [['x', expected_x]]]
                Json.from_pairs [['data', expected_data], expected_axis]
        json.should_equal expected_json

    Test.group "Histogram Visualization" <|

        Test.specify "deals with an empty table" <|
            table  = Table.from_rows [] []
            expect table Nothing []

        Test.specify "plots first column if none recognized" <|
            header = ['α', 'ω']
            row_1  = [11 , 10 ]
            row_2  = [21 , 20 ]
            table  = Table.from_rows header [row_1, row_2]
            expect table 'α' [11,21]

        Test.specify "plots first column if none recognized even if index" <|
            header = ['α']
            row_1  = [11 ]
            row_2  = [21 ]
            table  = Table.from_rows header [row_1, row_2] . set_index 'α'
            expect table 'α' [11,21]

        Test.specify "plots 'value' numeric column if present" <|
            header = ['α', 'value']
            row_1  = [11 , 10 ]
            row_2  = [21 , 20 ]
            table  = Table.from_rows header [row_1, row_2]
            expect table 'value' [10,20]

        Test.specify "is case-insensitive" <|
            header = ['α', 'Value']
            row_1  = [11 , 10 ]
            row_2  = [21 , 20 ]
            table  = Table.from_rows header [row_1, row_2]
            expect table 'Value' [10,20]

        Test.specify "plots column" <|
            column = Column.from_vector 'my_name' [1,4,6]
            expect column 'my_name' [1,4,6]

        Test.specify "plots vector" <|
            vector = [1,2,3]
            expect vector Nothing vector

        Test.specify "plots range" <|
            vector = 2.up_to 5
            expect vector Nothing [2,3,4]
