from Standard.Base import all
import Standard.Base.Runtime.State

import Standard.Base.Metadata.Choice
import Standard.Base.Metadata.Widget
import Standard.Base.Metadata.Display

import Standard.Visualization.Widgets

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

spec =
    Test.group "Widgets for the Text type" <|
        Test.specify "works for `take` and `drop`" <|
            mock_text = "abc def"
            default_widget = Text_Sub_Range.default_widget
            expect = [["range", default_widget]] . to_json
            json = Widgets.get_widget_json mock_text "take" ["range"]
            json . should_equal expect
            Widgets.get_widget_json mock_text "drop" ["range"] . should_equal expect
            obj = json.parse_json
            widget = obj.first.second
            options = widget . at "values"
            options.each o-> Test.with_clue o.to_text+": " <|
                o.should_be_a JS_Object
            labels = options.map o->
                o.at "label"
            labels.should_be_a Vector
            labels.should_contain "First"
            labels.should_contain "While"
            labels.should_contain "After"
            labels.should_contain "Before_Last"

main = Test_Suite.run_main spec
