from Standard.Base import all

import Standard.Base.Metadata.Choice
import Standard.Base.Metadata.Widget
import Standard.Base.Metadata.Display

from Standard.Database import all

import Standard.Visualization.Widgets

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

spec =
    connection = Database.connect (SQLite In_Memory)
    connection.execute_update 'CREATE TABLE "mock_table" ("A" VARCHAR, "B C" INTEGER, "D ""E""" BOOLEAN, "F.G/H\\I" REAL)'
    connection.execute_update 'CREATE TABLE "another" ("A" VARCHAR, "B C" INTEGER, "D ""E""" BOOLEAN, "F.G/H\\I" REAL)'
    connection.execute_update 'CREATE TABLE "a_table" ("A" VARCHAR, "B C" INTEGER, "D ""E""" BOOLEAN, "F.G/H\\I" REAL)'

    Test.group "Widgets for In-Database Connection with table types" <|
        Test.specify "works for `tables`" <|
            result = Widgets.get_widget_json connection "tables" ["types"]
            result.contains "'TABLE'" . should_be_true
            result.contains "'VIEW'" . should_be_true

    Test.group "Widgets for In-Database Connection with table name sets" <|
        Test.specify "works for `query` and `read`" <|
            choices = ['a_table', 'another', 'mock_table'] . map n-> Choice.Option n n.pretty
            expect = [["query", Widget.Single_Choice choices Nothing Display.Always]] . to_json
            Widgets.get_widget_json connection "query" ["query"] . should_equal expect
            Widgets.get_widget_json connection "read" ["query"] . should_equal expect

    Test.group "Widgets for In-Database Table with column name sets" <|
        mock_table = connection.query "mock_table"

        Test.specify "works for `get` and `at`" <|
            choices = mock_table.column_names . map n-> Choice.Option n n.pretty
            expect = [["selector", Widget.Single_Choice choices Nothing Display.Always]] . to_json
            Widgets.get_widget_json mock_table "get" ["selector"] . should_equal expect
            Widgets.get_widget_json mock_table "at" ["selector"] . should_equal expect

        Test.specify "works for `filter`" <|
            choices = mock_table.column_names . map n-> Choice.Option n n.pretty
            expect = [["column", Widget.Single_Choice choices Nothing Display.Always]] . to_json
            Widgets.get_widget_json mock_table "filter" ["column"] . should_equal expect

main = Test_Suite.run_main spec
