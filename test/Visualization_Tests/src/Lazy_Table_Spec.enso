from Standard.Base import all
from Standard.Visualization import all
from Standard.Table import Table

import Standard.Examples
import Standard.Visualization.Table as Table_Visualisation
import Standard.Visualization.Preprocessor as Preprocessor

from Standard.Test import Test
import Standard.Test.Extensions
t1 = """
    12
    23

sample_table =
    col1 = ["foo", [123456789,23456789,987654321]]
    col2 = ["bar", [4,5,6]]
    col3 = ["Baz", [7,8,9]]
    col4 = ["foo_1", [10,11,12]]
    col5 = ["foo_2", [13,14,15]]
    col6 = ["ab.+123", [16,17,18]]
    col7 = ["abcd123", ["19",20, t1]]
    Table.new [col1, col2, col3, col4, col5, col6, col7]

long_table =
    col = ["col", 1.up_to 100 . to_vector]
    Table.new [col]

spec = Test.group "Lazy Table Visualization" <|
    Test.specify "Fold Map" <|
        (Table_Visualisation.fold_map 0 (acc -> item -> [acc + item, acc + item]) [1,2,3]).should_equal [1,3,6]

    Test.specify "Should return correct update" <|
        update = Table_Visualisation.compute_table_update sample_table [0,0] [0,0] [3,2] 5
        update.chunks.contains [[[0,0], [0,0]], "12345"] . should_be_true
        update.chunks.contains [[[0,0], [1,0]], "6789"] . should_be_true
        update.chunks.contains [[[0, 1], [0, 0]], "23456"] . should_be_true
        update.chunks.contains [[[0, 1], [1, 0]], "789"] . should_be_true
        update.chunks.contains [[[1, 0], [0, 0]], "4"] . should_be_true
        update.chunks.contains [[[1, 1], [0, 0]], "5"] . should_be_true

    Test.specify "Should return correct update" <|
        update = Table_Visualisation.compute_table_update sample_table [0,0] [1,0] [3,2] 5
        ## update.should_equal []
        update.chunks.contains [[[0,0], [1,0]], "6789"] . should_be_true
        update.chunks.contains [[[0, 1], [1, 0]], "789"] . should_be_true
        update.chunks.contains [[[1, 0], [0, 0]], "4"] . should_be_true
        update.chunks.contains [[[1, 1], [0, 0]], "5"] . should_be_true
        update.chunks.contains [[[2, 0], [0, 0]], "7"] . should_be_true
        update.chunks.contains [[[2, 1], [0, 0]], "8"] . should_be_true


    Test.specify "Find end column helper should return correct column index" <|
        (Table_Visualisation.find_end_column sample_table 0 0 1).should_equal 0
        (Table_Visualisation.find_end_column sample_table 0 2 1).should_equal 0
        (Table_Visualisation.find_end_column sample_table 0 3 5).should_equal 2
        (Table_Visualisation.find_end_column sample_table 1 4 5).should_equal 5
        (Table_Visualisation.find_end_column sample_table 0 9999 5).should_equal 6

    Test.specify "Find end row helper should return correct row index" <|
        (Table_Visualisation.find_end_row sample_table 1 4).should_equal 2
        (Table_Visualisation.find_end_row sample_table 0 0).should_equal 0
        (Table_Visualisation.find_end_row sample_table 1 0).should_equal 1
        (Table_Visualisation.find_end_row long_table 1 2).should_equal 3
        (Table_Visualisation.find_end_row long_table 1 1).should_equal 2
        (Table_Visualisation.find_end_row long_table 50 10).should_equal 60


    Test.specify "Get column width helper should return correct colum width" <|
        (Table_Visualisation.get_column_width (sample_table.columns.at 0)).should_equal 9
        (Table_Visualisation.get_column_width (sample_table.columns.at 1)).should_equal 1
        (Table_Visualisation.get_column_width (sample_table.columns.at 3)).should_equal 2

    Test.specify "Get row height helper should return correct row height" <|
        (Table_Visualisation.get_row_height sample_table 0).should_equal 1

    Test.specify "Get map_to_cumulative_sum helper should return correct result" <|
        (Table_Visualisation.map_to_cumulative_sum [1,2,3]).should_equal [1,3,6]
        (Table_Visualisation.map_to_cumulative_sum [1,1,1,1,1,1]).should_equal [1,2,3,4,5,6]

    Test.specify "Get find_first_over_cum_sum helper should return correct result" <|
        (Table_Visualisation.find_first_over_cum_sum [1,2,3] 2).should_equal 1
        (Table_Visualisation.find_first_over_cum_sum [1,1,1,1,1,1,1,1] 4).should_equal 4

    Test.specify "Get enumerate helper should return correct result" <|
        (Table_Visualisation.enumerate ["A","B","C"]).should_equal [[0, "A"],[1,"B"],[2,"C"]]

    Test.specify "get_chunks_for_row helper should return correct result" <|
        (Table_Visualisation.get_chunks_for_row sample_table 0 0 0 (1.up_to 4) 5 3).should_equal [[[1,0], "4"], [[2,0], "7"], [[3,0], "10"]]
        (Table_Visualisation.get_chunks_for_row sample_table 0 0 0 (0.up_to 4) 5 3).should_equal [[[0, 0], "12345"], [[0,1], "6789"], [[1,0], "4"]]

    Test.specify "compute_vertical_indices helper should return correct result" <|
        (Table_Visualisation.compute_vertical_indices sample_table 0 2 0 2).should_equal [[0, 0], [1, 0]]
        (Table_Visualisation.compute_vertical_indices sample_table 0 2 1 2).should_equal [[1, 0], [2, 0]]
