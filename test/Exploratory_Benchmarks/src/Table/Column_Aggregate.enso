from Standard.Base import all
from Standard.Table import all

from Standard.Test import Bench

import project.Table.Common_Setup.Common_Setup
import project.Table.Helpers

polyglot java import org.enso.exploratory_benchmark_helpers.SimpleStorageAggregateHelpers

## Computes the Longest text in the column - aggregate with no grouping.
   This is of interest, because in contrast to all benchmarks above, it can generally be done in O(1) memory.
type Boxed_Total_Aggregate
    Instance text_column

    current_aggregate_implementation self =
        self.text_column.to_table.aggregate [Aggregate_Column.Longest 0] . at 0 . at 0

    java_loop self =
        SimpleStorageAggregateHelpers.longestText self.text_column.java_column.getStorage

    enso_aggregate_vector_proxy self =
        n = self.text_column.length
        vector_proxy = self.text_column.to_vector
        (0.up_to n).fold Nothing acc-> ix->
            item = vector_proxy.at ix
            if acc.is_nothing then item else
                if item.is_nothing then acc else
                    if item.length > acc.length then item else acc

    enso_aggregate_storage_get_item self =
        n = self.text_column.length
        storage = self.text_column.java_column.getStorage
        (0.up_to n).fold Nothing acc-> ix->
            item = storage.getItemBoxed ix
            if acc.is_nothing then item else
                if item.is_nothing then acc else
                    if item.length > acc.length then item else acc

    verify_correctness self =
        Helpers.check_results [self.current_aggregate_implementation, self.java_loop, self.enso_aggregate_vector_proxy, self.enso_aggregate_storage_get_item]

## Computes Sum of integers.
   We have to be careful with `n` because if we use too large values Enso will start using BigInts, while Java will overflow.
type Primitive_Total_Aggregate
    Instance int_column

    current_aggregate_implementation self =
        self.int_column.to_table.aggregate [Aggregate_Column.Sum 0] . at 0 . at 0

    java_loop self =
        long_storage = self.int_column.java_column.getStorage
        SimpleStorageAggregateHelpers.sumLongStorage long_storage

    enso_aggregate_vector_proxy self =
        vector_proxy = self.int_column.to_vector
        vector_proxy.fold 0 acc-> item->
            if item.is_nothing then acc else
                acc + item

    enso_aggregate_storage_get_item self =
        n = self.int_column.length
        storage = self.int_column.java_column.getStorage
        (0.up_to n).fold 0 acc-> ix->
            if storage.isNa ix then acc else
                acc + storage.getItem ix

    verify_correctness self =
        Helpers.check_results [self.current_aggregate_implementation, self.java_loop, self.enso_aggregate_vector_proxy, self.enso_aggregate_storage_get_item]

## An alternative to Boxed_Total_Aggregate. Computing text length is complex due
   to ICU complexity. This is a simpler one - we get the month of each value and
   sum these.
type Boxed_Sum_Months
    Instance date_column

    java_loop self =
        date_storage = self.date_column.java_column.getStorage
        SimpleStorageAggregateHelpers.sumMonthsOfDateStorage date_storage

    enso_aggregate_vector_proxy self =
        vector_proxy = self.date_column.to_vector
        vector_proxy.fold 0 acc-> item->
            if item.is_nothing then acc else
                acc + item.month

    enso_aggregate_storage_get_item self =
        n = self.date_column.length
        storage = self.date_column.java_column.getStorage
        (0.up_to n).fold 0 acc-> ix->
            item = storage.getItemBoxed ix
            if item.is_nothing then acc else
                acc + item.month

    verify_correctness self =
        Helpers.check_results [self.java_loop, self.enso_aggregate_vector_proxy, self.enso_aggregate_storage_get_item]

main = spec (Common_Setup.Config)

spec setup =
    t = setup.generate_input_table
    t2 = setup.generate_input_table_date

    iter_size = setup.iter_size
    num_iterations = setup.num_iterations

    # Using ints2 to get smaller values to avoid integer overflow.
    primitive_total_aggregate = Primitive_Total_Aggregate.Instance (t.at "ints2")
    primitive_total_aggregate.verify_correctness
    # GC not needed here as this should be O(1) memory.
    Bench.measure (primitive_total_aggregate.current_aggregate_implementation) "Primitive_Total_Aggregate.current_aggregate_implementation" iter_size num_iterations run_gc_between_iterations=False
    Bench.measure (primitive_total_aggregate.java_loop) "Primitive_Total_Aggregate.java_loop" iter_size num_iterations run_gc_between_iterations=False
    Bench.measure (primitive_total_aggregate.enso_aggregate_vector_proxy) "Primitive_Total_Aggregate.enso_aggregate_vector_proxy" iter_size num_iterations run_gc_between_iterations=False
    Bench.measure (primitive_total_aggregate.enso_aggregate_storage_get_item) "Primitive_Total_Aggregate.enso_aggregate_storage_get_item" iter_size num_iterations run_gc_between_iterations=False

    boxed_sum_months = Boxed_Sum_Months.Instance (t2.at "dates")
    boxed_sum_months.verify_correctness
    Bench.measure (boxed_sum_months.java_loop) "Boxed_Sum_Months.java_loop" iter_size num_iterations run_gc_between_iterations=False
    Bench.measure (boxed_sum_months.enso_aggregate_vector_proxy) "Boxed_Sum_Months.enso_aggregate_vector_proxy" iter_size num_iterations run_gc_between_iterations=False
    Bench.measure (boxed_sum_months.enso_aggregate_storage_get_item) "Boxed_Sum_Months.enso_aggregate_storage_get_item" iter_size num_iterations run_gc_between_iterations=False

    boxed_total_aggregate = Boxed_Total_Aggregate.Instance (t.at "text")
    boxed_total_aggregate.verify_correctness
    Bench.measure (boxed_total_aggregate.current_aggregate_implementation) "Boxed_Total_Aggregate.current_aggregate_implementation" iter_size num_iterations run_gc_between_iterations=False
    Bench.measure (boxed_total_aggregate.java_loop) "Boxed_Total_Aggregate.java_loop" iter_size num_iterations run_gc_between_iterations=False
    Bench.measure (boxed_total_aggregate.enso_aggregate_vector_proxy) "Boxed_Total_Aggregate.enso_aggregate_vector_proxy" iter_size num_iterations run_gc_between_iterations=False
    Bench.measure (boxed_total_aggregate.enso_aggregate_storage_get_item) "Boxed_Total_Aggregate.enso_aggregate_storage_get_item" iter_size num_iterations run_gc_between_iterations=False
