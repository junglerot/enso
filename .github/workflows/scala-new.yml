# This file is auto-generated. Do not edit it manually!
# Edit the enso_build::ci_gen module instead and run `cargo run --package enso-build-ci-gen`.

name: Engine CI
on:
  push:
    branches:
      - develop
  pull_request: {}
  workflow_dispatch: {}
jobs:
  enso-build-ci-gen-job-cancel-workflow-linux:
    name: Cancel Previous Runs
    runs-on:
      - ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.0
        with:
          access_token: ${{ github.token }}
    permissions:
      actions: write
  enso-build-ci-gen-job-ci-check-backend-linux:
    name: Engine (linux)
    runs-on:
      - self-hosted
      - Linux
      - engine
    steps:
      - if: startsWith(runner.name, 'GitHub Actions') || startsWith(runner.name, 'Hosted Agent')
        name: Setup conda (GH runners only)
        uses: s-weigand/setup-conda@v1.2.1
        with:
          update-conda: false
          conda-channels: anaconda, conda-forge
      - if: startsWith(runner.name, 'GitHub Actions') || startsWith(runner.name, 'Hosted Agent')
        name: Installing wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: v0.10.2
      - name: Expose Artifact API and context information.
        uses: actions/github-script@v6
        with:
          script: "\n    core.exportVariable(\"ACTIONS_RUNTIME_TOKEN\", process.env[\"ACTIONS_RUNTIME_TOKEN\"])\n    core.exportVariable(\"ACTIONS_RUNTIME_URL\", process.env[\"ACTIONS_RUNTIME_URL\"])\n    core.exportVariable(\"GITHUB_RETENTION_DAYS\", process.env[\"GITHUB_RETENTION_DAYS\"])\n    console.log(context)\n    "
      - if: runner.os == 'Windows'
        name: Workaround for https://github.com/actions/checkout/issues/590 (Windows)
        run: '"c:\Program Files\Git\bin\bash.exe" -c "git checkout -f $(git -c user.name=x -c user.email=x@x commit-tree $(git hash-object -t tree /dev/null) < /dev/null) || :"'
        shell: cmd
      - if: runner.os != 'Windows'
        name: Workaround for  https://github.com/actions/checkout/issues/590 (non-Windows)
        run: "git checkout -f $(git -c user.name=x -c user.email=x@x commit-tree $(git hash-object -t tree /dev/null) < /dev/null) || :"
        shell: bash
      - name: Checking out the repository
        uses: actions/checkout@v4
        with:
          clean: false
          submodules: recursive
      - name: Build Script Setup
        run: ./run --help
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: "contains(github.event.pull_request.labels.*.name, 'CI: Clean build required')"
        name: Clean before
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: ./run backend ci-check
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ENSO_LIB_S3_AWS_ACCESS_KEY_ID }}
          AWS_REGION: ${{ secrets.ENSO_LIB_S3_AWS_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ENSO_LIB_S3_AWS_SECRET_ACCESS_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LC_ALL: C.UTF-8
      - if: success() || failure()
        name: Engine Test Reporter
        uses: dorny/test-reporter@v1
        with:
          max-annotations: 50
          name: Engine Tests (linux)
          path: ${{ env.ENSO_TEST_JUNIT_DIR }}/*.xml
          path-replace-backslashes: true
          reporter: java-junit
      - if: success() || failure()
        name: Standard Library Test Reporter
        uses: dorny/test-reporter@v1
        with:
          max-annotations: 50
          name: Standard Library Tests (linux)
          path: ${{ env.ENSO_TEST_JUNIT_DIR }}/*/*.xml
          path-replace-backslashes: true
          reporter: java-junit
      - if: failure() && runner.os == 'Windows'
        name: List files if failed (Windows)
        run: Get-ChildItem -Force -Recurse
      - if: failure() && runner.os != 'Windows'
        name: List files if failed (non-Windows)
        run: ls -lAR
      - if: "always() && always() && contains(github.event.pull_request.labels.*.name, 'CI: Clean build required')"
        name: Clean after
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      checks: write
  enso-build-ci-gen-job-ci-check-backend-macos:
    name: Engine (macos)
    runs-on:
      - macos-latest
    steps:
      - if: startsWith(runner.name, 'GitHub Actions') || startsWith(runner.name, 'Hosted Agent')
        name: Setup conda (GH runners only)
        uses: s-weigand/setup-conda@v1.2.1
        with:
          update-conda: false
          conda-channels: anaconda, conda-forge
      - if: startsWith(runner.name, 'GitHub Actions') || startsWith(runner.name, 'Hosted Agent')
        name: Installing wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: v0.10.2
      - name: Expose Artifact API and context information.
        uses: actions/github-script@v6
        with:
          script: "\n    core.exportVariable(\"ACTIONS_RUNTIME_TOKEN\", process.env[\"ACTIONS_RUNTIME_TOKEN\"])\n    core.exportVariable(\"ACTIONS_RUNTIME_URL\", process.env[\"ACTIONS_RUNTIME_URL\"])\n    core.exportVariable(\"GITHUB_RETENTION_DAYS\", process.env[\"GITHUB_RETENTION_DAYS\"])\n    console.log(context)\n    "
      - if: runner.os == 'Windows'
        name: Workaround for https://github.com/actions/checkout/issues/590 (Windows)
        run: '"c:\Program Files\Git\bin\bash.exe" -c "git checkout -f $(git -c user.name=x -c user.email=x@x commit-tree $(git hash-object -t tree /dev/null) < /dev/null) || :"'
        shell: cmd
      - if: runner.os != 'Windows'
        name: Workaround for  https://github.com/actions/checkout/issues/590 (non-Windows)
        run: "git checkout -f $(git -c user.name=x -c user.email=x@x commit-tree $(git hash-object -t tree /dev/null) < /dev/null) || :"
        shell: bash
      - name: Checking out the repository
        uses: actions/checkout@v4
        with:
          clean: false
          submodules: recursive
      - name: Build Script Setup
        run: ./run --help
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: "contains(github.event.pull_request.labels.*.name, 'CI: Clean build required')"
        name: Clean before
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: ./run backend ci-check
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ENSO_LIB_S3_AWS_ACCESS_KEY_ID }}
          AWS_REGION: ${{ secrets.ENSO_LIB_S3_AWS_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ENSO_LIB_S3_AWS_SECRET_ACCESS_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LC_ALL: C.UTF-8
      - if: success() || failure()
        name: Engine Test Reporter
        uses: dorny/test-reporter@v1
        with:
          max-annotations: 50
          name: Engine Tests (macos)
          path: ${{ env.ENSO_TEST_JUNIT_DIR }}/*.xml
          path-replace-backslashes: true
          reporter: java-junit
      - if: success() || failure()
        name: Standard Library Test Reporter
        uses: dorny/test-reporter@v1
        with:
          max-annotations: 50
          name: Standard Library Tests (macos)
          path: ${{ env.ENSO_TEST_JUNIT_DIR }}/*/*.xml
          path-replace-backslashes: true
          reporter: java-junit
      - if: failure() && runner.os == 'Windows'
        name: List files if failed (Windows)
        run: Get-ChildItem -Force -Recurse
      - if: failure() && runner.os != 'Windows'
        name: List files if failed (non-Windows)
        run: ls -lAR
      - if: "always() && always() && contains(github.event.pull_request.labels.*.name, 'CI: Clean build required')"
        name: Clean after
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      checks: write
  enso-build-ci-gen-job-ci-check-backend-windows:
    name: Engine (windows)
    runs-on:
      - self-hosted
      - Windows
      - engine
    steps:
      - if: startsWith(runner.name, 'GitHub Actions') || startsWith(runner.name, 'Hosted Agent')
        name: Setup conda (GH runners only)
        uses: s-weigand/setup-conda@v1.2.1
        with:
          update-conda: false
          conda-channels: anaconda, conda-forge
      - if: startsWith(runner.name, 'GitHub Actions') || startsWith(runner.name, 'Hosted Agent')
        name: Installing wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: v0.10.2
      - name: Expose Artifact API and context information.
        uses: actions/github-script@v6
        with:
          script: "\n    core.exportVariable(\"ACTIONS_RUNTIME_TOKEN\", process.env[\"ACTIONS_RUNTIME_TOKEN\"])\n    core.exportVariable(\"ACTIONS_RUNTIME_URL\", process.env[\"ACTIONS_RUNTIME_URL\"])\n    core.exportVariable(\"GITHUB_RETENTION_DAYS\", process.env[\"GITHUB_RETENTION_DAYS\"])\n    console.log(context)\n    "
      - if: runner.os == 'Windows'
        name: Workaround for https://github.com/actions/checkout/issues/590 (Windows)
        run: '"c:\Program Files\Git\bin\bash.exe" -c "git checkout -f $(git -c user.name=x -c user.email=x@x commit-tree $(git hash-object -t tree /dev/null) < /dev/null) || :"'
        shell: cmd
      - if: runner.os != 'Windows'
        name: Workaround for  https://github.com/actions/checkout/issues/590 (non-Windows)
        run: "git checkout -f $(git -c user.name=x -c user.email=x@x commit-tree $(git hash-object -t tree /dev/null) < /dev/null) || :"
        shell: bash
      - name: Checking out the repository
        uses: actions/checkout@v4
        with:
          clean: false
          submodules: recursive
      - name: Build Script Setup
        run: ./run --help
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: "contains(github.event.pull_request.labels.*.name, 'CI: Clean build required')"
        name: Clean before
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: ./run backend ci-check
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ENSO_LIB_S3_AWS_ACCESS_KEY_ID }}
          AWS_REGION: ${{ secrets.ENSO_LIB_S3_AWS_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ENSO_LIB_S3_AWS_SECRET_ACCESS_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LC_ALL: C.UTF-8
      - if: success() || failure()
        name: Engine Test Reporter
        uses: dorny/test-reporter@v1
        with:
          max-annotations: 50
          name: Engine Tests (windows)
          path: ${{ env.ENSO_TEST_JUNIT_DIR }}/*.xml
          path-replace-backslashes: true
          reporter: java-junit
      - if: success() || failure()
        name: Standard Library Test Reporter
        uses: dorny/test-reporter@v1
        with:
          max-annotations: 50
          name: Standard Library Tests (windows)
          path: ${{ env.ENSO_TEST_JUNIT_DIR }}/*/*.xml
          path-replace-backslashes: true
          reporter: java-junit
      - if: failure() && runner.os == 'Windows'
        name: List files if failed (Windows)
        run: Get-ChildItem -Force -Recurse
      - if: failure() && runner.os != 'Windows'
        name: List files if failed (non-Windows)
        run: ls -lAR
      - if: "always() && always() && contains(github.event.pull_request.labels.*.name, 'CI: Clean build required')"
        name: Clean after
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      checks: write
env:
  ENSO_BUILD_SKIP_VERSION_CHECK: "true"
