from Standard.Base import all

import Standard.Geo.Geo_Json
import Standard.Table.Io.Csv
import Standard.Table.Data.Table
import Standard.Table.Data.Column
import Standard.Table.Data.Order_Rule

from Standard.Table.Io.Csv export all hiding Parser

export Standard.Table.Data.Column

from Standard.Table.Data.Table export new, from_rows, join, No_Such_Column_Error, Table
from Standard.Table.Data.Order_Rule export Order_Rule

## Converts a JSON array into a dataframe, by looking up the requested keys
   from each item.

   Arguments:
   - fields: a vector of texts representing the names of fields to look up.

   The function assumes the elements have one of the following structures:
   - a JSON object containing the requested keys. In case an item is not an
     object, or the request key does not exist, the relevant values of the table
     will be set to `Nothing`.
   - a GeoJSON object of type Feature. The format is described in rfc7946.

   ? Implementation Note
     The GeoJson support is only partial.
     - Supported geometry objects are Position and Point. Rows containing
       other geometry objects are not included in the resulting dataframe.
     - Position arrays are truncated to 3 elements: longitude, latitude
       and elevation.
     - Nested properties are not supported and not included in the resulting
       dataframe.
Json.Array.to_table : Vector -> Table
Json.Array.to_table fields = case this of
    Json.Array items ->
        rows = items.map item-> case item of
            Json.Object fs ->
                row = if item.get_type == Geo_Json.Feature.to_text then item.get_feature_row else fs
                fields.map n-> row.get n . unwrap . catch (_ -> Nothing)
            _ -> Vector.fill fields.length Nothing
        cols = fields.map_with_index i-> n->
            [n, rows.map (_.at i)]
        Table.new cols

## Converts a JSON object into a dataframe, by looking up the requested keys
   from each item.

   Arguments:
   - fields: a vector of texts representing the names of fields to look up.

   The function assumes the elements have one of the following structures:
   - a GeoJSON object of type FeatureCollection. The format is described in
     rfc7946.

   ? Implementation Note
     The GeoJson support is only partial.
     - Supported geometry objects are Position and Point. Rows containing
       other geometry objects are not included in the resulting dataframe.
     - Position arrays are truncated to 3 elements: longitude, latitude
       and elevation.
     - Nested properties are not supported and not included in the resulting
       dataframe.
Json.Object.to_table : Vector -> Table ! Nothing
Json.Object.to_table fields=Nothing =
    if this.get_type != Geo_Json.Feature_Collection.to_text then Error.throw Nothing else
        case this.get "features" of
            Json.Array items ->
                feature_rows = items.map .get_feature_row
                column_names = case fields of
                    Nothing ->
                        column_names_row = feature_rows.fold Map.empty acc-> row->
                            row.fold_with_key acc a-> k-> _->
                                a.insert k 0
                        column_names_row.keys
                    _ -> fields
                rows = feature_rows.map row->
                    column_names.map n-> row.get n . unwrap . catch (_ -> Nothing)
                cols = column_names.map_with_index i-> n->
                    [n, rows.map (_.at i)]
                Table.new cols

            _ -> Error.throw Nothing
