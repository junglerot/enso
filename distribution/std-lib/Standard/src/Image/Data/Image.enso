from Standard.Base import all

import Standard.Base.System.File
import Standard.Image.Data.Image.Internal
import Standard.Image.Data.Matrix

polyglot java import org.enso.image.data.Image as Java_Image

## UNSTABLE
type Image

    ## UNSTABLE

       The image data type.

       Arguments:
       - opencv_mat: The underlying matrix that stores the image data.

       The image is represented with a matrix of rows x columns. Each
       pixel is represented with a vector of 1 to 4 values (channels).
       Pixel values are normalized in a range [0.0 .. 1.0].
    type Image opencv_mat

    ## UNSTABLE

       Return the number of image rows.
    rows : Integer
    rows = this.opencv_mat.rows

    ## UNSTABLE

       Return the number of image columns.
    columns : Integer
    columns = this.opencv_mat.cols

    ## UNSTABLE

       Return the number of image channels.
    channels : Integer
    channels = this.opencv_mat.channels

    ## UNSTABLE

       Get the pixel value indexed by row and column.

       Arguments:
       - row: the row index.
       - column: the column index.

       > Example
         Get the value at the specified row and column.
             Image.from_vector [0] . get 0 0 == [0]

       > Example
         Get the non-existend value.
             Image.from_vector [0] . get 1 1 . catch x->x == Matrix.Index_Out_Of_Bounds_Error 1 1 1
    get : Integer -> Integer -> Vector ! Matrix.Index_Out_Of_Bounds_Error
    get row column =
        if (row < 0) || (row >= this.rows) then Error.throw (Matrix.Index_Out_Of_Bounds_Error this.rows this.columns row) else
            if (column < 0) || (column >= this.columns) then Error.throw (Matrix.Index_Out_Of_Bounds_Error this.rows this.columns column) else
                arr = Java_Image.get this.opencv_mat row column
                Vector.Vector arr

    ## UNSTABLE

       Calculates the per-element sum of an image and a scalar or a matrix.

       Arguments:
       - value: A value can be a number, a vector of numbers, or a matrix. The
         number value is applied to each pixel's channel of the image. The
         vector value is padded with zeros to match the number of channels and
         then applied to each image's pixel. The matrix value must have the same
         dimensions (rows, columns, and channels) as this image. Otherwise, the
         operation results in a `Dimensions_Not_Equal` error. The matrix is
         applied element-wise, e.g., each matrix element is combined with the
         appropriate pixel (the element with the same row and column) of this
         image.

       The matrix should have the same dimensions as the image.

       > Example
         Add the constant to an image. Operation will add 0.1 to each channel
         of the image.
             image + 0.1

       > Example
         Add 0.1 to the first channel of the image.
             image + [0.1] == image + [0.1, 0, 0]

       > Example
         Add a matrix to the image.
             image + (Matrix.identity rows=image.rows channels=image.channels)
    + : (Number | Vector | Matrix) -> Image ! Matrix.Dimensions_Not_Equal
    + value = Panic.recover (Internal.core_op this.opencv_mat value (Java_Image.add _ _ _)) . catch Internal.core_op_handler

    ## UNSTABLE

       Calculates the per-element difference between an image and a scalar or a matrix.

       Arguments:
       - value: A value can be a number, a vector of numbers, or a matrix. The
         number value is applied to each pixel's channel of the image. The
         vector value is padded with zeros to match the number of channels and
         then applied to each image's pixel. The matrix value must have the same
         dimensions (rows, columns, and channels) as this image. Otherwise, the
         operation results in a `Dimensions_Not_Equal` error. The matrix is
         applied element-wise, e.g., each matrix element is combined with the
         appropriate pixel (the element with the same row and column) of this
         image.

       The matrix should have the same dimensions as the image.

       > Example
         Subtract 0.5 from each channel of the image.
             image - 0.5

       > Example
         Subtract 0.5 from second channel of the image.
             image - [0, 0.5] == image - [0, 0.5, 0, 0]

       > Example
         Subtract a matrix from the image.
             image - (Matrix.identity rows=image.rows channels=image.channels)
    - : (Number | Vector | Matrix) -> Image ! Matrix.Dimensions_Not_Equal
    - value = Panic.recover (Internal.core_op this.opencv_mat value (Java_Image.subtract _ _ _)) . catch Internal.core_op_handler

    ## UNSTABLE

       Calculates the per-element product of an image and a scalar or a matrix.

       Arguments:
       - value: A value can be a number, a vector of numbers, or a matrix. The
         number value is applied to each pixel's channel of the image. The
         vector value is padded with zeros to match the number of channels and
         then applied to each image's pixel. The matrix value must have the same
         dimensions (rows, columns, and channels) as this image. Otherwise, the
         operation results in a `Dimensions_Not_Equal` error. The matrix is
         applied element-wise, e.g., each matrix element is combined with the
         appropriate pixel (the element with the same row and column) of this
         image.

       The matrix should have the same dimensions as the image.

       > Example
         Multiply each channel of the image by 2.
             image * 2

       > Example
         Multiply first channel of the image by 2, and second channel by 4.
             image * [2, 4, 1, 1]

       > Example
         Multiply first channel of the image by 2, and zero the rest of
         the channels.
             image * [2]

       > Example
         Multiply a matrix and the image.
             image * (Matrix.identity rows=image.rows channels=image.channels)
    * : (Number | Vector | Matrix) -> Image ! Matrix.Dimensions_Not_Equal
    * value = Panic.recover (Internal.core_op this.opencv_mat value (Java_Image.multiply _ _ _)) . catch Internal.core_op_handler

    ## UNSTABLE

       Performs per-element division of an image and a scalar or a matrix.

       Arguments:
       - value: A value can be a number, a vector of numbers, or a matrix. The
         number value is applied to each pixel's channel of the image. The
         vector value is padded with zeros to match the number of channels and
         then applied to each image's pixel. The matrix value must have the same
         dimensions (rows, columns, and channels) as this image. Otherwise, the
         operation results in a `Dimensions_Not_Equal` error. The matrix is
         applied element-wise, e.g., each matrix element is combined with the
         appropriate pixel (the element with the same row and column) of this
         image.

       The matrix should have the same dimensions as the image.

       > Example
         Divide each channel of the image by 2.
             image / 2

       > Example
         Divide first channel of the image by 2, and second channel by 4.
             image / [2, 4, 1, 1]

       > Example
         Divide first channel of the image by 2, and zero the rest of the channels.
             image / [2]

       > Example
         Divide the image by a matrix.
             image / (Matrix.identity rows=image.rows channels=image.channels)
    / : (Number | Vector | Matrix) -> Image ! Matrix.Dimensions_Not_Equal
    / value = Panic.recover (Internal.core_op this.opencv_mat value (Java_Image.divide _ _ _)) . catch Internal.core_op_handler

    ## UNSTABLE

       Check the equality of two images.

       Arguments:
       - that: the matrix to compare with.

       ? Implementation Note
         Two images considered equal when they have the same number of rows,
         columns and channels, and have the same pixel values.

         The image represented internally as a byte array, and if two images
         have the same dimensions, equality checks that underlying byte arrays
         are equal as well.
    == : Image -> Boolean
    == that = Java_Image.is_equals this.opencv_mat that.opencv_mat

    ## UNSTABLE

       Convert the image to a vector.
    to_vector : Vector
    to_vector =
        arr = Java_Image.to_vector this.opencv_mat
        Vector.Vector arr

    ## UNSTABLE

       Convert the image to Json.
    to_json : Json
    to_json =
        base64 = Java_Image.to_base64 this.opencv_mat
        Json.from_pairs [["mediaType", "image/png"], ["base64", base64]]

    ## UNSTABLE

       Convert the image to a Matrix.
    to_matrix : Matrix
    to_matrix = Matrix.from_vector this.to_vector this.rows this.channels

## UNSTABLE

   Create an image from the array of values.

   Arguments:
   - values: the vector of numbers.
   - rows: the number of rows in the resulting image.
   - channels: the number of channels in the resulting image.

   The function expects the array of normalized values to have each value in 
   the range of [0.0 .. 1.0].

   > Example
     Create an image from the vector.
         Image.from_vector [0, 0, 0, 0, 0, 0] rows=2 channels=1
from_vector : Vector -> Integer -> Integer -> Image
from_vector values rows=1 channels=1 =
    Image (Java_Image.from_vector values.to_array rows channels)
