from Standard.Base import all

from Standard.Database.Connection.Connection import all

## UNSTABLE

   Tries to connect to the database under a provided URL.

   Currently SQLite and PostgreSQL databases are supported.

   The exact URL depends on the database engine.
   For SQLite the expected format is `sqlite:/path/to/database/file`.
   For PostgreSQL it can be one of:
   - `postgresql:database_name` - which will connect to the database with the
     given name on the local machine;
   - `postgresql:/` - which will connect to the default database
     (which is the same as the username) on the local machine;
   - `postgresql://host/database_name` - which will connect to the specified
     database on a specified host, the `host` can consist of an IP address or a
     hostname, optionally followed by colon and a port number, so values like
     `db.example.com`, `127.0.0.1`, `example.com:1234`, `127.0.0.1:1234` are
     allowed;
   - `postgresql://host/` - which will connect to the same database as the
     username on a specified host, the `host`` is defined as above.

   Arguments:
   - url: the URL to connect to.
   - user: (optional) an username for authentication.
   - password: (optional) a password for authentication.
   - custom_properties: (optional) a vector of key-value Text pairs which can
     set any other properties that can be used to configure the connection or
     for authentication. Supported properties depend on the database engine that
     the connection is made to.
connect : Text -> Nothing | Text -> Nothing | Text -> Vector -> Connection ! Sql_Error
connect url user=Nothing password=Nothing custom_properties=[] =
    full_url = if url.starts_with "jdbc:" then url else "jdbc:"+url
    user_prop = if user.is_nothing then [] else [["user", user]]
    pass_prop = if user.is_nothing then [] else [["password", password]]
    properties = user_prop + pass_prop + custom_properties
    Connection.create_jdbc_connection full_url properties

## UNSTABLE

   Connects to an SQLite database in a file on the filesystem.

   It is an alternative to `connect` that resolves a path to the database file.

   Arguments:
   - file: the path to the database.
open_sqlite_file : File -> Connection ! Sql_Error
open_sqlite_file file =
    url = "sqlite:" + file.absolute.path
    here.connect url
