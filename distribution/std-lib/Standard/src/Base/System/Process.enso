import Standard.Base.System.Process.Exit_Code

from Standard.Base.Data.Vector import Vector
from Builtins import Array, System, True, False

## UNSTABLE

   The builder object that is used to create operating system processes.
type Builder
    type Builder command arguments=[] stdin=""

    ## UNSTABLE

       Sets the arguments that should be passed to the created process.
    set_arguments : Vector.Vector Text -> Builder
    set_arguments arguments = Builder this.command arguments this.stdin

    ## UNSTABLE

       Sets the text that will be used to feed standard input to the created
       process.
    set_stdin : Text -> Builder
    set_stdin stdin = Builder this.command this.arguments stdin

    ## UNSTABLE

       Create a process using a builder returning the result of execution.

       > Example
         Create a script redirecting the input to stdout:
             builder = Process.builder "bash" ["-c", "read line; echo -n $line"] "test"
             builder.create
         The result is:
             Process_Result Exit_Success "test" ""
    create : Result
    create =
        result = System.create_process this.command this.arguments.to_array this.stdin redirect_in=False redirect_out=False redirect_err=False
        Result (Exit_Code.from_number result.exit_code) result.stdout result.stderr

## UNSTABLE

   The result of the process invocation.
type Result exit_code stdout stderr

## UNSTABLE

   Call a command with a list of arguments.

   > Example
     Call the `echo` command with arguments
         Process.run "echo" ["-n", "Hello!"]
     The result is printed to stdout:
         Hello!
run : Text -> Vector.Vector Text -> Exit_Code
run command arguments=[] =
    result = System.create_process command arguments.to_array input="" redirect_in=True redirect_out=True redirect_err=True
    Exit_Code.from_number result.exit_code
