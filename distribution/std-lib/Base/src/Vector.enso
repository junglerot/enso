from Builtins import Array
from Base import all

## The basic, immutable, vector type.

   A vector allows to store an arbitrary number of elements, in linear memory.
   It is the recommended data structure for most applications.

   > Example
     A vector containing the elements `1`, `2`, and `3`, in this order is:
         [1, 2, 3]

   > Example
     A vector containing 50 elements, each being the number `42`, can be
     created by:
         Vector.fill length=50 item=42
type Vector
    type Vector to_array

    ## Gets an element from the vector at a specified index (0-based).

       > Example
         To get the second element of the vector `[1, 2, 3]`, use:
             [1, 2, 3].at 1
    at : Number -> Any
    at index = this.to_array.at index

    ## Returns the number of elements stored in this vector.
    length : Number
    length = this.to_array.length

    ## Combines all the elements of the vector, by iteratively applying the
       passed function with next elements of the vector.

       In general, the result of
           [l0, l1, ..., ln] . fold init f
       is the same as
           f (...(f (f init l0) l1)...) ln

       > Example
         In the following example, we'll compute the sum of all elements of a
         vector:
             [0, 1, 2] . fold 0 (+)
    fold : Any -> (Any -> Any -> Any) -> Any
    fold initial function =
        arr = this.to_array
        f = acc -> ix -> function acc (arr.at ix)
        res = 0.upto this.length . fold initial f
        res

    ## Creates a new vector of the given length, initializing elements using
       the provided constructor function.

       The constructor function is called with the consecutive indices
       (0-based) of the vector elements.

       > Example
         To create a vector containing the numbers 1 through 50:
             Vector.new 50 (ix -> ix + 1)

       > Example
         To create a copy of the given vector (`my_vec`):
             Vector.new my_vec.length (ix -> my_vec.at ix)
    new : Number -> (Number -> Any) -> Vector
    new length constructor =
        arr = Array.new length
        0.upto length . each ix-> arr.set_at ix (constructor ix)
        Vector arr

    ## Creates a new vector of the given length, filling the elements with
       the provided constant.

       > Example
         A vector containing 50 elements, each being the number `42`, can be
         created by:
             Vector.fill length=50 item=42
    fill : Number -> Any -> Vector
    fill length item =
        arr = Array.new length
        0.upto length . each ix-> arr.set_at ix item
        Vector arr

    ## Applies a function to each element of the vector, returning the vector of
       results.

       > Example
         In the following example, we add `1` to each element of the vector:
             [1, 2, 3] . map +1
         The result of running the code above is:
             [2, 3, 4]
    map : (Any -> Any) -> Vector
    map function =
        arr = this.to_array
        new_arr = Array.new arr.length
        0.upto arr.length . each ix-> new_arr.set_at ix (function (arr.at ix))
        Vector new_arr

    ## Generates a human-readable text representation of the vector.
    to_text : Text
    to_text =
        arr = this.to_array
        if arr.length == 0 then "[]" else
            if arr.length == 1 then "[" + (arr.at 0 . to_text) + "]" else
                folder = str -> ix -> str + ", " + (arr.at ix).to_text
                tail_elems = 1.upto arr.length . fold "" folder
                "[" + (arr.at 0 . to_text) + tail_elems + "]"
