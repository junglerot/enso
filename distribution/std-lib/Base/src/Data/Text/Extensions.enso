from Base import all
from Builtins import Text, Prim_Text_Helpers

from Builtins export Text

polyglot java import com.ibm.icu.text.BreakIterator
polyglot java import org.enso.base.Text_Utils

## Computes the number of characters in the text.

   A character is defined as an Extended Grapheme Cluster, see
   [Unicode Standard Annex #29](https://unicode.org/reports/tr29/).

   This is the smallest unit that still has semantic meaning in most
   text-processing applications.
Text.length : Integer
Text.length =
    iterator = BreakIterator.getCharacterInstance []
    iterator.setText [this]
    nxt = iterator.next []

    count accum iter = if iter == -1 then accum else
        counter = accum + 1
        next_nxt = iterator.next []
        @Tail_Call count counter next_nxt
    count 0 nxt

## Applies `function` to each character in `this`.

   A character is defined as an Extended Grapheme Cluster, see
   [Unicode Standard Annex #29](https://unicode.org/reports/tr29/).

   This is the smallest unit that still has semantic meaning in most
   text-processing applications.
Text.each : (Text -> Any) -> Nothing
Text.each function =
    iterator = BreakIterator.getCharacterInstance []
    iterator.setText [this]

    fst = iterator.first []
    nxt = iterator.next []

    iterate prev nxt = if nxt == -1 then Nothing else
        function (Text_Utils.substring [this, prev, nxt])
        next_nxt = iterator.next []
        @Tail_Call iterate nxt next_nxt
    iterate fst nxt
    Nothing

## Returns a vector containing all characters in the given text.

   A character is defined as an Extended Grapheme Cluster, see
   [Unicode Standard Annex #29](https://unicode.org/reports/tr29/).

   This is the smallest unit that still has semantic meaning in most
   text-processing applications.
Text.characters : Vector.Vector
Text.characters =
    bldr = Vector.new_builder
    this.each bldr.append
    bldr.to_vector

## Takes a separator string and returns a vector resulting from splitting
   `this` on each occurence of `separator`.

   > Example
     In the following example, we'll split the text into a vector of
     comma-separated items:
         "ham,eggs,cheese,tomatoes".split ","
     The code above returns:
         ["ham", "eggs", "cheese", "tomatoes"]
Text.split : Text -> Vector.Vector
Text.split (separator = " ") =
    Vector.from_polyglot_array (Text_Utils.split_at [this, separator])

## Checks whether `this` is equal to `that`.

   The definition of equality includes Unicode canonicalization. I.e. two texts
   are equal if they are identical after canonical decomposition. This ensures
   that different ways of expressing the same character in the underlying
   binary representation are considered equal.

   > Example
     The string 'é' (i.e. the character U+00E9, LATIN SMALL LETTER E WITH
     ACUTE) is canonically the same as the string 'e\u0301' (i.e. the letter
     `e` followed by U+0301, COMBINING ACUTE ACCENT). Therefore:
         ('é' == 'e\u0301') == True
Text.== : Any -> Boolean
Text.== that = Text_Utils.equals [this, that]

## Checks whether `this` is equal to `that`, ignoring case considerations.

   Two texts are considered equal ignoring case if they are of the same length
   and corresponding characters are equal ignoring case.

   The definition of equality includes Unicode canonicalization. I.e. two texts
   are equal if they are identical after canonical decomposition. This ensures
   that different ways of expressing the same character in the underlying
   binary representation are considered equal.

   > Example

     The string 'É' (i.e. the character U+00C9, LATIN CAPITAL LETTER E WITH
     ACUTE) is equal ignore case to the string 'é' (i.e. the character U+00E9,
     LATIN SMALL LETTER E WITH ACUTE), which is canonically the same as the
     string 'e\u0301' (i.e. the letter `e` followed by U+0301, COMBINING ACUTE
     ACCENT). Therefore:
         (('É' . equals_ignore_case 'é') && ('é' == 'e\u0301')) == True

Text.equals_ignore_case : Text -> Boolean
Text.equals_ignore_case that = Text_Utils.equals_ignore_case [this, that]

## Checks if `this` is lexicographically before `that`.
Text.< : Text -> Boolean
Text.< that = Text_Utils.lt [this, that]

## Checks if `this` is lexicographically after `that`.
Text.> : Text -> Boolean
Text.> that = Text_Utils.lt [that, this]

## Check if `this` is empty.
Text.is_empty : Boolean
Text.is_empty = this == ""

## Check if `this` is not empty.
Text.not_empty : Boolean
Text.not_empty = not this.is_empty

## Returns a vector containing bytes representing the UTF-8 encoding of the
   input text.

   This is useful for low-level operations, such as binary data encoding and
   decoding.
Text.utf_8 : Vector.Vector
Text.utf_8 = Vector.from_polyglot_array (Text_Utils.get_bytes [this])

## Takes an array of bytes and returns Text resulting from decoding it as
   UTF-8.

   This is useful for low-level operations, such as binary data encoding and
   decoding.
Text.from_utf_8 : Vector.Vector -> Text
Text.from_utf_8 bytes = Text_Utils.from_utf_8 [bytes.to_array]

## Returns a vector containing integers representing the Unicode codepoints of
   the input text.

   This is useful for low-level operations, such as binary data encoding and
   decoding.
Text.codepoints : Vector.Vector
Text.codepoints =
    Vector.from_polyglot_array (Text_Utils.get_codepoints [this])

## Takes an array of numbers and returns the text resulting from interpreting it
   as a sequence of Unicode codepoints.

   This is useful for low-level operations, such as binary data encoding and
   decoding.
Text.from_codepoints : Vector.Vector -> Text
Text.from_codepoints codepoints = Text_Utils.from_codepoints [codepoints.to_array]

## Checks whether `this` starts with `prefix`.
Text.starts_with : Text -> Boolean
Text.starts_with prefix = Text_Utils.starts_with [this, prefix]

## Checks whether `this` contains `sequence` as its substring.
Text.contains : Text -> Boolean
Text.contains sequence = Text_Utils.contains [this, sequence]

## Text to JSON conversion.
Text.to_json : Json.String
Text.to_json = Json.String this

## Takes a non-negative integer and returns a new text, consisting of `count`
   concatenated copies of `this`.
Text.repeat : Integer -> Text
Text.repeat count =
    0.up_to count . fold "" acc-> _-> acc + this

## Creates a new text by removing the first `count` characters of `this`.
   If `count` is greater than the number of characters in `this`, an empty text
   is returned.
Text.drop_first : Integer -> Text
Text.drop_first count =
    iterator = BreakIterator.getCharacterInstance []
    iterator.setText [this]
    iterator.first []
    boundary = iterator.next [count]
    if boundary == -1 then '' else Text_Utils.drop_first [this, boundary]

## Creates a new text by removing the last `count` characters of `this`.
   If `count` is greater than the number of characters in `this`, an empty text
   is returned.
Text.drop_last : Integer -> Text
Text.drop_last count =
    iterator = BreakIterator.getCharacterInstance []
    iterator.setText [this]
    iterator.last []
    boundary = iterator.next [-count]
    if boundary == -1 then '' else Text_Utils.substring [this, 0, boundary]

## Creates a new text by selecting the first `count` characters of `this`.
   If `count` is greater than the number of characters in `this`, the whole
   `this` is returned.
Text.take_first : Integer -> Text
Text.take_first count =
    iterator = BreakIterator.getCharacterInstance []
    iterator.setText [this]
    iterator.first []
    boundary = iterator.next [count]
    if boundary == -1 then this else Text_Utils.substring [this, 0, boundary]

## Creates a new text by selecting the last `count` characters of `this`.
   If `count` is greater than the number of characters in `this`, the whole
   `this` is returned.
Text.take_last : Integer -> Text
Text.take_last count =
    iterator = BreakIterator.getCharacterInstance []
    iterator.setText [this]
    iterator.last []
    boundary = iterator.next [-count]
    if boundary == -1 then this else Text_Utils.drop_first [this, boundary]
