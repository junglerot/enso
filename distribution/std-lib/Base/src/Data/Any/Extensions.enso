from Base import all

## Generic equality of arbitrary values.

   Two values are considered to be equal in Enso when they have the same
   structure, and each of the values of their fields are recursively equal.
Any.== : Any -> Boolean
Any.== that = if Meta.is_same_object this that then True else
    this_meta = Meta.meta this
    that_meta = Meta.meta that
    case Cons this_meta that_meta of
        Cons (Meta.Atom _) (Meta.Atom _) ->
            c_1 = this_meta.constructor
            c_2 = that_meta.constructor
            if Meta.is_same_object c_1 c_2 . not then False else
                f_1 = this_meta.fields
                f_2 = that_meta.fields
                0.up_to f_1.length . all i-> (f_1.at i) == (f_2.at i)
        Cons (Meta.Error _) (Meta.Error _) -> this_meta.payload == that_meta.payload
        Cons (Meta.Polyglot o_1) (Meta.Polyglot o_2) ->
            langs_match = this_meta.language == Meta.Java && that_meta.language == Meta.Java
            if langs_match.not then False else o_1.equals o_2
        ## Constructor comparison is covered by the identity equality.
           Primitive objects should define their own equality.
           Therefore, there is no more cases to handle in this method.
        _ -> False

## Checks if `this` is greater than `that`.

   To have `>` defined, a type must define `compare_to`, returning an Ordering.

   > Example
     Compare two integers.
         1 > 10 == False
Any.> : Any -> Boolean
Any.> that = this.compare_to that == Ordering.Greater

## Checks if `this` is less than `that`.

   To have `<` defined, a type must define `compare_to`, returning an Ordering.

   > Example
     Compare two integers.
         1 < 10 == True
Any.< : Any -> Boolean
Any.< that = this.compare_to that == Ordering.Less

## Checks if the type is an instance of `Nothing`.

   > Example
     Checking if a variable `a` is nothing.
         a.is_nothing
Any.is_nothing : Boolean
Any.is_nothing = case this of
    Nothing -> True
    _ -> False
