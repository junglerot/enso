from Base import all

## The top-level entry point for a test suite.
type Suite specs

## PRIVATE
type Spec name behaviors

## PRIVATE
type Behavior name result

## PRIVATE
Behavior.is_fail = this.result.is_fail

## PRIVATE
Spec.is_fail = this.behaviors.any is_fail

## PRIVATE
Suite.is_fail = this.specs.any is_fail

## PRIVATE
type Assertion
    type Success
    type Failure message
    type Pending

    is_fail = case this of
        Success -> False
        Failure _ -> True
        Pending -> False

type Verbs
    type Verbs

    start_with subject argument =
        if subject.starts_with argument then Success else
            here.fail (subject.to_text + " did not start with " + argument.to_text))

    equal subject argument =
        if subject == argument then Success else
            msg = subject.to_text + " did not equal " + argument.to_text + "."
            here.fail msg

    be subject argument = this.equal subject argument

Any.should verb argument = Verbs.verb this argument

## Fail a test with the given message.
fail message = Panic.throw (Failure message)

## Asserts that `this` value is equal to the expected value.
Any.should_equal that = case this == that of
    True -> Success
    False ->
        msg = this.to_text + " did not equal " + that.to_text + "."
        Panic.throw (Failure msg)

## Asserts that `this` is within `epsilon` from `that`.
Decimal.should_equal that (epsilon = 0) = case this.equals that epsilon of
    True -> Success
    False ->
        msg = this.to_text + " did not equal " + that.to_text + "."
        Panic.throw (Failure msg)

## Asserts that the given `Boolean` is `True`
Boolean.should_be_true = case this of
    True -> Success
    False -> Panic.throw (Failure "Expected False to be True.")

## Asserts that the given `Boolean` is `False`
Boolean.should_be_false = case this of
    True -> Panic.throw (Failure "Expected True to be False.")
    False -> Success

## PRIVATE
Spec.print_report =
    IO.print_err (this.name + ":")
    this.behaviors.reverse.each behavior->
        case behavior.result of
            Success ->
                IO.print_err ("    - " + behavior.name)
            Failure msg ->
                IO.print_err ("    - [FAILED] " + behavior.name)
                IO.print_err ("        Reason: " + msg)
            Pending ->
                IO.print_err ("    - [PENDING] " + behavior.name)

## Creates a new test group, desribing properties of the object
   described by `this`.

   > Example
         Suite.run <|
             describe "Number" <|
                 it "should define addition" <|
                     2+3 . should_equal 5
                 it "should define multiplication" <|
                     2*3 . should_equal 6
Text.describe ~behaviors =
    r = State.run Spec (Spec this Nil) <|
        behaviors
        State.get Spec
    r.print_report
    suite = State.get Suite
    new_suite = Suite (Cons r suite.specs)
    State.put Suite new_suite

## Specifies a single behavior, described by `this`.

   > Example
         Suite.run <|
             describe "Number" <|
                 it "should define addition" <|
                     2+3 . should_equal 5
                 it "should define multiplication" <|
                     2*3 . should_equal 6
Text.it ~behavior pending=False =
    result = if pending then Pending else here.run_spec behavior
    spec = State.get Spec
    new_spec = Spec spec.name (Cons (Behavior this result) spec.behaviors)
    State.put Spec new_spec

run_spec ~behavior =
    recovery = Panic.recover <|
        behavior
        Nothing
    maybeExc = case recovery of
        _ -> Success
    result = maybeExc.catch ex->
        case ex of
            Failure _ -> ex
            _ -> Failure ("Unexpected error has been thrown: " + ex.to_text)
    result


## Runs a suite of tests, consisting of multiple `describe` blocks.

   Returns a `Suite` object containing the test report.

   > Example
         Suite.run <|
             describe "Number" <|
                 it "should define addition" <|
                     2+3 . should_equal 5
                 it "should define multiplication" <|
                     2*3 . should_equal 6
Suite.run ~specs =
    r = State.run Suite (Suite Nil) <|
        specs
        State.get Suite
    r

## Runs a suite of tests, consisting of multiple `describe` blocks.

   Exits the process with code `1` if the suite failed and `0` otherwise.

   > Example
         Suite.run <|
             describe "Number" <|
                 it "should define addition" <|
                     2+3 . should_equal 5
                 it "should define multiplication" <|
                     2*3 . should_equal 6
Suite.runMain ~specs =
   r = this.run specs
   code = if r.is_fail then 1 else 0
   System.exit code
