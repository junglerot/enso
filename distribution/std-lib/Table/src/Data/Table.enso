from Base import all
import Table.Io.Csv
import Table.Data.Column
import Base.System.Platform

polyglot java import org.enso.table.data.table.Table as Java_Table

## Represents a column-oriented table data structure.
type Table
    type Table java_table

    ## Returns a text containing an ASCII-art table displaying this data.

       Arguments:
         - show_rows: the number of initial rows that should be displayed.
         - format_terminal: whether ANSI-terminal formatting should be used
    display : Integer -> Boolean -> Text
    display show_rows=10 format_terminal=False =
        cols = Vector.Vector this.java_table.getColumns
        index =  this.java_table.getIndex
        col_names = [index.getName] + cols.map .getName
        col_vals = cols.map .getStorage
        num_rows = this.java_table.nrows
        display_rows = Math.min num_rows show_rows
        rows = Vector.new display_rows row_num->
            cols = col_vals.map col->
                if col.isNa row_num then "Nothing" else Column.get_item_string col row_num
            [index.ilocString row_num] + cols
        table = here.print_table col_names rows format_terminal
        if num_rows - display_rows <= 0 then table else
            missing = '\n\u2026 and ' + (num_rows - display_rows).to_text + ' hidden rows.'
            table + missing

    ## Prints an ASCII-art table with this data to the standard output.

       Arguments:
         - show_rows: the number of initial rows that should be displayed.
    print show_rows=10 =
        IO.println (this.display show_rows format_terminal=True)
        IO.println ''

    ## Converts this table to a JSON structure.
    to_json : Json
    to_json =
        col_jsons = this.columns.map .to_json
        cols_json = Json.Array col_jsons
        fields = Map.singleton "columns" cols_json
        Json.Object fields

    ## Returns the column with the given name.
    at : Text -> Column | Nothing
    at name = case this.java_table.getColumnByName name of
        Nothing -> Nothing
        c -> Column.Column c

    ## Selects only the rows of this table that correspond to `True` values in
       `indexes`.
       This is useful for filtering the rows by given predicate.
       > Example
         Select only the rows of `my_table` where the `"Status"` column has the
         value `"Valid"`
             my_table.where (my_table.at "Status" == "Valid")
    where : Column -> Table
    where indexes =
        Table (this.java_table.mask indexes.java_column)

    ## Sets the column value at the given name. If a column with the given name
       already exists, it will be replaced. Otherwise a new column is added.
    set : Text -> Column -> Table
    set name column =
        Table (this.java_table.addOrReplaceColumn (column.rename name . java_column))

    ## Returns the vector of columns contained in this table.
    columns : Vector
    columns =
        Vector.Vector this.java_table.getColumns . map Column.Column

    ## Sets the index of this table, using the column with the provided name.
    set_index : Text -> Table
    set_index index =
        Table (this.java_table.indexFromColumn index)

    ## Selects a subset of columns from this table by name.
    select : Vector -> Table
    select columns = Table (this.java_table.selectColumns columns.to_array)

    ## Efficiently joins two tables based on either the index or the specified
       key column.

       The resulting table contains rows of `this` extended with rows of
       `other` with matching indexes. If the index values in `other` are not
       unique, the corresponding rows of `this` will be duplicated in the
       result.

       Arguments:
         - other: the table being the right operand of this join operation.
         - on: the column of `this` that should be used as the join key. If
               this argument is not provided, the index of `this` will be used.
         - drop_unmatched: whether the rows of `this` without corresponding
                           matches in `other` should be dropped from the result.
         - left_suffix: a suffix that should be added to the columns of `this`
                        when there's a name conflict with a column of `other`.
         - right_suffix: a suffix that should be added to the columns of `other`
                         when there's a name conflict with a column of `this`.
    join : Table | Column.Column -> Text | Nothing -> Boolean -> Text -> Text -> Table
    join other on=Nothing drop_unmatched=False left_suffix='_left' right_suffix='_right' =
        case other of
            Column.Column _ -> this.join other.to_table on drop_unmatched left_suffix right_suffix
            Table t ->
                Table (this.java_table.join t drop_unmatched on left_suffix right_suffix)

    ## Returns a new Table without rows that contained missing values in any of
       the columns.
    drop_missing_rows : Table
    drop_missing_rows =
        cols = this.columns
        case cols.not_empty of
            True ->
                any_missing_mask = cols.map .is_missing . reduce (||)
                non_missing_mask = any_missing_mask.not
                this.where non_missing_mask
            False -> this

    ## Returns a new Table without columns that contained any missing values.
    drop_missing_columns : Table
    drop_missing_columns =
        non_missing = this.columns . filter (col -> col.count_missing == 0)
        index = this.java_table.getIndex
        Table (Java_Table.new (non_missing.map .java_column . to_array) index)

    ## Returns the amount of rows in this table.
    nrows : Integer
    nrows = this.java_table.nrows

    ## Returns a Table describing this table's contents.

       The table lists all columns, counts of non-null items and storage types
       of each column.
    info : Table
    info =
        cols = this.columns
        here.new [["Column", cols.map .name], ["Items Count", cols.map .count], ["Storage Type", cols.map .storage_type]]

    ## Returns an aggregate table resulting from grouping the elements by the
       value of the specified column.

       If the `by` argument is not set, the index is used for grouping instead.

       > Example
         Creates a simple table and computes aggregation statistics:
            name = ['name', ["foo", "bar", "foo", "baz", "foo", "bar", "quux"]]
            price = ['price', [0.4, 3.5, Nothing, 6.7, Nothing, 97, Nothing]]
            quantity = ['quantity', [10, 20, 30, 40, 50, 60, 70]]
            t = Table.new [name, price, quantity]

            agg = t.group by='name'

            records_num = agg.count
            total_quantity = agg.at 'quantity' . sum
            mean_price = agg.at 'price' . mean

            Table.join [records_num, total_quantity, mean_price]
    group : Text | Nothing -> Aggregate_Table
    group by=Nothing =
        Aggregate_Table (this.java_table.group by)

## Represents a table with grouped rows.
type Aggregate_Table
    type Aggregate_Table java_table

    ## Returns a vector of aggregate columns in this table.
    columns : Vector.Vector
    columns = Vector.Vector this.java_table.getColumns . map Column.Aggregate_Column

    ## Returns a table containing columns resulting from calling `values` on
       each column in `this`.
    values : Table
    values = this.columns . map (_.values name_suffix='') . reduce .join

    ## Returns a column containing the number of elements in each group.
    count : Column
    count = Column.Column this.java_table.count

    ## Returns an aggregate column with the given name, contained in this table.
    at : Text -> Column | Nothing
    at name = case this.java_table.getColumnByName name of
        Nothing -> Nothing
        c -> Column.Aggregate_Column c

    ## Prints an ASCII-art table with this data to the standard output.

       Arguments:
         - show_rows: the number of initial rows that should be displayed.
    print : Integer -> Nothing
    print show_rows=10 = this.values.print show_rows

## PRIVATE
from_columns cols = Table (Java_Table.new cols.to_array)

## Creates a new table from a vector of `[name, items]` pairs.

   > Example
     Create a new table with the given in two columns:
         Table.new [["foo", [1, 2, 3]], ["bar", [True, False, True]]]
new columns =
    cols = columns.map c->
        Column.from_vector (c.at 0) (c.at 1) . java_column
    here.from_columns cols

## Joins a vector of tables (or columns) into a single table, using each table's
   index as the join key. Particularly useful for joining multiple columns
   derived from one original table into a new table.
join : Vector -> Table
join tables =
    tables.reduce .join

## PRIVATE
pad txt len =
    true_len = txt.characters.length
    txt + (" ".repeat (len - true_len))

## PRIVATE
ansi_bold enabled txt =
    case Platform.os of
        ## Output formatting for Windows is not currently supported.
        Platform.Windows -> txt
        _ -> if enabled then '\e[1m' + txt + '\e[m' else txt

## PRIVATE
print_table header rows format_term =
    content_lengths = Vector.new header.length i->
        max_row = 0.up_to rows.length . fold 0 a-> j-> Math.max a (rows.at j . at i . characters . length)
        Math.max max_row (header.at i . characters . length)
    header_line = header.zip content_lengths here.pad . map (here.ansi_bold format_term) . join ' | '
    divider = content_lengths . map (l -> "-".repeat l+2) . join '+'
    row_lines = rows.map r->
        x = r.zip content_lengths here.pad
        with_bold_ix = [here.ansi_bold format_term (x.at 0)] + x.drop_start 1
        y = with_bold_ix . join ' | '
        " " + y
    ([" " + header_line, divider] + row_lines).join '\n'
