from Base import all
import Table.Data.Table
import Table.Data.Storage

polyglot java import org.enso.table.data.table.Column as Java_Column

type Column
    type Column java_column

    ## Returns a text containing an ASCII-art table displaying this data.

       Arguments:
         - show_rows: the number of initial rows that should be displayed.
         - format_terminal: whether ANSI-terminal formatting should be used
    display : Integer -> Boolean -> Text
    display show_rows=10 format_terminal=False =
        java_col = this.java_column
        index = java_col.getIndex []
        col_name = java_col.getName []
        storage = java_col.getStorage []
        num_rows = java_col.getSize []
        display_rows = min num_rows show_rows
        items = Vector.new display_rows num->
            row = if storage.isNa [num] then "Nothing" else
                here.get_item_string storage num
            [index.ilocString [num], row]
        table = Table.print_table [index.getName [], col_name] items format_terminal
        if num_rows - display_rows <= 0 then table else
            missing = '\n\u2026 and ' + (num_rows - display_rows).to_text + ' hidden rows.'
            table + missing

    ## Prints an ASCII-art table with this data to the standard output.

       Arguments:
         - show_rows: the number of initial rows that should be displayed.
    print show_rows=10 =
        IO.println (this.display show_rows format_terminal=True)
        IO.println ''

    ## Element-wise equality comparison. Returns a column with results of
       comparing this column's elements against `other`.
       If `other` is a column, the comparison is performed pairwise between
       corresponding elements of `this` and `other`.
    == : Column | Any -> Column
    == other =
        here.run_vectorized_binary_op this "==" (==) other

    ## Element-wise non-equality comparison. Returns a column with results of
       comparing this column's elements against `other`.
       If `other` is a column, the comparison is performed pairwise between
       corresponding elements of `this` and `other`.
    != : Column | Any -> Column
    != other = (this == other).not

    ## Element-wise order comparison. Returns a column with results of
       comparing this column's elements against `other`.
       If `other` is a column, the comparison is performed pairwise between
       corresponding elements of `this` and `other`.
    >= : Column | Any -> Column
    >= other =
        here.run_vectorized_binary_op this ">=" (>=) other

    ## Element-wise order comparison. Returns a column with results of
       comparing this column's elements against `other`.
       If `other` is a column, the comparison is performed pairwise between
       corresponding elements of `this` and `other`.
    <= : Column | Any -> Column
    <= other =
        here.run_vectorized_binary_op this "<=" (<=) other

    ## Element-wise order comparison. Returns a column with results of
       comparing this column's elements against `other`.
       If `other` is a column, the comparison is performed pairwise between
       corresponding elements of `this` and `other`.
    > : Column | Any -> Column
    > other =
        here.run_vectorized_binary_op this ">" (>) other

    ## Element-wise order comparison. Returns a column with results of
       comparing this column's elements against `other`.
       If `other` is a column, the comparison is performed pairwise between
       corresponding elements of `this` and `other`.
    < : Column | Any -> Column
    < other = here.run_vectorized_binary_op this "<" (<) other

    ## Element-wise addition. Returns a column containing the result
       of adding `other` to each element of `this`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    + : Column | Any -> Column
    + other = here.run_vectorized_binary_op this '+' (+) other

    ## Element-wise subtraction. Returns a column containing the result
       of subtracting `other` from each element of `this`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    - : Column | Any -> Column
    - other = here.run_vectorized_binary_op this '-' (-) other

    ## Element-wise multiplication. Returns a column containing the result
       of multiplying `other` by each element of `this`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    * : Column | Any -> Column
    * other = here.run_vectorized_binary_op this '*' (*) other

    ## Element-wise division. Returns a column containing the result
       of dividing each element of `this` by `other`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    / : Column | Any -> Column
    / other = here.run_vectorized_binary_op this '/' (/) other

    ## Element-wise boolean conjunction. Returns a column containing the result
       of performing the boolean `and` on `other` and each element of `this`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    && : Column | Any -> Column
    && other =
        here.run_vectorized_binary_op this "&&" (&&) other

    ## Element-wise boolean disjunction. Returns a column containing the result
       of performing the boolean `or` on `other` and each element of `this`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    || : Column | Any -> Column
    || other =
        here.run_vectorized_binary_op this "||" (||) other

    ## Boolean negation of each element in this column.
    not : Column
    not =
        here.run_vectorized_unary_op this "not" not

    ## Returns a column of booleans, with `True` items at the positions where
       this column contains a `Nothing`.
    is_missing : Column
    is_missing = here.run_vectorized_unary_op this "is_missing" (== Nothing)

    ## Returns a new column where missing values have been replaced with the
       provided default.
    fill_missing : Any -> Column
    fill_missing default =
        storage = this.java_column.getStorage []
        index = this.java_column.getIndex []
        name = this.java_column.getName []
        new_st = storage.fillMissing [default]
        col = Java_Column.new [name, index, new_st].to_array
        Column col

    ## Returns a new column without rows that had missing values.
    drop_missing : Any -> Column
    drop_missing =
        this.where this.is_missing.not

    ## Checks for each element of the column if it starts with `other`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    starts_with : Column | Text -> Column
    starts_with other =
        here.run_vectorized_binary_op this "starts_with" (a -> b -> a.starts_with b) other

    ## Checks for each element of the column if it ends with `other`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    ends_with : Column | Text -> Column
    ends_with other =
        here.run_vectorized_binary_op this "ends_with" (a -> b -> a.ends_with b) other

    ## Checks for each element of the column if it contains `other`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    contains : Column | Text -> Column
    contains other =
        here.run_vectorized_binary_op this "contains" (a -> b -> a.contains b) other

    ## Applies `function` to each item in this column and returns the column
       of results.
    map : (Any -> Any) -> Column
    map function =
        storage = this.java_column.getStorage []
        index = this.java_column.getIndex []
        new_st = storage.map [Nothing, function]
        col = Java_Column.new ["Result", index, new_st].to_array
        Column col

    ## Applies `function` to consecutive pairs of elements of `this` and `that`
       and returns a column of results.
    zip : Column -> (Any -> Any -> Any) -> Column
    zip that function =
        s1 = this.java_column.getStorage []
        ix = this.java_column.getIndex []
        s2 = that.java_column.getStorage []
        rs = s1.zip [Nothing, function, s2]
        Column (Java_Column.new ["Result", ix, rs].to_array)

    ## Returns a new column, containing the same elements as `this`, but with
       the given name.
    rename name = Column (this.java_column.rename [name])

    ## Returns the name of this column.
    name : Text
    name = this.java_column.getName []

    ## Returns the length of this column.
    length : Integer
    length = this.java_column . getSize []

    ## Returns the number of missing items in this column.
    count_missing : Integer
    count_missing = this.java_column.getStorage [] . countMissing []

    ## Returns the number of non-null items in this column.
    count : Integer
    count = this.length - this.count_missing

    ## Returns the item contained in this column at the given index.
    at : Integer -> Any
    at index =
        storage = this.java_column.getStorage []
        if storage.isNa [index] then Nothing else
            storage.getItem [index]

    ## Selects only the rows of this column that correspond to `True` values in
       `indexes`.
       This is useful for filtering the rows by given predicate.
       > Example
         Select only the rows of `my_column` where the `status_column` column
         has the value `"Valid"`
             my_column.where (status_column == "Valid")
    where : Column -> Column
    where indexes =
        Column (this.java_column.mask [indexes.java_column])

    ## Returns a vector containing all the elements in this column.
    to_vector : Vector
    to_vector = Vector.new this.length this.at

    ## Returns the underlying storage type of this column.
    storage_type : Storage.Type
    storage_type =
        tp = this.java_column.getStorage [] . getType []
        if tp == Storage_Type_String then Storage.Text else
            if tp == Storage_Type_Long then Storage.Integer else
                if tp == Storage_Type_Double then Storage.Decimal else
                    if tp == Storage_Type_Bool then Storage.Boolean else
                        Storage.Any

    ## Converts this column to JSON.
    to_json : Json
    to_json =
        col = this.java_column
        name = col.getName []
        storage = col.getStorage []
        json_factory = case this.storage_type of
            Storage.Text -> Json.String
            Storage.Integer -> Json.Number
            Storage.Decimal -> Json.Number
            Storage.Boolean -> Json.Boolean
            _ -> to_json
        storage_json = Json.Array (here.storage_to_json storage json_factory)
        fields = Map.singleton "name" (Json.String name) . insert "data" storage_json
        Json.Object fields

## Creates a new column given a name and a vector of elements.
from_vector : Text -> Vector -> Column
from_vector name items = Column (Java_Column.fromItems [name, items.to_array])

## PRIVATE
run_vectorized_binary_op column name fallback_fn operand = case operand of
    Column col2 ->
        s1 = column.java_column.getStorage []
        ix = column.java_column.getIndex []
        s2 = col2.getStorage []
        rs = s1.zip [name, fallback_fn, s2]
        Column (Java_Column.new ["Result", ix, rs].to_array)
    _ ->
        s1 = column.java_column.getStorage []
        ix = column.java_column.getIndex []
        rs = s1.bimap [name, fallback_fn, operand]
        Column (Java_Column.new ["Result", ix, rs].to_array)

## PRIVATE
run_vectorized_unary_op column name fallback_fn =
    s = column.java_column.getStorage []
    ix = column.java_column.getIndex []
    rs = s.map [name, fallback_fn]
    Column (Java_Column.new ["Result", ix, rs].to_array)


## PRIVATE

   Keep this in sync with `org.enso.table.data.Storage.Type.LONG`
storage_type_long = 1

## PRIVATE

   Keep this in sync with `org.enso.table.data.Storage.Type.DOUBLE`
storage_type_double = 2

## PRIVATE

   Keep this in sync with `org.enso.table.data.Storage.Type.STRING`
storage_type_string = 3

## PRIVATE

   Keep this in sync with `org.enso.table.data.Storage.Type.BOOL`
storage_type_bool = 4

## PRIVATE
storage_to_json storage factory =
    Vector.new (storage.size []) ix->
        if storage.isNa [ix] then Json.Null else
            factory (storage.getItem [ix])

## PRIVATE
get_item_string column ix =
    tp = column.getType []
    if tp == Storage_Type_String then column.getItem [ix] else
        column.getItem [ix] . to_text

