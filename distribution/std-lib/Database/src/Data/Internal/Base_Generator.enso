from Base import all
import Database.Data.Sql
import Database.Data.Internal.IR

type Internal_Dialect
    ## PRIVATE

       An internal representation of a SQL dialect.

       Arguments:
       - operation_map: the mapping which maps operation names to their
         implementations; each implementation is a function which takes SQL
         builders for the arguments and should return a builder yielding the
         whole operation.
       # type Internal_Dialect (operation_map : Map Text (Vector Sql.Builder -> Sql.Builder))
    type Internal_Dialect operation_map

    ## PRIVATE

       Creates a copy of the dialect that supports additional operations or
       overrides existing ones.
       # extend_with : Vector [Text, Vector Sql.Builder -> Sql.Builder] -> Internal_Dialect
    extend_with mappings =
        new_map = mappings.fold this.operation_map (m -> el -> m.insert (el.at 0) (el.at 1))
        Internal_Dialect new_map

## PRIVATE

   A helper function to create a binary operator.
make_binary_op : Text -> Vector Sql.Builder -> Sql.Builder
make_binary_op name =
    arguments ->
        case arguments.length == 2 of
            True ->
                op = Sql.code " "+name+" "
                (arguments.at 0)++op++(arguments.at 1) . paren
            False ->
                Error.throw ("Invalid amount of arguments for operation " + name)

## PRIVATE

   A helper function to create a unary operator.
make_unary_op : Text -> Vector Sql.Builder -> Sql.Builder
make_unary_op name =
    arguments ->
        case arguments.length == 1 of
            True ->
                (Sql.code name+" ")++(arguments.at 0) . paren
            False ->
                Error.throw ("Invalid amount of arguments for operation " + name)

## PRIVATE

   A helper function to create a unary operator which is added to the right of
   the expression.
make_right_unary_op : Text -> Vector Sql.Builder -> Sql.Builder
make_right_unary_op name =
    arguments ->
        case arguments.length == 1 of
            True ->
                (arguments.at 0)++(Sql.code " "+name) . paren
            False ->
                Error.throw ("Invalid amount of arguments for operation " + name)

## PRIVATE

   A helper function to create a functional operation.
make_function : Text -> Vector Sql.Builder -> Sql.Builder
make_function name =
    arguments ->
        (Sql.code name) ++ (Sql.join ", " arguments . paren)

## PRIVATE

   A helper function to create an operation that takes no arguments.
make_constant : Text -> Vector Sql.Builder -> Sql.Builder
make_constant code =
    arguments ->
        if arguments.not_empty then Error.throw "No arguments were expected" else
            Sql.code code

## PRIVATE

   The base SQL dialect that is shared between most SQL implementations.

   It is a base to help creating concrete dialects. It can be extended or
   completely overridden.
base_dialect =
    bin = here.make_binary_op
    unary = here.make_unary_op
    fun = here.make_function
    arith = [["+", bin "+"], ["-", bin "-"], ["*", bin "*"], ["/", bin "/"]]
    logic = [["AND", bin "AND"], ["OR", bin "OR"], ["NOT", unary "NOT"]]
    compare = [["=", bin "="], ["!=", bin "!="], ["<", bin "<"], [">", bin ">"], ["<=", bin "<="], [">=", bin ">="]]
    agg = [["COUNT", fun "COUNT"], ["MAX", fun "MAX"], ["MIN", fun "MIN"], ["AVG", fun "AVG"], ["SUM", fun "SUM"], ["COUNT_ROWS", here.make_constant "COUNT(*)"]]
    nulls = [["ISNULL", here.make_right_unary_op "IS NULL"], ["FILLNULL", fun "COALESCE"]]
    base_map = Map.from_vector (arith + logic + compare + agg + nulls)
    Internal_Dialect base_map

## PRIVATE

   Builds code for an expression.
generate_expression : Internal_Dialect -> IR.Expression -> Sql.Builder
generate_expression dialect expr = case expr of
    IR.Column origin name -> Sql.code origin+"."+name
    IR.Constant value -> Sql.interpolation value
    IR.Operation kind arguments ->
        op = dialect.operation_map.get_or_else kind (Error.throw "Operation "+op+" is not supported.")
        parsed_args = arguments.map (here.generate_expression dialect)
        op parsed_args

## PRIVATE

   Builds code for the FROM clause.
generate_from_part : Internal_Dialect -> From_Spec -> Sql.Builder
generate_from_part dialect from_spec = case from_spec of
    IR.From_Table name as_name ->
        Sql.code name . alias as_name
    IR.Join kind left_spec right_spec on ->
        left = here.generate_from_part dialect left_spec
        right = here.generate_from_part dialect right_spec
        prefix = case kind of
            IR.Join_Inner -> "INNER JOIN"
            IR.Join_Left -> "LEFT JOIN"
            IR.Join_Right -> "RIGHT JOIN"
            IR.Join_Cross -> "CROSS JOIN"
        ons = Sql.join " AND " (on.map (here.generate_expression dialect)) . prefix_if_present " ON "
        left ++ (Sql.code " "+prefix+" ") ++ right ++ ons
    IR.Sub_Query columns context as_name ->
        sub = here.generate_query dialect (IR.Select columns context)
        sub.paren.alias as_name

## PRIVATE

   Builds code for an ordering.
   # generate_order : Internal_Dialect -> [Expression, IR.Order_Direction, IR.Nulls_Order] -> Sql.Builder
generate_order dialect order_description =
    order_suffix = case order_description.second of
        IR.Ascending -> Sql.code " ASC"
        IR.Descending -> Sql.code " DESC"
    nulls_suffix = case order_description.at 2 of
        IR.Nulls_First -> Sql.code " NULLS FIRST"
        IR.Nulls_Last -> Sql.code " NULLS LAST"
    (here.generate_expression dialect (order_description.first)) ++ order_suffix ++ nulls_suffix

## PRIVATE

   Builds code for a whole query.
generate_query : Internal_Dialect -> Query -> Sql.Builder
generate_query dialect query = case query of
    IR.Select columns ctx ->
        gen_exprs exprs = exprs.map (here.generate_expression dialect)
        gen_column pair = (here.generate_expression dialect pair.second).alias pair.first

        cols = Sql.join ", " (columns.map gen_column)

        from_part = here.generate_from_part dialect ctx.from_spec
        where_part = (Sql.join " AND " (gen_exprs ctx.where_filters)) . prefix_if_present " WHERE "
        group_part = (Sql.join ", " (gen_exprs ctx.groups)) . prefix_if_present " GROUP BY "

        orders = ctx.orders.map (here.generate_order dialect)
        order_part = (Sql.join ", " orders) . prefix_if_present " ORDER BY "

        (Sql.code "SELECT ") ++ cols ++ (Sql.code " FROM ") ++ from_part ++ where_part ++ group_part ++ order_part
    _ -> Error.throw "Unsupported query type."
