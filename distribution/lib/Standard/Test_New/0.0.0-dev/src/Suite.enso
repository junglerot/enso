
from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Runtime.State
from Standard.Base.Runtime import assert

import project.Group.Group
import project.Group.Group_Builder
import project.Helpers
import project.Suite_Config.Suite_Config
import project.Test_Reporter

polyglot java import java.lang.StringBuilder

type Suite_Builder
    ## PRIVATE

       Arguments:
       - builder: Vector builder that holds all the groups.
    Impl builder

    ## Add a group to the suite builder.

       Arguments:
       - name: Name of the group. When collecting multiple groups into a single suite, all the
         group names must be unique. Otherwise, a panic is thrown.
       - fn: A callback function that takes `Group_Builder` as an argument. You can call the
         `specify` method on group builder. See its docs.
       - pending: Contains a reason for why the test group should be ignored. If Nothing, the test
         is not ignored.
    group : Text -> (Group_Builder -> Any) -> Nothing
    group self (name:Text) (fn : (Group_Builder -> Any)) (pending : (Text | Nothing) = Nothing) =
        group_builder = Group_Builder.Impl
        case pending of
            Nothing ->
                fn group_builder
                group = Group.Impl name group_builder.teardown_ref.get group_builder.builder.to_vector pending
                self.builder.append group
            pend_reason : Text ->
                group = Group.Impl name group_builder.teardown_ref.get [] pend_reason
                self.builder.append group



## A testing suite that holds all the groups with test specs.

   Users are expected to build the suite via `Suite_Builder`. That is, via `Test.build` method.
type Suite
    ## PRIVATE
    Impl (groups : Vector Group)

    ## Run only tests that match the provided filters.

       A filter can be either Regex, Text, or Nothing. If Nothing, it matches all the names.
       If Text, it matches only names that contains that text as a substring.
       If a Regex, the `regex.match` method is invoked for every name.

       Note that you can specify the regex such that it matches, e.g., exactly two test spec names
       via something like `Regex.compile "(name1|name2)"`.

       Arguments:
       - group_filter: Filter for group names.
       - spec_filter: Filter for spec names.
       - should_exit: If true, executes `System.exit` at the end.
    run_with_filter : (Regex | Text | Nothing) -> (Regex | Text | Nothing) -> Nothing
    run_with_filter self group_filter=Nothing spec_filter=Nothing should_exit=True =
        config = Suite_Config.from_environment

        groups_with_matching_names = self.groups.filter group->
            case group_filter of
                regex : Regex -> (regex.match group.name) != Nothing
                text : Text -> group.name.contains text
                Nothing -> True
        pending_groups = groups_with_matching_names.filter group->
            group.pending.is_nothing.not
        groups_to_run = groups_with_matching_names.filter group->
            pending_groups.contains group . not
        assert (pending_groups.length <= groups_to_run.length)
        assert (groups_to_run.length <= groups_with_matching_names.length)
        assert (groups_with_matching_names.length <= self.groups.length)

        junit_sb_builder = if config.should_output_junit then StringBuilder.new else Nothing
        all_results = Test_Reporter.wrap_junit_testsuites config junit_sb_builder <|
            groups_to_run.flat_map group->
                results = Helpers.run_group_with_filter group spec_filter
                Test_Reporter.print_report results config junit_sb_builder
                results
        succ_tests = all_results.filter (_.is_success) . length
        failed_tests = all_results.filter (_.is_fail) . length
        skipped_tests = all_results.filter (_.is_pending) . length
        case should_exit of
            True ->
                IO.println <| succ_tests.to_text + " tests succeeded."
                IO.println <| failed_tests.to_text + " tests failed."
                IO.println <| skipped_tests.to_text + " tests skipped."
                IO.println <| pending_groups.length.to_text + " groups skipped."
                exit_code = if failed_tests > 0 then 1 else 0
                System.exit exit_code
            False ->
                failed_tests == 0

    group_names self =
        self.groups.map (_.name)

    print_all self =
        IO.println "Test Suite:"
        self.groups.each group->
            IO.println <| "  Group '" + group.name + "':"
            group.specs.each spec->
                IO.println <| "    " + spec.name
