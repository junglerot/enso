private

from Standard.Base import all
from Standard.Base.Runtime import State

import project.Clue.Clue
import project.Group.Group
import project.Spec_Result.Spec_Result
import project.Spec.Spec
import project.Suite.Suite
import project.Suite_Config.Suite_Config
import project.Test_Result.Test_Result
import project.Test_Reporter
import project.Test.Test

run_group_with_filter : Group -> (Regex|Text|Nothing) -> Vector Test_Result
run_group_with_filter (group : Group) (spec_filter : (Regex|Text|Nothing)) =
    filtered_specs = group.specs.filter spec->
        case spec_filter of
            regex : Regex -> (regex.match spec.name) != Nothing
            text : Text -> spec.name.contains text
            Nothing -> True
    run_specs_from_group filtered_specs group


run_group : Group -> Vector Test_Result
run_group (group : Group) =
    run_specs_from_group group.specs group


run_specs_from_group : Vector Spec -> Text -> Vector Test_Result
run_specs_from_group (specs : Vector Spec) (group : Group) =
    case specs.is_empty of
        True -> []
        False ->
            test_results = specs.map spec->
                pair = run_spec spec
                spec_res = pair.second
                time_taken = pair.first
                Test_Result.Impl group.name spec.name spec_res time_taken
            # Invoke the teardown of the group
            group.teardown Nothing
            test_results


## PRIVATE
run_spec : Spec -> Pair Duration Spec_Result
run_spec (spec : Spec) =
    pair = case spec.pending of
        Nothing -> Duration.time_execution <|
            State.run Clue Nothing (execute_spec_code spec.code)
        reason -> Pair.new Duration.zero (Spec_Result.Pending reason)
    pair


## PRIVATE
execute_spec_code : (Nothing -> Any) -> Spec_Result
execute_spec_code spec_code =
    recovery = Panic.recover Any <|
        result = spec_code Nothing
        result.catch Any err->
            Panic.throw (Finished_With.Error err result.get_stack_trace_text)
        Nothing
    maybeExc = case recovery of
        _ -> Spec_Result.Success
    result = maybeExc.catch Any ex->
        case ex of
            Spec_Result.Failure _ _ -> ex
            Finished_With.Error err stack_trace_text ->
                Spec_Result.Failure (Test.enrich_message_with_clue ("An unexpected error was returned: " + err.to_text)) details=stack_trace_text
            _ -> Spec_Result.Failure (Test.enrich_message_with_clue ("An unexpected panic was thrown: " + ex.to_text)) details=maybeExc.get_stack_trace_text
    result


## PRIVATE

   An error describing that a test finished with an unexpected error.
type Finished_With
    ## PRIVATE

       An error describing that a test finished with an unexpected error.

       Arguments:
       - err: The payload of the error that triggered this error.
       - stack_trace_text: A textual representation of the stack trace for the
         error.
    Error err stack_trace_text
