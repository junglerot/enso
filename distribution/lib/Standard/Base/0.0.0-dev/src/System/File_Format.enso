import project.Any.Any
import project.Data.Json.Json
import project.Data.Numbers.Integer
import project.Data.Text.Encoding.Encoding
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.File_Error.File_Error
import project.Errors.Problem_Behavior.Problem_Behavior
import project.Errors.Unimplemented.Unimplemented
import project.Function.Function
import project.Meta
import project.Metadata.Display
import project.Metadata.Widget
import project.Network.URI.URI
import project.Nothing.Nothing
import project.System.File.File
import project.System.File_Format_Metadata.File_Format_Metadata
import project.System.Input_Stream.Input_Stream
from project.Data.Boolean import Boolean, False, True
from project.Data.Json import Invalid_JSON
from project.Data.Text.Extensions import all
from project.Metadata.Choice import Option
from project.Metadata.Widget import Single_Choice

polyglot java import org.enso.base.file_format.FileFormatSPI

## PRIVATE
format_types : Vector
format_types = Vector.from_polyglot_array (FileFormatSPI.get_types False)

## PRIVATE
   Gets the first format not returning Nothing from the callback
get_format : Function -> Any | Nothing
get_format callback =
    types = format_types
    reader idx =
        if idx >= types.length then Nothing else
            format = callback (types.at idx)
            if format.is_nothing.not then format else
                @Tail_Call reader (idx + 1)
    reader 0

## Automatically detects the file format based on the file extension or mime-type.
type Auto_Detect
    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any ! File_Error
    read self file on_problems = if file.is_directory then file.list else
        reader = Auto_Detect.get_reading_format file
        if reader == Nothing then Error.throw (File_Error.Unsupported_Type file) else
            reader.read file on_problems

    ## PRIVATE
       Finds a matching format for reading the file.

       It assumes that `file` already exists.
    get_reading_format : File_Format_Metadata -> Any | Nothing
    get_reading_format file:File_Format_Metadata =
        get_format f-> f.for_read file

    ## PRIVATE
       Finds a matching format for reading the file.

       It may not assume that the `file` exists, so it must only rely on the
       file path (extension in particular), but not the contents.
    get_writing_format : File -> Any | Nothing
    get_writing_format file =
        get_format f-> f.for_file_write file

## Interface for all file formats.
type File_Format
    ## PRIVATE
       ADVANCED
       Gets all the currently available file formats.

       The available file formats are ones provided by libraries which are
       imported within the current project. Importing an new library may cause
       more entries to show up on this list.
    all : Vector
    all = [Auto_Detect] + format_types

    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any
    read self file on_problems =
        _ = [file, on_problems]
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Create the constructor code for a File_Format type.
    constructor_code : Any -> Text
    constructor_code type_obj =
        ## Workaround for JSON and Auto_Detect
        case type_obj of
            JSON_Format -> "JSON_Format"
            Auto_Detect -> "Auto_Detect"
            _ ->
                type_name = Meta.get_qualified_type_name type_obj
                ctors = Meta.meta type_obj . constructors
                is_singleton_type = ctors.length == 0
                if is_singleton_type then type_name else
                    type_name + "." + ctors.first.name

    ## PRIVATE
    default_widget : Widget
    default_widget =
        all_types = [Auto_Detect] + format_types
        make_name type_obj = type_obj.to_text.replace "_Format" "" . replace "_" " "
        Single_Choice display=Display.Always values=(all_types.map n->(Option (make_name n) (File_Format.constructor_code n)))

## A file format for plain text files.
type Plain_Text_Format
    ## A file format for plain text files with the specified encoding.

       Arguments:
       - encoding: The encoding to use.
         If the encoding is set to `Infer`, it will be inferred from metadata if
         available, falling back to UTF-8. For writing, `Infer` will also imply
         the UTF-8 encoding as the default.
    @encoding Encoding.default_widget
    Plain_Text (encoding:Encoding|Infer = Infer)

    ## PRIVATE
       If the File_Format supports reading from the file, return a configured instance.
    for_read : File_Format_Metadata -> Plain_Text_Format | Nothing
    for_read file:File_Format_Metadata =
        content_type = file.interpret_content_type
        from_content_type = content_type.if_not_nothing <|
            case content_type.base_type of
                "text/plain" ->
                    effective_encoding = content_type.encoding.if_nothing Encoding.utf_8
                    Plain_Text_Format.Plain_Text effective_encoding
                _ -> Nothing
        from_content_type.if_nothing <| case file.guess_extension of
            ".txt" -> Plain_Text_Format.Plain_Text
            ".log" -> Plain_Text_Format.Plain_Text
            _ -> Nothing

    ## PRIVATE
       If this File_Format should be used for writing to that file, return a configured instance.
    for_file_write : File -> Plain_Text_Format | Nothing
    for_file_write file = Plain_Text_Format.for_read file

    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any
    read self file on_problems =
        file.read_text (self.resolve_encoding file) on_problems

    ## PRIVATE
       Implements decoding the format from a stream.
    read_stream : Input_Stream -> File_Format_Metadata -> Any
    read_stream self stream:Input_Stream (metadata : File_Format_Metadata = File_Format_Metadata.no_information) =
        Text.from_bytes (stream.read_all_bytes) (self.resolve_encoding metadata)

    ## PRIVATE
    resolve_encoding : File_Format_Metadata -> Encoding
    resolve_encoding self (metadata : File_Format_Metadata) =
        if self.encoding != Infer then self.encoding else
            content_type = metadata.interpret_content_type
            resolved_encoding = content_type.if_not_nothing <| content_type.encoding
            resolved_encoding.if_nothing Encoding.utf_8

## A file format for reading or writing files as a sequence of bytes.
type Bytes
    ## PRIVATE
       If the File_Format supports reading from the file, return a configured instance.
    for_read : File_Format_Metadata -> Bytes | Nothing
    for_read file:File_Format_Metadata =
        case file.guess_extension of
            ".dat" -> Bytes
            _ -> Nothing

    ## PRIVATE
       If this File_Format should be used for writing to that file, return a configured instance.
    for_file_write : File -> Bytes | Nothing
    for_file_write file = Bytes.for_read file

    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any
    read self file on_problems =
        _ = [on_problems]
        file.read_bytes

    ## PRIVATE
       Implements decoding the format from a stream.
    read_stream : Input_Stream -> File_Format_Metadata -> Any
    read_stream self stream:Input_Stream (metadata : File_Format_Metadata = File_Format_Metadata.no_information) =
        _ = metadata
        stream.read_all_bytes

## A file format for reading and writing files as JSON.
type JSON_Format
    ## PRIVATE
       If the File_Format supports reading from the file, return a configured instance.
    for_read : File_Format_Metadata -> JSON_Format | Nothing
    for_read file:File_Format_Metadata =
        content_type = file.interpret_content_type
        from_content_type = content_type.if_not_nothing <|
            case content_type.base_type of
                "application/json" -> JSON_Format
                _ -> Nothing
        from_content_type.if_nothing <| case file.guess_extension of
            ".json" -> JSON_Format
            ".geojson" -> JSON_Format
            _ -> Nothing

    ## PRIVATE
       If this File_Format should be used for writing to that file, return a configured instance.
    for_file_write : File -> JSON_Format | Nothing
    for_file_write file = JSON_Format.for_read file

    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any
    read self file on_problems =
        _ = [on_problems]
        text = file.read_text
        Json.parse text . catch Invalid_JSON error->
            Error.throw (File_Error.Corrupted_Format file error.to_display_text error)

    ## PRIVATE
       Implements decoding the format from a stream.
    read_stream : Input_Stream -> File_Format_Metadata -> Any
    read_stream self stream:Input_Stream (metadata : File_Format_Metadata) =
        _ = metadata
        Text.from_bytes (stream.read_all_bytes) Encoding.utf_8 . parse_json

## A setting to infer the default behaviour of some option.
type Infer
