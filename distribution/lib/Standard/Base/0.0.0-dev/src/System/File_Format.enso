import project.Any.Any
import project.Data.Json.Json
import project.Data.Text.Encoding.Encoding
import project.Data.Text.Extensions
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.File_Error.File_Error
import project.Errors.Problem_Behavior.Problem_Behavior
import project.Errors.Unimplemented.Unimplemented
import project.Function.Function
import project.Network.HTTP.Response.Response
import project.Network.URI.URI
import project.Nothing.Nothing
import project.System.File.File

from project.Data.Boolean import Boolean, True, False
from project.Data.Json import Invalid_JSON

polyglot java import org.enso.base.file_format.FileFormatSPI

## PRIVATE
format_types : Vector
format_types = Vector.from_polyglot_array (FileFormatSPI.get_types False)

## PRIVATE
   Gets the first format not returning Nothing from the callback
get_format : Function -> Any | Nothing
get_format callback =
    types = format_types
    reader idx =
        if idx >= types.length then Nothing else
            format = callback (types.at idx)
            if format.is_nothing.not then format else
                @Tail_Call reader (idx + 1)
    reader 0

type Auto_Detect
    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any ! File_Error
    read self file on_problems =
        reader = Auto_Detect.get_format file
        if reader == Nothing then Error.throw (File_Error.Unsupported_Type file) else
            reader.read file on_problems

    ## PRIVATE
    get_format : File -> Any | Nothing
    get_format file =
        get_format f-> f.for_file file

    ## PRIVATE
    get_web_parser : Text -> URI -> Any | Nothing
    get_web_parser content_type uri =
        get_format f-> f.for_web content_type uri

type File_Format
    ## Gets all the currently available file formats.

       The available file formats are ones provided by libraries which are
       imported within the current project. Importing an new library may cause
       more entries to show up on this list.
    all : Vector
    all = [Auto_Detect] + format_types

    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any
    read _ _ = Unimplemented.throw "This is an interface only."

type Plain_Text_Format
    Plain_Text (encoding:Encoding=Encoding.utf_8)

    ## PRIVATE
       If the File_Format supports reading from the file, return a configured instance.
    for_file : File -> Plain_Text_Format | Nothing
    for_file file =
        case file.extension of
            ".txt" -> Plain_Text_Format.Plain_Text
            ".log" -> Plain_Text_Format.Plain_Text
            _ -> Nothing

    ## PRIVATE
       If the File_Format supports reading from the web response, return a configured instance.
    for_web : Text -> URI -> Plain_Text_Format | Nothing
    for_web content_type _ =
        parts = content_type.split ";" . map .trim
        case parts.first of
            "text/plain" ->
                charset_part = parts.find if_missing=Nothing (x->x.starts_with "charset=")
                encoding = if charset_part.is_nothing then Encoding.utf_8 else
                    parsed = Encoding.from_name (charset_part.drop 8)
                    if parsed.is_error then Encoding.utf_8 else parsed
                Plain_Text_Format.Plain_Text encoding
            _ -> Nothing

    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any
    read self file on_problems =
        file.read_text self.encoding on_problems

    ## PRIVATE
       Implements the `Data.parse` for this `File_Format`
    read_web : Response -> Any
    read_web self response =
        Text.from_bytes response.body.bytes self.encoding

type Bytes
    ## PRIVATE
       If the File_Format supports reading from the file, return a configured instance.
    for_file : File -> Bytes | Nothing
    for_file file =
        case file.extension of
            ".dat" -> Bytes
            _ -> Nothing

    ## PRIVATE
       If the File_Format supports reading from the web response, return a configured instance.
       As `Bytes`, does not support reading from the web returns `Nothing`.
    for_web : Text -> URI -> Bytes | Nothing
    for_web _ _ = Nothing

    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any
    read self file _ =
        file.read_bytes

type JSON_File
    ## PRIVATE
       If the File_Format supports reading from the file, return a configured instance.
    for_file : File -> JSON_File | Nothing
    for_file file =
        case file.extension of
            ".json" -> JSON_File
            ".geojson" -> JSON_File
            _ -> Nothing

    ## PRIVATE
       If the File_Format supports reading from the web response, return a configured instance.
    for_web : Text -> URI -> JSON_File | Nothing
    for_web content_type _ =
        first = content_type.split ';' . first . trim
        case first of
            "application/json" -> JSON_File
            _ -> Nothing

    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any
    read self file _ =
        text = file.read_text
        Json.parse text . catch Invalid_JSON error->
            Error.throw (File_Error.Corrupted_Format file error.to_display_text error)

    ## PRIVATE
       Implements the `Data.parse` for this `File_Format`
    read_web : Response -> Any
    read_web self response =
        response.body.parse_json

## A setting to infer the default behaviour of some option.
type Infer
