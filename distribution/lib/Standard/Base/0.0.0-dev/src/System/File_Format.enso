import project.Any.Any
import project.Data.Text.Encoding.Encoding
import project.Data.Vector.Vector
import project.Error.Error
import project.Error.File_Error.File_Error
import project.Error.Problem_Behavior.Problem_Behavior
import project.Error.Unimplemented.Unimplemented
import project.Nothing.Nothing
import project.System.File.File

from project.Data.Boolean import Boolean, True, False

polyglot java import org.enso.base.file_format.FileFormatSPI

## PRIVATE
format_types : Vector
format_types = Vector.from_polyglot_array (FileFormatSPI.get_types False)

type Auto_Detect
    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any ! File_Error
    read self file on_problems =
        reader = Auto_Detect.get_format file
        if reader == Nothing then Error.throw (File_Error.Unsupported_Type file) else
            reader.read file on_problems

    ## PRIVATE
    get_format : File -> Any | Nothing
    get_format file =
        reader idx =
            if idx >= format_types.length then Nothing else
                format = format_types.at idx . for_file file
                if format.is_nothing.not then format else
                    @Tail_Call reader (idx + 1)
        reader 0

type File_Format
    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any
    read _ _ = Unimplemented.throw "This is an interface only."

type Plain_Text_Format
    Plain_Text (encoding:Encoding=Encoding.utf_8)

    ## If the File_Format supports reading from the file, return a configured instance.
    for_file : File -> Plain_Text_Format | Nothing
    for_file file =
        case file.extension of
            ".txt" -> Plain_Text_Format.Plain_Text
            ".log" -> Plain_Text_Format.Plain_Text
            _ -> Nothing

    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any
    read self file on_problems =
        file.read_text self.encoding on_problems

type Bytes
    ## If the File_Format supports reading from the file, return a configured instance.
    for_file : File -> Bytes | Nothing
    for_file file =
        case file.extension of
            ".dat" -> Bytes
            _ -> Nothing

    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any
    read self file _ =
        file.read_bytes

## A setting to infer the default behaviour of some option.
type Infer
