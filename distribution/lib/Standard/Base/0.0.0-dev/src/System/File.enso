from Standard.Base import all

import Standard.Base.System.File.Option
import Standard.Base.System.File.Existing_File_Behavior
import Standard.Base.Data.Text.Matching_Mode
import Standard.Base.Data.Text.Text_Sub_Range
from Standard.Base.Data.Text.Encoding as Encoding_Module import Encoding
from Standard.Base.Error.Problem_Behavior as Problem_Behavior_Module import Problem_Behavior, Report_Warning
from Standard.Base.Runtime.Resource import all

export Standard.Base.System.File.Option

polyglot java import java.io.InputStream as Java_Input_Stream
polyglot java import java.io.IOException
polyglot java import java.nio.file.AccessDeniedException
polyglot java import java.nio.file.NoSuchFileException
polyglot java import java.nio.file.FileAlreadyExistsException
polyglot java import java.nio.file.FileSystems
polyglot java import java.nio.file.Path
polyglot java import java.nio.file.StandardCopyOption

## ALIAS New File

   Creates a new file object, pointing to the given path.

   Arguments:
   - path: The path to the file that you want to create, or a file itself. The
     latter is a no-op.

   > Example
     Create a new file pointing to the `data.csv` file in the project directory.

         import Standard.Base.System.File
         import Standard.Examples

         example_new = File.new Examples.csv_path
new : (Text | File) -> File
new path =
  case path of
    Text -> here.get_file path
    File -> path
    _    -> Error.throw (Illegal_Argument_Error "new file should be either a File or a Text")

## Open and reads all bytes in the file at the provided `path` into a byte vector.

   Arguments:
   - path: The path of the file to open and read the contents of. It will
     accept a textual path or a file.

   > Example
     Read all of the bytes in the file.

         import Standard.Examples

         example_read_bytes = File.read_bytes Examples.csv
read_bytes : (Text | File) -> Vector.Vector ! File_Error
read_bytes path =
    file = here.new path
    file.read_bytes

## Open and read the file at the provided `path`.

   Arguments:
   - path: The path of the file to open and read the contents of. It will
     accept a textual path or a file.
   - encoding: The text encoding to decode the file with. Defaults to UTF-8.
   - on_problems: Specifies the behavior when a problem occurs during the
     function.
     By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.

   ? Module or Instance?
     If you have a variable `file` of type `File`, we recommend calling the
     `.read_text` method on it directly, rather than using
     `File.read_text file`. The later, however, will still work.

   > Example
     Read the `data.csv` file in the project directory's `data` directory. You
     will need to create the file `data.csv` manually in that directory.

         import Standard.Base.System.File
         import Standard.Examples

         example_read = File.read_text Examples.csv_path
read_text : (Text | File) -> Encoding -> Problem_Behavior -> Text
read_text path (encoding=Encoding.utf_8) (on_problems=Report_Warning) =
    file = here.new path
    file.read_text encoding on_problems

## ALIAS Current Directory

   Returns the current working directory (CWD) of the current program.

   > Example
     Get the program's current working directory.

         import Standard.Base.System.File

         example_cwd = File.current_directory
current_directory : File
current_directory = here.get_cwd

## ALIAS Home Directory

   Returns the home directory of the current user.

   > Example
     Get the current user's home directory.

         import Standard.Base.System.File

         example_home = File.home
home : File
home = @Builtin_Method "File.home"

## Lists files contained in the provided directory.

   Arguments:
   - name_filter: A glob pattern that can be used to filter the returned files.
     If it is not specified, all files are returned.
   - recursive: Specifies whether the returned list of files should include also
     files from the subdirectories. If set to `False` (the default), only the
     immediate children of the listed directory are considered.

   The `name_filter` can contain the following special characters:
   - `"?"` - which matches a single filename character (so it will not match a
     `"/"`).
   - `"*"` - which matches any number of characters, but again does not cross
     directories.
   - `"**"` - which matches any number of characters and can cross directories.
   - `"\"` - can be used to escape the characters with special meaning; to get a
     single backslash, you need to specify it twice; you also need to keep in
     mind that the interpolating string literal also uses `"\"` as an escape
     sequence, so you need to type `'\\\\'` to get a single backslash for the
     glob pattern, unless you use the raw strings, where you only need to escape
     once: `"\\"`.
   - Brackets can be used to match exactly one character from some set of
     characters. For example `"[xy]"` matches `"x"` or `"y"`. Character ranges
     can also be specified: `"[a-z]"` matches any character from `"a"` to `"z"`.
     An exclamation mark can be used to negate the match, i.e. `"[!xz]"` will
     match any characters except for `"x"` and `"z"`. Moreover the ranges and
     single characters can be used together, so for example `"[a-cxy]"` will
     match `"a"`, `"b"`, `"c"`, `"x"` or `"y"`. Within the brackets, the special
     characters `"*"`, `"?"` and `"\"` stand for themselves instead of their
     special meanings.
   - Braces allow to specify multiple patterns (separated with a comma), one of
     which must be matched. For example: `"{abc,x*}"` will match either the name
     `"abc"` or any name starting with `"x"`. The groups cannot be nested.

   Keep in mind that if `recursive` is set to True and a `name_filter` is used,
   the function will return files from subdirectories only if the set
   `name_filter` allows crossing directories. So even with `recursive=True` a
   filter `"*.txt"` will only return files that are immediate children of the
   listed directory, to list files recursively you need to use a filter like
   `"**.txt"` or `"*/*"` (which will match only files that are exactly one
   directory down from the listed directory) or no filter at all.

   > Example
     List all files with `.md` extension in the example directory and any of its
     subdirectories.

         import Standard.Examples

         example_list_files =
             File.list Examples.data_dir name_filter="**.md" recursive=True
list : (File | Text) -> Text -> Boolean -> Vector.Vector File
list directory name_filter=Nothing recursive=False =
    here.new directory . list name_filter=name_filter recursive=recursive

type File

    ## PRIVATE

       A type representing a file.
    @Builtin_Type
    type File

    ## Creates a new output stream for this file and runs the specified action
       on it.

       Arguments:
       - open_options: A vector of `File.Option` objects determining how to open
         the stream. These options set the access properties of the stream.
       - action: A function that operates on the output stream and returns some
         value. The value is returned from this method.

       The created stream is automatically closed when `action` returns (even
       if it returns exceptionally).

       > Example
         Perform an action on an output stream with the file open for writing.

             import Standard.Base.System.File.Option
             import Standard.Examples

             example_with_stream =
                 file = Examples.scratch_file
                 action = stream -> stream.write_bytes "hello".utf_8
                 file.with_output_stream [Option.Create, Option.Write] action
    with_output_stream : Vector.Vector -> (Output_Stream -> Any ! File_Error) -> Any ! File_Error
    with_output_stream open_options action =
        Resource.bracket (this.new_output_stream open_options) (_.close) action

    ## PRIVATE

    ## Creates a new output stream for this file. Recommended to use
       `File.with_output_stream` instead, which does resource management.

       Arguments:
       - options: A vector of `File.Option` objects determining how to open
         the stream. These options set the access properties of the stream.
    output_stream : Vector.Vector -> Output_Stream
    output_stream options = @Builtin_Method "File.output_stream"

    ## PRIVATE

    ## Creates a new input stream for this file. Recommended to use
       `File.with_input_stream` instead, which does resource management.

       Arguments:
       - open_options: A vector of `File.Option` objects determining how to open
         the stream. These options set the access properties of the stream.
    input_stream : Vector.Vector -> Input_Stream
    input_stream options = @Builtin_Method "File.input_stream"

    ## Creates a new input stream for this file and runs the specified action
       on it.

       Arguments:
       - open_options: A vector of `File.Option` objects determining how to open
         the stream. These options set the access properties of the stream.
       - action: A function that operates on the input stream and returns some
         value. The value is returned from this method.

       The created stream is automatically closed when `action` returns (even
       if it returns exceptionally).

       > Example
         Perform an action on an input stream with the file open for reading.

             import Standard.Base.System.File.Option
             import Standard.Examples

             example_with_stream =
                 file = Examples.csv
                 action = stream -> stream.read_all_bytes
                 file.with_input_stream [Option.Create, Option.Read] action
    with_input_stream : Vector.Vector -> (Input_Stream -> Any ! File_Error) -> Any ! File_Error
    with_input_stream open_options action =
        Resource.bracket (this.new_input_stream open_options) (_.close) action

    ## Reads all bytes in this file into a byte vector.

       > Example
         Read all of the bytes in the file.

             import Standard.Examples

             example_read_bytes = Examples.csv.read_bytes
    read_bytes : Vector.Vector ! File_Error
    read_bytes =
        opts = [Option.Read]
        this.with_input_stream opts (_.read_all_bytes)

    ## Reads the whole file into a `Text`, with specified encoding.

       Arguments:
       - encoding: The text encoding to decode the file with. Defaults to UTF-8.
       - on_problems: Specifies the behavior when a problem occurs during the
         function.
         By default, a warning is issued, but the operation proceeds.
         If set to `Report_Error`, the operation fails with a dataflow error.
         If set to `Ignore`, the operation proceeds without errors or warnings.

       > Example
         Read the contents of the file.

             import Standard.Examples

             example_read = Examples.csv.read
    read_text : Encoding -> Problem_Behavior -> Text ! File_Error
    read_text (encoding=Encoding.utf_8) (on_problems=Report_Warning) =
        bytes = this.read_bytes
        Text.from_bytes bytes encoding on_problems

    ## Appends a number of bytes at the end of this file.

       Arguments:
       - contents: A vector of bytes to append to the file.

       > Example
         Append the bytes of the text "hello" to a file.

             import Standard.Examples

             example_append_bytes = Examples.scratch_file.append_bytes "hello".utf_8
    append_bytes : Vector.Vector -> Nothing ! File_Error
    append_bytes contents =
        opts = [Option.Append, Option.Create]
        this.with_output_stream opts (_.write_bytes contents)

    ## Writes a number of bytes into this file, replacing any existing contents.

       Arguments:
       - contents: The vector of bytes to write into the file.

       If the file does not exist, it will be created.

       > Example
         Write the bytes of the text "hello" to a file.

             import Standard.Examples

             example_write_bytes = Examples.scratch_file.write_bytes "hello".utf_8
    write_bytes : Vector.Vector -> Nothing ! File_Error
    write_bytes contents =
        opts = [Option.Write, Option.Create, Option.Truncate_Existing]
        this.with_output_stream opts (_.write_bytes contents)
        Nothing

    ## Join two path segments together.

       Arguments:
       - subpath: The path to join to the path of `this`.

       > Example
         Concatenate two file path segments.

             import Standard.Examples

             example_append = Examples.data_dir / "scratch_file"
    / : (Text | File) -> File
    / subpath = this.resolve subpath

    resolve : (Text | File) -> File
    resolve = @Builtin_Method "File.resolve"

    ## A File to JSON conversion.

       > Example
         Get a JSON representation of a file.

             import Standard.Examples

             example_to_json = Examples.csv.to_json
    to_json : Json.Object
    to_json = Json.from_pairs [["type", "File"], ["path", this.path]]

    ## Checks whether the file exists.

       > Example
         Check if a file exists.

             import Standard.Examples

             example_exists = Examples.csv.exists
    exists : Boolean
    exists = @Builtin_Method "File.exists"

    ## Checks whether the file exists and is a directory.

       > Example
         Check if a file is a directory.

             import Standard.Examples

             example_is_directory = Examples.csv.is_directory
    is_directory : Boolean
    is_directory = @Builtin_Method "File.is_directory"

    ## Creates the directory represented by this file if it did not exist.

       It also creates parent directories if they did not exist.

       > Example
         Create a directory on the file system.

             import Standard.Examples

             example_is_directory =
                (Examples.data_dir / "my_directory") . create_directory
    create_directory : Nothing
    create_directory = @Builtin_Method "File.create_directory"

    ## Checks whether the file exists and is a regular file.

       ? Regular Files
         A regular file is one that does not have any special meaning to the
         operating system. Examples of files that are not regular are symlinks,
         pipes, devices, sockets and directories.

       > Example
         Check if a file is regular.

             import Standard.Examples

             example_is_regular_file = Examples.csv.is_regular_file
    is_regular_file : Boolean
    is_regular_file = @Builtin_Method "File.is_regular_file"

    ## Resolves the parent filesystem node of this file.

       > Example
         Get the parent file of a file.

             import Standard.Examples

             example_parent = Examples.csv.parent
    parent : File
    parent = @Builtin_Method "File.parent"

    ## Returns the path of this file.

       > Example
         Get the path from a file.

             import Standard.Examples

             example_path = Examples.csv.path
    path : Text
    path = @Builtin_Method "File.path"

    ## Returns the name of this file.

       > Example
         Get the name from a file.

             import Standard.Examples

             example_name = Examples.csv.name
    name : Text
    name = @Builtin_Method "File.name"

    ## Returns the extension of the file.

       > Example
         Get the extension of a file.

             import Standard.Examples

             Examples.csv.extension == ".csv"
    extension : Text
    extension =
        name = this.name
        last_dot = name.location_of "." mode=Matching_Mode.last
        if last_dot.is_nothing then "" else
            extension = name.drop (Text_Sub_Range.First last_dot.start)
            if extension == "." then "" else extension

    ## Converts this file to an equivalent file represented with an absolute
       path.

       > Example
         Convert a file to an equivalent absolute path.

             import Standard.Examples

             example_absolute = Examples.csv.absolute
    absolute : File
    absolute = @Builtin_Method "File.absolute"

    ## Checks is this file's path is absolute.

       > Example
         Check if a file is represented by an absolute path.

             import Standard.Examples

             example_is_absolute = Examples.csv.is_absolute
    is_absolute : Boolean
    is_absolute = @Builtin_Method "File.is_absolute"

    ## Normalizes the filepath.

       > Example
         Normalize a file path.

             import Standard.Examples

             example_normalize = Examples.csv.normalize
    normalize : File
    normalize = @Builtin_Method "File.normalize"

    ## Checks if this file has the same `path` as `that`.

       > Example
         Check if two files are equivalent.

             import Standard.Examples

             example_eq = Examples.csv == Examples.scratch_file
    == : File -> Boolean
    == that = @Builtin_Method "File.=="

    ## Deletes the file.

       If the file is a directory, it must be empty, otherwise a `Panic` will
       be thrown.

       > Example
         Create a file and then delete it.

             import Standard.Examples

             example_delete =
                 file = Examples.data_dir / "my_file"
                 file.write_text "hello"
                 file.delete
    delete : Nothing ! File_Error
    delete =
        here.handle_java_exceptions this this.delete_builtin

    ## PRIVATE

       Builtin method that deletes the file.
       Recommended to use `File.delete` instead which handles potential exceptions.
    delete_builtin : Nothing
    delete_builtin = @Builtin_Method "File.delete"

    ## Moves the file to the specified destination.

       Arguments:
       - destination: the destination to move the file to.
       - replace_existing: specifies if the operation should proceed if the
         destination file already exists. Defaults to `True`.
    move_to : File -> Boolean -> Nothing ! File_Error
    move_to destination replace_existing=True =
        here.handle_java_exceptions this <| case replace_existing of
            True ->
              copy_options = Array.new_1 StandardCopyOption.REPLACE_EXISTING
              this.move_builtin destination copy_options
            False -> this.move_builtin destination Array.empty

    ## PRIVATE

       Builtin method that moves this file to a new destination.
       Recommended to use `File.move_to` instead which handles potential exceptions.
    move_builtin : File -> Array Any -> Nothing
    move_builtin destination copy_options = @Builtin_Method "File.move_builtin"

    ## Deletes the file if it exists on disk.

       If the file is a directory, it must be empty, otherwise a `Panic` will
       be thrown.

       > Example
         Delete a file if it exists on disk.

             import Standard.Examples

             example_del_if_exists = Examples.scratch_file.delete_if_exists
    delete_if_exists : Nothing ! File_Error
    delete_if_exists = if this.exists then this.delete else Nothing

    ## ADVANCED

       Returns a new input stream for this file.

       Arguments:
       - open_options: A vector of `File.Option` objects determining how to open
         the stream. These options set the access properties of the stream.

       The returned stream should be closed as soon as it is not used anymore.
       The `with_input_stream` method should be preferred whenever possible.
    new_input_stream : Vector.Vector -> Input_Stream ! File_Error
    new_input_stream open_options =
        opts = open_options . map (_.to_java) . to_array
        stream = here.handle_java_exceptions this (this.input_stream opts)
        resource = Managed_Resource.register stream here.close_stream
        Input_Stream this resource

    ## ADVANCED

       Returns a new output stream for this file.

       Arguments:
       - open_options: A vector of `File.Option` objects determining how to open
         the stream. These options set the access properties of the stream.

       The returned stream should be closed as soon as it is not used anymore.
       The `with_output_stream` method should be preferred whenever possible.
    new_output_stream : Vector.Vector -> Output_Stream ! File_Error
    new_output_stream open_options =
        opts = open_options . map (_.to_java) . to_array
        stream = here.handle_java_exceptions this <|
            this.output_stream opts
        resource = Managed_Resource.register stream here.close_stream
        Output_Stream this resource

    ## Lists files contained in the directory denoted by this file.

       Arguments:
       - name_filter: A glob pattern that can be used to filter the returned
         files. If it is not specified, all files are returned.
       - recursive: Specifies whether the returned list of files should include
         also files from the subdirectories. If set to `False` (the default),
         only the immediate children of the listed directory are considered.

       The `name_filter` can contain the following special characters:
       - `"?"` - which matches a single filename character (so it will not match
         a `"/"`).
       - `"*"` - which matches any number of characters, but again does not
         cross directories.
       - `"**"` - which matches any number of characters and can cross
         directories.
       - `"\"` - can be used to escape the characters with special meaning; to
         get a single backslash, you need to specify it twice; you also need to
         keep in mind that the interpolating string literal also uses `"\"` as
         an escape sequence, so you need to type `'\\\\'` to get a single
         backslash for the glob pattern, unless you use the raw strings, where
         you only need to escape once: `"\\"`.
       - Brackets can be used to match exactly one character from some set of
         characters. For example `"[xy]"` matches `"x"` or `"y"`. Character
         ranges can also be specified: `"[a-z]"` matches any character from
         `"a"` to `"z"`. An exclamation mark can be used to negate the match,
         i.e. `"[!xz]"` will match any characters except for `"x"` and `"z"`.
         Moreover the ranges and single characters can be used together, so for
         example `"[a-cxy]"` will match `"a"`, `"b"`, `"c"`, `"x"` or `"y"`.
         Within the brackets, the special characters `"*"`, `"?"` and `"\"`
         stand for themselves instead of their special meanings.
       - Braces allow to specify multiple patterns (separated with a comma), one
         of which must be matched. For example: `"{abc,x*}"` will match either
         the name `"abc"` or any name starting with `"x"`. The groups cannot be
         nested.

       Keep in mind that if `recursive` is set to True and a `name_filter` is
       used, the function will return files from subdirectories only if the set
       `name_filter` allows crossing directories. So even with `recursive=True`
       a filter `"*.txt"` will only return files that are immediate children of
       the listed directory, to list files recursively you need to use a filter
       like `"**.txt"` or `"*/*"` (which will match only files that are exactly
       one directory down from the listed directory) or no filter at all.

       > Example
         List all files with ".md" or ".txt" extension in the example directory
         and any of its subdirectories.

             import Standard.Examples

             example_list_md_files =
                 Examples.data_dir.list name_filter="**.{txt,md}" recursive=True
    list : Text -> Boolean -> Vector.Vector File
    list name_filter=Nothing recursive=False =
        all_files = case recursive of
            True -> here.list_descendants this
            False -> this.list_immediate_children
        filtered = case name_filter of
            Nothing -> all_files
            _ ->
                fs = FileSystems.getDefault
                matcher = fs.getPathMatcher "glob:"+name_filter
                all_files.filter file->
                    pathStr = this.relativize file . path
                    matcher.matches (Path.of pathStr)
        filtered

    ## UNSTABLE

       Checks if `this` is a child path of `other`.
    is_child_of : File -> Boolean
    is_child_of other = this.starts_with other

    ## UNSTABLE

       Transforms `child` to a relative path with respect to `this`.
    relativize : File -> Boolean
    relativize child = @Builtin_Method "File.relativize"


    ## PRIVATE

       Utility function that lists immediate children of a directory.
    list_immediate_children : Vector.Vector File
    list_immediate_children = Vector.Vector (this.list_immediate_children_array)

    ## PRIVATE

       Utility function that lists immediate children of a directory.
    list_immediate_children_array : Array File
    list_immediate_children_array = @Builtin_Method "File.list_immediate_children_array"

    ## PRIVATE

       Return the absolute path of this File
    to_text : Text
    to_text = this.absolute . path

## An output stream, allowing for interactive writing of contents into an
   open file.
type Output_Stream

    ## PRIVATE

       An output stream, allowing for interactive writing of contents into an
       open file.

       Arguments:
       - file: The file which the output stream will write into.
       - stream_resource: The internal resource that represents the underlying
         stream.
    type Output_Stream file stream_resource

    ## ADVANCED

       Writes a vector of bytes into the file at the current stream position.

       Arguments:
       - contents: A vector of bytes to write into the file.

       > Example
         Write some bytes through a stream.

             import Standard.Base.System.File.Option
             import Standard.Examples

             example_write_bytes =
                 file = Examples.scratch_file
                 out_stream = file.new_output_stream [Option.Create, Option.Write]
                 out_stream.write_bytes "hello".utf_8
                 out_stream.close
    write_bytes : Vector.Vector -> Nothing ! File_Error
    write_bytes contents = this.stream_resource . with java_stream->
        here.handle_java_exceptions this.file <|
            java_stream.write contents.to_array
            java_stream.flush
        Nothing

    ## ADVANCED

       Closes this stream.

       Even though Streams are closed automatically upon garbage collection, it
       is still advised to close streams manually if they are not used within
       a bracket pattern.

       > Example
         Open and close a stream.

             import Standard.Base.System.File.Option
             import Standard.Examples

             example_write_bytes =
                 file = Examples.scratch_file
                 out_stream = file.new_output_stream [Option.Create]
                 out_stream.close
    close : Nothing
    close = this.stream_resource . finalize

## An input stream, allowing for interactive reading of contents from an open
   file.
type Input_Stream

    ## PRIVATE

       An input stream, allowing for interactive reading of contents from an open
       file.

       Arguments:
       - file: The file from which the stream will read.
       - stream_resource: The internal resource that represents the underlying
         stream.
    type Input_Stream file stream_resource

    ## ADVANCED

       Reads all the bytes in this file into a vector of bytes.

       > Example
         Read all of the bytes from a file using a stream.

             import Standard.Base.System.File.Option
             import Standard.Examples

             example_read_all =
                 file = Examples.csv
                 in_stream = file.new_input_stream [Option.Read]
                 bytes = in_stream.read_all_bytes
                 in_stream.close
                 bytes
    read_all_bytes : Vector.Vector ! File_Error
    read_all_bytes = this.stream_resource . with java_stream->
        here.handle_java_exceptions this.file <|
            Vector.Vector java_stream.readAllBytes

    ## ADVANCED

       Reads _up to_ the provided number of bytes from the stream.

       Arguments:
       - n: The number of bytes to read from the file.

       Makes a best-effort to read as many bytes as provided, however fewer
       bytes may be read, if end of stream is encountered.

       The length of the returned vector is the same as the number of bytes
       read.

       > Example
         Read 10 of the bytes from a file using a stream.

             import Standard.Base.System.File.Option
             import Standard.Examples

             example_read_all =
                 file = Examples.csv
                 in_stream = file.new_input_stream [Option.Read]
                 bytes = in_stream.read_n_bytes 10
                 in_stream.close
                 bytes
    read_n_bytes : Integer -> Vector.Vector ! File_Error
    read_n_bytes n = this.stream_resource . with java_stream->
        here.handle_java_exceptions this.file <|
            bytes = java_stream.readNBytes n
            Vector.Vector bytes

    ## ADVANCED

       Reads the next byte from the stream.

       The returned value is an integer in the range 0-255 representing the
       next byte of input, or -1 if end of stream is reached.

       > Example
         Read byte from a file using a stream.

             import Standard.Base.System.File.Option
             import Standard.Examples

             example_read_all =
                 file = Examples.csv
                 in_stream = file.new_input_stream [Option.Read]
                 bytes = in_stream.read_byte
                 in_stream.close
                 bytes
    read_byte : Integer ! File_Error
    read_byte = this.stream_resource . with java_stream->
        here.handle_java_exceptions this.file <|
            java_stream.read

    ## ADVANCED

       Closes this stream.

       Even though Streams are closed automatically upon garbage collection, it
       is still advised to close streams manually if they are not used within
       a bracket pattern.

       > Example
         Open and close a stream.

             import Standard.Base.System.File.Option
             import Standard.Examples

             example_read_all =
                 file = Examples.csv
                 in_stream = file.new_input_stream [Option.Read]
                 in_stream.close
    close : Nothing
    close = this.stream_resource . finalize

    ## PRIVATE

       Exposes operations on the underlying Java input stream.

       Arguments:
       - f: Applies a function over the internal java stream.

       Useful when integrating with polyglot functions requiring an
       `InputStream` as an argument.
    with_java_stream : (Java_Input_Stream -> Any) -> Any
    with_java_stream f = this.stream_resource . with f


## PRIVATE

   Utility method for running an action with Java exceptions mapping.
handle_java_exceptions file ~action =
    Panic.catch IOException action caught_panic->
        here.wrap_io_exception file caught_panic.payload.cause

## PRIVATE

   Converts a Java `IOException` into its Enso counterpart.
wrap_io_exception file io_exception =
    if Java.is_instance io_exception NoSuchFileException then Error.throw (File_Not_Found file) else
        if Java.is_instance io_exception FileAlreadyExistsException then Error.throw (File_Already_Exists_Error file) else
            if Java.is_instance io_exception AccessDeniedException then Error.throw (Io_Error file "You do not have permission to access the file") else
                Error.throw (Io_Error file "An IO error has occurred: "+io_exception.getMessage)

## PRIVATE

   Utility method for closing primitive Java streams. Provided to avoid
   accidental scope capture with `Managed_Resource` finalizers.
close_stream : Any -> Nothing
close_stream stream =
    stream.close
    Nothing

type File_Error

    ## An error that indicates that the requested file does not exist.

       Arguments:
       - file: The file that doesn't exist.
    type File_Not_Found file

    ## Indicates that a destination file already exists.
    type File_Already_Exists_Error file

    ## A generic IO error.

       Arguments:
       - file: The file that couldn't be read.
       - message: The message for the error.
    type Io_Error file message

    ## UNSTABLE

       Convert the File error to a human-readable format.
    to_display_text : Text
    to_display_text = case this of
        File_Not_Found  file -> "The file at " + file.path + " does not exist."
        Io_Error file msg -> msg.to_text + " (" + file.path + ")."
        File_Already_Exists_Error file -> "The file at "+file.path+" already exists."



## PRIVATE

   Utility function that returns all descendants of the provided file, including
   that file itself. If the file is not a directory, a list containing only
   itself is returned.
list_descendants : File -> Vector.Vector File
list_descendants file =
    builder = Vector.new_builder
    go file =
        builder.append file
        case file.is_directory of
            True ->
                children = file.list_immediate_children
                children.each go
            False -> Nothing
    go file
    builder.to_vector

## PRIVATE

   Gets a file corresponding to the current working directory of the
   program.
get_cwd : File
get_cwd = @Builtin_Method "File.get_cwd"

## PRIVATE

   Gets a file corresponding to the provided path.

   Arguments:
   - path: The path to obtain a file at.
get_file : Text -> File
get_file path = @Builtin_Method "File.get_file"

## Writes (or appends) the specified bytes to the specified file.
   The behavior specified in the `existing_file` parameter will be used if the
   file exists.

   Arguments:
   - path: The path to the target file.
   - encoding: The encoding to use when writing the file.
   - on_existing_file: Specifies how to proceed if the file already exists.
   - on_problems: Specifies how to handle any encountered problems.

   If a character cannot be converted to a byte, an `Encoding_Error` is raised.
   If `on_problems` is set to `Report_Warning` or `Ignore`, it is replaced with
   a substitute (either � (if Unicode) or ? depending on the encoding).
   Otherwise, the process is aborted.
   If the path to the parent location cannot be found or the filename is
   invalid, a `File_Not_Found` is raised.
   If another error occurs, such as access denied, an `Io_Error` is raised.
   Otherwise, the file is created with the encoded text written to it.
Text.write : (File|Text) -> Encoding -> Existing_File_Behavior -> Problem_Behavior -> Nothing ! Encoding_Error | Illegal_Argument_Error | File_Not_Found | Io_Error | File_Already_Exists_Error
Text.write path encoding=Encoding.utf_8 on_existing_file=Existing_File_Behavior.Backup on_problems=Report_Warning =
    bytes = this.bytes encoding on_problems
    file = here.new path
    on_existing_file.write file stream->
        stream.write_bytes bytes
