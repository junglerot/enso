import project.Any.Any
import project.Data.Array.Array
import project.Data.Index_Sub_Range.Index_Sub_Range
import project.Data.Json.Json
import project.Data.Numbers.Integer
import project.Data.Text.Encoding.Encoding
import project.Data.Text.Extensions
import project.Data.Text.Matching_Mode
import project.Data.Text.Text
import project.Data.Time.Time_Of_Day.Time_Of_Day
import project.Data.Vector.Vector
import project.Error.Error
import project.Error.Encoding_Error.Encoding_Error
import project.Error.File_Error.File_Error
import project.Error.Illegal_Argument.Illegal_Argument
import project.Error.Problem_Behavior.Problem_Behavior
import project.Meta
import project.Nothing.Nothing
import project.Panic.Panic
import project.Runtime.Managed_Resource.Managed_Resource
import project.System.File.File_Access.File_Access
import project.System.File_Format.Auto_Detect
import project.System.File_Format.File_Format
import project.System.File.File_Permissions.File_Permissions

from project.Data.Boolean import Boolean, True, False

polyglot java import org.enso.base.Encoding_Utils
polyglot java import java.io.InputStream as Java_Input_Stream
polyglot java import java.io.OutputStream as Java_Output_Stream
polyglot java import java.nio.file.FileSystems
polyglot java import java.nio.file.Path
polyglot java import java.nio.file.StandardCopyOption
polyglot java import java.time.ZonedDateTime

@Builtin_Type
type File
    ## ALIAS New File

       Creates a new file object, pointing to the given path.

       Arguments:
       - path: The path to the file that you want to create, or a file itself. The
         latter is a no-op.

       > Example
         Create a new file pointing to the `data.csv` file in the project directory.

             import Standard.Base.System.File.File
             import Standard.Examples

             example_new = File.new Examples.csv_path
    new : (Text | File) -> File
    new path =
      case path of
        _ : Text -> get_file path
        _ : File -> path
        _        -> Error.throw (Illegal_Argument.Error "new file should be either a File or a Text")

    ## ALIAS Current Directory

       Returns the current working directory (CWD) of the current program.

       > Example
         Get the program's current working directory.

             import Standard.Base.System.File.File

             example_cwd = File.current_directory
    current_directory : File
    current_directory = get_cwd

    ## ALIAS Home Directory

       Returns the home directory of the current user.

       > Example
         Get the current user's home directory.

             import Standard.Base.System.File.File

             example_home = File.home
    home : File
    home = @Builtin_Method "File.home"

    ## Creates a new output stream for this file and runs the specified action
       on it.

       Arguments:
       - open_options: A vector of `File_Access` objects determining how to open
         the stream. These options set the access properties of the stream.
       - action: A function that operates on the output stream and returns some
         value. The value is returned from this method.

       The created stream is automatically closed when `action` returns (even
       if it returns exceptionally).

       > Example
         Perform an action on an output stream with the file open for writing.

             import Standard.Base.System.File.File_Access.File_Access
             import Standard.Examples

             example_with_stream =
                 file = Examples.scratch_file
                 action = stream -> stream.write_bytes "hello".utf_8
                 file.with_output_stream [File_Access.Create, File_Access.Write] action
    with_output_stream : Vector File_Access -> (Output_Stream -> Any ! File_Error) -> Any ! File_Error
    with_output_stream self open_options action =
        Managed_Resource.bracket (self.new_output_stream open_options) (_.close) action

    ## PRIVATE

    ## Creates a new output stream for this file. Recommended to use
       `File.with_output_stream` instead, which does resource management.

       Arguments:
       - options: A vector of `File_Access` objects determining how to open
         the stream. These options set the access properties of the stream.
    output_stream : Vector File_Access -> Output_Stream
    output_stream self options = @Builtin_Method "File.output_stream"

    ## PRIVATE

    ## Creates a new input stream for this file. Recommended to use
       `File.with_input_stream` instead, which does resource management.

       Arguments:
       - open_options: A vector of `File_Access` objects determining how to open
         the stream. These options set the access properties of the stream.
    input_stream : Vector File_Access -> Input_Stream
    input_stream self options = @Builtin_Method "File.input_stream"

    ## Creates a new input stream for this file and runs the specified action
       on it.

       Arguments:
       - open_options: A vector of `File_Access` objects determining how to open
         the stream. These options set the access properties of the stream.
       - action: A function that operates on the input stream and returns some
         value. The value is returned from this method.

       The created stream is automatically closed when `action` returns (even
       if it returns exceptionally).

       > Example
         Perform an action on an input stream with the file open for reading.

             import Standard.Base.System.File.File_Access.File_Access
             import Standard.Examples

             example_with_stream =
                 file = Examples.csv
                 action = stream -> stream.read_all_bytes
                 file.with_input_stream [File_Access.Create, File_Access.Read] action
    with_input_stream : Vector File_Access -> (Input_Stream -> Any ! File_Error) -> Any ! File_Error
    with_input_stream self open_options action =
        Managed_Resource.bracket (self.new_input_stream open_options) (_.close) action

    ## Read a file using the specified file format

       Arguments:
       - format: A `File_Format` object used to read file into memory.
         If `Auto_Detect` is specified; the provided file determines the specific
         type and configures it appropriately. If there is no matching type then
         a `File_Error.Unsupported_Type` error is returned.
       - on_problems: Specifies the behavior when a problem occurs during the
         function.
         By default, a warning is issued, but the operation proceeds.
         If set to `Report_Error`, the operation fails with a dataflow error.
         If set to `Ignore`, the operation proceeds without errors or warnings.

       > Example
         Read the first sheet of an XLSX from disk and convert it into a table.

             from Standard.Table import all
             import Standard.Examples

             example_xlsx_to_table = Examples.xlsx.read

       > Example
         Read the sheet named `Dates` from an XLS and convert it to a table.

             from Standard.Table import all
             from Standard.Table import Excel, Worksheet
             import Standard.Examples

             example_xls_to_table = Examples.xls.read (Excel (Worksheet 'Dates'))
    read : File_Format -> Problem_Behavior -> Any ! File_Error
    read self format=Auto_Detect (on_problems=Problem_Behavior.Report_Warning) =
        format.read self on_problems

    ## Reads all bytes in this file into a byte vector.

       > Example
         Read all of the bytes in the file.

             import Standard.Examples

             example_read_bytes = Examples.csv.read_bytes
    read_bytes : Vector ! File_Error
    read_bytes self =
        opts = [File_Access.Read]
        self.with_input_stream opts (_.read_all_bytes)

    ## Reads the whole file into a `Text`, with specified encoding.

       Arguments:
       - encoding: The text encoding to decode the file with. Defaults to UTF-8.
       - on_problems: Specifies the behavior when a problem occurs during the
         function.
         By default, a warning is issued, but the operation proceeds.
         If set to `Report_Error`, the operation fails with a dataflow error.
         If set to `Ignore`, the operation proceeds without errors or warnings.

       > Example
         Read the contents of the file.

             import Standard.Examples

             example_read = Examples.csv.read
    read_text : Encoding -> Problem_Behavior -> Text ! File_Error
    read_text self (encoding=Encoding.utf_8) (on_problems=Problem_Behavior.Report_Warning) =
        file = File.new self
        bytes = file.read_bytes
        Text.from_bytes bytes encoding on_problems

    ## Join two path segments together.

       Arguments:
       - subpath: The path to join to the path of `self`.

       > Example
         Concatenate two file path segments.

             import Standard.Examples

             example_append = Examples.data_dir / "scratch_file"
    / : (Text | File) -> File
    / self subpath = self.resolve subpath

    resolve : (Text | File) -> File
    resolve self = @Builtin_Method "File.resolve"

    ## A File to JSON conversion.

       > Example
         Get a JSON representation of a file.

             import Standard.Examples

             example_to_json = Examples.csv.to_json
    to_json : Json
    to_json self = Json.from_pairs [["type", "File"], ["path", self.path]]

    ## Checks whether the file exists.

       > Example
         Check if a file exists.

             import Standard.Examples

             example_exists = Examples.csv.exists
    exists : Boolean
    exists self = @Builtin_Method "File.exists"

    ## Gets the creation time of a file.

       > Example
         Gets the creation time of a file.

             import Standard.Examples

             example_exists = Examples.csv.creation_time
    creation_time : Time_Of_Day ! File_Error
    creation_time self =
        File_Error.handle_java_exceptions self <| self.creation_time_builtin

    ## Gets the last modified time of a file.

       > Example
         Gets the last modified time of a file.

             import Standard.Examples

             example_exists = Examples.csv.last_modified_time
    last_modified_time : Time_Of_Day ! File_Error
    last_modified_time self =
        File_Error.handle_java_exceptions self <| self.last_modified_time_builtin

    ## Gets the POSIX permissions associated with the file.

       > Example
         Check if the file is readable by the user's group.

             import Standard.Examples

             example_permissions = Examples.csv.posix_permissions.group_read
    posix_permissions : File_Permissions
    posix_permissions self =
        File_Permissions.from_java_set self.posix_permissions_builtin

    ## Checks whether the file exists and is a directory.

       > Example
         Check if a file is a directory.

             import Standard.Examples

             example_is_directory = Examples.csv.is_directory
    is_directory : Boolean
    is_directory self = @Builtin_Method "File.is_directory"

    ## Creates the directory represented by this file if it did not exist.

       It also creates parent directories if they did not exist.

       > Example
         Create a directory on the file system.

             import Standard.Examples

             example_is_directory =
                (Examples.data_dir / "my_directory") . create_directory
    create_directory : Nothing
    create_directory self = @Builtin_Method "File.create_directory"

    ## Checks whether the file exists and is a regular file.

       ? Regular Files
         A regular file is one that does not have any special meaning to the
         operating system. Examples of files that are not regular are symlinks,
         pipes, devices, sockets and directories.

       > Example
         Check if a file is regular.

             import Standard.Examples

             example_is_regular_file = Examples.csv.is_regular_file
    is_regular_file : Boolean
    is_regular_file self = @Builtin_Method "File.is_regular_file"

    ## Resolves the parent filesystem node of this file.

       > Example
         Get the parent file of a file.

             import Standard.Examples

             example_parent = Examples.csv.parent
    parent : File
    parent self = @Builtin_Method "File.parent"

    ## Returns the path of this file.

       > Example
         Get the path from a file.

             import Standard.Examples

             example_path = Examples.csv.path
    path : Text
    path self = @Builtin_Method "File.path"

    ## Returns the name of this file.

       > Example
         Get the name from a file.

             import Standard.Examples

             example_name = Examples.csv.name
    name : Text
    name self = @Builtin_Method "File.name"

    ## Returns the extension of the file.

       > Example
         Get the extension of a file.

             import Standard.Examples

             Examples.csv.extension == ".csv"
    extension : Text
    extension self =
        name = self.name
        last_dot = name.locate "." mode=Matching_Mode.Last
        if last_dot.is_nothing then "" else
            extension = name.drop (Index_Sub_Range.First last_dot.start)
            if extension == "." then "" else extension

    ## Converts this file to an equivalent file represented with an absolute
       path.

       > Example
         Convert a file to an equivalent absolute path.

             import Standard.Examples

             example_absolute = Examples.csv.absolute
    absolute : File
    absolute self = @Builtin_Method "File.absolute"

    ## Checks is this file's path is absolute.

       > Example
         Check if a file is represented by an absolute path.

             import Standard.Examples

             example_is_absolute = Examples.csv.is_absolute
    is_absolute : Boolean
    is_absolute self = @Builtin_Method "File.is_absolute"

    ## Normalizes the filepath.

       > Example
         Normalize a file path.

             import Standard.Examples

             example_normalize = Examples.csv.normalize
    normalize : File
    normalize self = @Builtin_Method "File.normalize"

    ## Checks if this file has the same `path` as `that`.

       > Example
         Check if two files are equivalent.

             import Standard.Examples

             example_eq = Examples.csv == Examples.scratch_file
    == : File -> Boolean
    == self that = @Builtin_Method "File.=="

    ## Deletes the file.

       If the file is a directory, it must be empty, otherwise a `Panic` will
       be thrown.

       > Example
         Create a file and then delete it.

             import Standard.Examples

             example_delete =
                 file = Examples.data_dir / "my_file"
                 file.write_text "hello"
                 file.delete
    delete : Nothing ! File_Error
    delete self =
        File_Error.handle_java_exceptions self self.delete_builtin

    ## Moves the file to the specified destination.

       Arguments:
       - destination: the destination to move the file to.
       - replace_existing: specifies if the operation should proceed if the
         destination file already exists. Defaults to `False`.
    copy_to : File -> Boolean -> Nothing ! File_Error
    copy_to self destination replace_existing=False =
        File_Error.handle_java_exceptions self <| case replace_existing of
            True ->
              copy_options = [StandardCopyOption.REPLACE_EXISTING].to_array
              self.copy_builtin destination copy_options
            False -> self.copy_builtin destination Array.empty

    ## Moves the file to the specified destination.

       Arguments:
       - destination: the destination to move the file to.
       - replace_existing: specifies if the operation should proceed if the
         destination file already exists. Defaults to `False`.
    move_to : File -> Boolean -> Nothing ! File_Error
    move_to self destination replace_existing=False =
        File_Error.handle_java_exceptions self <| case replace_existing of
            True ->
              copy_options = [StandardCopyOption.REPLACE_EXISTING].to_array
              self.move_builtin destination copy_options
            False -> self.move_builtin destination Array.empty

    ## Deletes the file if it exists on disk.

       If the file is a directory, it must be empty, otherwise a `Panic` will
       be thrown.

       > Example
         Delete a file if it exists on disk.

             import Standard.Examples

             example_del_if_exists = Examples.scratch_file.delete_if_exists
    delete_if_exists : Nothing ! File_Error
    delete_if_exists self = if self.exists then self.delete else Nothing

    ## ADVANCED

       Returns a new input stream for this file.

       Arguments:
       - open_options: A vector of `File_Access` objects determining how to open
         the stream. These options set the access properties of the stream.

       The returned stream should be closed as soon as it is not used anymore.
       The `with_input_stream` method should be preferred whenever possible.
    new_input_stream : Vector File_Access -> Input_Stream ! File_Error
    new_input_stream self open_options =
        opts = open_options . map (_.to_java) . to_array
        stream = File_Error.handle_java_exceptions self (self.input_stream opts)
        resource = Managed_Resource.register stream close_stream
        Input_Stream.Value self resource

    ## ADVANCED

       Returns a new output stream for this file.

       Arguments:
       - open_options: A vector of `File_Access` objects determining how to open
         the stream. These options set the access properties of the stream.

       The returned stream should be closed as soon as it is not used anymore.
       The `with_output_stream` method should be preferred whenever possible.
    new_output_stream : Vector File_Access -> Output_Stream ! File_Error
    new_output_stream self open_options =
        opts = open_options . map (_.to_java) . to_array
        stream = File_Error.handle_java_exceptions self <|
            self.output_stream opts
        resource = Managed_Resource.register stream close_stream
        Output_Stream.Value self resource

    ## PRIVATE

       Reads last `n` bytes from the file (or less if the file is too small) and
       returns a vector of bytes.
    read_last_bytes : Integer -> Vector ! File_Error
    read_last_bytes self n =
        File_Error.handle_java_exceptions self <|
            Vector.from_polyglot_array (self.read_last_bytes_builtin n)

    ## Lists files contained in the directory denoted by this file.

       Arguments:
       - name_filter: A glob pattern that can be used to filter the returned
         files. If it is not specified, all files are returned.
       - recursive: Specifies whether the returned list of files should include
         also files from the subdirectories. If set to `False` (the default),
         only the immediate children of the listed directory are considered.

       The `name_filter` can contain the following special characters:
       - `"?"` - which matches a single filename character (so it will not match
         a `"/"`).
       - `"*"` - which matches any number of characters, but again does not
         cross directories.
       - `"**"` - which matches any number of characters and can cross
         directories.
       - `"\"` - can be used to escape the characters with special meaning; to
         get a single backslash, you need to specify it twice; you also need to
         keep in mind that the interpolating string literal also uses `"\"` as
         an escape sequence, so you need to type `'\\\\'` to get a single
         backslash for the glob pattern, unless you use the raw strings, where
         you only need to escape once: `"\\"`.
       - Brackets can be used to match exactly one character from some set of
         characters. For example `"[xy]"` matches `"x"` or `"y"`. Character
         ranges can also be specified: `"[a-z]"` matches any character from
         `"a"` to `"z"`. An exclamation mark can be used to negate the match,
         i.e. `"[!xz]"` will match any characters except for `"x"` and `"z"`.
         Moreover the ranges and single characters can be used together, so for
         example `"[a-cxy]"` will match `"a"`, `"b"`, `"c"`, `"x"` or `"y"`.
         Within the brackets, the special characters `"*"`, `"?"` and `"\"`
         stand for themselves instead of their special meanings.
       - Braces allow to specify multiple patterns (separated with a comma), one
         of which must be matched. For example: `"{abc,x*}"` will match either
         the name `"abc"` or any name starting with `"x"`. The groups cannot be
         nested.

       Keep in mind that if `recursive` is set to True and a `name_filter` is
       used, the function will return files from subdirectories only if the set
       `name_filter` allows crossing directories. So even with `recursive=True`
       a filter `"*.txt"` will only return files that are immediate children of
       the listed directory, to list files recursively you need to use a filter
       like `"**.txt"` or `"*/*"` (which will match only files that are exactly
       one directory down from the listed directory) or no filter at all.

       > Example
         List all files with ".md" or ".txt" extension in the example directory
         and any of its subdirectories.

             import Standard.Examples

             example_list_md_files =
                 Examples.data_dir.list name_filter="**.{txt,md}" recursive=True
    list : Text -> Boolean -> Vector File
    list self name_filter=Nothing recursive=False =
        all_files = case recursive of
            True -> list_descendants self
            False -> self.list_immediate_children
        filtered = case name_filter of
            Nothing -> all_files
            _ ->
                fs = FileSystems.getDefault
                matcher = fs.getPathMatcher "glob:"+name_filter
                all_files.filter file->
                    pathStr = self.relativize file . path
                    matcher.matches (Path.of pathStr)
        filtered

    ## UNSTABLE

       Checks if `self` is a child path of `other`.
    is_child_of : File -> Boolean
    is_child_of self other = self.starts_with other

    ## UNSTABLE

       Transforms `child` to a relative path with respect to `self`.
    relativize : File -> Boolean
    relativize self child = @Builtin_Method "File.relativize"


    ## PRIVATE

       Utility function that lists immediate children of a directory.
    list_immediate_children : Vector File
    list_immediate_children self = Vector.from_polyglot_array (self.list_immediate_children_array)

    ## PRIVATE

       Return the absolute path of this File
    to_text : Text
    to_text self = self.absolute . path

## An output stream, allowing for interactive writing of contents into an
   open file.
type Output_Stream
    ## PRIVATE

       An output stream, allowing for interactive writing of contents into an
       open file.

       Arguments:
       - file: The file which the output stream will write into.
       - stream_resource: The internal resource that represents the underlying
         stream.
    Value file stream_resource

    ## ADVANCED

       Writes a vector of bytes into the file at the current stream position.

       Arguments:
       - contents: A vector of bytes to write into the file.

       > Example
         Write some bytes through a stream.

             import Standard.Base.System.File.File_Access.File_Access
             import Standard.Examples

             example_write_bytes =
                 file = Examples.scratch_file
                 out_stream = file.new_output_stream [File_Access.Create, File_Access.Write]
                 out_stream.write_bytes "hello".utf_8
                 out_stream.close
    write_bytes : Vector File_Access -> Nothing ! File_Error
    write_bytes self contents = self.stream_resource . with java_stream->
        File_Error.handle_java_exceptions self.file <|
            java_stream.write contents.to_array
            java_stream.flush
        Nothing

    ## ADVANCED

       Closes this stream.

       Even though Streams are closed automatically upon garbage collection, it
       is still advised to close streams manually if they are not used within
       a bracket pattern.

       > Example
         Open and close a stream.

             import Standard.Base.System.File.File_Access.File_Access
             import Standard.Examples

             example_write_bytes =
                 file = Examples.scratch_file
                 out_stream = file.new_output_stream [File_Access.Create]
                 out_stream.close
    close : Nothing
    close self = self.stream_resource . finalize

    ## PRIVATE

       Exposes operations on the underlying Java output stream.

       Arguments:
       - f: Applies a function over the internal java stream.

       Useful when integrating with polyglot functions requiring an
       `OutputStream` as an argument.
    with_java_stream : (Java_Output_Stream -> Any) -> Any
    with_java_stream self f = self.stream_resource . with f

    ## PRIVATE
       Runs an action with a `ReportingStreamEncoder` encoding data to the
       output stream with the specified encoding.
    with_stream_encoder : Encoding -> Problem_Behavior -> (ReportingStreamEncoder -> Any) -> Any
    with_stream_encoder self encoding on_problems action = self.with_java_stream java_stream->
        ## We ignore any warnings raised by the `bytes` method, because if the
           original Unicode replacement character failed to encode, the `bytes`
           method will have replaced it with the simple `?` sign which should be
           available in all encodings. And this is exactly the behavior we want:
           if available, we use the `�` character and otherwise we fallback to
           the `?` character.
        replacement_sequence = Encoding_Utils.INVALID_CHARACTER.bytes encoding on_problems=Problem_Behavior.Ignore
        java_charset = encoding.to_java_charset
        results = Encoding_Utils.with_stream_encoder java_stream java_charset replacement_sequence.to_array action
        problems = Vector.from_polyglot_array results.problems . map Encoding_Error.Error
        on_problems.attach_problems_after results.result problems

## An input stream, allowing for interactive reading of contents from an open
   file.
type Input_Stream

    ## PRIVATE

       An input stream, allowing for interactive reading of contents from an open
       file.

       Arguments:
       - file: The file from which the stream will read.
       - stream_resource: The internal resource that represents the underlying
         stream.
    Value file stream_resource

    ## ADVANCED

       Reads all the bytes in this file into a vector of bytes.

       > Example
         Read all of the bytes from a file using a stream.

             import Standard.Base.System.File.File_Access.File_Access
             import Standard.Examples

             example_read_all =
                 file = Examples.csv
                 in_stream = file.new_input_stream [File_Access.Read]
                 bytes = in_stream.read_all_bytes
                 in_stream.close
                 bytes
    read_all_bytes : Vector ! File_Error
    read_all_bytes self = self.stream_resource . with java_stream->
        File_Error.handle_java_exceptions self.file <|
            Vector.from_polyglot_array java_stream.readAllBytes

    ## ADVANCED

       Reads _up to_ the provided number of bytes from the stream.

       Arguments:
       - n: The number of bytes to read from the file.

       Makes a best-effort to read as many bytes as provided, however fewer
       bytes may be read, if end of stream is encountered.

       The length of the returned vector is the same as the number of bytes
       read.

       > Example
         Read 10 of the bytes from a file using a stream.

             import Standard.Base.System.File.File_Access.File_Access
             import Standard.Examples

             example_read_all =
                 file = Examples.csv
                 in_stream = file.new_input_stream [File_Access.Read]
                 bytes = in_stream.read_n_bytes 10
                 in_stream.close
                 bytes
    read_n_bytes : Integer -> Vector ! File_Error
    read_n_bytes self n = self.stream_resource . with java_stream->
        File_Error.handle_java_exceptions self.file <|
            bytes = java_stream.readNBytes n
            Vector.from_polyglot_array bytes

    ## ADVANCED

       Reads the next byte from the stream.

       The returned value is an integer in the range 0-255 representing the
       next byte of input, or -1 if end of stream is reached.

       > Example
         Read byte from a file using a stream.

             import Standard.Base.System.File.File_Access.File_Access
             import Standard.Examples

             example_read_all =
                 file = Examples.csv
                 in_stream = file.new_input_stream [File_Access.Read]
                 bytes = in_stream.read_byte
                 in_stream.close
                 bytes
    read_byte : Integer ! File_Error
    read_byte self = self.stream_resource . with java_stream->
        File_Error.handle_java_exceptions self.file <|
            java_stream.read

    ## ADVANCED

       Closes this stream.

       Even though Streams are closed automatically upon garbage collection, it
       is still advised to close streams manually if they are not used within
       a bracket pattern.

       > Example
         Open and close a stream.

             import Standard.Base.System.File.File_Access.File_Access
             import Standard.Examples

             example_read_all =
                 file = Examples.csv
                 in_stream = file.new_input_stream [File_Access.Read]
                 in_stream.close
    close : Nothing
    close self = self.stream_resource . finalize

    ## PRIVATE

       Exposes operations on the underlying Java input stream.

       Arguments:
       - f: Applies a function over the internal java stream.

       Useful when integrating with polyglot functions requiring an
       `InputStream` as an argument.
    with_java_stream : (Java_Input_Stream -> Any) -> Any
    with_java_stream self f = self.stream_resource . with f

    ## PRIVATE
       Runs an action with a `ReportingStreamDecoder` decoding data from the
       input stream with the specified encoding.
    with_stream_decoder : Encoding -> Problem_Behavior -> (ReportingStreamDecoder -> Any) -> Any
    with_stream_decoder self encoding on_problems action = self.stream_resource . with java_stream->
        java_charset = encoding.to_java_charset
        results = Encoding_Utils.with_stream_decoder java_stream java_charset action
        problems = Vector.from_polyglot_array results.problems . map Encoding_Error.Error
        on_problems.attach_problems_after results.result problems

## PRIVATE

   Utility method for closing primitive Java streams. Provided to avoid
   accidental scope capture with `Managed_Resource` finalizers.
close_stream : Any -> Nothing
close_stream stream =
    stream.close
    Nothing

## PRIVATE

   Utility function that returns all descendants of the provided file, including
   that file itself. If the file is not a directory, a list containing only
   itself is returned.
list_descendants : File -> Vector File
list_descendants file =
    builder = Vector.new_builder
    go file =
        builder.append file
        case file.is_directory of
            True ->
                children = file.list_immediate_children
                children.each go
            False -> Nothing
    go file
    builder.to_vector

## PRIVATE

   Gets a file corresponding to the current working directory of the
   program.
get_cwd : File
get_cwd = @Builtin_Method "File.get_cwd"

## PRIVATE

   Gets a file corresponding to the provided path.

   Arguments:
   - path: The path to obtain a file at.
get_file : Text -> File
get_file path = @Builtin_Method "File.get_file"
