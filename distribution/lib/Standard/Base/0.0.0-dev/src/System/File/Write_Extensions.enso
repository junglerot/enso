import project.Data.Text.Text
import project.Data.Text.Encoding.Encoding
import project.Data.Text.Extensions
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Common.Unsupported_Argument_Types
import project.Errors.Encoding_Error.Encoding_Error
import project.Errors.File_Error.File_Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Errors.Problem_Behavior.Problem_Behavior
import project.Nothing.Nothing
import project.Panic.Panic
import project.Runtime.Context
import project.System.File.Existing_File_Behavior.Existing_File_Behavior
import project.System.File.File
import project.Warning.Warning

from project.Data.Boolean import Boolean, True, False

polyglot java import org.enso.base.Array_Builder

## Writes (or appends) the text to the specified file using the supplied
   encoding. The behavior specified in the `existing_file` parameter will be
   used if the file exists.

   Arguments:
   - path: The path to the target file.
   - encoding: The encoding to use when writing the file.
   - on_existing_file: Specifies how to proceed if the file already exists.
   - on_problems: Specifies how to handle any encountered problems.

   If a character cannot be converted to a byte, an `Encoding_Error` is raised.
   If `on_problems` is set to `Report_Warning` or `Ignore`, it is replaced with
   a substitute (either '�' (if Unicode) or '?' depending on the encoding).
   Otherwise, the process is aborted.
   If the path to the parent location cannot be found or the filename is
   invalid, a `File_Error.Not_Found` is raised.
   If another error occurs, such as access denied, an `File_Error.IO_Error` is
   raised.
   Otherwise, the file is created with the encoded text written to it.

   The method returns a `File` object for the written file.

   ? Dry Run

     If writing to Output context is not enabled (such as in "Design" mode),
     then this function will write to a temporary file. This temporary file will
     be automatically deleted on exit of the Enso process.

     This allows for building the workflow without affecting the real files.
@encoding Encoding.default_widget
Text.write : (File|Text) -> Encoding -> Existing_File_Behavior -> Problem_Behavior -> File ! Encoding_Error | Illegal_Argument | File_Error
Text.write self path encoding=Encoding.utf_8 on_existing_file=Existing_File_Behavior.Backup on_problems=Problem_Behavior.Report_Warning =
    bytes = self.bytes encoding on_problems
    bytes.if_not_error <|
        actual = File.new path
        effective_existing_behaviour = on_existing_file.get_effective_behavior actual
        file = if Context.Output.is_enabled then actual else
            should_copy_file = on_existing_file==Existing_File_Behavior.Append
            actual.create_dry_run_file copy_original=should_copy_file

        Context.Output.with_enabled <|
            r = effective_existing_behaviour.write file stream->
                stream.write_bytes bytes
            r.if_not_error file

## Writes (or appends) the Vector of bytes into the specified file. The behavior
   specified in the `existing_file` parameter will be used if the file exists.

   Arguments:
   - path: The path to the target file.
   - on_existing_file: Specifies how to proceed if the file already exists.

   If the Vector contains any item which is not a `Byte`, an
   `Illegal_Argument` will be raised. Enso follows the Java convention,
   that a `Byte` is between -128 and 127.
   If the path to the parent location cannot be found or the filename is
   invalid, a `File_Not_Found` is raised.
   If another error occurs, such as access denied, an `File_Error.IO_Error` is
   raised.
   Otherwise, the file is created with the encoded text written to it.

   The method returns a `File` object for the written file.

   > Example
     Write the UTF-8 bytes of the text "$£§€¢" to a file.

         import Standard.Examples

         [36, -62, -93, -62, -89, -30, -126, -84, -62, -94].write_bytes Examples.scratch_file

   > Example
     Append the UTF-8 bytes of the text "$£§€¢" to a file.

         import Standard.Examples

         [36, -62, -93, -62, -89, -30, -126, -84, -62, -94].write_bytes Examples.scratch_file.write_bytes Examples.scratch_file Existing_File_Behavior.Append
Vector.write_bytes : (File|Text) -> Existing_File_Behavior -> File ! Illegal_Argument | File_Error
Vector.write_bytes self path on_existing_file=Existing_File_Behavior.Backup =
    Panic.catch Unsupported_Argument_Types handler=(_ -> Error.throw (Illegal_Argument.Error "Only Vectors consisting of bytes (integers in the range from -128 to 127) are supported by the `write_bytes` method.")) <|
        ## Convert to a byte array before writing - and fail early if there is any problem.
        byte_array = Array_Builder.ensureByteArray self.to_array

        file = File.new path
        r = on_existing_file.write file stream->
            stream.write_bytes (Vector.from_polyglot_array byte_array)
        r.if_not_error file
