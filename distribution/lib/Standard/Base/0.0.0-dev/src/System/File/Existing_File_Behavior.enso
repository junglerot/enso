import project.Any.Any
import project.Error.Error
import project.Nothing.Nothing
import project.Panic.Panic
import project.Panic.Caught_Panic
import project.System.File.File
import project.System.File.File_Access.File_Access
import project.System.File.Output_Stream

from project.Data.Boolean import Boolean, True, False
from project.Error.Common import File_Error

## Specifies the behavior of a write operation when the destination file
   already exists.
type Existing_File_Behavior
    ## Replace the existing file in-place, with the new file.

       Note: There is a risk of data loss if a failure occurs during the write
       operation.
    Overwrite

    ## Creates a backup of the existing file (by appending a `.bak` suffix to
       the name) before replacing it with the new contents.

       Note: This requires sufficient storage to have two copies of the file.
             If an existing `.bak` file exists, it will be replaced.
    Backup

    ## Appends data to the existing file.
    Append

    ## If the file already exists, a `File_Error.Already_Exists` error is
       raised.
    Error

    ## PRIVATE
       Runs the `action` which is given a file output stream and should write
       the required contents to it.

       The handle is configured depending on the specified behavior, it may
       point to a temporary file, for example. The stream may only be used while
       the action is being executed and it should not be stored anywhere for
       later.

       The `action` may not be run at all in case the `Error` behavior is
       selected.
    write : File -> (Output_Stream -> Nothing) -> Nothing ! File_Error
    write self file action =
        case self of
            Existing_File_Behavior.Overwrite -> file.with_output_stream [File_Access.Write, File_Access.Create, File_Access.Truncate_Existing] action
            Existing_File_Behavior.Append -> file.with_output_stream [File_Access.Write, File_Access.Create, File_Access.Append] action
            Existing_File_Behavior.Error -> file.with_output_stream [File_Access.Write, File_Access.Create_New] action
            Existing_File_Behavior.Backup -> Panic.recover [File_Error.IO_Error, File_Error.Not_Found] <|
                handle_existing_file _ =
                    write_file_backing_up_old_one file action
                handle_write_failure_dataflow caught_panic =
                    Error.throw caught_panic.payload.cause
                handle_file_already_exists = Panic.catch File_Error.Already_Exists handler=handle_existing_file
                handle_internal_dataflow = Panic.catch Internal_Write_Operation_Errored.Error handler=handle_write_failure_dataflow
                ## We first attempt to write the file to the original
                   destination, but if that files due to the file already
                   existing, we will run the alternative algorithm which uses a
                   temporary file and creates a backup.
                handle_file_already_exists <| handle_internal_dataflow <|
                    Panic.rethrow <| file.with_output_stream [File_Access.Write, File_Access.Create_New] output_stream->
                        action output_stream . catch Any dataflow_error->
                            Panic.throw (Internal_Write_Operation_Errored.Error dataflow_error)

## PRIVATE
write_file_backing_up_old_one : File -> (Output_Stream -> Nothing) -> Nothing ! File_Error
write_file_backing_up_old_one file action = Panic.recover [File_Error.IO_Error, File_Error.Not_Found] <|
    parent = file.parent
    bak_file = parent / file.name+".bak"
    go i =
        new_name = file.name + ".new" + if i == 0 then "" else "." + i.to_text
        new_file = parent / new_name
        handle_existing_file _ = go i+1
        handle_write_failure_panic panic =
            ## Since we were already inside of the write operation,
               the file must have been created, but since we failed, we need to clean it up.
            new_file.delete
            Panic.throw panic.payload.cause
        handle_write_failure_dataflow caught_panic =
            ## Since we were already inside of the write operation,
               the file must have been created, but since we failed, we need to clean it up.
            new_file.delete
            Error.throw caught_panic.payload.cause
        handle_file_already_exists = Panic.catch File_Error.Already_Exists handler=handle_existing_file
        handle_internal_dataflow = Panic.catch Internal_Write_Operation_Errored.Error handler=handle_write_failure_dataflow
        handle_internal_panic = Panic.catch Internal_Write_Operation_Panicked.Panic handler=handle_write_failure_panic
        handle_file_already_exists <| handle_internal_dataflow <| handle_internal_panic <|
            Panic.rethrow <|
                new_file.with_output_stream [File_Access.Write, File_Access.Create_New] output_stream->
                    result = Panic.catch Any (action output_stream) caught_panic->
                        Panic.throw (Internal_Write_Operation_Panicked.Panic caught_panic)
                    result.catch Any dataflow_error->
                        Panic.throw (Internal_Write_Operation_Errored.Error dataflow_error)
            ## We ignore the file not found error, because it means that there
               is no file to back-up. This may also be caused by someone
               removing the original file during the time when we have been
               writing the new one to the temporary location. There is nothing
               to back-up anymore, but this is not a failure, so it can be
               safely ignored.
            Panic.catch File_Error.Not_Found handler=(_->Nothing) <|
                Panic.rethrow <| file.move_to bak_file replace_existing=True
            Panic.rethrow <| new_file.move_to file
    go 0


## PRIVATE
type Internal_Write_Operation_Panicked
    Panic (cause : Caught_Panic)

## PRIVATE
type Internal_Write_Operation_Errored
    Error (cause : Any)
