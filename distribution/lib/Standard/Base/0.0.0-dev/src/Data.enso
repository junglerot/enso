import project.Any.Any
import project.Data.Pair.Pair
import project.Data.Text.Encoding.Encoding
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.File_Error.File_Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Errors.Problem_Behavior.Problem_Behavior
import project.Meta
import project.Network.HTTP.Header.Header
import project.Network.HTTP.HTTP
import project.Network.HTTP.HTTP_Method.HTTP_Method
import project.Network.HTTP.Request.Request
import project.Network.HTTP.Request_Error
import project.Network.URI.URI
import project.Nothing.Nothing
import project.System.File.File
from project.Data.Boolean import Boolean, False, True
from project.System.File_Format import Auto_Detect, File_Format

## ALIAS load, open
   GROUP Input
   Reads a file into Enso.
   Uses the specified file format to parse the file into an Enso type. If not
   specified will use the file's extension to determine the file format.

   Arguments:
   - path: The path to the file to read.
   - format: A `File_Format` object used to read file into memory.
     If `Auto_Detect` is specified; the provided file determines the specific
     type and configures it appropriately. If there is no matching type then
     a `File_Error.Unsupported_Type` error is returned.
     You can use `File_Format.all` to get a list of currently loaded
     formats.
   - on_problems: Specifies the behavior when a problem occurs during the
     function.
     By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.

   > Example
     Read the first sheet of an XLSX from disk and convert it into a table.

         from Standard.Table import all
         import Standard.Examples

         example_xlsx_to_table = Data.read Examples.xlsx

   > Example
     Read the sheet named `Dates` from an XLS and convert it to a table.

         from Standard.Table import all
         from Standard.Table import Excel, Worksheet
         import Standard.Examples

         example_xls_to_table = Data.read Examples.xls (Excel (Worksheet 'Dates'))
@format File_Format.default_widget
read : Text | File -> File_Format -> Problem_Behavior -> Any ! File_Error
read path format=Auto_Detect (on_problems=Problem_Behavior.Report_Warning) =
    File.new path . read format on_problems

## ALIAS load text, open text
   GROUP Input
   Open and read the file at the provided `path`.

   Arguments:
   - path: The path of the file to open and read the contents of. It will
     accept a textual path or a file.
   - encoding: The text encoding to decode the file with. Defaults to UTF-8.
   - on_problems: Specifies the behavior when a problem occurs during the
     function.
     By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.

   > Example
     Read the `data.csv` file in the project directory's `data` directory. You
     will need to create the file `data.csv` manually in that directory.

         import Standard.Base.Data
         import Standard.Examples

         example_read = Data.read_text Examples.csv_path
@encoding Encoding.default_widget
read_text : (Text | File) -> Encoding -> Problem_Behavior -> Text
read_text path (encoding=Encoding.utf_8) (on_problems=Problem_Behavior.Report_Warning) =
    File.new path . read_text encoding on_problems

## GROUP Input
   Lists files contained in the provided directory.

   Arguments:
   - name_filter: A glob pattern that can be used to filter the returned files.
     If it is not specified, all files are returned.
   - recursive: Specifies whether the returned list of files should include also
     files from the subdirectories. If set to `False` (the default), only the
     immediate children of the listed directory are considered.

   The `name_filter` can contain the following special characters:
   - `"?"` - which matches a single filename character (so it will not match a
     `"/"`).
   - `"*"` - which matches any number of characters, but again does not cross
     directories.
   - `"**"` - which matches any number of characters and can cross directories.
   - `"\"` - can be used to escape the characters with special meaning; to get a
     single backslash, you need to specify it twice; you also need to keep in
     mind that the interpolating string literal also uses `"\"` as an escape
     sequence, so you need to type `'\\\\'` to get a single backslash for the
     glob pattern, unless you use the raw strings, where you only need to escape
     once: `"\\"`.
   - Brackets can be used to match exactly one character from some set of
     characters. For example `"[xy]"` matches `"x"` or `"y"`. Character ranges
     can also be specified: `"[a-z]"` matches any character from `"a"` to `"z"`.
     An exclamation mark can be used to negate the match, i.e. `"[!xz]"` will
     match any characters except for `"x"` and `"z"`. Moreover the ranges and
     single characters can be used together, so for example `"[a-cxy]"` will
     match `"a"`, `"b"`, `"c"`, `"x"` or `"y"`. Within the brackets, the special
     characters `"*"`, `"?"` and `"\"` stand for themselves instead of their
     special meanings.
   - Braces allow to specify multiple patterns (separated with a comma), one of
     which must be matched. For example: `"{abc,x*}"` will match either the name
     `"abc"` or any name starting with `"x"`. The groups cannot be nested.

   Keep in mind that if `recursive` is set to True and a `name_filter` is used,
   the function will return files from subdirectories only if the set
   `name_filter` allows crossing directories. So even with `recursive=True` a
   filter `"*.txt"` will only return files that are immediate children of the
   listed directory, to list files recursively you need to use a filter like
   `"**.txt"` or `"*/*"` (which will match only files that are exactly one
   directory down from the listed directory) or no filter at all.

   > Example
     List all files with `.md` extension in the example directory and any of its
     subdirectories.

         import Standard.Examples

         example_list_files =
             Data.list_directory Examples.data_dir name_filter="**.md" recursive=True
list_directory : (File | Text) -> Text -> Boolean -> Vector File
list_directory directory name_filter=Nothing recursive=False =
    File.new directory . list name_filter=name_filter recursive=recursive

## ALIAS download, http get
   GROUP Input
   Fetches from the provided URI and returns the response, parsing the body if
   the content-type is recognised. Returns an  error if the status code does not
   represent a successful response.

   Arguments:
   - uri: The URI to fetch.
   - method: The HTTP method to use. Defaults to `GET`.
   - headers: The headers to send with the request. Defaults to an empty vector.
   - try_auto_parse:  If successful should the body be attempted to be parsed to
     an Enso native object.
fetch : (URI | Text) -> HTTP_Method -> Vector (Header | Pair Text Text) -> Boolean -> Any
fetch uri method=HTTP_Method.Get headers=[] try_auto_parse=True =
    parsed_headers = headers . map h-> case h of
        _ : Vector -> Header.new (h.at 0) (h.at 1)
        _ : Pair -> Header.new (h.at 0) (h.at 1)
        _ : Header -> h
        _ -> Error.throw (Illegal_Argument.Error "Invalid header type - all values must be Vector, Pair or Header (got "+(Meta.get_simple_type_name h)+").")

    request = Request.new method uri parsed_headers
    response = HTTP.new.request request

    if response.code.is_success.not then Error.throw (Request_Error.Error "Status Code" ("Request failed with status code: " + response.code.to_text + ". " + response.body.decode_as_text)) else
        if try_auto_parse.not then response else
            response.decode if_unsupported=response . catch handler=(_->response)

## ALIAS download, http get
   GROUP Input
   Fetches from the URI and returns the response, parsing the body if the
   content-type is recognised. Returns an  error if the status code does not
   represent a successful response.

   Arguments:
   - method: The HTTP method to use. Defaults to `GET`.
   - headers: The headers to send with the request. Defaults to an empty vector.
   - try_auto_parse:  If successful should the body be attempted to be parsed to
     an Enso native object.
URI.fetch : HTTP_Method -> Vector (Header | Pair Text Text) -> Boolean -> Any
URI.fetch self method=HTTP_Method.Get headers=[] try_auto_parse=True =
    Data.fetch self method headers try_auto_parse
