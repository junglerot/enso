private

import project.Any.Any
import project.Data.Array.Array
import project.Data.Maybe.Maybe
import project.Data.Numbers.Integer
import project.Data.Vector.Map_Error
import project.Data.Vector.No_Wrap
import project.Data.Vector.Vector
import project.Errors.Common.Additional_Warnings
import project.Error.Error
import project.Errors.Problem_Behavior.Problem_Behavior
import project.Errors.Unimplemented.Unimplemented
import project.Nothing.Nothing
import project.Runtime
import project.Runtime.Ref.Ref
import project.Warning.Warning
from project.Data.Boolean import Boolean, False, True

## PRIVATE
new_array_proxy_builtin : Integer -> (Integer -> Any) -> Array
new_array_proxy_builtin length at = @Builtin_Method "Array_Like_Helpers.new_array_proxy_builtin"

## PRIVATE
new_vector_builder : Integer -> Any
new_vector_builder capacity = @Builtin_Method "Array_Like_Helpers.new_vector_builder"

## PRIVATE
length : (Array | Vector) -> Integer
length array_like = @Builtin_Method "Array_Like_Helpers.length"

## PRIVATE
at : (Array | Vector) -> Integer -> Any
at array_like index = @Builtin_Method "Array_Like_Helpers.at"

## PRIVATE
vector_to_array : (Vector | Array) -> Array
vector_to_array array_like = @Builtin_Method "Array_Like_Helpers.vector_to_array"

## PRIVATE
vector_from_function_primitive : Integer -> (Integer -> Any) -> Vector Any
vector_from_function_primitive length constructor = @Builtin_Method "Array_Like_Helpers.vector_from_function"

## PRIVATE
   Construct a Vector by mapping a function over 0..length-1.

   ! Error Conditions

     Errors and Warnings that arise when executing the function are wrapped in
     `Map_Error`.

     Only `MAX_MAP_WARNINGS` number of warnings are attached to result values.
     After that, the warnings are dropped, but a count of the additional
     warnings is attached in an `Additional_Warnings` warning.

   ? Problem Handling

     The result of Errors thrown when executing the function depend on `on_problems`:
     - Report_Error: The first error is thrown, and is wrapped in
       `Map_Error`.
     - No_Wrap: The first error is thrown, and is not wrapped in
       `Map_Error`.
     - Report_Warning: The result for that element is `Nothing`, 
       the error is attached as a warning. Currently unimplemented.
     - Ignore: The result is `Nothing`, and the error is
       ignored.
vector_from_function : Integer -> (Integer -> Any) -> Problem_Behavior | No_Wrap -> Vector Any
vector_from_function length function on_problems=Problem_Behavior.Report_Error =
    if on_problems == Problem_Behavior.Report_Warning then
        Unimplemented.throw "on_problems=Problem_Behavior.Report_Warning is unimplemented for `Vector.map`"
    num_errors = Ref.new 0
    wrapped_function i =
        result = function i
        case result.is_error of
            False ->
                ## TODO: implement this correctly.
                   See https://github.com/enso-org/enso/issues/8371

                    if Warning.has_warnings result . not then result else
                        Warning.map_attached_warnings (w-> Maybe.Some (Map_Error.Error i w)) result
                result
            True ->
                case on_problems of
                    Problem_Behavior.Ignore ->
                        Nothing
                    Problem_Behavior.Report_Error ->
                        result.catch_primitive caught->
                            Error.throw (Map_Error.Error i caught)
                    No_Wrap.Value -> result
                    ## TODO: implement this correctly.
                       See https://github.com/enso-org/enso/issues/8371
                        Problem_Behavior.Report_Warning ->
                            with_error_maybe = if num_errors.get >= MAX_MAP_WARNINGS then Nothing else
                                result.catch_primitive caught->
                                    Warning.attach (Map_Error.Error i caught) Nothing
                            num_errors.modify (_+1)
                            with_error_maybe
    results = vector_from_function_primitive length wrapped_function
    if num_errors.get <= MAX_MAP_WARNINGS then results else
        err = Additional_Warnings.Error num_errors.get-MAX_MAP_WARNINGS
        Warning.attach err results

## PRIVATE
   The maximum number of warnings attached to result values in
   `vector_from_function`.
MAX_MAP_WARNINGS = 10
