import project.Data.Locale.Locale
import project.Data.Text.Text
import project.Data.Time.Date.Date
import project.Data.Vector.Vector
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Internal.Time.Format.Analyzer.Analyzer
import project.Panic.Panic
from project.Data.Boolean import Boolean, False, True
from project.Internal.Time.Format.Parser import Common_Nodes, ISO_Week_Year_Patterns, Numeric_Representation, Standard_Date_Patterns, Text_Representation, Time_Patterns, Time_Zone_Patterns, Two_Digit_Year_Representation

polyglot java import java.time.format.DateTimeFormatter
polyglot java import java.time.format.DateTimeFormatterBuilder
polyglot java import java.time.format.SignStyle
polyglot java import java.time.format.TextStyle
polyglot java import java.time.temporal.ChronoField
polyglot java import java.time.temporal.IsoFields
polyglot java import org.enso.base.Time_Utils

## PRIVATE
interpret : Locale -> Vector (Common_Nodes | Standard_Date_Patterns | ISO_Week_Year_Patterns | Time_Patterns | Time_Zone_Patterns) -> Boolean -> DateTimeFormatter
interpret locale nodes prepare_defaults=True =
    builder = DateTimeFormatterBuilder.new
    interpret_node node = case node of
        Common_Nodes.Literal text ->
            builder.appendLiteral text
        Common_Nodes.Optional_Section nested_nodes ->
            builder.optionalStart
            nested_nodes.each interpret_node
            builder.optionalEnd

        Time_Zone_Patterns.Time_Zone_ID ->
            builder.appendZoneId
        Time_Zone_Patterns.Time_Zone_Name representation ->
            builder.appendZoneText (text_representation_to_java_style representation)
        Time_Zone_Patterns.Time_Zone_Offset pattern zero ->
            builder.appendOffset pattern zero
        Time_Zone_Patterns.Time_Zone_Localized_Offset representation ->
            builder.appendLocalizedOffset (text_representation_to_java_style representation)
        Time_Patterns.AM_PM ->
            builder.appendText ChronoField.AMPM_OF_DAY
        Time_Patterns.Fraction_Of_Second representation ->
            min_digits = 1
            max_digits = case representation.digits of
                1 -> 9
                digits -> digits
            includes_decimal_point = False
            builder.appendFraction ChronoField.NANO_OF_SECOND min_digits max_digits includes_decimal_point

        _ ->
            field = get_field_for node
            append_field builder field node.representation

    nodes.each interpret_node

    if prepare_defaults then
        analyzer = Analyzer.new nodes

        if analyzer.has_required Standard_Date_Patterns.Year && analyzer.has_required Standard_Date_Patterns.Month then
            if analyzer.has_required Standard_Date_Patterns.Day_Of_Month . not then
                builder.parseDefaulting ChronoField.DAY_OF_MONTH 1

        if analyzer.has_day_and_month_but_not_year then
            current_year = Date.today.year
            builder.parseDefaulting ChronoField.YEAR current_year

        if analyzer.has_required ISO_Week_Year_Patterns.Week_Based_Year && analyzer.has_required ISO_Week_Year_Patterns.Week_Of_Year then
            if analyzer.has_required ISO_Week_Year_Patterns.Day_Of_Week . not then
                builder.parseDefaulting ChronoField.DAY_OF_WEEK 1

        if analyzer.has_required Standard_Date_Patterns.Year && analyzer.has_required Standard_Date_Patterns.Quarter then
            builder.parseDefaulting IsoFields.DAY_OF_QUARTER 1

        if analyzer.has_12h && analyzer.has_24h.not && analyzer.has_am_pm.not then
            builder.parseDefaulting ChronoField.AMPM_OF_DAY 0

    builder.toFormatter locale.java_locale

## PRIVATE
get_field_for node = case node of
    Standard_Date_Patterns.Year _         -> ChronoField.YEAR
    Standard_Date_Patterns.Quarter _      -> IsoFields.QUARTER_OF_YEAR
    Standard_Date_Patterns.Month _        -> ChronoField.MONTH_OF_YEAR
    Standard_Date_Patterns.Day_Of_Month _ -> ChronoField.DAY_OF_MONTH
    Standard_Date_Patterns.Day_Of_Week _  -> ChronoField.DAY_OF_WEEK

    ISO_Week_Year_Patterns.Week_Based_Year _ -> IsoFields.WEEK_BASED_YEAR
    ISO_Week_Year_Patterns.Week_Of_Year _    -> IsoFields.WEEK_OF_WEEK_BASED_YEAR
    ISO_Week_Year_Patterns.Day_Of_Week _     -> ChronoField.DAY_OF_WEEK

    Time_Patterns.Hour _ is24h -> case is24h of
        True  -> ChronoField.HOUR_OF_DAY
        False -> ChronoField.CLOCK_HOUR_OF_AMPM
    Time_Patterns.Minute _ -> ChronoField.MINUTE_OF_HOUR
    Time_Patterns.Second _ -> ChronoField.SECOND_OF_MINUTE

    _ -> Panic.throw (Illegal_Argument.Error "Cannot extract a TemporalField from "+node.to_text)

## PRIVATE
append_field builder field representation = case representation of
    Numeric_Representation.Value digits -> case digits of
        2 -> builder.appendValue field 2
        _ -> builder.appendValue field digits 19 SignStyle.NORMAL
    text_representation : Text_Representation ->
        builder.appendText field (text_representation_to_java_style text_representation)
    Two_Digit_Year_Representation.Value max_year ->
        Time_Utils.appendTwoDigitYear builder field max_year

## PRIVATE
text_representation_to_java_style representation = case representation of
    Text_Representation.Short_Form -> TextStyle.SHORT
    Text_Representation.Long_Form  -> TextStyle.FULL
