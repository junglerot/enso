import project.Any.Any
import project.Data.Maybe.Maybe
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Errors.Common.No_Such_Conversion
import project.Errors.Wrapped_Error.Wrapped_Error
import project.Meta
import project.Nothing.Nothing
import project.Data.Pair.Pair
import project.Panic.Panic
import project.Runtime.Stack_Trace_Element
from project.Data.Boolean import Boolean, False, True
from project.Function import const

## A type representing dataflow errors.

   A dataflow error in Enso is one that behaves like a standard value, and
   hence represents erroneous states in a way that exists _within_ standard
   control flow.

   ? Dataflow Errors or Panics
     Whilst a Panic is useful for unrecoverable situations, most Enso APIs
     are designed to use dataflow errors instead. As they exist within the
     normal program control flow, they are able to be represented on the
     Enso graph.
@Builtin_Type
type Error
    ## PRIVATE
       ADVANCED
       Creates a new dataflow error containing the provided payload.

       Arguments:
       - payload: The contents of the dataflow error to be created.

       > Example
         Throw a dataflow error containing the text "Oops".

             Error.throw "Oops"
    throw : Any -> Error
    throw payload = @Builtin_Method "Error.throw"

    ## PRIVATE

       Executes the provided handler on a dataflow error, or executes as
       identity on a non-error value.

       Arguments:
       - handler: The function to call on this if it is an error value.
    catch_primitive : (Error -> Any) -> Any
    catch_primitive self handler = @Builtin_Method "Error.catch_primitive"

    ## PRIVATE
       UNSTABLE

       Returns a textual representation of the stack trace attached to an error.
    get_stack_trace_text : Text
    get_stack_trace_text self = @Builtin_Method "Error.get_stack_trace_text"

    ## PRIVATE
       Converts an error to a corresponding textual representation.

       > Example
         Converting a thrown error to text.

             Error.throw "foo" . to_text
    to_text : Text
    to_text self = @Builtin_Method "Error.to_text"

    ## PRIVATE
       Returns a human-readable text representing this error.
    to_display_text : Text
    to_display_text self = "Error: " + (self.catch Any .to_display_text)

    ## GROUP Errors
       Executes the provided handler on an error, or returns the value unchanged.

       Arguments:
       - error_type: The type of error to handle. Defaults to `Any` to handle
         all errors.
       - handler: The function to call on this if it is an error value of a
         matching type. By default this is identity.

       ! Wrapped Errors

         A wrapped error is one that has been wrapped inside another error. For
         example, an error thrown in a `Vector.map operation` at index 3 would
         look like this:

             `(Map_Error.Error 3 (Some_Error.Error "an error occurred"))`

          A wrapped error can be caught either as as the inner error, or as the
          outer error, by using the `error_type` parameter. If it is caught as
          the inner error, the outer wrapping error is removed. If
          `error_wrapper` is unspecified or `Any`, the error is caught as the
          outer error.

          A wrapping error must implement a conversion to `Wrapped_Error` to be
          treated properly as a wrapping error.

       > Example
         Catching an `Illegal_Argument` and returning its message.

             from Standard.Base import all

             example_catch =
                 error = Error.throw (Illegal_Argument.Error "My message")
                 error.catch Illegal_Argument (err -> err.message)

       > Example
         Catching any dataflow error and turning it into a regular value.

             from Standard.Base import all

             example_catch =
                 error = Error.throw 42
                 error.catch == 42

       > Example
         Catch a wrapped error in various ways.

             map_fun a = if a == 30 then Error.throw (Some_Error.Error a) else a+1

             # Catch an error as the inner error
             [10, 20, 30, 40] . map map_fun . catch Some_Error
             # => (Some_Error.Error 30)

             # Catch an error as the outer error
             [10, 20, 30, 40] . map map_fun . catch Map_Error
             # => (Map_Error.Error 2 (Some_Error.Error 30))

             # Catch an error without specifying an error type
             [10, 20, 30, 40] . map map_fun . catch
             # => (Map_Error.Error 2 (Some_Error.Error 30))
    catch : Any -> (Error -> Any) -> Any
    catch self (error_type = Any) (handler = x->x) =
        self.catch_primitive error_value->
            case error_value.is_a error_type of
                True -> handler error_value
                False ->
                    case look_for_wrapped_error error_type error_value of
                        Maybe.None -> self
                        Maybe.Some inner_error -> handler inner_error

    ## PRIVATE
       Convert a wrapped error to a Wrapped_Error. If the argument is not a
       wrapped error, Nothing is returned.
    as_wrapped_error : Any -> Wrapped_Error | Nothing
    as_wrapped_error error_value =
        Panic.catch No_Such_Conversion (Wrapped_Error.from error_value) _->Nothing

    ## PRIVATE
       Determines if this is the specified error wrapper, and, if so, returns
       the inner error. This only unwraps once.
    unwrap_error : Any -> Any -> Maybe Any
    unwrap_error wrapper_error_type error_value =
        case Error.as_wrapped_error error_value of
            Wrapped_Error.Value wrapping_error inner_error ->
                if wrapping_error.is_a wrapper_error_type then Maybe.Some inner_error else Maybe.None
            Nothing -> Maybe.None

    ## Transforms an error.

       Arguments:
       - f: The function used to transform the error.

       If `self` is a non-error value it is returned unchanged. However, if `self`
       is an error, the error is transformed using the provided function

       > Example
         Transforming an error value.

             import Standard.Examples

             example_map_error =
                 map = Examples.map
                 map.at 10 . map_error (_ -> "The element 10 was not found.")
    map_error : (Error -> Error) -> Any
    map_error self f = self.catch Any (x -> Error.throw (f x))

    ## ADVANCED
       GROUP Errors

       Returns the attached stack trace of the error.

       The ordering of the resulting vector is such that the top stack frame is the
       first element.
    stack_trace : Vector Stack_Trace_Element
    stack_trace self =
        Panic.get_attached_stack_trace self

    ## GROUP Errors
       Checks if `self` is an error.

       > Example
         Checking if the value 1 is an error.

             1.is_error
    is_error : Boolean
    is_error self = True

    ## PRIVATE
       ADVANCED
       Returns the provided `other` value, unless `self` is an error.

       Arguments:
       - other: The value to return if `self` is not an error.

       The primary application of this function is to introduce a dataflow
       dependency between two otherwise unrelated operations. Very useful if one
       of the operations is performing a side-effect.

       Aside from ensuring that any dataflow errors are propagated, the result
       will also inherit any warnings attached to any of the two inputs.

       > Example
         Writing to a file and returning the file object if all went well, or an
         error if it failed.

             file.write "foo" . if_not_error file
    if_not_error : Any -> Any
    if_not_error self ~other =
        const self other

## PRIVATE
   Unwrap a wrapped error 0 or more times until the specified type is found.
   Returns None if it is not found.
look_for_wrapped_error : Any -> Any -> Maybe Any
look_for_wrapped_error error_type=Any error_value =
    if error_value.is_a error_type then Maybe.Some error_value else
        inner_error_maybe =
            Panic.catch No_Such_Conversion handler=(_->Maybe.None) <|
                Maybe.Some (Wrapped_Error.from error_value . inner_error)
        case inner_error_maybe of
            Maybe.None -> Maybe.None
            Maybe.Some inner_error ->
                @Tail_Call look_for_wrapped_error error_type inner_error
