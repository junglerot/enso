import project.Any.Any
import project.Data.Pair.Pair
import project.Data.Text.Text
import project.Data.Time.Duration.Duration
import project.Data.Vector.Vector
import project.Error.Error
import project.Network.HTTP.Form.Form
import project.Network.HTTP.Form.Part_Value
import project.Network.HTTP.Header.Header
import project.Network.HTTP.HTTP_Method.HTTP_Method
import project.Network.HTTP.HTTP_Version.HTTP_Version
import project.Network.HTTP.Request.Request
import project.Network.HTTP.Request_Body.Request_Body
import project.Network.HTTP.Response.Response
import project.Network.Proxy.Proxy
import project.Network.URI.URI
import project.Nothing.Nothing
import project.Panic.Panic
from project.Data.Boolean import Boolean, False, True

polyglot java import java.lang.Exception as JException
polyglot java import java.net.http.HttpClient
polyglot java import java.net.http.HttpRequest
polyglot java import java.net.http.HttpResponse
polyglot java import java.net.InetSocketAddress
polyglot java import java.net.ProxySelector
polyglot java import org.enso.base.Http_Utils

type HTTP
    ## ADVANCED
       GROUP Web
       Create a new instance of the HTTP client.

       Arguments:
       - timeout: The length of time the client will wait for responses.
       - follow_redirects: Whether or not the client should follow redirects.
       - proxy: The proxy that the client should use, if any.
       - version: The HTTP version supported by the client.

       > Example
         Create an HTTP client with default settings.
             HTTP.new

       > Example
         Create an HTTP client with extended timeout.
             HTTP.new timeout=(Duration.new seconds=30)

       > Example
         Create an HTTP client with extended timeout and proxy settings.

             import Standard.Base.Data.Time.Duration.Duration
             import Standard.Base.Network.HTTP.HTTP
             import Standard.Base.Network.Proxy.Proxy

             example_new =
                HTTP.new (timeout = (Duration.new seconds=30)) (proxy = Proxy.Address "example.com" 8080)
    new : Duration -> Boolean -> Proxy -> HTTP_Version -> HTTP
    new (timeout = (Duration.new seconds=10)) (follow_redirects = True) (proxy = Proxy.System) (version = HTTP_Version.HTTP_1_1) =
        HTTP.Value timeout follow_redirects proxy version

    ## PRIVATE
       ADVANCED
       Send the Get request and return the body.

       Arguments:
       - uri: The address to which the request will be sent.
       - headers: Any headers for the options request.

       > Example
         Send a Get request and return the body. NOTE: This example will make a
         network request.

             import Standard.Base.Network.HTTP.HTTP

             example_fetch = HTTP.fetch "http://httpbin.org/get"

       > Example
         Send authenticated Get request (note the use of TLS) and return the body.
         NOTE: This example will make a network request.

             import Standard.Base.Network.HTTP.HTTP
             import Standard.Base.Network.HTTP.Header.Header

             example_fetch =
                headers = [Header.authorization_basic "user" "pass"]
                HTTP.fetch "https://httpbin.org/basic-auth/user/pass" headers

       > Example
         Download a file. NOTE: This example will make a network request.

             import Standard.Base.Network.HTTP.HTTP
             import Standard.Examples

             example_fetch =
                 out_file = Examples.scratch_file
                 res = HTTP.fetch "http://httpbin.org/bytes/1024" . to_file out_file
    fetch : (Text | URI) -> Vector -> Response ! Request_Error
    fetch uri (headers = []) =
        HTTP.new.get uri headers . body

    ## PRIVATE

       An HTTP client.

       Arguments:
       - timeout: The length of time the client will wait for responses.
       - follow_redirects: Whether or not the client should follow redirects.
       - proxy: The proxy that the client should use, if any.
       - version: The HTTP version supported by the client.
    Value timeout follow_redirects proxy version

    ## Send an Options request.

       Arguments:
       - uri: The address to which the request will be sent.
       - headers: Any headers for the options request.

       > Example
         Send an Options request. NOTE: This example will make a network
         request.

             import Standard.Base.Network.HTTP.HTTP
             import Standard.Examples

             static_options = HTTP.new.options "http://httpbin.org"
             example_options = Examples.http_client.options "http://httpbin.org"
    options : (Text | URI) -> Vector -> Response ! Request_Error
    options self uri (headers = []) =
        req = Request.options uri headers
        self.request req

    ## Send a Get request.

       Arguments:
       - uri: The address to which the request will be sent.
       - headers: Any headers for the options request.

       > Example
         Send a Get request. NOTE: This example will make a network request.

             import Standard.Examples

             example_get = Examples.http_client.get "http://httpbin.org/get"

       > Example
         Send authenticated Get request (note the use of TLS). NOTE: This
         example will make a network request.

             import Standard.Base.Network.HTTP.Header.Header
             import Standard.Examples

             example_get =
                headers = [Header.authorization_basic "user" "pass"]
                Examples.http_client.get "https://httpbin.org/basic-auth/user/pass" headers

       > Example
            Download a file. NOTE: This example will make a network request.

             import Standard.Examples

             example_get =
                 out_file = Examples.scratch_file
                 res = Examples.http_client.get "http://httpbin.org/bytes/1024"
                 res.body.to_file out_file
    get : (Text | URI) -> Vector -> Response ! Request_Error
    get self uri (headers = []) =
        req = Request.get uri headers
        self.request req

    ## Send a Head request.

       Arguments:
       - uri: The address to which the request will be sent.
       - headers: Any headers for the options request.


       > Example
         Send a Head request. NOTE: This example will make a network request.

             import Standard.Examples

             example_head = Examples.http_client.head "http://httpbin.org"
    head : (Text | URI) -> Vector -> Response ! Request_Error
    head self uri (headers = []) =
        req = Request.head uri headers
        self.request req

    ## Send a Post request.

       Arguments:
       - uri: The address to which the request will be sent.
       - body: The body of the post request.
       - headers: Any headers for the options request.


       > Example
         Send a Post request with binary data. NOTE: This example will make a
         network request.

             import Standard.Base.Network.HTTP.Header.Header
             import Standard.Base.Network.HTTP.Request_Body.Request_Body
             import Standard.Examples

             example_post =
                 body = Request_Body.Bytes "Hello".utf_8
                 Examples.http_client.post "http://httpbin.org/post" body [header_binary]
    post : (Text | URI) -> Request_Body -> Vector -> Response ! Request_Error
    post self uri body (headers = []) =
        req = Request.post uri body headers
        self.request req

    ## Send a Post request with the form. By default it will be encoded as
       "application/x-www-form-urlencoded". To encode the form as
       "multipart/form-data" add the appropriate header.

       Arguments:
       - uri: The address to which the request will be sent.
       - parts: A form, or the parts for creating a form.
       - headers: Any headers for the options request.


       > Example
         Send a Post request with form. NOTE: This example will make a network
         request.

             import Standard.Base.Network.HTTP.Form.Form
             import Standard.Examples

             example_post_form =
                 form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (enso_project.root / "LICENSE")]
                 Examples.http_client.post_form "http://httpbin.org/post" form

       > Example
         Send a Post request with form encoded as "multipart/form-data". NOTE: This
         example will make a network request.

             import Standard.Base.Network.HTTP.Form.Form
             import Standard.Base.Network.HTTP.Header.Header
             import Standard.Examples

             example_post_form =
                 form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (enso_project.root / "LICENSE")]
                 Examples.http_client.post_form "http://httpbin.org/post" form [Header.multipart_form_data]
    post_form : (Text | URI) -> (Vector | Form) -> Vector -> Response ! Request_Error
    post_form self uri parts (headers = []) =
        new_headers = [Header.application_x_www_form_urlencoded]
        req = Request.post uri (Request_Body.Form (Form.new parts)) new_headers . with_headers headers
        self.request req

    ## Send a Post request with body with content-type "application/json".

       Arguments:
       - uri: The address to which the request will be sent.
       - body_json: The JSON body for the post request.
       - headers: Any headers for the options request.


       > Example
         Send a Post request with json data.
         NOTE: This example will make a network request.

             import Standard.Examples

             example_post_json =
                 json = '{"key":"val"}'
                 Examples.http_client.post_json "http://httpbin.org/post" json
    post_json : (Text | URI) -> Text -> Vector -> Response ! Request_Error
    post_json self uri body_json (headers = []) =
        new_headers = [Header.application_json]
        req = Request.post uri (Request_Body.Json body_json) headers . with_headers new_headers
        self.request req

    ## Send a Put request.

       Arguments:
       - uri: The address to which the request will be sent.
       - body: The body for the put request.
       - headers: Any headers for the options request.

       > Example
         Send a Put request with binary data.

             import Standard.Base.Network.HTTP.Header.Header
             import Standard.Base.Network.HTTP.Request_Body.Request_Body
             import Standard.Examples

             example_put =
                 body = Request_Body.Bytes "contents".utf_8
                 Examples.http_client.put "http://httpbin.org/post" body [header_binary]
    put : (Text | URI) -> Request_Body -> Vector -> Response ! Request_Error
    put self uri body (headers = []) =
        req = Request.put uri body headers
        self.request req

    ## Send a Put request with body with content-type "application/json".

       Arguments:
       - uri: The address to which the request will be sent.
       - body_json: The JSON for the body of the put request.
       - headers: Any headers for the options request.

       > Example
         Send a Put request with json data.
         NOTE: This example will make a network request.

             import Standard.Examples

             example_post_json =
                 json = '{"key":"val"}'
                 Examples.http_client.put_json "http://httpbin.org/post" json
    put_json : (Text | URI) -> Text -> Vector -> Response ! Request_Error
    put_json self uri body_json (headers = []) =
        new_headers = [Header.application_json]
        req = Request.put uri (Request_Body.Json body_json) headers . with_headers new_headers
        self.request req

    ## Create a Delete request.

       Arguments:
       - uri: The address to which the request will be sent.
       - headers: Any headers for the options request.

       > Example
         Send a Delete request. NOTE: This example will make a network request.

             import Standard.Examples

             example_delete = Examples.http_client.delete "http://httpbin.org/delete"
    delete : (Text | URI) -> Vector -> Response ! Request_Error
    delete self uri (headers = []) =
        req = Request.delete uri headers
        self.request req

    ## ADVANCED
       Create a request

       Arguments:
       - req: The HTTP request to send using `self` HTTP client.

       > Example
         Send a Get request with headers. NOTE: This example will send a network
         request.

             import Standard.Base.Network.HTTP.HTTP
             import Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method
             import Standard.Base.Network.HTTP.Request.Request

             example_request =
                 req = Request.new HTTP_Method.Get "http://httpbin.org/get" . with_header "X-Trace-Id" "00000"
                 res = Examples.http_client.request req
                 res.body

       > Example
         Open a connection and send a Post request with form. NOTE: This example
         will send a network request.

             import Standard.Base.Network.HTTP.Form.Form
             import Standard.Base.Network.HTTP.Request.Request
             import Standard.Base.Network.HTTP.Request_Body.Request_Body
             import Standard.Examples

             example_request =
                 req = Request.post "http://httpbin.org/post" Body.Empty
                 with_form = req.with_form [Form.text_field "key" "value"]
                 with_header = with_form.with_header "X-Trace-Id" "123456789"
                 res = Examples.http_client.request with_header
                 res.code

       > Example
         Send a Post request with urlencoded form data. NOTE: This example will
         send a network request.

             import Standard.Base.Network.HTTP.Form.Form
             import Standard.Base.Network.HTTP.Request.Request
             import Standard.Base.Network.HTTP.Request_Body.Request_Body
             import Standard.Examples

             example_request =
                 form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (enso_project.root / "LICENSE")]
                 req = Request.post "http://httpbin.org/post" Request_Body.Empty . with_form form
                 Examples.http_client.request req

       > Example
         Send a Post request with form encoded as "multipart/form-data". NOTE:
         This example will send a network request.

             import Standard.Base.Network.HTTP.Form.Form
             import Standard.Base.Network.HTTP.Header.Header
             import Standard.Base.Network.HTTP.Request.Request
             import Standard.Base.Network.HTTP.Request_Body.Request_Body
             import Standard.Examples

             example_request =
                 form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (enso_project.root / "LICENSE")]
                 req = Request.post "http://httpbin.org/post" Request_Body.Empty
                 with_form = req.with_form form
                 with_headers = with_form.with_headers [Header.multipart_form_data]
                 Examples.http_client.request with_headers

       > Example
         Configure HTTP client and send a Post request with form. NOTE: This
         example will send a network request.

             import Standard.Base.Data.Time.Duration.Duration
             import Standard.Base.Network.HTTP.HTTP
             import Standard.Base.Network.HTTP.Form.Form
             import Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method
             import Standard.Base.Network.HTTP.Request.Request

             example_request =
                 form = [Form.text_field "name" "John Doe"]
                 req = Request.new HTTP_Method.Post "http://httpbin.org/post" . with_form form
                 http = HTTP.new (timeout = (Duration.new seconds=30))
                 http.request req
    request : Request -> Response ! Request_Error
    request self req =
        handle_request_error =
            Panic.catch JException handler=(cause-> Error.throw (Request_Error.Error 'IllegalArgumentException' cause.payload.getMessage))
        Panic.recover Any <| handle_request_error <|
            body_publishers = HttpRequest.BodyPublishers
            builder = HttpRequest.newBuilder
            # set uri
            builder.uri (Panic.rethrow req.uri.internal_uri)
            # prepare headers and body
            req_with_body = case req.body of
                Request_Body.Empty ->
                    Pair.new req body_publishers.noBody
                Request_Body.Text text ->
                    builder.header Header.text_plain.name Header.text_plain.value
                    Pair.new req (body_publishers.ofString text)
                Request_Body.Json json ->
                    builder.header Header.application_json.name Header.application_json.value
                    Pair.new req (body_publishers.ofString json)
                Request_Body.Form form ->
                    add_multipart form =
                        body_builder = Http_Utils.multipart_body_builder
                        form.parts.map part-> case part.value of
                            Part_Value.Text text -> body_builder.add_part_text part.key text
                            Part_Value.File file -> body_builder.add_part_file part.key file.path
                        boundary = body_builder.get_boundary
                        Pair.new (req.with_headers [Header.multipart_form_data boundary]) body_builder.build
                    add_urlencoded form =
                        body_builder = Http_Utils.urlencoded_body_builder
                        form.parts.map part-> case part.value of
                            Part_Value.Text text -> body_builder.add_part_text part.key text
                            Part_Value.File file -> body_builder.add_part_file part.key file.path
                        Pair.new req body_builder.build
                    if req.headers.contains Header.multipart_form_data then add_multipart form else
                        add_urlencoded form
                Request_Body.Bytes bytes ->
                    builder.header Header.application_octet_stream.name Header.application_octet_stream.value
                    Pair.new req (body_publishers.ofByteArray bytes)
            # method
            req_http_method = req.method.to_http_method_name
            case req_with_body of
                Pair.Value req body ->
                    # set method and body
                    builder.method req_http_method body
                    # set headers
                    req.headers.map h-> builder.header h.name h.value
            http_request = builder.build
            body_handler = HttpResponse.BodyHandlers . ofByteArray
            Response.Value (self.internal_http_client.send http_request body_handler)

    ## PRIVATE
       Build an HTTP client.
    internal_http_client : HttpClient
    internal_http_client self =
        builder = HttpClient.newBuilder
        builder.connectTimeout self.timeout
        # redirect
        redirect = HttpClient.Redirect
        redirect_policy = case self.follow_redirects of
            True -> redirect.ALWAYS
            False -> redirect.NEVER
        builder.followRedirects redirect_policy
        # proxy
        case self.proxy of
            Proxy.Address proxy_host proxy_port ->
                proxy_selector = ProxySelector.of (InetSocketAddress.new proxy_host proxy_port)
                builder.proxy proxy_selector
            Proxy.System ->
                proxy_selector = ProxySelector.getDefault
                builder.proxy proxy_selector
            Proxy.None ->
                Nothing
        # version
        case self.version of
            HTTP_Version.HTTP_1_1 ->
                builder.version HttpClient.Version.HTTP_1_1
            HTTP_Version.HTTP_2 ->
                builder.version HttpClient.Version.HTTP_2
        # build http client
        builder.build

## PRIVATE
   An error when sending an HTTP request.

   Arguments:
   - error_type: The type of the error.
   - message: The message for the error.
type Request_Error
    ## PRIVATE
    Error error_type message

    ## PRIVATE
       Convert a request error to a human-readable form.
    to_display_text : Text
    to_display_text self =
        description_text = case self.message of
            Nothing -> ""
            _ -> " " + self.message
        self.error_type + " error when sending request." + description_text
