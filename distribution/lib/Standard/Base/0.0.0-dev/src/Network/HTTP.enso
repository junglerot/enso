import project.Any.Any
import project.Data.Map.Map
import project.Data.Pair.Pair
import project.Data.Set.Set
import project.Data.Text.Encoding.Encoding
import project.Data.Text.Text
import project.Data.Time.Duration.Duration
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Common.Forbidden_Operation
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Meta
import project.Network.HTTP.Header.Header
import project.Network.HTTP.HTTP_Method.HTTP_Method
import project.Network.HTTP.HTTP_Version.HTTP_Version
import project.Network.HTTP.Request.Request
import project.Network.HTTP.Request_Body.Request_Body
import project.Network.HTTP.Response.Response
import project.Network.Proxy.Proxy
import project.Network.URI.URI
import project.Nothing.Nothing
import project.Panic.Panic
import project.Runtime.Context
import project.System.File.File
from project.Data.Boolean import Boolean, False, True
from project.Data.Json.Extensions import all

polyglot java import java.lang.Exception as JException
polyglot java import java.net.http.HttpClient
polyglot java import java.net.http.HttpRequest
polyglot java import java.net.http.HttpRequest.BodyPublisher
polyglot java import java.net.http.HttpResponse
polyglot java import java.net.InetSocketAddress
polyglot java import java.net.ProxySelector
polyglot java import java.nio.file.Path
polyglot java import org.enso.base.Http_Utils

type HTTP
    ## PRIVATE
       ADVANCED
       Create a new instance of the HTTP client.

       Arguments:
       - timeout: The length of time the client will wait for responses.
       - follow_redirects: Whether or not the client should follow redirects.
       - proxy: The proxy that the client should use, if any.
       - version: The HTTP version supported by the client.

       > Example
         Create an HTTP client with default settings.
             HTTP.new

       > Example
         Create an HTTP client with extended timeout.
             HTTP.new timeout=(Duration.new seconds=30)

       > Example
         Create an HTTP client with extended timeout and proxy settings.

             import Standard.Base.Data.Time.Duration.Duration
             import Standard.Base.Network.HTTP.HTTP
             import Standard.Base.Network.Proxy.Proxy

             example_new =
                HTTP.new (timeout = (Duration.new seconds=30)) (proxy = Proxy.Address "example.com" 8080)
    new : Duration -> Boolean -> Proxy -> HTTP_Version -> HTTP
    new (timeout = (Duration.new seconds=10)) (follow_redirects = True) (proxy = Proxy.System) (version = HTTP_Version.HTTP_1_1) =
        HTTP.Value timeout follow_redirects proxy version

    ## PRIVATE
       An HTTP client.

       Arguments:
       - timeout: The length of time the client will wait for responses.
       - follow_redirects: Whether or not the client should follow redirects.
       - proxy: The proxy that the client should use, if any.
       - version: The HTTP version supported by the client.
    Value timeout follow_redirects proxy version

    ## ADVANCED
       Sends a request using the HTTP client.
       The response body will contain a raw Input_Stream which can be read once.
       Please note, this must be closed after use (either directly or via the
       helpers on Response_Body).

       Arguments:
       - req: The HTTP request to send using `self` HTTP client.
       - error_on_failure_code: Whether or not to throw an error if the response
         code is not a success code.
    request : Request -> Boolean -> Response ! Request_Error
    request self req error_on_failure_code=True =
        # Prevent request if the method is a write-like method and output context is disabled.
        check_output_context ~action =
            if fetch_methods.contains req.method || Context.Output.is_enabled then action else
                Error.throw (Forbidden_Operation.Error ("Method " + req.method.to_text + " requests are forbidden as the Output context is disabled."))
        handle_request_error =
            Panic.catch JException handler=(cause-> Error.throw (Request_Error.Error 'IllegalArgumentException' cause.payload.getMessage))

        Panic.recover Any <| handle_request_error <| check_output_context <|
            body_publishers = HttpRequest.BodyPublishers
            builder = HttpRequest.newBuilder

            # set uri
            uri = case req.uri of
                _ : Text -> req.uri.to_uri
                _ : URI -> req.uri
            builder.uri uri.internal_uri

            headers = resolve_headers req

            headers.if_not_error <|
                # Generate body publisher and optional form content boundary
                body_publisher_and_boundary = case req.body of
                    Request_Body.Text text encoding _ ->
                        body_publisher = case encoding of
                            Nothing -> body_publishers.ofString text
                            _ : Encoding ->  body_publishers.ofString text encoding.to_java_charset
                        Pair.new body_publisher Nothing
                    Request_Body.Json x ->
                        json = x.to_json
                        json.if_not_error <|
                            Pair.new (body_publishers.ofString json) Nothing
                    Request_Body.Binary file ->
                        path = Path.of file.path
                        Pair.new (body_publishers.ofFile path) Nothing
                    Request_Body.Form_Data form_data url_encoded ->
                        build_form_body_publisher form_data url_encoded
                    Request_Body.Empty ->
                        Pair.new (body_publishers.noBody) Nothing
                    _ ->
                        Error.throw (Illegal_Argument.Error ("Unsupported POST body: " + req.body.to_display_text + "; this is a bug in the Data library"))

                # Send request
                body_publisher_and_boundary.if_not_error <|
                    body_publisher = body_publisher_and_boundary.first
                    boundary = body_publisher_and_boundary.second

                    boundary_header_list = if boundary.is_nothing then [] else [Header.multipart_form_data boundary]

                    # set method and body
                    builder.method req.method.to_http_method_name body_publisher

                    # set headers
                    all_headers = headers + boundary_header_list
                    all_headers.map h-> builder.header h.name h.value

                    http_request = builder.build
                    body_handler = HttpResponse.BodyHandlers . ofInputStream

                    response = Response.Value (self.internal_http_client.send http_request body_handler)
                    if error_on_failure_code.not || response.code.is_success then response else
                        Error.throw (Request_Error.Error "Status Code" ("Request failed with status code: " + response.code.to_text + ". " + response.body.decode_as_text))

    ## PRIVATE
       Static helper for get-like methods
    fetch : (URI | Text) -> HTTP_Method -> Vector (Header | Pair Text Text) -> Any
    fetch (uri:(URI | Text)) (method:HTTP_Method=HTTP_Method.Get) (headers:(Vector (Header | Pair Text Text))=[]) =
        check_method fetch_methods method <|
            request = Request.new method uri (parse_headers headers) Request_Body.Empty
            HTTP.new.request request

    ## PRIVATE
       Static helper for post-like methods
    post : (URI | Text) -> Request_Body -> HTTP_Method -> Vector (Header | Pair Text Text) -> Any
    post (uri:(URI | Text)) (body:Request_Body=Request_Body.Empty) (method:HTTP_Method=HTTP_Method.Post) (headers:(Vector (Header | Pair Text Text))=[]) =
        check_method post_methods method <|
            request = Request.new method uri (parse_headers headers) body
            HTTP.new.request request

    ## PRIVATE

       Build an HTTP client.
    internal_http_client : HttpClient
    internal_http_client self =
        builder = HttpClient.newBuilder
        builder.connectTimeout self.timeout
        # redirect
        redirect = HttpClient.Redirect
        redirect_policy = case self.follow_redirects of
            True -> redirect.ALWAYS
            False -> redirect.NEVER
        builder.followRedirects redirect_policy
        # proxy
        case self.proxy of
            Proxy.Address proxy_host proxy_port ->
                proxy_selector = ProxySelector.of (InetSocketAddress.new proxy_host proxy_port)
                builder.proxy proxy_selector
            Proxy.System ->
                proxy_selector = ProxySelector.getDefault
                builder.proxy proxy_selector
            Proxy.None ->
                Nothing
        # version
        case self.version of
            HTTP_Version.HTTP_1_1 ->
                builder.version HttpClient.Version.HTTP_1_1
            HTTP_Version.HTTP_2 ->
                builder.version HttpClient.Version.HTTP_2
        # build http client
        builder.build

## PRIVATE
parse_headers : Vector (Header | Pair Text Text) -> Vector Header
parse_headers headers =
    headers . map h-> case h of
        _ : Vector -> Header.new (h.at 0) (h.at 1)
        _ : Pair -> Header.new (h.at 0) (h.at 1)
        _ : Header -> h
        _ -> Error.throw (Illegal_Argument.Error "Invalid header type - all values must be Vector, Pair or Header (got "+(Meta.get_simple_type_name h)+").")

## PRIVATE
   If either encoding or content type is specified in the Request_Body, that is used as the content type header.
   If encoding is specified without content type, "text/plain" is used as the content type.
   It is an error to specify the content type in both the request body and the header list.
   If the body is not Request_Body.Empty, and no content type is specified, a default is used.
resolve_headers : Request -> Vector Header
resolve_headers req =
    is_content_type_header h = h.name . equals_ignore_case Header.content_type_header_name

    # Check for content type and encoding in the Request_Body.
    request_body_content_type_header = case req.body of
        Request_Body.Text _ request_body_encoding request_body_content_type ->
            if request_body_content_type.is_nothing && request_body_encoding.is_nothing then Nothing else
                content_type = request_body_content_type.if_nothing "text/plain"
                encoding = request_body_encoding.if_nothing Encoding.utf_8
                Header.content_type content_type encoding=encoding
        _ -> Nothing

    ## Raise error if content type is specified in both the request body and
       header list; otherwise, add any Request_Body settings to the header list.
    has_content_type_header_in_list = req.headers.any is_content_type_header

    content_type_additions = case request_body_content_type_header.is_nothing.not && has_content_type_header_in_list of
        True -> Error.throw (Illegal_Argument.Error "Cannot specify Content-Type/encoding in both the request body and request headers")
        False ->
            if request_body_content_type_header.is_nothing then [] else [request_body_content_type_header]

    content_type_additions.if_not_error <|
        all_headers = req.headers + content_type_additions

        # Add default content type, if one is not specified and the body is not Request_Body.Empty.
        contains_content_type = all_headers.any is_content_type_header
        is_body_empty = case req.body of
            Request_Body.Empty -> True
            _ -> False
        default_content_type = if is_body_empty || contains_content_type then [] else
            default = req.body.default_content_type_header
            if default.is_nothing then [] else [default]

        all_headers + default_content_type

## PRIVATE

   Build a BodyPublisher from the given form data.
   The pair's second value is a content boundary in the case of a `multipart/form-data` form; otherwise, Nothing
build_form_body_publisher : Map Text (Text | File) -> Boolean -> Pair BodyPublisher Text
build_form_body_publisher (form_data:(Map Text (Text | File))) (url_encoded:Boolean=False) = case url_encoded of
    True ->
        body_builder = Http_Utils.urlencoded_body_builder
        form_data.map_with_key key-> value->
            case value of
                _ : Text -> body_builder.add_part_text key value
                _ : File -> body_builder.add_part_file key value.path
        Pair.new body_builder.build Nothing
    False ->
        body_builder = Http_Utils.multipart_body_builder
        form_data.map_with_key key-> value->
            case value of
                _ : Text -> body_builder.add_part_text key value
                _ : File -> body_builder.add_part_file key value.path
        boundary = body_builder.get_boundary
        Pair.new body_builder.build boundary

## PRIVATE
fetch_methods : Set HTTP_Method
fetch_methods = Set.from_vector [HTTP_Method.Get, HTTP_Method.Head, HTTP_Method.Options]

## PRIVATE
post_methods : Set HTTP_Method
post_methods = Set.from_vector [HTTP_Method.Post, HTTP_Method.Put, HTTP_Method.Patch, HTTP_Method.Delete]

## PRIVATE
check_method : Set HTTP_Method -> Any -> Any -> Any ! Illegal_Argument
check_method allowed_methods method ~action =
    if allowed_methods.contains method then action else
        Error.throw (Illegal_Argument.Error ("Unsupported method " + method.to_display_text))

## PRIVATE
   An error when sending an HTTP request.

   Arguments:
   - error_type: The type of the error.
   - message: The message for the error.
type Request_Error
    ## PRIVATE
    Error error_type message

    ## PRIVATE
       Convert a request error to a human-readable form.
    to_display_text : Text
    to_display_text self =
        description_text = case self.message of
            Nothing -> ""
            _ -> " " + self.message
        self.error_type + " error when sending request." + description_text
