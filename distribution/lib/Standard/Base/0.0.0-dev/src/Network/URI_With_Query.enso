import project.Data.Enso_Cloud.Enso_Secret.Enso_Secret
import project.Data.Enso_Cloud.Enso_Secret.Enso_Secret_Error
import project.Data.Json.JS_Object
import project.Data.Pair.Pair
import project.Data.Text.Encoding.Encoding
import project.Data.Text.Extensions
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Common.Syntax_Error
import project.Meta
import project.Network.URI.URI
import project.Nothing.Nothing
import project.Panic.Panic
from project.Data.Boolean import Boolean, False, True

polyglot java import java.net.URI as Java_URI
polyglot java import java.net.URISyntaxException
polyglot java import org.enso.base.enso_cloud.EnsoSecretHelper
polyglot java import org.enso.base.net.URIHelpers

## Represents a URI with a set of query parameters
type URI_With_Query
    ## PRIVATE
    Value uri:URI (parameters : Vector (Pair Text (Text | Enso_Secret)))

    ## PRIVATE
       Convert this to URI.
       Materialize the URI_With_Query into a URI, but will error if any secrets
       are used.
    to_uri : URI ! Enso_Secret_Error
    to_uri self =
        java_params = make_java_parameters self.get_raw_parameters
        URI.Value (build_java_uri_with_parameters self.uri.internal_uri java_params)

    ## GROUP Metadata
       Get the query part of this URI, but will error if any secrets are used.
    query : Text | Nothing ! Enso_Secret_Error
    query self = self.to_uri.query

    ## GROUP Calculations
       Adds a query parameter to the URI

       Arguments:
       - key: The key of the query parameter.
       - value: The value of the query parameter.
    add_query_argument : Text -> Text | Enso_Secret -> URI
    add_query_argument self key:Text value:(Text | Enso_Secret) =
        URI_With_Query.Value self.uri self.parameters+[Pair.new key value]

    ## PRIVATE
       Returns a list of parameters as name-value pairs.
       It will fail if any secrets are used.
    get_raw_parameters : Vector (Pair Text Text) ! Enso_Secret_Error
    get_raw_parameters self =
        self.parameters.map p-> case p.second of
            _ : Enso_Secret -> Error.throw Enso_Secret_Error.Access_Denied
            _ : Text -> p

    ## PRIVATE
       Convert this URI to text.
    to_text : Text
    to_text self =
        masked_parameters = self.parameters.map p-> case p.second of
            _ : Enso_Secret -> Pair.new p.first "__SECRET__"
            _ : Text -> p
        java_params = make_java_parameters masked_parameters
        java_uri = build_java_uri_with_parameters self.uri.internal_uri java_params
        java_uri.to_text

    ## PRIVATE
       Convert to a display representation of this URI.
    to_display_text : Text
    to_display_text self = self.to_text.to_display_text

    ## PRIVATE
       Convert to a JavaScript Object representing this URI.
    to_js_object : JS_Object
    to_js_object self =
        type_pair = ["type", "URI_With_Query"]
        cons_pair = ["constructor", "parse"]
        JS_Object.from_pairs [type_pair, cons_pair, ["uri", self.uri.to_text], ["parameters", self.parameters.to_js_object]]

    ## GROUP Metadata
       Get the scheme part of this URI.
    scheme : Text | Nothing
    scheme self = self.uri.scheme

    ## GROUP Metadata
       Get the user info part of this URI.
    user_info : Text | Nothing
    user_info self = self.uri.user_info

    ## GROUP Metadata
       Get the host part of this URI.
    host : Text | Nothing
    host self = self.uri.host

    ## GROUP Metadata
       Get the authority (user info and host) part of this URI.
    authority : Text | Nothing
    authority self = self.uri.authority

    ## GROUP Metadata
       Get the port part of this URI.
    port : Text | Nothing
    port self = self.uri.port

    ## GROUP Metadata
       Get the path part of this URI.
    path : Text | Nothing
    path self = self.uri.path

    ## GROUP Metadata
       Get the fragment part of this URI.
    fragment : Text | Nothing
    fragment self = self.uri.fragment

## PRIVATE
make_java_parameters params = params.map p->
    URIHelpers.NameValuePair.new p.first p.second

## PRIVATE
build_java_uri_with_parameters java_uri java_params =
    Panic.catch URISyntaxException (URIHelpers.addQueryParameters java_uri java_params) caught_panic->
        message = caught_panic.payload.getMessage
        Error.throw (Syntax_Error.Error "Unable to collapse to a URI: "+message)

## PRIVATE
URI.from (that : URI_With_Query) = that.to_uri
