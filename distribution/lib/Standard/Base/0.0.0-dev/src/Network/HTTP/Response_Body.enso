import project.Any.Any
import project.Data.Json.JS_Object
import project.Data.Json.Json
import project.Data.Numbers.Number
import project.Data.Text.Encoding.Encoding
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.IO
import project.Meta
import project.Metadata.Display
import project.Metadata.Widget
import project.Network.HTTP.HTTP_Error.HTTP_Error
import project.Network.URI.URI
import project.Nothing.Nothing
import project.Runtime.Context
import project.Runtime.Managed_Resource.Managed_Resource
import project.System.File.Existing_File_Behavior.Existing_File_Behavior
import project.System.File.File
import project.System.File.File_Access.File_Access
import project.System.File.Write_Extensions
import project.System.File_Format.Auto_Detect
import project.System.File_Format.Bytes
import project.System.File_Format.File_Format
import project.System.File_Format.Plain_Text_Format
import project.System.Input_Stream.Input_Stream
from project.Data.Boolean import Boolean, False, True
from project.Data.Text.Extensions import all
from project.Metadata.Choice import Option
from project.Metadata.Widget import Single_Choice
from project.System.File_Format import format_types

polyglot java import java.io.ByteArrayInputStream
polyglot java import java.io.InputStream

## PRIVATE
   How large a response body can be before it is written to a temporary file.
maximum_body_in_memory = 4192

## PRIVATE
type Response_Body
    ## PRIVATE
       Create a Response_Body.

       Arguments:
       - stream: The body of the response as an InputStream.
       - content_type: The content type of the response.
       - uri: The URI of the response.
    new : InputStream -> Text -> URI -> Response_Body
    new stream content_type uri =
        input_stream = Input_Stream.new stream (HTTP_Error.handle_java_exceptions uri)
        Response_Body.Raw_Stream input_stream content_type uri

    ## PRIVATE
       For internal use only. Should be materialised before returning to an end
       user.
    Raw_Stream (raw_stream:Input_Stream) (content_type:Text|Nothing) uri:URI

    ## PRIVATE
    Byte_Array (bytes:Vector) (content_type:Text|Nothing) uri:URI

    ## PRIVATE
    Temporary_File (file_resource:Managed_Resource) (content_type:Text|Nothing) uri:URI

    ## PRIVATE
    with_stream : (Input_Stream -> Any ! HTTP_Error) -> Any ! HTTP_Error
    with_stream self action = case self of
        Response_Body.Raw_Stream raw_stream _ _ ->
            Managed_Resource.bracket raw_stream (_.close) action
        Response_Body.Byte_Array bytes _ _ ->
            byte_stream = Input_Stream.new (ByteArrayInputStream.new bytes) (HTTP_Error.handle_java_exceptions self.uri)
            Managed_Resource.bracket byte_stream (_.close) action
        Response_Body.Temporary_File file_resource _ _ -> file_resource.with file->
            opts = [File_Access.Read.to_java]
            stream = HTTP_Error.handle_java_exceptions self.uri (file.input_stream_builtin opts)
            file_stream = Input_Stream.new stream (HTTP_Error.handle_java_exceptions self.uri)
            Managed_Resource.bracket (file_stream) (_.close) action

    ## PRIVATE
       ADVANCED
       Materializes the stream into either a byte array or a temporary file and
       return a new Response_Body.
    materialize : Input_Stream
    materialize self = case self of
        Response_Body.Raw_Stream _ _ _ ->
            self.with_stream body_stream->
                body_stream.with_java_stream body_java_stream->
                    first_block = body_java_stream.readNBytes maximum_body_in_memory
                    case first_block.length < maximum_body_in_memory of
                        True -> Response_Body.Byte_Array (Vector.from_polyglot_array first_block) self.content_type self.uri
                        False ->
                            file = File.create_temporary_file self.uri.host

                            ## Write contents to temporary file
                            Context.Output.with_enabled <|
                                file.with_output_stream [File_Access.Write, File_Access.Create, File_Access.Truncate_Existing] output_stream->
                                    output_stream.with_java_stream java_output_stream->
                                        java_output_stream.write first_block
                                        body_java_stream.transferTo java_output_stream
                                        java_output_stream.flush
                                        Nothing
                                    output_stream.close

                            ## Have a file with the correct set up
                            resource = Managed_Resource.register file delete_file
                            Response_Body.Temporary_File resource self.content_type self.uri
        _ -> self

    ## ALIAS parse
       GROUP Input
       Uses the format to decode the body.
       If using `Auto_Detect`, the content-type will be used to determine the
       format.

       Arguments:
       - format: The format to use to decode the body.
       - if_unsupported: Specifies how to proceed if the format is not supported.
    @format decode_format_selector
    decode : File_Format -> Any -> Any
    decode self format=Auto_Detect ~if_unsupported=(Error.throw (Unsupported_Content_Type.Error self.content_type)) =
        case format of
            Auto_Detect ->
                content_type = self.content_type
                content_type_format = if content_type.is_nothing then Nothing else
                    Auto_Detect.get_web_parser content_type (self.uri.to_text)
                if content_type_format.is_nothing then if_unsupported else self.decode content_type_format
            _ ->
                type_obj = Meta.type_of format
                if can_decode type_obj . not then Error.throw (Illegal_Argument.Error type_obj.to_text+" cannot be used to decode from a stream. It must be saved to a file first.") else
                    self.with_stream format.read_stream

    ## ALIAS bytes
       GROUP Input
       Read the body as a byte array.
    decode_as_bytes : Vector
    decode_as_bytes self = self.decode Bytes

    ## ALIAS parse as text
       GROUP Conversions
       Decodes the body to a Text value.
    @encoding Encoding.default_widget
    decode_as_text : Encoding -> Text
    decode_as_text self encoding=Encoding.utf_8 = self.decode (Plain_Text_Format.Plain_Text encoding)

    ## ALIAS parse as json, parse json
       GROUP Conversions
       Decodes the body as JSON.

       > Example
         Convert a response from JSON.

             import Standard.Examples

             example_to_text = Examples.get_geo_data.decode_as_json
    @encoding Encoding.default_widget
    decode_as_json : Encoding -> JS_Object | Boolean | Number | Nothing | Text | Vector
    decode_as_json self encoding=Encoding.utf_8 =
        self.decode_as_text encoding . parse_json

    ## PRIVATE
       Convert response body to Text.
    to_text : Text
    to_text self = "Response_Body"

    ## GROUP Output
       Write response body to a File.

       Arguments:
       - file: The file to write the body to.
       - on_existing_file: Specifies how to proceed if the file already exists.

       > Examples
         Write the contents of the request body to a scratch file on disk. The
         file will be created if it does not exist, and will be overwritten if
         it does.

             import Standard.Examples

             example_to_file =
                Examples.get_geo_data.to_file Examples.scratch_file
    to_file : File | Text -> Existing_File_Behavior -> File
    to_file self file on_existing_file=Existing_File_Behavior.Backup =
        self.with_stream body_stream->
            f = File.new file
            r = on_existing_file.write f output_stream->
                output_stream.write_stream body_stream
            r.if_not_error file

## PRIVATE
type Unsupported_Content_Type
    ## PRIVATE
       A type representing an unsupported content type.

       Arguments:
       - content_type: The content type that is unsupported.
    Error (content_type : Text | Nothing)

    ## PRIVATE
       Convert the error to a human readable string.
    to_display_text : Text
    to_display_text self = case self.content_type of
        Nothing -> "The response did not contain a content type."
        _ : Text -> "The content type '" + self.content_type +"' cannot be automatically decoded."

## PRIVATE
can_decode : File_Format -> Boolean
can_decode type = Meta.meta type . methods . contains "read_stream"

## PRIVATE
   Selector for decoding from the web.
decode_format_selector : Widget
decode_format_selector =
    all_types = [Auto_Detect] + (format_types.filter can_decode)
    make_name type_obj = type_obj.to_text.replace "_Format" "" . replace "_" " "
    Single_Choice display=Display.Always values=(all_types.map n->(Option (make_name n) (File_Format.constructor_code n)))

## PRIVATE
   Utility method for closing primitive Java streams. Provided to avoid
   accidental scope capture with `Managed_Resource` finalizers.
delete_file : Any -> Nothing
delete_file file =
    Context.Output.with_enabled <| file.delete
    Nothing
