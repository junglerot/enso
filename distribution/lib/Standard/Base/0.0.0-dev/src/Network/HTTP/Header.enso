import project.Data.Enso_Cloud.Enso_Secret.Enso_Secret
import project.Data.Enso_Cloud.Enso_Secret.Derived_Secret_Value
import project.Data.Enso_Cloud.Utils as Cloud_Utils
import project.Data.Numbers.Integer
import project.Data.Text.Encoding.Encoding
import project.Data.Text.Text
import project.Nothing.Nothing
from project.Data.Boolean import Boolean, False, True
from project.Data.Ordering import all
from project.Data.Text.Extensions import all

polyglot java import org.graalvm.collections.Pair as Java_Pair

type Header
    ## PRIVATE

       A type representing a header.

       Arguments:
       - name: The header name.
       - value: The header value.
    Value name:Text value:(Text|Enso_Secret|Derived_Secret_Value)

    ## ALIAS Build a Header

       Create a new Header.

       Arguments:
       - name: The name of the header.
       - value: The value for the header.

       > Example
         Create a new header called "My_Header".

             import Standard.Base.Network.HTTP.Header.Header

             example_new = Header.new "My_Header" "my header's value"
    new : Text -> Text | Enso_Secret -> Header
    new name:Text value:(Text | Enso_Secret | Derived_Secret_Value) = Header.Value name value

    ## Create an "Accept" header.

       Arguments:
       - value: The value for the accept header.

       > Example
         Create an accept header.

             import Standard.Base.Network.HTTP.Header.Header

             example_accept = Header.accept "my_field"
    accept : Text -> Header
    accept value = Header.Value "Accept" value

    ## Create a header that accepts all (`"*/*"`).

       > Example
         Create an accept all header.

             import Standard.Base.Network.HTTP.Header.Header

             example_accept_all = Header.accept_all
    accept_all : Header
    accept_all = Header.accept "*/*"

    ## ALIAS Build an Auth Header

       Create an "Authorization" header.

       Arguments:
       - value: The value for the authorization header.

       > Example
         Create an auth header containing "foo".

             import Standard.Base.Network.HTTP.Header.Header

             example_auth = Header.authorization "foo"
    authorization : Text | Enso_Secret | Derived_Secret_Value -> Header
    authorization (value : Text | Enso_Secret | Derived_Secret_Value) = Header.Value "Authorization" value

    ## Create HTTP basic auth header.

       Arguments:
       - user: The username.
       - pass: The password.

       > Example
         Create basic auth header.

             import Standard.Base.Network.HTTP.Header.Header

             example_auth_basic = Header.authorization_basic "user" "pass"
    authorization_basic : Text | Enso_Secret | Derived_Secret_Value -> Text | Enso_Secret | Derived_Secret_Value -> Header
    authorization_basic (user : Text | Enso_Secret | Derived_Secret_Value) (pass : Text | Enso_Secret | Derived_Secret_Value) =
        pair = (Derived_Secret_Value.from user) + (Derived_Secret_Value.from ":") + (Derived_Secret_Value.from pass)
        value = (Derived_Secret_Value.from "Basic ") + (Derived_Secret_Value.Base_64_Encode pair)
        Header.authorization value.simplify

    ## Create bearer token auth header.

       Arguments:
       - token: The token.
    authorization_bearer : Text -> Header
    authorization_bearer (token : Text | Enso_Secret | Derived_Secret_Value) =
        value = ((Derived_Secret_Value.from "Bearer ") + (Derived_Secret_Value.from token))
        Header.authorization value.simplify

    ## Create "Content-Type" header.

       Arguments:
       - value: The value for the content type header.
       - encoding: The `Encoding` to use as the `charset` in the content-type
         value. If encoding is `Nothing`, then the `charset` is not added to the
         header valye.

       > Example
         Create a content type header containing "my_type".

             import Standard.Base.Network.HTTP.Header.Header

             example_content_type = Header.content_type "my_type"
    content_type : Text -> Encoding | Nothing -> Header
    content_type value:Text encoding:(Encoding | Nothing)=Nothing =
        charset = if encoding.is_nothing then "" else "; charset="+encoding.character_set
        Header.Value Header.content_type_header_name value+charset

    ## Header "Content-Type: application/json".

       > Example
         Create a header with content type "application/json".

             import Standard.Base.Network.HTTP.Header.Header

             example_app_json = Header.application_json
    application_json : Header
    application_json = Header.content_type "application/json"

    ## Header "Content-Type: application/octet-stream".

       > Example
         Create a header with content type "application/octet-stream".

             import Standard.Base.Network.HTTP.Header.Header

             example_app_octet = Header.application_octet_stream
    application_octet_stream : Header
    application_octet_stream = Header.content_type "application/octet-stream"

    ## Header "Content-Type: application/x-www-form-urlencoded".

       > Example
         Create a header with content type "application/x-www-form-urlencoded".

             import Standard.Base.Network.HTTP.Header.Header

             example_app_x_www = Header.application_x_www_form_urlencoded
    application_x_www_form_urlencoded : Header
    application_x_www_form_urlencoded = Header.content_type "application/x-www-form-urlencoded"

    ## Header "Content-Type: multipart/form-data".

       Arguments:
       - boundary: The text that delimits boundaries between the parts of the form.

       > Example
         Create a header with content type "multipart/form-data".

             import Standard.Base.Network.HTTP.Header.Header

             example_multipart = Header.multipart_form_data
    multipart_form_data : Text -> Header
    multipart_form_data (boundary:Text="") =
        if boundary == "" then Header.content_type "multipart/form-data" else
            Header.content_type ("multipart/form-data; boundary=" + boundary)

    ## Header "Content-Type: text/plain".

       > Example
         Create a header with the content type "text/plain".

             import Standard.Base.Network.HTTP.Header.Header

             example_header_text_plain = Header.text_plain
    text_plain : Header
    text_plain = Header.content_type "text/plain"


    ## PRIVATE
       Convert to a display representation of this Header.
    to_display_text : Text
    to_display_text self = self.name + ": " + self.value.to_display_text

    ## PRIVATE
       Gets the name for content_type
    content_type_header_name : Text
    content_type_header_name = "Content-Type"

    ## PRIVATE
    to_java_pair : Java_Pair
    to_java_pair self =
        Java_Pair.create self.name (Cloud_Utils.as_hideable_value self.value)

## PRIVATE
type Header_Comparator
    ## PRIVATE
    compare : Header -> Header -> Ordering
    compare x y =
        if x.name.equals_ignore_case y.name && x.value == y.value then Ordering.Equal else
            Nothing

    ## PRIVATE
    hash : Header -> Integer
    hash x =
        key = x.name.to_case_insensitive_key + x.value
        Comparable.from key . hash key

## PRIVATE
Comparable.from (_:Header) = Header_Comparator
