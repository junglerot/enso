import project.Data.Enso_Cloud.Enso_Secret.Enso_Secret
import project.Data.Enso_Cloud.Enso_Secret.Enso_Secret_Error
import project.Data.Enso_Cloud.Utils as Cloud_Utils
import project.Data.Json.JS_Object
import project.Data.Numbers.Integer
import project.Data.Ordering.Comparable
import project.Data.Ordering.Ordering
import project.Data.Pair.Pair
import project.Data.Text.Text
import project.Data.Vector.No_Wrap
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Common.Syntax_Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Errors.Illegal_State.Illegal_State
import project.Errors.Problem_Behavior.Problem_Behavior
import project.Meta
import project.Nothing.Nothing
import project.Panic.Panic
from project.Data.Boolean.Boolean import False, True
from project.Data.Enso_Cloud.Enso_Secret import as_hideable_value
from project.Data.Text.Extensions import all

polyglot java import java.net.URI as Java_URI
polyglot java import java.net.URISyntaxException
polyglot java import org.graalvm.collections.Pair as Java_Pair

polyglot java import org.enso.base.enso_cloud.EnsoSecretAccessDenied
polyglot java import org.enso.base.net.URITransformer
polyglot java import org.enso.base.net.URIWithSecrets

## Represents a Uniform Resource Identifier (URI) reference.
type URI
    ## ALIAS get uri
       GROUP Conversions

       Parse a URI from text.

       Arguments:
       - uri: The text to parse as a URI.

       Throws a Syntax_Error when the text cannot be parsed as a URI.

       > Example
         Parse URI text.

             import Standard.Base.Network.URI.URI

             example_parse = URI.parse "http://example.com"
    parse : Text -> URI ! Syntax_Error
    parse uri:Text =
        Panic.catch URISyntaxException (URI.Value (Java_URI.new uri) []) caught_panic->
            message = caught_panic.payload.getMessage
            truncated = if message.is_nothing || message.length > 100 then "Invalid URI '" + uri.to_display_text + "'" else
                "URI syntax error: " + message
            Error.throw (Syntax_Error.Error truncated)

    ## GROUP Metadata
       Get the scheme part of this URI.

       > Example
         Return the scheme from the URI.

             import Standard.Examples

             example_scheme = Examples.uri.scheme
    scheme : Text | Nothing
    scheme self = handle_resolve_errors <|
        self.to_java_representation.getScheme

    ## GROUP Metadata
       Get the user info part of this URI.

       > Example
         Return the user info part of the URI.

             import Standard.Examples

             example_user_info = Examples.uri.user_info
    user_info : Text | Nothing ! Enso_Secret_Error
    user_info self = handle_resolve_errors <|
        self.to_java_representation.getUserInfo

    ## GROUP Metadata
       Get the host part of this URI.

       > Example
         Return the host portion of the URI.

             import Standard.Examples

             example_host = Examples.uri.host
    host : Text | Nothing
    host self = handle_resolve_errors <|
        self.to_java_representation.getHost

    ## Get the authority (user info and host) part of this URI.

       > Example
         Return the authority portion of the URI.

             import Standard.Examples

             example_authority = Examples.uri.authority
    authority : Text | Nothing ! Enso_Secret_Error
    authority self = handle_resolve_errors <|
        self.to_java_representation.getAuthority

    ## Get the port part of this URI.

       > Example
         Return the port portion of the URI

             import Standard.Examples

             example_port = Examples.uri.port
    port : Integer | Nothing
    port self = handle_resolve_errors <|
        port_number = self.to_java_representation.getPort
        if port_number == -1 then Nothing else port_number

    ## GROUP Metadata
       Get the path part of this URI.

       > Example
         Return the path portion of the URI.

             import Standard.Examples

             example_path = Examples.uri.path
    path : Text | Nothing
    path self = handle_resolve_errors <|
        self.to_java_representation.getPath

    ## GROUP Calculations
       Extends the path of this URI with an additional segment.

       Arguments:
       - segment: The segment to add to the path.
         The `segment` may contain multiple segments separated by `/` characters.
         Any other characters that are not normally permitted in a URI will be
         percent-encoded.
    / : Text -> URI
    / self segment:Text =
        has_question_mark = if segment.contains "?" then [Illegal_Argument.Error "The requested path contained a '?' symbol which has been URL-encoded. If you want to modify the query, use the `add_query_argument` method instead."] else []
        has_hash = if segment.contains "#" then [Illegal_Argument.Error "The requested path contained a '#' symbol which has been URL-encoded. The `/` is not meant to be used to set a fragment for the URI."] else []

        segments = if segment == "" then ["", ""] else
            segment.split "/"
        result = URI.Value (URITransformer.extendPath self.internal_uri segments) self.additional_query_parameters
        Problem_Behavior.Report_Warning.attach_problems_before (has_question_mark+has_hash) result

    ## GROUP Metadata
       Get the query part of this URI.

       > Example
         Return the query portion of the URI.

             import Standard.Examples

             example_query = Examples.uri.query
    query : Text | Nothing ! Enso_Secret_Error
    query self = handle_resolve_errors <|
        self.to_java_representation.getQuery

    ## GROUP Calculations
       Adds a query parameter to the URI.

       Arguments:
       - key: The key of the query parameter.
       - value: The value of the query parameter.
    add_query_argument : Text -> Text | Enso_Secret -> URI
    add_query_argument self key:Text value:(Text | Enso_Secret) =
        URI.Value self.internal_uri self.additional_query_parameters+[Pair.new key value]

    ## GROUP Calculations
       Removes any query parameters within the URI.
    reset_query_arguments : URI
    reset_query_arguments self = handle_resolve_errors <|
        URI.Value (URITransformer.removeQueryParameters self.internal_uri) []

    ## Get the fragment part of this URI.

       > Example
         Return the fragment portion of the URI.

             import Standard.Examples

             example_fragment = Examples.uri.fragment
    fragment : Text | Nothing
    fragment self = handle_resolve_errors <|
        self.to_java_representation.getFragment

    ## PRIVATE
       ADVANCED
       Get the unescaped user info part of this URI.
    raw_user_info : Text | Nothing ! Enso_Secret_Error
    raw_user_info self = handle_resolve_errors <|
        self.to_java_representation.getRawUserInfo

    ## PRIVATE
       ADVANCED
       Get the unescaped authority part of this URI.
    raw_authority : Text | Nothing ! Enso_Secret_Error
    raw_authority self = handle_resolve_errors <|
        self.to_java_representation.getRawAuthority

    ## PRIVATE
       ADVANCED
       Get the unescaped path part of this URI.
    raw_path : Text | Nothing
    raw_path self = handle_resolve_errors <|
        self.to_java_representation.getRawPath

    ## PRIVATE
       ADVANCED
       Get the unescaped query part of this URI.
    raw_query : Text | Nothing ! Enso_Secret_Error
    raw_query self = handle_resolve_errors <|
        self.to_java_representation.getRawQuery

    ## PRIVATE
       ADVANCED
       Get the unescaped fragment part of this URI.
    raw_fragment : Text | Nothing
    raw_fragment self = handle_resolve_errors <|
        self.to_java_representation.getRawFragment

    ## PRIVATE
       Convert this URI to text.
    to_text : Text
    to_text self = handle_resolve_errors <|
        self.to_java_representation.render.toString

    ## PRIVATE
       Convert to a display representation of this URI.
    to_display_text : Text
    to_display_text self = self.to_text.to_display_text

    ## PRIVATE
    pretty : Text
    pretty self = self.to_text

    ## PRIVATE

       Represents a Uniform Resource Identifier (URI) reference.

       Arguments:
       - internal_builder: A Java URI that contains parsed URI data.
       - additional_query_parameters: A list of query parameters to add to the URI.
    Value (internal_uri : Java_URI) (additional_query_parameters : Vector (Pair Text (Text | Enso_Secret)))

    ## PRIVATE
       Convert to a JavaScript Object representing this URI.

       > Example
         Convert a URI to a JS_Object.

             import Standard.Base.Network.URI.URI
             import Standard.Examples

             example_to_json = Examples.uri.to_js_object
    to_js_object : JS_Object
    to_js_object self =
        type_pair = ["type", "URI"]
        cons_pair = ["constructor", "parse"]
        JS_Object.from_pairs [type_pair, cons_pair, ["uri", self.to_text]]

    ## PRIVATE
       Creates a Java representation that can be used to render this URL with
       secrets hidden or processed by trusted operations.
    to_java_representation : URIWithSecrets
    to_java_representation self =
        parameters = self.additional_query_parameters.map p->
            Java_Pair.create p.first (as_hideable_value p.second)
        URIWithSecrets.new self.internal_uri parameters

    ## PRIVATE
       Convert this to a raw Java URI.
    to_java_uri : Java_URI ! Enso_Secret_Error
    to_java_uri self = handle_resolve_errors <|
        self.to_java_representation.safeResolve

## PRIVATE
URI.from (that:Text) = URI.parse that

## PRIVATE
handle_resolve_errors ~action =
    handle_access_denied _ =
        Error.throw (Enso_Secret_Error.Access_Denied)
    Illegal_Argument.handle_java_exception <| Illegal_State.handle_java_exception <|
        Panic.catch EnsoSecretAccessDenied handler=handle_access_denied <|
            action

## PRIVATE
type URI_Comparator
    ## PRIVATE
    compare x y =
        java_uri_x = x.to_java_uri.catch Enso_Secret_Error
        java_uri_y = y.to_java_uri.catch Enso_Secret_Error

        eq = case java_uri_x.is_error || java_uri_y.is_error of
            # If the URIs contain secrets, they are considered equal only if they yield the same text and have the same internal structure.
            True -> if x.to_text != y.to_text then False else
                (x.additional_query_parameters == y.additional_query_parameters)
            # If the URIs do not contain secrets, they are considered equal if the effective URI they denote is the same.
            False -> java_uri_x == java_uri_y
        if eq then Ordering.Equal else Nothing

    ## PRIVATE
    hash x =
        txt = x.text
        Comparable.from txt . hash txt

## PRIVATE
Comparable.from (_:URI) = URI_Comparator
