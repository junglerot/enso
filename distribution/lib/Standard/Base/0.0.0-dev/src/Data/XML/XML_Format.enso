import project.Any.Any
import project.Data.Text.Text
import project.Data.XML.XML_Document
import project.Errors.Problem_Behavior.Problem_Behavior
import project.Network.URI.URI
import project.Nothing.Nothing
import project.System.File.File
import project.System.File_Format_Metadata.File_Format_Metadata
import project.System.Input_Stream.Input_Stream
from project.Data.Text.Extensions import all

## A `File_Format` for reading and writing XML files.
type XML_Format
    ## PRIVATE
       If the File_Format supports reading from the file, return a configured instance.
    for_read : File_Format_Metadata -> XML_Format | Nothing
    for_read file:File_Format_Metadata =
        content_type = file.interpret_content_type
        from_content_type = content_type.if_not_nothing <|
            base_type = content_type.base_type
            case base_type of
                "text/xml" -> XML_Format
                "application/xml" -> XML_Format
                _ -> if content_type.base_type.ends_with "+xml" then XML_Format else Nothing
        from_content_type.if_nothing <|
            case file.guess_extension of
                ".xml" -> XML_Format
                _ -> Nothing

    ## PRIVATE
       If this File_Format should be used for writing to that file, return a configured instance.
    for_file_write : File -> XML_Format | Nothing
    for_file_write file:File =
        _ = [file]
        Nothing

    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any
    read self file:File on_problems:Problem_Behavior =
        _ = [on_problems]
        XML_Document.from_file file

    ## PRIVATE
       Implements decoding the format from a stream.
    read_stream : Input_Stream -> File_Format_Metadata -> Any
    read_stream self stream:Input_Stream (metadata : File_Format_Metadata = File_Format_Metadata.no_information) =
        _ = metadata
        XML_Document.from_stream stream
