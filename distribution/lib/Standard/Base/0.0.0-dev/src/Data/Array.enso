import project.Any.Any
import project.Data.Numbers.Integer
import project.Data.Ordering.Ordering
import project.Data.Range.Extensions
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Errors.Common.Index_Out_Of_Bounds
import project.Meta
import project.Nothing.Nothing
import project.Panic.Panic

from project.Data.Boolean import Boolean, False

## The type of primitive mutable arrays.
@Builtin_Type
type Array
    ## Creates an array with length 0.

       > Example
         Create an empty array.

             Array.empty
    empty : Array
    empty = @Builtin_Method "Array.empty"

    ## Creates a new array of length size, with all elements uninitialized.

       Arguments:
       - size: The size of the array to create.

       > Example
         Create a new array of size 10.

             Array.new 10
    new : Integer -> Array
    new size = @Builtin_Method "Array.new"

    ## PRIVATE

       Create an array with one element provided.

       Arguments:
       - item_1: The one element in the array.
    new_1 : Any -> Array
    new_1 item_1 = @Builtin_Method "Array.new_1"

    ## PRIVATE

       Create an array with two elements provided.

       Arguments:
       - item_1: The first element.
       - item_2: The second element.
    new_2 : Any -> Any -> Array
    new_2 item_1 item_2 = @Builtin_Method "Array.new_2"

    ## PRIVATE

       Create an array with three elements provided.

       Arguments:
       - item_1: The first element.
       - item_2: The second element.
       - item_3: The third element.
    new_3 : Any -> Any -> Any -> Array
    new_3 item_1 item_2 item_3 = @Builtin_Method "Array.new_3"

    ## PRIVATE

       Create an array with four elements provided.

       Arguments:
       - item_1: The first element.
       - item_2: The second element.
       - item_3: The third element.
       - item_4: The fourth element.
    new_4 : Any -> Any -> Any -> Any -> Array
    new_4 item_1 item_2 item_3 item_4 = @Builtin_Method "Array.new_4"

    ## PRIVATE
       Copies from the source array, beginning at the specified position, to the
       specified position in the destination array.

       Arguments:
       - src: The source array.
       - source_index: The start position in the src array.
       - dest: The destination array.
       - dest_index: The start position in the that array.

       A subsequence of array elements are copied from the src array to the
       dest array. The number of components copied is equal to count. The
       components at positions source_index through source_index + count - 1
       in the src array are copied into positions dest_index through
       dest_index + count - 1, respectively, of the destination array.

       If the src and dest arguments refer to the same array, then the copy
       is performed as if the components at positions source_index through
       source_index + count - 1 are first copied to a temporary array with
       length count, and then the contents of the temporary array are copied
       into positions dest_index through dest_index + count - 1 of the
       destination array.

       > Example
         Copying elements from one array to another.

             Array.copy [1,2,3].to_array 0 (Vector.fill 3 0).to_array 0 3
    copy : Array -> Integer -> Array -> Integer -> Integer -> Nothing
    copy src source_index dest dest_index count = @Builtin_Method "Array.copy"

    ## Gets an element from the array at a specified index (0-based).

       Arguments:
       - index: The index to get the element from. The index is
         also allowed be negative, then the elements are indexed from the back
         of the array, i.e. -1 will correspond to the last element.

       > Example
         Get the element at index 1.

             [1,2,3].to_array.at 1

       > Example
         Get the last element of an array.

             [1,2,3].to_array.at -1
    at : Integer -> Any ! Index_Out_Of_Bounds
    at self index = @Builtin_Method "Array.at"

    ## Gets the length of the array this.

       > Example
         Getting the length of an array.

             [1,2,3].to_array.length
    length : Integer
    length self = @Builtin_Method "Array.length"

    ## Sorts the Array.

      Arguments:
      - comparator: A comparison function that takes two elements and returns
        an Ordering that describes how the first element is ordered with
        respect to the second.

      > Example
        Getting a sorted array of numbers.

            [3,2,1].to_array.sort
    sort : (Any -> Any -> Ordering) -> Array
    sort self comparator=(Ordering.compare _ _) =
        self.sort_builtin comparator

    ## Identity.
       This method is implemented purely for completeness with the runtime's
       primitive array protocol.
    to_array : Array
    to_array self = @Builtin_Method "Array.to_array"
