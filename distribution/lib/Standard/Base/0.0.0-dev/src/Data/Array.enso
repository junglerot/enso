import project.Any.Any
import project.Data.Numbers.Integer
import project.Data.Filter_Condition.Filter_Condition
import project.Data.List.List
import project.Data.Ordering.Ordering
import project.Data.Sort_Direction.Sort_Direction
import project.Data.Pair.Pair
from project.Data.Range.Extensions import all
import project.Data.Range.Range
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Data.Vector.Empty_Error
import project.Error.Error
import project.Errors.Common.Incomparable_Values
import project.Errors.Common.Not_Found
import project.Errors.Common.Index_Out_Of_Bounds
import project.Errors.Problem_Behavior.Problem_Behavior
import project.Meta
import project.Nothing.Nothing
import project.Panic.Panic

from project.Data.Boolean import Boolean, False
from project.Data.Index_Sub_Range import Index_Sub_Range

## The type of primitive mutable arrays.
@Builtin_Type
type Array
    ## Creates an array with length 0.

       > Example
         Create an empty array.

             Array.empty
    empty : Array
    empty = @Builtin_Method "Array.empty"

    ## Creates a new array of length size, with all elements uninitialized.

       Arguments:
       - size: The size of the array to create.

       > Example
         Create a new array of size 10.

             Array.new 10
    new : Integer -> Array
    new size = @Builtin_Method "Array.new"

    ## PRIVATE

       Create an array with one element provided.

       Arguments:
       - item_1: The one element in the array.
    new_1 : Any -> Array
    new_1 item_1 = @Builtin_Method "Array.new_1"

    ## PRIVATE

       Create an array with two elements provided.

       Arguments:
       - item_1: The first element.
       - item_2: The second element.
    new_2 : Any -> Any -> Array
    new_2 item_1 item_2 = @Builtin_Method "Array.new_2"

    ## PRIVATE

       Create an array with three elements provided.

       Arguments:
       - item_1: The first element.
       - item_2: The second element.
       - item_3: The third element.
    new_3 : Any -> Any -> Any -> Array
    new_3 item_1 item_2 item_3 = @Builtin_Method "Array.new_3"

    ## PRIVATE

       Create an array with four elements provided.

       Arguments:
       - item_1: The first element.
       - item_2: The second element.
       - item_3: The third element.
       - item_4: The fourth element.
    new_4 : Any -> Any -> Any -> Any -> Array
    new_4 item_1 item_2 item_3 item_4 = @Builtin_Method "Array.new_4"

    ## PRIVATE
       Copies from the source array, beginning at the specified position, to the
       specified position in the destination array.

       Arguments:
       - src: The source array.
       - source_index: The start position in the src array.
       - dest: The destination array.
       - dest_index: The start position in the that array.

       A subsequence of array elements are copied from the src array to the
       dest array. The number of components copied is equal to count. The
       components at positions source_index through source_index + count - 1
       in the src array are copied into positions dest_index through
       dest_index + count - 1, respectively, of the destination array.

       If the src and dest arguments refer to the same array, then the copy
       is performed as if the components at positions source_index through
       source_index + count - 1 are first copied to a temporary array with
       length count, and then the contents of the temporary array are copied
       into positions dest_index through dest_index + count - 1 of the
       destination array.

       > Example
         Copying elements from one array to another.

             Array.copy [1,2,3].to_array 0 (Vector.fill 3 0).to_array 0 3
    copy : Array -> Integer -> Array -> Integer -> Integer -> Nothing
    copy src source_index dest dest_index count = @Builtin_Method "Array.copy"

    ## Gets an element from the array at a specified index (0-based).

       Arguments:
       - index: The location in the array to get the element from. The index is
         also allowed be negative, then the elements are indexed from the back
         of the array, i.e. -1 will correspond to the last element.

       > Example
         Get the second element of an array.

             [1, 2, 3].to_array.at 1 == 2

       > Example
         Get the last element of an array.

             [1, 2, 3].to_array.at -1 == 3
    at : Integer -> Any ! Index_Out_Of_Bounds
    at self index = @Builtin_Method "Array.at"

    ## Returns the number of elements stored in this array.

       > Example
         Checking the length of an array.

             [1, 2, 3, 4].to_array.length
    length : Integer
    length self = @Builtin_Method "Array.length"

    ## Identity.
       This method is implemented purely for completeness with the runtime's
       primitive array protocol.
    to_array : Array
    to_array self = self

    #
    # For compatibility with Vector
    #

    ## ALIAS order_by
       Sort the array.

       Arguments:
       - order: The order in which the array elements are sorted.
       - on: A projection from the element type to the value of that element
         being sorted on. If set to `Nothing` (the default),
         identity function will be used.
       - by: A function that compares the result of applying `on` to two
         elements, returning an an `Ordering` if the two elements are comparable
         or `Nothing` if they are not. If set to `Nothing` (the default argument),
         `Ordering.compare _ _` method will be used.
       - on_incomparable: A `Problem_Behavior` specifying what should happen if
         two incomparable values are encountered.

       By default, elements are sorted in ascending order.


       This is a stable sort, meaning that items that compare the same will not
       have their order changed by the sorting process.

       ! Computational Complexity
         The complexities for this sort are:
         - *Worst-Case Time:* `O(n * log n)`
         - *Best-Case Time:* `O(n)`
         - *Average Time:* `O(n * log n)`
         - *Worst-Case Space:* `O(n)` additional

       ? Incomparable values
         Incomparable values are either values with different comparators or with
         the same comparator returning `Nothing` from its `compare` method.
         See the documentation of the `Ordering` module for more info.

       ? Implementation Note
         The sort implementation is based upon an adaptive, iterative mergesort
         that requires far fewer than `n * log(n)` comparisons when the array
         is partially sorted. When the array is randomly ordered, the
         performance is equivalent to a standard mergesort.

       ? Multiple comparators
         Elements with different comparators are incomparable by definition.
         This case is handled by first grouping the `self` array into groups
         with the same comparator, recursively sorting these groups, and then
         merging them back together. The order of the sorted groups in the
         resulting array is based on the order of fully qualified names of
         the comparators in the `self` array, with the exception of the group
         for the default comparator, which is always the first group.

         Additionally, an `Incomparable_Values` dataflow error will be returned
         if the `on_incomparable` parameter is set to `Problem_Behavior.Report_Error`,
         or a warning attached if the `on_incomparable` parameter is set to
         `Problem_Behavior.Report_Warning` in case of encountering incomparable
         values.

         It takes equal advantage of ascending and descending runs in the array,
         making it much simpler to merge two or more sorted arrays: simply
         concatenate them and sort.

       > Example
         Sorting an array of numbers.

             [5, 2, 3, 45, 15].to_array.sort == [2, 3, 5, 15, 45].to_array

       > Example
         Sorting an array of `Pair`s on the first element, descending.

             [Pair 1 2, Pair -1 8].to_array.sort Sort_Direction.Descending (_.first)

       > Example
         Sorting an array with elements with different comparators. Values `1`
         and `My_Type` have different comparators. `1` will be sorted before `My_Type`
         because it has the default comparator.

             [My_Type.Value 'hello', 1].to_array.sort == [1, My_Type.Value 'hello'].to_array
    sort : Sort_Direction -> (Any -> Any)|Nothing -> (Any -> Any -> (Ordering|Nothing))|Nothing -> Problem_Behavior -> Vector Any ! Incomparable_Values
    sort self (order = Sort_Direction.Ascending) on=Nothing by=Nothing on_incomparable=Problem_Behavior.Ignore =
        Vector.sort self order on by on_incomparable

    ## Creates a new `Vector` with only the specified range of elements from the
       input, removing any elements outside the range.

       Arguments:
       - range: The section of the this array to return.
         If an `Index_Sub_Range`, then the selection is interpreted following
         the rules of that type.
         If a `Range`, the selection is specified by two indices, from and to.
    @range Index_Sub_Range.default_widget
    take : (Index_Sub_Range | Range | Integer) -> Vector Any
    take self range=(Index_Sub_Range.First 1) = Vector.take self range

    ## Creates a new `Vector`, removing any elements from the specified range.

       Arguments:
       - range: The section of the this array to return.
         If an `Index_Sub_Range`, then the selection is interpreted following
         the rules of that type.
         If a `Range`, the selection is specified by two indices, from and to.
    @range Index_Sub_Range.default_widget
    drop : (Index_Sub_Range | Range | Integer) -> Vector Any
    drop self range=(Index_Sub_Range.First 1) = Vector.drop self range

    ## Inserts the given item into the array at the given index.

       Arguments:
       - at: The index at which to insert the item before.
         If the index is less than 0, the index will be counted back from the
         end. If the index is equal to the length of the array, the item will
         be appended to the end of the array.
       - item: The item to insert into the array.

       > Example
         Insert 'X' into an array at different locations:

            ['a', 'b', 'c'].to_array.insert 1 'X' == ['a', 'X', 'b', 'c'].to_array
            ['a', 'b', 'c'].to_array.insert -1 'X' == ['a', 'b', 'X', 'c'].to_array
            ['a', 'b', 'c'].to_array.insert item='X' == ['a', 'b', 'c', 'X'].to_array
    insert : Integer -> Any -> Vector ! Index_Out_Of_Bounds
    insert self at=self.length item=Nothing = Vector.insert self at item

    ## Removes the item at the given index from the array.

       Arguments:
       - at: The index at which to remove the item.
         If the index is less than 0, the index will be counted back from the
         end.
    remove : Integer -> Vector
    remove self at=-1 = Vector.remove self at

    ## Get the first element from the array, or an `Index_Out_Of_Bounds` if the array
       is empty.

       > Example
         The following code returns 1.

             [1, 2, 3, 4].to_array.first
    first : Any ! Index_Out_Of_Bounds
    first self = self.at 0

    ## Get the second element from the array, or a `Index_Out_Of_Bounds` if the
       array doesn't have a second element.

       Useful when tuples are implemented as arrays.

       > Example
         The following code returns 2.

             [1, 2, 3, 4].to_array.second
    second : Any ! Index_Out_Of_Bounds
    second self = self.at 1

    ## Get the last element of the array, or an `Index_Out_Of_Bounds` if the array is
       empty.

       > Example
         The following code returns 4.

             [1, 2, 3, 4].to_array.last
    last : Any ! Index_Out_Of_Bounds
    last self = self.at -1

    ## Returns the index of an element in the array.
       Returns Nothing if the element is not found.

       Arguments:
       - element: The element to search for or a predicate function to test for
         each element.
       - start: The index to start searching from. If the index is negative, it
         is counted from the end of the array.

       > Example
         Find the index of an element in an array.

             [1, 2, 3].to_array.index_of 2 == 1
    index_of : (Any | (Any -> Boolean)) -> Integer -> Integer | Nothing
    index_of self element start=0 = Vector.index_of self element start

    ## Returns the last index of an element in the array.
       Returns `Nothing` if the element is not found.

       Arguments:
       - element: The element to search for or a predicate function to test for
         each element.
       - start: The index to start searching backwards from. If the index is
         negative, it is counted from the end of the array.

       > Example
         Find the last index of an element in an array.

             [1, 2, 3, 1, 2, 3].to_array.last_index_of 2 == 4
    last_index_of : (Any | (Any -> Boolean)) -> Integer -> Integer | Nothing
    last_index_of self element start=-1 = Vector.last_index_of self element start

    ## Checks if this array is empty.

       > Example
         Checking for emptiness.

             [].to_array.is_empty
    is_empty : Boolean
    is_empty self = self.length == 0

    ## Converts the array to a list with the same elements.
    to_list : List
    to_list self = Vector.to_list self

    ## Keeps only unique elements within the array, removing any duplicates.

       Arguments:
       - on: A projection from the element type to the value of that element
             which determines the uniqueness criteria.

       The returned unique elements are kept in the same order as they appeared
       in the input.

       Out of multiple equivalent (equal up to the `on` projection) elements,
       always the one appearing first in the input is kept.

       > Example
         Removing repeating entries.

             [1, 3, 1, 2, 2, 1].to_array . distinct == [1, 3, 2].to_array

       > Example
         Keeping only pairs whose first elements are unique.

             [Pair 1 "a", Pair 2 "b", Pair 1 "c"].to_array . distinct (on = _.first) == [Pair 1 "a", Pair 2 "b"].to_array
    distinct : (Any -> Any) -> Vector Any
    distinct self (on = x->x) = Vector.distinct self on

    ## Applies a function to each element of the array, returning the `Vector` of
       results.

       Arguments:
       - function: A function that takes an element in the array and returns
         some transformation of that element.

       > Example
         Add 1 to each element of the array.

             [1, 2, 3].to_array . map +1
    map : (Any -> Any) -> Vector Any
    map self function = Vector.map self function

    ## Applies a function to each element of the array, returning the `Vector`
       that contains all results concatenated.

       Arguments:
       - function: A function that takes an element in the array, transforms
         it, and returns a `Vector`.

       > Example
         Replace each number `n` in the array with itself repeated n times.

            [0, 1, 2].to_array . flat_map (n -> Vector.fill n n)
    flat_map : (Any -> Vector Any) -> Vector Any
    flat_map self function = Vector.flat_map self function

    ## Selects all elements of this array which satisfy a condition.

       Arguments:
       - filter: The filter to apply to the array. It can either be an instance
         of `Filter_Condition` or a predicate taking a value and returning a
         boolean value indicating whether the corresponding element should be
         kept or not.

       > Example
         Selecting all elements that are greater than 3.

             [1, 2, 3, 4, 5].to_array.filter (> 3)
             [1, 2, 3, 4, 5].to_array.filter (Filter_Condition.Greater than=3)
    filter : (Filter_Condition | (Any -> Boolean)) -> Vector Any
    filter self filter = Vector.filter self filter

    ## Transforms an array of arrays into a `Vector` of inner elements - removes
       one layer of nesting from a stack of nested arrays.

       > Example
         Flatten an array of arrays of numbers.

            [[1, 2, 3].to_array, [4, 10].to_array, [].to_array, [0].to_array, [0].to_array].to_array . flatten == [1, 2, 3, 4, 10, 0, 0].to_array
    flatten : Vector Any
    flatten self = Vector.flatten self

    ## PRIVATE
       ADVANCED
    short_display_text : Integer -> Text
    short_display_text self max_entries=10 = Vector.short_display_text self max_entries

    ## Combines all the elements of the array, by iteratively applying the
       passed function with the next element of the array. After each step the
       value is stored resulting in a new array of the same size as self.

       Arguments:
       - init: The initial value for the fold.
       - function: A function taking two elements and combining them.

       > Example
         Compute the running sum of all of the elements in an array

            [1, 2, 3].to_array.running_fold 0 (+)
    running_fold : Any -> (Any -> Any -> Any) -> Vector Any
    running_fold self init function = Vector.running_fold self init function

    ## Combines all the elements of the array, by iteratively applying the
       passed function with next elements of the array.

       Arguments:
       - init: The initial value for the fold.
       - function: A function taking two elements and combining them.

       In general, the result of
           [l0, l1, ..., ln].to_array . fold init f
       is the same as
           f (...(f (f init l0) l1)...) ln

       > Example
         Compute the sum of all of the elements in an array.

             [0, 1, 2].to_array . fold 0 (+)
    fold : Any -> (Any -> Any -> Any) -> Any
    fold self init function = Vector.fold self init function

    ## Combines all the elements of the array, by iteratively applying the
       passed function with next elements of the array.

       Arguments:
       - init: The initial value for the fold.
       - function: A function taking the current value, an index and an item
         and combining them.

       > Example
         Compute the sum of all of the elements and indexes in an array.

             [0, 1, 2].to_array . fold_with_index 0 (s->i->e->s+i+e)
    fold_with_index : Any -> (Any -> Integer -> Any -> Any) -> Any
    fold_with_index self init function = Vector.fold_with_index self init function

    ## Extend `self` array to the length of `n` appending elements `elem` to
       the end.

       Arguments:
       - n: The length to pad `self` out to.
       - elem: The element to fill the new padded slots with.

       If the new length `n` is less than existing length, `self` array is
       returned.

       > Example
         Extending array to the length of 5

             [1, 2, 3].to_array.pad 5 0 == [1, 2, 3, 0, 0].to_array

       > Example
         Extending array to the length of 5

             [1, 2, 3, 4, 5].to_array.pad 5 0 == [1, 2, 3, 4, 5].to_array
    pad : Integer -> Any -> Vector Any
    pad self n elem = Vector.pad self n elem

    ## Partitions the array into `Vector`s of elements which satisfy a given
       predicate and ones that do not.

       Returns a `Pair` whose `first` element is the `Vector` of elements
       satisfying the predicate and the `second` element is a `Vector` of elements
       which did not satisfy it.

       The relative order of elements kept in each returned list is the same as
       in the input array.

       Arguments:
       - predicate: A function that takes an element and returns a boolean
         value.

       > Example
         Splitting an array into even and odd elements.

             [1, 2, 3, 4, 5].to_array.partition (x -> x % 2 == 0) == (Pair [2, 4].to_array [1, 3, 5].to_array)
    partition : (Any -> Boolean) -> Pair (Vector Any) (Vector Any)
    partition self predicate = Vector.partition self predicate

    ## Partitions the array into `Vector`s of elements which satisfy a given
       predicate and ones that do not.

       Returns a `Pair` whose `first` element is the `Vector` of elements
       satisfying the predicate and the `second` element is a `Vector` of elements
       which did not satisfy it.

       The relative order of elements kept in each returned list is the same as
       in the input array.

       Arguments:
       - predicate: A function that takes an index and an element and returns a
         boolean value.

       > Example
         Splitting an array into elements at even and odd positions.

             ["a", "b", "c", "d"].to_array.partition_with_index (ix -> _ -> ix % 2 == 0) == (Pair ["a", "c"].to_array ["b", "d"].to_array)
    partition_with_index : (Integer -> Any -> Boolean) -> Pair (Vector Any) (Vector Any)
    partition_with_index self predicate = Vector.partition_with_index self predicate

    ## Applies a function to each element of the array, returning the `Vector`
       of results.

       Arguments:
       - function: A function that takes an index and an item and calculates a
         new value for at that index.

       The function is called with both the element index as well as the
       element itself.

       > Example
         Sum numbers with their indices in an array.

             [1, 2, 3].to_array.map_with_index (+)
    map_with_index : (Integer -> Any -> Any) -> Vector Any
    map_with_index self function = Vector.map_with_index self function

    slice : Integer -> Integer -> Vector Any
    slice self start end = Vector.slice self start end

    ## Returns the first element of the array that satisfies the predicate or
       `if_missing` if no elements of the array satisfy it.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.
       - start: The index to start searching from. If the index is negative, it
         is counted from the end of the array.
       - if_missing: Value returned if no element satisfies the predicate.

       > Example
         Finding a first element of the array that is larger than 3.

             [1, 2, 3, 4, 5].to_array.find (> 3)
    find : (Any -> Boolean) -> Integer -> Any -> Any
    find self predicate start=0 ~if_missing=(Error.throw Not_Found) = Vector.find self predicate start if_missing

    ## Gets an element from the array at a specified index (0-based).
       If the index is invalid then `if_missing` is returned.

       Arguments:
       - index: The location in the array to get the element from. The index is
         also allowed be negative, then the elements are indexed from the back
         of the array, i.e. -1 will correspond to the last element.
       - if_missing: The value to return if the index is out of bounds.
    get : Integer -> Any -> Any
    get self index ~if_missing=Nothing = Vector.get self index if_missing

    ## Checks if this array is not empty.

       > Example
         Checking for non-emptiness.

             [1].to_array.not_empty
    not_empty : Boolean
    not_empty self = self.is_empty.not

    ## Selects all elements of this array which satisfy a predicate.

       Arguments:
       - predicate: A function that takes an index and a list element and
         returns a boolean value that says whether that value should be included
         in the result.

       > Example
         Selecting all elements which are equal to their position in the array.

             [0, 10, 2, 2].to_array.filter (==) == [0, 2].to_array
    filter_with_index : (Integer -> Any -> Boolean) -> Vector Any
    filter_with_index self predicate = Vector.filter_with_index self predicate

    ## When `self` is an array of text values, concatenates all the values by
       interspersing them with `separator`.

       Arguments:
       - separator (optional): The text to use to join the textual elements of the array.
       - prefix (optional): The prefix to add at the beginning.
       - suffix (optional): The suffix to add at the end.

       > Example
         Join the elements of the array together as a string.

             ["foo", "bar", "baz"].to_array.join ", "
    join : Text -> Text -> Text -> Text
    join self separator="" prefix="" suffix="" = Vector.join self separator prefix suffix

    ## PRIVATE
       Generates a human-readable text representation of the array.
    to_text : Text
    to_text self = self.map .to_text . join ", " "[" "]"

    ## PRIVATE
    to_display_text : Text
    to_display_text self = self.short_display_text max_entries=40

    ## Combines all the elements of a non-empty array using a binary operation.
       If the array is empty, it returns `if_empty`.

       Arguments:
       - function: A binary operation that takes two items and combines them.
       - if_empty: Value returned if the array is empty.

       > Example
         Compute the sum of all the elements in an array.

             [0, 1, 2].to_array . reduce (+)
    reduce : (Any -> Any -> Any) -> Any -> Any
    reduce self function ~if_empty=(Error.throw Empty_Error) = Vector.reduce self function if_empty

    ## Checks whether a predicate holds for at least one element of self array.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       > Example
         Checking if any element of the list is larger than 3.

             [1, 2, 3, 4, 5].to_array.any (> 3)
    any : (Any -> Boolean) -> Boolean
    any self predicate = Vector.any self predicate

    ## Checks whether a predicate holds for all elements in this array.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       > Example
         Check if all elements in the array are less than zero.

             [-1, 1, 5, 8].to_array.all (< 0)
    all : (Any -> Boolean) -> Boolean
    all self predicate = self . any (predicate >> .not) . not

    ## Checks whether this array contains a given value as an element.

       Arguments:
       - elem: The item to see if it exists in the array.

       > Example
         Checking if the array contains the number 72.

             [1, 383, 72, 301].to_array.contains 72
    contains : Any -> Boolean
    contains self elem = self.any ix-> ix == elem

    ## Performs a pair-wise operation passed in `function` on consecutive
       elements of `self` and `that`.

       Arguments:
       - that: The array to zip with `self`.
       - function: The function used to combine pairwise elements of `self` and
         `that`.

       The result of this function is a `Vector` of length being the shorter of
       `self` and `that`, containing results of calling `function`.

       > Example
         Calculate the pairwise sum of two arrays.

             [1, 2, 3].to_array.zip [4, 5, 6].to_array (+)

       > Example
         When the `function` is not provided, it defaults to creating a pair
         of both elements.

             [1, 2, 3].to_array.zip [4, 5, 6].to_array == [[1, 4].to_array, [2, 5].to_array, [3, 6].to_array].to_array
    zip : Vector Any -> (Any -> Any -> Any) -> Vector Any
    zip self that function=[_,_] = Vector.zip self that function

    ## Returns the array as a `Vector`.
    to_vector : Vector
    to_vector self = Vector.from_polyglot_array self

    ## Reverses the array, returning a `Vector` with the same elements, but in
       the opposite order.

       > Example
         Reverse a two-element array.

             [1, 2].to_array.reverse
    reverse : Vector Any
    reverse self = Vector.reverse self

    ## PRIVATE
       ADVANCED
       Applies a function to each element of the array.

       Unlike `map`, this method does not return the individual results,
       therefore it is only useful for side-effecting computations.

       Arguments:
       - function: A function to apply to each element of the array.

       > Example
         Print each element in the array to standard output.

             [1, 2, 3, 4, 5].to_array . each IO.println
    each : (Any -> Any) -> Nothing
    each self f = Vector.each self f

    ## PRIVATE
       ADVANCED
       Applies a function to each element of the array.

       Arguments:
       - function: A function to apply that takes an index and an item.

       The function is called with both the element index as well as the
       element itself.

       Unlike `map`, this method does not return the individual results,
       therefore it is only useful for side-effecting computations.

       > Example
         Print each element in the array to standard output.

             [1, 2, 3, 4, 5].to_array . each_with_index (ix->elem-> IO.println Pair ix elem)
    each_with_index : (Integer -> Any -> Any) -> Nothing
    each_with_index self f = Vector.each_with_index self f

    ## ALIAS Concatenate
       Concatenates two arrays, resulting in a new `Vector`, containing all the
       elements of `self`, followed by all the elements of `that`.

       Arguments:
       - that: The array to concatenate to the end of `self`.

       > Example
         Concatenate two single-element arrays.

             [1].to_array + [2].to_array
    + : Vector Any -> Vector Any
    + self that = Vector.+ self that
