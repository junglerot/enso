from Standard.Base import all

import Standard.Base.Data.Time.Duration
import Standard.Base.Data.Time.Time_Period
from Standard.Base.Error.Common import Time_Error

polyglot java import java.time.format.DateTimeFormatter
polyglot java import java.time.Instant
polyglot java import java.time.LocalTime
polyglot java import org.enso.base.Time_Utils

## Obtains the current time from the system clock in the default time-zone.

   > Example
     Get the current time in the default time zone.

         from Standard.Base import Time_Of_Day

         example_now = Time_Of_Day.now
now : Time_Of_Day
now = @Builtin_Method "Time_Of_Day.now"

## Obtains an instance of `Time_Of_Day` from an hour, minute, second
   and nanosecond.

   Arguments:
   - hour: The hour-of-day to represent, from 0 to 23.
   - minute: The minute-of-hour to represent, from 0 to 59.
   - second: The second-of-minute to represent, from 0 to 59.
   - nanosecond: The nano-of-second to represent, from 0 to 999,999,999.

   Returns a `Time_Error` if the provided time is not a valid time.

   > Example
     Create a new local time at Unix epoch.

         from Standard.Base import Time_Of_Day

         example_epoch = Time_Of_Day.new

   > Example
     Get the local time at 9:30.

         from Standard.Base import Time_Of_Day

         example_epoch = Time_Of_Day.new hour=9 minute=30
new : Integer -> Integer -> Integer -> Integer -> Time_Of_Day ! Time_Error
new (hour = 0) (minute = 0) (second = 0) (nanosecond = 0) =
    Panic.catch_java Any (Time_Of_Day.new_builtin hour minute second nanosecond) java_exception->
        Error.throw (Time_Error_Data java_exception.getMessage)

## Obtains an instance of `Time_Of_Day` from a text such as "10:15".

   Arguments:
   - text: The text to parse as a time of day.
   - pattern: The pattern to use for parsing the input text.
   - locale: The locale in which the pattern should be interpreted.

   Returns a `Time_Error` if the provided text cannot be parsed using the
   default format.

   ? Pattern Syntax
     For the list of accepted symbols in pattern refer to `Time.format` doc.

   ? Default Time Format
     The text must represent a valid time and is parsed using the ISO-8601
     extended local time format. The format consists of:

     - Two digits for the hour-of-day. This is pre-padded by zero to ensure two
       digits.
     - A colon
     - Two digits for the minute-of-hour. This is pre-padded by zero to ensure
       two digits.
     - If the second-of-minute is not available then the format is complete.
     - A colon
     - Two digits for the second-of-minute. This is pre-padded by zero to ensure
       two digits.
     - If the nano-of-second is zero or not available then the format is
       complete.
     - A decimal point
     - One to nine digits for the nano-of-second. As many digits will be output
       as required.

   > Example
     Get the time 15:05:30.

         from Standard.Base import Time_Of_Day

         example_parse = Time_Of_Day.parse "15:05:30"

   > Example
     Recover from the parse error.

         from Standard.Base import Time_Of_Day
         from Standard.Base.Error.Common import Time_Error

         example_parse = Time_Of_Day.parse "half twelve" . catch Time_Error _->
             Time_Of_Day.new

   > Example
     Parse "04:30:20" as Time_Of_Day.

         from Standard.Base import Time_Of_Day

         example_parse = Time_Of_Day.parse "04:30:20" "HH:mm:ss"

   > Example
     Parse "4:30AM" as Time_Of_Day

         from Standard.Base import Time_Of_Day

         example_parse = Time_Of_Day.parse "4:30AM" "h:mma"
parse : Text -> Text | Nothing -> Locale -> Time_Of_Day ! Time_Error
parse text pattern=Nothing locale=Locale.default =
    Panic.catch_java Any handler=(java_exception -> Error.throw (Time_Error_Data java_exception.getMessage)) <|
        case pattern of
            Nothing -> Time_Of_Day.parse_builtin text
            Text    -> Time_Utils.parse_time text pattern locale.java_locale

## PRIVATE

   This type is a date-time object that represents a time, often viewed
   as hour-minute-second.

   Time is represented to nanosecond precision. For example, the value
   "13:45.30.123456789" can be stored in a `Time_Of_Day`.
@Builtin_Type
type Time_Of_Day

    ## Get the hour portion of the time of day.

       > Example
         Get the current hour.

             from Standard.Base import Time_Of_Day

             example_hour = Time_Of_Day.now.hour
    hour : Integer
    hour self = @Builtin_Method "Time_Of_Day.hour"

    ## Get the minute portion of the time of day.

       > Example
         Get the current minute.

             from Standard.Base import Time_Of_Day

             example_minute = Time_Of_Day.now.minute
    minute : Integer
    minute self = @Builtin_Method "Time_Of_Day.minute"

    ## Get the second portion of the time of day.

       > Example
         Get the current second.

             from Standard.Base import Time_Of_Day

             example_second = Time_Of_Day.now.second
    second : Integer
    second self = @Builtin_Method "Time_Of_Day.second"

    ## Get the nanosecond portion of the time of day.

       > Example
         Get the current nanosecond.

             from Standard.Base import Time_Of_Day

             example_nanosecond = Time_Of_Day.now.nanosecond
    nanosecond : Integer
    nanosecond self = @Builtin_Method "Time_Of_Day.nanosecond"

    ## Returns the first time within the `Time_Period` containing self.
    start_of : Time_Period -> Time_Of_Day
    start_of self period=Time_Period.Day = period.adjust_start self

    ## Returns the last time within the `Time_Period` containing self.
    end_of : Time_Period -> Time_Of_Day
    end_of self period=Time_Period.Day = period.adjust_end self

    ## Extracts the time as the number of seconds, from 0 to 24 * 60 * 60 - 1.

       > Example
         Convert the current time into elapsed seconds in the day.

             from Standard.Base import Time_Of_Day

             example_to_seconds = Time_Of_Day.now.to_seconds
    to_seconds : Integer
    to_seconds self = @Builtin_Method "Time_Of_Day.to_seconds"

    ## Combine this time of day with a date to create a point in time.

       Arguments:
       - date: The date on which this time should occur.
       - zone: The time-zone in which the time is specified.

       > Example
         Convert local time to 1st January 2020 12:30 at system timezone.

             from Standard.Base import Time_Of_Day

             example_to_time = Time_Of_Day.new 12 30 . to_time (Date.new 2020)
    to_date_time : Date -> Time_Zone -> Date_Time
    to_date_time self date (zone=Time_Zone.system) = self.to_time_builtin date zone

    ## Add the specified amount of time to this instant to get a new instant.

       Arguments:
       - amount: The amount of time to add to this instant.

       > Example

             from Standard.Base import Time_Of_Day
             import Standard.Base.Data.Time.Duration

             example_plus = Time_Of_Day.new + 3.seconds
    + : Duration -> Time_Of_Day
    + self amount = if amount.is_date then Error.throw (Time_Error_Data "Time_Of_Day does not support date intervals") else
        Time_Utils.time_adjust self Time_Utils.AdjustOp.PLUS amount.internal_duration

    ## Subtract the  specified amount of time from this instant to get a new
       instant.

       Arguments:
       - amount: The amount of time to subtract from this instant.

       > Example
         Subtract 12 hours from a local time.

             from Standard.Base import Time_Of_Day
             import Standard.Base.Data.Time.Duration

             example_minus = Time_Of_Day.now - 12.hours
    - : Duration -> Time_Of_Day
    - self amount = if amount.is_date then Error.throw (Time_Error_Data "Time_Of_Day does not support date intervals") else
        Time_Utils.time_adjust self Time_Utils.AdjustOp.MINUS amount.internal_duration

    ## Format this time of day as text using the default formatter.

       > Example
         Convert the current time to text.

             from Standard.Base import Time_Of_Day

             example_to_text = Time_Of_Day.now.to_text
    to_text : Text
    to_text self = @Builtin_Method "Time_Of_Day.to_text"

    ## A Time_Of_Day to Json conversion.

       > Example
         Convert the current time to JSON.

             from Standard.Base import Time_Of_Day

             example_to_json = Time_Of_Day.now.to_text
    to_json : Json.Object
    to_json self = Json.from_pairs [["type", "Time_Of_Day"], ["hour", self.hour], ["minute", self.minute], ["second", self.second], ["nanosecond", self.nanosecond]]

    ## Format this time of day using the provided formatter pattern.

       Arguments:
       - pattern: The pattern specifying how to format the time of day.

       ? Pattern Syntax
         Patterns are based on a simple sequence of letters and symbols. For
         example, "HH-mm-ss.SSS" will format "16:21:10" as "16-21-10.323".

         For the list of accepted symbols in pattern refer to the
         `Base.Data.Time.format` doc.

       > Example
         Format "16:21:10" as "16:21:00.1234"

             from Standard.Base import Time_Of_Day

             example_format = Time_Of_Day.new 16 21 10 . format "HH:mm:ss.SSSS"

       > Example
         Format "16:21:10" as "16:21:00.123456789"

             from Standard.Base import Time_Of_Day

             example_format = Time_Of_Day.new 16 21 10 . format "HH:mm:ss.n"

       > Example
         Format "16:21:10" as "4:21pm"

             from Standard.Base import Time_Of_Day

             example_format = Time_Of_Day.new 16 21 10 . format "h:mma"

       > Example
         Format "16:21:10" as "04:21:10pm"

             from Standard.Base import Time_Of_Day

             example_format = Time_Of_Day.new 16 21 10 . format "hh:mm:ssa"

       > Example
         Format "16:21:10" as "hour:4"

             from Standard.Base import Time_Of_Day

             example_format = Time_Of_Day.new 16 21 10 . format "'hour:'h"
    format : Text -> Text
    format self pattern = @Builtin_Method "Time_Of_Day.format"

    ## Compares `self` to `that` to produce an ordering.

       Arguments:
       - that: The other `Time_Of_Day` to compare against.

       > Example
         Compare two times for their ordering.

             from Standard.Base import Time_Of_Day

             example_compare_to =
                 time_1 = Time_Of_Day.new hour=2 minute=30
                 time_2 = Time_Of_Day.new minute=50
                 time_1.compare_to time_2
    compare_to : Time_Of_Day -> Ordering
    compare_to self that =
        sign = Time_Utils.compare_to_localtime self that
        Ordering.from_sign sign

    ## Compares two Time_Of_Day for equality.
    == : Date -> Boolean
    == self that =
        case that of
            Time_Of_Day ->
                sign = Time_Utils.compare_to_localtime self that
                0 == sign
            _ ->
                False
