import project.Data.Any.Any
import project.Data.Json.Json
import project.Data.Locale.Locale
import project.Data.Numbers.Integer
import project.Data.Ordering.Ordering
import project.Data.Text.Text
import project.Data.Time.Date.Date
import project.Data.Time.Date_Period.Date_Period
import project.Data.Time.Day_Of_Week.Day_Of_Week
import project.Data.Time.Day_Of_Week_From
import project.Data.Time.Duration.Duration
import project.Data.Time.Period.Period
import project.Data.Time.Time_Of_Day.Time_Of_Day
import project.Data.Time.Time_Period.Time_Period
import project.Data.Time.Time_Zone.Time_Zone
import project.Data.Vector.Vector
import project.Meta
import project.Nothing.Nothing
import project.Warning.Warning

from project.Data.Boolean import Boolean, True, False
from project.Error.Common import Error, Panic, Time_Error, Type_Error_Data

polyglot java import java.time.format.DateTimeFormatter
polyglot java import java.time.temporal.ChronoField
polyglot java import java.time.temporal.IsoFields
polyglot java import java.time.ZonedDateTime
polyglot java import java.lang.ArithmeticException

polyglot java import org.enso.base.Time_Utils

## PRIVATE
unix_epoch_start : Date_Time
unix_epoch_start = Date_Time.new 1970

## PRIVATE
ensure_in_epoch : (Date_Time | Date) -> (Any -> Any) -> Any
ensure_in_epoch date ~action =
    datetime = case date of
        x : Date_Time -> x
        x : Date -> x.to_date_time
    ret_value = action
    case Date_Time.enso_epoch_start <= datetime of
        True -> ret_value
        False ->
            Warning.attach (Time_Error.Error ("Date time '" + datetime.to_text + "' start before Enso epoch")) ret_value

## PRIVATE

   Obtains an instance of `Date_Time` from a year, month, day, hour, minute,
   second, nanosecond and timezone.

   Arguments:
   - year: The year to represent, any Integer is valid.
   - month: the month-of-year to represent, from 1 (January) to 12 (December)
   - day: the day-of-month to represent, from 1 to 31 and must be valid for the
     year and month
   - hour: the hour-of-day to represent, from 0 to 23
   - minute: the minute-of-hour to represent, from 0 to 59
   - second: the second-of-minute to represent, from 0 to 59
   - nanosecond: the nano-of-second to represent, from 0 to 999,999,999
   - zone: the timezone

   Recommended to use `Date_Time.new` instead which handles potential exceptions.
new_builtin : Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Time_Zone -> Date_Time
new_builtin year month day hour minute second nanosecond zone = @Builtin_Method "Date_Time.new_builtin"

## PRIVATE

   Obtains an instance of `Time` from a text such as
   "2007-12-03T10:15:30+01:00 Europe/Paris".

   Arguments:
   - text: The text representing the time to be parsed.

   Recommended to use `Date_Time.parse_builtin` instead which handles potential exceptions
   and date time formats.
parse_builtin : Text -> Date_Time
parse_builtin text = @Builtin_Method "Date_Time.parse_builtin"

## PRIVATE

   A date-time with a timezone in the ISO-8601 calendar system, such as
   "2007-12-03T10:15:30+01:00 Europe/Paris".

   Time is a representation of a date-time with a timezone. This class
   stores all date and time fields, to a precision of nanoseconds, and a
   timezone, with a zone offset used to handle ambiguous local
   date-times.

   For example, the value "2nd October 2007 at 13:45.30.123456789 +02:00 in
   the Europe/Paris timezone" can be stored as `Time`.
@Builtin_Type
type Date_Time
    ## Obtains the start of the epoch for Enso.

        ? Start of the epoch
        For Enso, start of the epoch is equal to the start of the Gregorian calendar,
        which is on 15th October 1582.

        Invoking some Gregorian calendar related functionalities, like `is_leap_year`,
        is computed for all the date times, including those before an epoch start,
        with today's rules. Trying to get some Gregorian calendar related properties
        for a historical date times that is defined before the epoch is likely an error,
        as the Gregorian calendar had not yet been introduced. Therefore, for such
        historical date times, a warning is attached to the result.
    enso_epoch_start : Date_Time
    enso_epoch_start = @Builtin_Method "Date_Time.epoch_start"

    ## ALIAS Current Time

       Obtains the current date-time from the system clock in the system timezone.

       > Example
         Get the current time

             from Standard.Base import Date_Time

             example_now = Date_Time.now
    now : Date_Time
    now = @Builtin_Method "Date_Time.now"

    ## Obtains an instance of `Date_Time` from a year, month, day, hour, minute,
       second, nanosecond and timezone.

       Arguments:
       - year: The year to represent, any Integer is valid.
       - month: the month-of-year to represent, from 1 (January) to 12 (December)
       - day: the day-of-month to represent, from 1 to 31 and must be valid for the
         year and month
       - hour: the hour-of-day to represent, from 0 to 23
       - minute: the minute-of-hour to represent, from 0 to 59
       - second: the second-of-minute to represent, from 0 to 59
       - millisecond: the millisecond-of-second to represent, from 0 to 999.
       - microsecond: the microsecond-of-second to represent, from 0 to 999,999.
       - nanosecond: The nano-of-second to represent, from 0 to 999,999,999.
       - zone: the timezone

       Returns a `Time_Error` if the provided time cannot be represented.

       > Example
         Create a new zoned date time at Unix epoch.

             from Standard.Base import Date_Time, Time_Zone

             example_new = Date_Time.new 1970 (zone = Time_Zone.utc)

       > Example
         Get the 5 August 1986 at midnight.

             from Standard.Base import Date_Time, Time_Zone

             example_new = Date_Time.new 1986 8 5
    new : Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Time_Zone -> Date_Time ! Time_Error
    new year (month = 1) (day = 1) (hour = 0) (minute = 0) (second = 0) (millisecond = 0) (microsecond = 0) (nanosecond = 0) (zone = Time_Zone.system) =
        total_nanoseconds = nanosecond + microsecond * 1000 + millisecond * 1000000
        Panic.catch_java Any (new_builtin year month day hour minute second total_nanoseconds zone) java_exception->
            Error.throw (Time_Error.Error java_exception.getMessage)

    ## ALIAS Time from Text

       Obtains an instance of `Time` from a text such as
       "2007-12-03T10:15:30+01:00 Europe/Paris".

       Arguments:
       - text: The text representing the time to be parsed.
       - pattern: The pattern to use for parsing the input text.
       - locale: The locale in which the pattern should be interpreted.

       ? Pattern Syntax
         For the list of accepted symbols in pattern refer to `Time.format` doc.

       ? Default Date_Time Format
         The text must represent a valid date-time and is parsed using the ISO-8601
         extended offset date-time format to add the timezone. The section in square
         brackets is not part of the ISO-8601 standard. The format consists of:

         - The ISO offset date time.
         - If the zone ID is not available or is a zone offset then the format is
           complete.
         - An open square bracket '['.
         - The zone ID. This is not part of the ISO-8601 standard. Parsing is case
           sensitive.
         - A close square bracket ']'.

       This method will return a `Time_Error` if the provided time cannot be parsed
       using the above format.

       > Example
         Parse UTC time.

             from Standard.Base import Date_Time

             example_parse = Date_Time.parse "2020-10-01T04:11:12Z"

       > Example
         Parse UTC-04:00 time.

             from Standard.Base import Date_Time

             example_parse = Date_Time.parse "2020-10-01T04:11:12-04:00"

       > Example
         Parse UTC-04:00 time specifying New York timezone.

             from Standard.Base import Date_Time

             example_parse = Date_Time.parse "2020-10-01T04:11:12-04:00[America/New_York]"

       > Example
         Parse UTC-04:00 time with nanoseconds.

             from Standard.Base import Date_Time

             example_parse = Date_Time.parse "2020-10-01T04:11:12.177528-04:00"

       > Example
         Recover from the parse error.

             from Standard.Base import Date_Time

             example_parse = Date_Time.parse "2020-10-01" . catch Time_Error (_->Date_Time.now)

       > Example
         Parse "2020-05-06 04:30:20" as Date_Time

             from Standard.Base import Date_Time

             example_parse = Date_Time.parse "2020-05-06 04:30:20" "yyyy-MM-dd HH:mm:ss"

       > Example
         Parse "06 of May 2020 at 04:30AM" as Date_Tme

             from Standard.Base import Date_Time

             example_parse =
                Date_Time.parse "06 of May 2020 at 04:30AM" "dd 'of' MMMM yyyy 'at' hh:mma"
    parse : Text -> Text | Nothing -> Locale -> Date_Time ! Time_Error
    parse text pattern=Nothing locale=Locale.default =
        Panic.catch_java Any handler=(java_exception -> Error.throw (Time_Error.Error java_exception.getMessage)) <|
            case pattern of
                Nothing -> parse_builtin text
                _ : Text -> Time_Utils.parse_datetime_format text pattern locale.java_locale


    ## Get the year portion of the time.

       > Example
         Get the current year.

             from Standard.Base import Date_Time

             example_year = Date_Time.now.year
    year : Integer
    year self = @Builtin_Method "Date_Time.year"

    ## Get the month portion of the time as a number from 1 to 12.

       > Example
         Get the current month.

             from Standard.Base import Date_Time

             example_month = Date_Time.now.month
    month : Integer
    month self = @Builtin_Method "Date_Time.month"

    ## Get the day portion of the time.

       > Example
         Get the current day.

             from Standard.Base import Date_Time

             example_day = Date_Time.now.day
    day : Integer
    day self = @Builtin_Method "Date_Time.day"

    ## Get the hour portion of the time.

       > Example
         Get the current hour.

             from Standard.Base import Date_Time

             example_hour = Date_Time.now.hour
    hour : Integer
    hour self = @Builtin_Method "Date_Time.hour"

    ## Get the minute portion of the time.

       > Example
         Get the current minute.

             from Standard.Base import Date_Time

             example_minute = Date_Time.now.minute
    minute : Integer
    minute self = @Builtin_Method "Date_Time.minute"

    ## Get the second portion of the time.

       > Example
         Get the current second.

             from Standard.Base import Date_Time

             example_second = Date_Time.now.second
    second : Integer
    second self = @Builtin_Method "Date_Time.second"

    ## Get the nanosecond portion of the time.

       > Example
         Get the current nanosecond.

             from Standard.Base import Date_Time

             example_nanosecond = Date_Time.now.nanosecond
    nanosecond : Integer
    nanosecond self = @Builtin_Method "Date_Time.nanosecond"

    ## Get the timezone for the time.

       > Example
         Get the current timezone.

             from Standard.Base import Date_Time

             example_zone = Date_Time.now.zone
    zone : Time_Zone
    zone self = @Builtin_Method "Date_Time.zone"

    ## Return the number of seconds from the Unix epoch start (1.1.1970)

       If this Date_Time is before the epoch start, returns a negative number.

       > Example
         Get the current number of seconds from the Unix epoch.

             from Standard.Base import Date_Time

             example_epoch = Date_Time.now.to_unix_epoch_seconds
    to_unix_epoch_seconds : Integer
    to_unix_epoch_seconds self =
        (Duration.between unix_epoch_start self).total_seconds.floor

    ## Return the number of milliseconds from the Unix epoch start.

       If this Date_Time is before an epoch start, returns a negative number.

       > Example
         Get the current number of milliseconds from the Enso epoch.

             from Standard.Base import Date_Time

             example_epoch = Date_Time.now.to_unix_epoch_milliseconds
    to_unix_epoch_milliseconds : Integer
    to_unix_epoch_milliseconds self =
        (Duration.between unix_epoch_start self).total_milliseconds.floor

    ## Return the number of seconds from the Enso epoch start.

       See `Date_Time.enso_epoch_start`.
    to_enso_epoch_seconds : Integer
    to_enso_epoch_seconds self =
        (Duration.between Date_Time.enso_epoch_start self).total_seconds.floor

    ## Return the number of milliseconds from the Enso epoch start.

       See `Date_Time.enso_epoch_start`.
    to_enso_epoch_milliseconds : Integer
    to_enso_epoch_milliseconds self =
        (Duration.between Date_Time.enso_epoch_start self).total_milliseconds.floor

    ## Convert this point in time to time of day, discarding the time zone
       information.

       > Example
         Convert the current time to a time of day.

             from Standard.Base import Date_Time

             example_time_of_day = Date_Time.now.time_of_day
    time_of_day : Time_Of_Day
    time_of_day self = @Builtin_Method "Date_Time.time_of_day"

    ## Returns the number of week of year this date falls into.

       Produces a warning for a Date that is before epoch start.

       Arguments:
       - locale: the locale used to define the notion of weeks of year.
         If no locale is provided, then the ISO 8601 week of year is used.

       ! Locale Dependency
         Note that this operation is locale-specific. It varies both by the
         local definition of the first day of week and the definition of the
         first week of year. For example, in the US, the first day of the week
         is Sunday and week 1 is the week containing January 1. In the UK on the
         other hand, the first day of the week is Monday, and week 1 is the week
         containing the first Thursday of the year. Therefore it is important to
         properly specify the `locale` argument.
    week_of_year : (Locale | Nothing) -> Integer
    week_of_year self locale=Nothing =
        ensure_in_epoch self <|
            if locale.is_nothing then Time_Utils.get_field_as_zoneddatetime self IsoFields.WEEK_OF_WEEK_BASED_YEAR else
                Time_Utils.week_of_year_zoneddatetime self locale.java_locale

    ## Returns if the date is in a leap year.

       Produces a warning for a Date that is before epoch start.
    is_leap_year : Boolean
    is_leap_year self = self.date.is_leap_year

    ## Returns the number of days in the year represented by this date.

       Produces a warning for a Date that is before epoch start.
    length_of_year : Integer
    length_of_year self = ensure_in_epoch self <| self.date.length_of_year

    ## Returns the century of the date.
    century : Integer
    century self = self.date.century

    ## Returns the quarter of the year the date falls into.
    quarter : Integer
    quarter self = Time_Utils.get_field_as_zoneddatetime self IsoFields.QUARTER_OF_YEAR

    ## Returns the number of days in the month represented by this date.

       Produces a warning for a Date that is before epoch start.
    length_of_month : Integer
    length_of_month self = ensure_in_epoch self <| self.date.length_of_month

    ## Returns the day of the year.
    day_of_year : Integer
    day_of_year self = Time_Utils.get_field_as_zoneddatetime self ChronoField.DAY_OF_YEAR

    ## Returns the day of the week.
    day_of_week : Day_Of_Week
    day_of_week self =
        ensure_in_epoch self <|
            Day_Of_Week.from (Time_Utils.get_field_as_zoneddatetime self ChronoField.DAY_OF_WEEK) Day_Of_Week.Monday

    ## Returns the first date within the `Time_Period` or `Date_Period`
       containing self.
    start_of : (Date_Period|Time_Period) -> Date_Time
    start_of self period=Date_Period.Month =
        adjusted = period.adjust_start self
        case period.is_date_period of
            True -> Time_Period.Day.adjust_start adjusted
            False -> adjusted

    ## Returns the last date within the `Time_Period` or `Date_Period`
       containing self.
    end_of : (Date_Period|Time_Period) -> Date_Time
    end_of self period=Date_Period.Month =
        adjusted = period.adjust_end self
        case period.is_date_period of
            True -> Time_Period.Day.adjust_end adjusted
            False -> adjusted

    ## ALIAS Time to Date

       Convert this point in time to date, discarding the time of day
       information.

       > Example
         Convert the current time to a date.

             from Standard.Base import Date_Time

             example_date = Date_Time.now.date
    date : Date
    date self = @Builtin_Method "Date_Time.date"

    ## ALIAS Change Time Zone

       Convert the time instant to the same instant in the provided time zone.

       Arguments:
       - zone: The timezone to convert the time instant into.

       > Example
         Convert time instance to -04:00 timezone.

             from Standard.Base import Date_Time, Time_Zone

             example_at_zone = Date_Time.new 2020 . at_zone (Time_Zone.new -4)
    at_zone : Time_Zone -> Date_Time
    at_zone self zone = @Builtin_Method "Date_Time.at_zone"

    ## Add the specified amount of time to this instant to produce a new instant.

       Arguments:
       - amount: The amount of time to add to this instant, either `Duration` for
         adding time (hours, minutes, etc.), or `Period` for adding date (days,
         months, years).

       > Example
         Add 15 years and 3 hours to a zoned date time.

             from Standard.Base import Date_Time, Period
             from Standard.Base.Data.Time import Duration

             example_plus = Date_Time.new 2020 + (Period.new years=15) + (Duration.new hours=3)
    + : (Duration | Period) -> Date_Time ! Time_Error
    + self amount =
        case amount of
            duration : Duration ->
                Panic.catch ArithmeticException (self.plus_builtin duration) (err -> Error.throw (Time_Error.Error err.getMessage))
            period : Period ->
                Time_Utils.datetime_adjust self Time_Utils.AdjustOp.PLUS period.internal_period

    ## Shift the date by the specified amount of business days.

       For the purpose of this method, the business days are defined to be
       Monday through Friday.

       Produces a warning if called on a Date_Time that is before an epoch
       start. See `Date_Time.enso_epoch_start`.

       This method always returns a day which is a business day - if the shift
       amount is zero, the closest following business day is returned. For the
       purpose of calculating the shift, the holidays are treated as if we were
       starting at the next business day after them, for example counting the
       shift starting on Saturday or Sunday works as if we were counting the
       shift from Monday (for positive shifts). So shifting Sunday by zero days
       will return Monday, but shifting it by one day will return a Tuesday
       (so that there is the full work day - Monday) within the interval. For
       negative shifts, shifting either Saturday or Sunday one day backwards
       will return Friday, but shifting Monday one day backwards will return a
       Friday. The whole logic is made consistent with `work_days_until`, so
       that the following properties hold:
           date.work_days_until (date.add_work_days N) == N for any N >= 0
           (date.add_work_days N).work_days_until date == -N for any N < 0

       The time of day is preserved, only the date is shifted.

       Arguments:
       - amount: The number of business days to shift the date by. If `amount`
         is zero, the current date is returned, unless it is a weekend or a
         holiday, in which case the next business day is returned.
       - holidays: An optional list of dates of custom holidays that should also
         be skipped. If it is not provided, only weekends are skipped.

       > Example
         Shift the date by 5 business days.

             example_shift = Date_Time.new 2020 2 3 11 45 . add_work_days 5
    add_work_days : Integer -> Vector Date -> Date_Time
    add_work_days self days=1 holidays=[] =
        ensure_in_epoch self <|
            self.date.add_work_days days holidays . to_date_time self.time_of_day self.zone

    ## Subtract the specified amount of time from this instant to get a new
       instant.

       Produces a warning if the resulting date time is before an Enso epoch.

       Arguments:
       - amount: The amount of time to subtract from this instant. Can be either
         `Duration` for subtracting time (hours, minutes, etc.), or `Period`
         for subtracting days, months and years.

       > Example
         Subtract 1 year, 9 months and 12 hours from a zoned date time.

             from Standard.Base import Date_Time
             import Standard.Base.Data.Time.Duration

             example_minus = Date_Time.new 2020 - (Period.new years=1) - (Period.new months=9) - (Duration.new hours=5)
    - : (Duration | Period) -> Date_Time ! Time_Error
    - self amount =
        result = case amount of
            duration : Duration ->
                Panic.catch ArithmeticException (self.minus_builtin duration) (err -> Error.throw (Time_Error.Error err.getMessage))
            period : Period ->
                Time_Utils.datetime_adjust self Time_Utils.AdjustOp.MINUS period.internal_period
        ensure_in_epoch result result

    ## Convert this time to text using the default formatter.

       > Example
         Convert the current time to text.

             from Standard.Base import Date_Time

             example_to_text = Date_Time.now.to_text
    to_text : Text
    to_text self = @Builtin_Method "Date_Time.to_text"

    ## Convert the time to JSON.

       > Example
         Convert the current time to JSON.

             from Standard.Base import Date_Time

             example_to_json = Date_Time.now.to_json
    to_json : Json
    to_json self = Json.from_pairs [["type", "Date_Time"], ["year", self.year], ["month", self.month], ["day", self.day], ["hour", self.hour], ["minute", self.minute], ["second", self.second], ["nanosecond", self.nanosecond], ["zone", self.zone]]

    ## Format this time as text using the specified format specifier.

       Arguments:
       - pattern: The pattern that specifies how to format the time.

       ? Pattern Syntax
         Patterns are based on a simple sequence of letters and symbols. For
         example, "d MMM uuuu" will format "2011-12-03" as "3 Dec 2011".

         The list of accepted symbols with examples:

         - 'G', era, "AD; Anno Domini"
         - 'u', year, "2004; 04"
         - 'y', year-of-era, "2004; 04"
         - 'D', day-of-year, "189"
         - 'M/L', month-of-year, "7; 07; Jul; July; J"
         - 'd', day-of-month, "10"
         - 'g', modified-julian-day, "2451334"
         - 'Q/q', quarter-of-year, "3; 03; Q3; 3rd quarter"
         - 'Y', week-based-year, "1996; 96"
         - 'w', week-of-week-based-year, "27"
         - 'W', week-of-month, "4"
         - 'E', day-of-week, "Tue; Tuesday; T"
         - 'e/c', localized day-of-week, "2; 02; Tue; Tuesday; T"
         - 'F', day-of-week-in-month, "3"
         - 'a', am-pm-of-day, "PM"
         - 'h', clock-hour-of-am-pm (1-12), "12"
         - 'K', hour-of-am-pm (0-11), "0"
         - 'k', clock-hour-of-day (1-24), "24"
         - 'H', hour-of-day (0-23), "0"
         - 'm', minute-of-hour, "30"
         - 's', second-of-minute, "55"
         - 'S', fraction-of-second, "978"
         - 'A', milli-of-day, "1234"
         - 'n', nano-of-second, "987654321"
         - 'N', nano-of-day, "1234000000"
         - 'V', timezone ID, "America/Los_Angeles; Z; -08:30"
         - 'v', generic timezone name, "Pacific Time; PT"
         - 'z', timezone name, "Pacific Standard Time; PST"
         - 'O', localized zone-offset, "GMT+8; GMT+08:00; UTC-08:00"
         - 'X', zone-offset 'Z' for zero, "Z; -08; -0830; -08:30; -083015; -08:30:15"
         - 'x', zone-offset, "+0000; -08; -0830; -08:30; -083015; -08:30:15"
         - 'Z', zone-offset, "+0000; -0800; -08:00"
         - 'p', pad next, "1"
         - ''', (single quote) escape for text, "'Text'"
         - '''', (double quote) single quote, "'"
         - '[', optional section start
         - ']', optional section end

         The count of pattern letters determines the format.

       > Example
         Format "2020-10-08T16:41:13+03:00[Europe/Moscow]" as
         "2020-10-08T16:41:13+03:00[Europe/Moscow]".

             from Standard.Base import Date_Time

             example_format =
                Date_Time.parse "2020-10-08T16:41:13+03:00[Europe/Moscow]" . format "yyyy-MM-dd'T'HH:mm:ssZZZZ'['VV']'"

       > Example
         Format "2020-10-08T16:41:13+03:00[Europe/Moscow]" as
         "Thursday October 8 4:41 PM".
             from Standard.Base import Date_Time

             example_format =
                Date_Time.parse "2020-10-08T16:41:13+03:00[Europe/Moscow]" . format "EEEE MMMM d h:mm a"

       > Example
         Format "2020-10-08T16:41:13+03:00[Europe/Moscow]" as
         "Thu Oct 8 (16:41)".

             from Standard.Base import Date_Time

             example_format =
                Date_Time.parse "2020-10-08T16:41:13+03:00[Europe/Moscow]" . format "EEE MMM d (HH:mm)"
    format : Text -> Text
    format self pattern = @Builtin_Method "Date_Time.format"

    ## Compares `self` to `that` to produce an ordering.

       Arguments:
       - that: The other `Date_Time` to compare against.

       > Example
         Compare two times for their ordering.

         (Date_Time.new 2000).compare_to (Date_Time.new 2001)
    compare_to : Date_Time -> Ordering
    compare_to self that = case that of
        _ : Date_Time ->
            sign = Time_Utils.compare_to_zoneddatetime self that
            Ordering.from_sign sign
        _ -> Error.throw (Type_Error_Data Date_Time that "that")

    ## Compares two Date_Time for equality.
    == : Date_Time -> Boolean
    == self that = case that of
        Date_Time -> Meta.is_same_object self Date_Time
        _ : Date_Time ->
            sign = Time_Utils.compare_to_zoneddatetime self that
            0 == sign
        _ -> False
