from Standard.Base import all

import Standard.Base.Data.Time.Duration
import Standard.Base.Data.Time.Date_Period
import Standard.Base.Data.Time.Time_Period
from Standard.Base.Error.Common import Time_Error

polyglot java import java.time.format.DateTimeFormatter
polyglot java import java.time.temporal.ChronoField
polyglot java import java.time.temporal.IsoFields

polyglot java import org.enso.base.Time_Utils

## ALIAS Current Time

   Obtains the current date-time from the system clock in the system timezone.

   > Example
     Get the current time

         from Standard.Base import Date_Time

         example_now = Date_Time.now
now : Date_Time
now = @Builtin_Method "Date_Time.now"

## Obtains an instance of `Date_Time` from a year, month, day, hour, minute,
   second, nanosecond and timezone.

   Arguments:
   - month: the month-of-year to represent, from 1 (January) to 12 (December)
   - day: the day-of-month to represent, from 1 to 31 and must be valid for the
     year and month
   - hour: the hour-of-day to represent, from 0 to 23
   - minute: the minute-of-hour to represent, from 0 to 59
   - second: the second-of-minute to represent, from 0 to 59
   - nanosecond: the nano-of-second to represent, from 0 to 999,999,999
   - zone: the timezone

   Returns a `Time_Error` if the provided time cannot be represented.

   > Example
     Create a new zoned date time at Unix epoch.

         from Standard.Base import Date_Time, Time_Zone

         example_new = Date_Time.new 1970 (zone = Time_Zone.utc)

   > Example
     Get the 5 August 1986 at midnight.

         from Standard.Base import Date_Time, Time_Zone

         example_new = Date_Time.new 1986 8 5
new : Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Time_Zone -> Date_Time ! Time_Error
new year (month = 1) (day = 1) (hour = 0) (minute = 0) (second = 0) (nanosecond = 0) (zone = Time_Zone.system) =
    Panic.catch_java Any (Date_Time.new_builtin year month day hour minute second nanosecond zone) java_exception->
        Error.throw (Time_Error_Data java_exception.getMessage)

## ALIAS Time from Text

   Obtains an instance of `Time` from a text such as
   "2007-12-03T10:15:30+01:00 Europe/Paris".

   Arguments:
   - text: The text representing the time to be parsed.
   - pattern: The pattern to use for parsing the input text.
   - locale: The locale in which the pattern should be interpreted.

   ? Pattern Syntax
     For the list of accepted symbols in pattern refer to `Time.format` doc.

   ? Default Date_Time Format
     The text must represent a valid date-time and is parsed using the ISO-8601
     extended offset date-time format to add the timezone. The section in square
     brackets is not part of the ISO-8601 standard. The format consists of:

     - The ISO offset date time.
     - If the zone ID is not available or is a zone offset then the format is
       complete.
     - An open square bracket '['.
     - The zone ID. This is not part of the ISO-8601 standard. Parsing is case
       sensitive.
     - A close square bracket ']'.

   This method will return a `Time_Error` if the provided time cannot be parsed
   using the above format.

   > Example
     Parse UTC time.

         from Standard.Base import Date_Time

         example_parse = Date_Time.parse "2020-10-01T04:11:12Z"

   > Example
     Parse UTC-04:00 time.

         from Standard.Base import Date_Time

         example_parse = Date_Time.parse "2020-10-01T04:11:12-04:00"

   > Example
     Parse UTC-04:00 time specifying New York timezone.

         from Standard.Base import Date_Time

         example_parse = Date_Time.parse "2020-10-01T04:11:12-04:00[America/New_York]"

   > Example
     Parse UTC-04:00 time with nanoseconds.

         from Standard.Base import Date_Time

         example_parse = Date_Time.parse "2020-10-01T04:11:12.177528-04:00"

   > Example
     Recover from the parse error.

         from Standard.Base import Date_Time

         example_parse = Date_Time.parse "2020-10-01" . catch Time_Error (_->Date_Time.now)

   > Example
     Parse "2020-05-06 04:30:20" as Date_Time

         from Standard.Base import Date_Time

         example_parse = Date_Time.parse "2020-05-06 04:30:20" "yyyy-MM-dd HH:mm:ss"

   > Example
     Parse "06 of May 2020 at 04:30AM" as Date_Tme

         from Standard.Base import Date_Time

         example_parse =
            Date_Time.parse "06 of May 2020 at 04:30AM" "dd 'of' MMMM yyyy 'at' hh:mma"
parse : Text -> Text | Nothing -> Locale -> Date_Time ! Time_Error
parse text pattern=Nothing locale=Locale.default =
    Panic.catch_java Any handler=(java_exception -> Error.throw (Time_Error_Data java_exception.getMessage)) <|
        case pattern of
            Nothing -> Date_Time.parse_builtin text
            Text    -> Time_Utils.parse_datetime_format text pattern locale.java_locale


## PRIVATE

   A date-time with a timezone in the ISO-8601 calendar system, such as
   "2007-12-03T10:15:30+01:00 Europe/Paris".

   Time is a representation of a date-time with a timezone. This class
   stores all date and time fields, to a precision of nanoseconds, and a
   timezone, with a zone offset used to handle ambiguous local
   date-times.

   For example, the value "2nd October 2007 at 13:45.30.123456789 +02:00 in
   the Europe/Paris timezone" can be stored as `Time`.
@Builtin_Type
type Date_Time

    ## Get the year portion of the time.

       > Example
         Get the current year.

             from Standard.Base import Date_Time

             example_year = Date_Time.now.year
    year : Integer
    year self = @Builtin_Method "Date_Time.year"

    ## Get the month portion of the time as a number from 1 to 12.

       > Example
         Get the current month.

             from Standard.Base import Date_Time

             example_month = Date_Time.now.month
    month : Integer
    month self = @Builtin_Method "Date_Time.month"

    ## Get the day portion of the time.

       > Example
         Get the current day.

             from Standard.Base import Date_Time

             example_day = Date_Time.now.day
    day : Integer
    day self = @Builtin_Method "Date_Time.day"

    ## Get the hour portion of the time.

       > Example
         Get the current hour.

             from Standard.Base import Date_Time

             example_hour = Date_Time.now.hour
    hour : Integer
    hour self = @Builtin_Method "Date_Time.hour"

    ## Get the minute portion of the time.

       > Example
         Get the current minute.

             from Standard.Base import Date_Time

             example_minute = Date_Time.now.minute
    minute : Integer
    minute self = @Builtin_Method "Date_Time.minute"

    ## Get the second portion of the time.

       > Example
         Get the current second.

             from Standard.Base import Date_Time

             example_second = Date_Time.now.second
    second : Integer
    second self = @Builtin_Method "Date_Time.second"

    ## Get the nanosecond portion of the time.

       > Example
         Get the current nanosecond.

             from Standard.Base import Date_Time

             example_nanosecond = Date_Time.now.nanosecond
    nanosecond : Integer
    nanosecond self = @Builtin_Method "Date_Time.nanosecond"

    ## Get the timezone for the time.

       > Example
         Get the current timezone.

             from Standard.Base import Date_Time

             example_zone = Date_Time.now.zone
    zone : Time_Zone
    zone self = @Builtin_Method "Date_Time.zone"

    ## Return the number of seconds from the Unix epoch.

       > Example
         Get the current number of seconds from the Unix epoch.

             from Standard.Base import Date_Time

             example_epoch = Date_Time.now.to_epoch_seconds
    to_epoch_seconds : Integer
    to_epoch_seconds self = @Builtin_Method "Date_Time.to_epoch_seconds"

    ## Return the number of milliseconds from the Unix epoch.

       > Example
         Get the current number of milliseconds from the unix epoch.

             from Standard.Base import Date_Time

             example_epoch = Date_Time.now.to_epoch_milliseconds
    to_epoch_milliseconds : Integer
    to_epoch_milliseconds self = @Builtin_Method "Date_Time.to_epoch_milliseconds"

    ## Convert this point in time to time of day, discarding the time zone
       information.

       > Example
         Convert the current time to a time of day.

             from Standard.Base import Date_Time

             example_time_of_day = Date_Time.now.time_of_day
    time_of_day : Time_Of_Day
    time_of_day self = self.to_localtime_builtin

    ## Returns the number of week of year this date falls into.

       Arguments:
       - locale: the locale used to define the notion of weeks of year.
         If no locale is provided, then the ISO 8601 week of year is used.

       ! Locale Dependency
         Note that this operation is locale-specific. It varies both by the
         local definition of the first day of week and the definition of the
         first week of year. For example, in the US, the first day of the week
         is Sunday and week 1 is the week containing January 1. In the UK on the
         other hand, the first day of the week is Monday, and week 1 is the week
         containing the first Thursday of the year. Therefore it is important to
         properly specify the `locale` argument.
    week_of_year : (Locale.Locale | Nothing) -> Integer
    week_of_year self locale=Nothing =
        if locale.is_nothing then Time_Utils.get_field_as_zoneddatetime self IsoFields.WEEK_OF_WEEK_BASED_YEAR else
            Time_Utils.week_of_year_zoneddatetime self locale.java_locale

    ## Returns if the date is in a leap year.
    is_leap_year : Boolean
    is_leap_year self = self.date.is_leap_year

    ## Returns the number of days in the year represented by this date.
    length_of_year : Integer
    length_of_year self = self.date.length_of_year

    ## Returns the century of the date.
    century : Integer
    century self = self.date.century

    ## Returns the quarter of the year the date falls into.
    quarter : Integer
    quarter self = Time_Utils.get_field_as_zoneddatetime self IsoFields.QUARTER_OF_YEAR

    ## Returns the number of days in the month represented by this date.
    length_of_month : Integer
    length_of_month self = self.date.length_of_month

    ## Returns the day of the year.
    day_of_year : Integer
    day_of_year self = Time_Utils.get_field_as_zoneddatetime self ChronoField.DAY_OF_YEAR

    ## Returns the day of the week.
    day_of_week : Day_Of_Week
    day_of_week self =
        Day_Of_Week.from (Time_Utils.get_field_as_zoneddatetime self ChronoField.DAY_OF_WEEK) Day_Of_Week.Monday

    ## Returns the first date within the `Time_Period` or `Date_Period`
       containing self.
    start_of : (Date_Period|Time_Period) -> Date_Time
    start_of self period=Date_Period.Month =
        adjusted = period.adjust_start self
        case period.is_date_period of
            True -> Time_Period.Day.adjust_start adjusted
            False -> adjusted

    ## Returns the last date within the `Time_Period` or `Date_Period`
       containing self.
    end_of : (Date_Period|Time_Period) -> Date_Time
    end_of self period=Date_Period.Month =
        adjusted = period.adjust_end self
        case period.is_date_period of
            True -> Time_Period.Day.adjust_end adjusted
            False -> adjusted

    ## ALIAS Time to Date

       Convert this point in time to date, discarding the time of day
       information.

       > Example
         Convert the current time to a date.

             from Standard.Base import Date_Time

             example_date = Date_Time.now.date
    date : Date
    date self = self.to_localdate_builtin

    ## ALIAS Change Time Zone

       Convert the time instant to the same instant in the provided time zone.

       Arguments:
       - zone: The timezone to convert the time instant into.

       > Example
         Convert time instance to -04:00 timezone.

             from Standard.Base import Date_Time, Time_Zone

             example_at_zone = Date_Time.new 2020 . at_zone (Time_Zone.new -4)
    at_zone : Time_Zone -> Date_Time
    at_zone self zone = @Builtin_Method "Date_Time.at_zone"

    ## Add the specified amount of time to this instant to produce a new instant.

       Arguments:
       - amount: The amount of time to add to this instant.

       > Example
         Add 15 years and 3 hours to a zoned date time.

             from Standard.Base import Date_Time
             import Standard.Base.Data.Time.Duration

             example_plus = Date_Time.new 2020 + 15.years + 3.hours
    + : Duration -> Date_Time
    + self amount =
        Time_Utils.datetime_adjust self Time_Utils.AdjustOp.PLUS amount.internal_period amount.internal_duration

    ## Shift the date by the specified amount of business days.

       For the purpose of this method, the business days are defined to be
       Monday through Friday.

       This method always returns a day which is a business day - if the shift
       amount is zero, the closest following business day is returned. For the
       purpose of calculating the shift, the holidays are treated as if we were
       starting at the next business day after them, for example counting the
       shift starting on Saturday or Sunday works as if we were counting the
       shift from Monday (for positive shifts). So shifting Sunday by zero days
       will return Monday, but shifting it by one day will return a Tuesday
       (so that there is the full work day - Monday) within the interval. For
       negative shifts, shifting either Saturday or Sunday one day backwards
       will return Friday, but shifting Monday one day backwards will return a
       Friday. The whole logic is made consistent with `work_days_until`, so
       that the following properties hold:
           date.work_days_until (date.add_work_days N) == N for any N >= 0
           (date.add_work_days N).work_days_until date == -N for any N < 0

       The time of day is preserved, only the date is shifted.

       Arguments:
       - amount: The number of business days to shift the date by. If `amount`
         is zero, the current date is returned, unless it is a weekend or a
         holiday, in which case the next business day is returned.
       - holidays: An optional list of dates of custom holidays that should also
         be skipped. If it is not provided, only weekends are skipped.

       > Example
         Shift the date by 5 business days.

             example_shift = Date_Time.new 2020 2 3 11 45 . add_work_days 5
    add_work_days : Integer -> Vector Date -> Date_Time
    add_work_days self days=1 holidays=[] =
        self.date.add_work_days days holidays . to_date_time self.time_of_day self.zone

    ## Subtract the specified amount of time from this instant to get a new
       instant.

       Arguments:
       - amount: The amount of time to subtract from this instant.

       > Example
         Subtract 1 year and 9 months from a zoned date time.

             from Standard.Base import Date_Time
             import Standard.Base.Data.Time.Duration

             example_minus = Date_Time.new 2020 - 1.year - 9.months
    - : Duration -> Date_Time
    - self amount =
        Time_Utils.datetime_adjust self Time_Utils.AdjustOp.MINUS amount.internal_period amount.internal_duration

    ## Convert this time to text using the default formatter.

       > Example
         Convert the current time to text.

             from Standard.Base import Date_Time

             example_to_text = Date_Time.now.to_text
    to_text : Text
    to_text self = @Builtin_Method "Date_Time.to_text"

    ## Convert the time to JSON.

       > Example
         Convert the current time to JSON.

             from Standard.Base import Date_Time

             example_to_json = Date_Time.now.to_json
    to_json : Json.Object
    to_json self = Json.from_pairs [["type", "Date_Time"], ["year", self.year], ["month", self.month], ["day", self.day], ["hour", self.hour], ["minute", self.minute], ["second", self.second], ["nanosecond", self.nanosecond], ["zone", self.zone]]

    ## Format this time as text using the specified format specifier.

       Arguments:
       - pattern: The pattern that specifies how to format the time.

       ? Pattern Syntax
         Patterns are based on a simple sequence of letters and symbols. For
         example, "d MMM uuuu" will format "2011-12-03" as "3 Dec 2011".

         The list of accepted symbols with examples:

         - 'G', era, "AD; Anno Domini"
         - 'u', year, "2004; 04"
         - 'y', year-of-era, "2004; 04"
         - 'D', day-of-year, "189"
         - 'M/L', month-of-year, "7; 07; Jul; July; J"
         - 'd', day-of-month, "10"
         - 'g', modified-julian-day, "2451334"
         - 'Q/q', quarter-of-year, "3; 03; Q3; 3rd quarter"
         - 'Y', week-based-year, "1996; 96"
         - 'w', week-of-week-based-year, "27"
         - 'W', week-of-month, "4"
         - 'E', day-of-week, "Tue; Tuesday; T"
         - 'e/c', localized day-of-week, "2; 02; Tue; Tuesday; T"
         - 'F', day-of-week-in-month, "3"
         - 'a', am-pm-of-day, "PM"
         - 'h', clock-hour-of-am-pm (1-12), "12"
         - 'K', hour-of-am-pm (0-11), "0"
         - 'k', clock-hour-of-day (1-24), "24"
         - 'H', hour-of-day (0-23), "0"
         - 'm', minute-of-hour, "30"
         - 's', second-of-minute, "55"
         - 'S', fraction-of-second, "978"
         - 'A', milli-of-day, "1234"
         - 'n', nano-of-second, "987654321"
         - 'N', nano-of-day, "1234000000"
         - 'V', timezone ID, "America/Los_Angeles; Z; -08:30"
         - 'v', generic timezone name, "Pacific Time; PT"
         - 'z', timezone name, "Pacific Standard Time; PST"
         - 'O', localized zone-offset, "GMT+8; GMT+08:00; UTC-08:00"
         - 'X', zone-offset 'Z' for zero, "Z; -08; -0830; -08:30; -083015; -08:30:15"
         - 'x', zone-offset, "+0000; -08; -0830; -08:30; -083015; -08:30:15"
         - 'Z', zone-offset, "+0000; -0800; -08:00"
         - 'p', pad next, "1"
         - ''', (single quote) escape for text, "'Text'"
         - '''', (double quote) single quote, "'"
         - '[', optional section start
         - ']', optional section end

         The count of pattern letters determines the format.

       > Example
         Format "2020-10-08T16:41:13+03:00[Europe/Moscow]" as
         "2020-10-08T16:41:13+03:00[Europe/Moscow]".

             from Standard.Base import Date_Time

             example_format =
                Date_Time.parse "2020-10-08T16:41:13+03:00[Europe/Moscow]" . format "yyyy-MM-dd'T'HH:mm:ssZZZZ'['VV']'"

       > Example
         Format "2020-10-08T16:41:13+03:00[Europe/Moscow]" as
         "Thursday October 8 4:41 PM".
             from Standard.Base import Date_Time

             example_format =
                Date_Time.parse "2020-10-08T16:41:13+03:00[Europe/Moscow]" . format "EEEE MMMM d h:mm a"

       > Example
         Format "2020-10-08T16:41:13+03:00[Europe/Moscow]" as
         "Thu Oct 8 (16:41)".

             from Standard.Base import Date_Time

             example_format =
                Date_Time.parse "2020-10-08T16:41:13+03:00[Europe/Moscow]" . format "EEE MMM d (HH:mm)"
    format : Text -> Text
    format self pattern = @Builtin_Method "Date_Time.format"

    ## Compares `self` to `that` to produce an ordering.

       Arguments:
       - that: The other `Date_Time` to compare against.

       > Example
         Compare two times for their ordering.

         (Date_Time.new 2000).compare_to (Date_Time.new 2001)
    compare_to : Time -> Ordering
    compare_to self that =
        sign = Time_Utils.compare_to_zoneddatetime self that
        Ordering.from_sign sign

    ## Compares two Date_Time for equality.
    == : Date_Time -> Boolean
    == self that =
        sign = Time_Utils.compare_to_zoneddatetime self that
        0 == sign
