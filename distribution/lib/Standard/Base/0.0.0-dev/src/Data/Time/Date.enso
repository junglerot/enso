from Standard.Base import all

import Standard.Base.Data.Time.Duration

import Standard.Base.Polyglot
from Standard.Base.Error.Common import Time_Error_Data

polyglot java import org.enso.base.Time_Utils
polyglot java import java.time.temporal.ChronoField
polyglot java import java.time.temporal.IsoFields

## Obtains the current date from the system clock in the system timezone.

   > Example
     Get the current date.

         example_now = Date.now
now : Date
now = @Builtin_Method "Date.now"

## ALIAS Current Date

   Obtains the current date from the system clock in the system timezone.

   > Example
     Get the current date.

         example_today = Date.today
today : Date
today = now

## Constructs a new Date from a year, month, and day.

   Arguments
   - month: The month-of-year to represent, from 1 (January) to 12 (December).
   - day: The day-of-month to represent, from 1 to 31. It must be valid for the
     year and month.

   Returns a `Time_Error` if the provided time is not valid.

   > Example
     Create a new local date at Unix epoch.

         from Standard.Base import Date

         example_new = Date.new 1970

   > Example
     Get the local date of 5th August 1986.

         example_new = Date.new 1986 8 5

new : Integer -> Integer -> Integer -> Date ! Time_Error
new year (month = 1) (day = 1) =
    ## TODO This is left using the old error handling approach, because
       magically, changing this to the `catch_java` (which is now preferred way
       of catching Polyglot_Errors) lead to the "should format local date using
       provided pattern" test failing because it called the `LocalDate.format`
       instead of Enso format. Hopefully this will be fixed with
       https://github.com/enso-org/enso/pull/3559
       Then this should be switched to use `Panic.catch_java`.
    Panic.recover Any (Date.internal_new year month day) . catch Any e-> case e of
        Polyglot_Error_Data err -> Error.throw (Time_Error_Data err.getMessage)
        ex -> ex

## ALIAS Date from Text

   Converts text containing a date into a Date object.

   Arguments:
   - text: The text to try and parse as a date.
   - pattern: An optional pattern describing how to parse the text.

   Returns a `Time_Error` if the provided `text` cannot be parsed using the
   provided `pattern`.

   ? Pattern Syntax
     Patterns are based on a simple sequence of letters and symbols. For
     example, "d MMM yyyy" will format "2011-12-03" as "3 Dec 2011".

   ? Default Date Formatting
     Unless you provide a custom format, the text must represent a valid date
     that can be parsed using the ISO-8601 extended local date format. The
     format consists of:

     - Four digits or more for the year. Years in the range 0000 to 9999
       will be pre-padded by zero to ensure four digits. Years outside
       that range will have a prefixed positive or negative symbol.
     - A dash
     - Two digits for the month-of-year. This is pre-padded by zero to ensure
       two digits.
     - A dash
     - Two digits for the day-of-month. This is pre-padded by zero to ensure two
       digits.

   > Example
     Parse the date of 23rd December 2020.

         from Standard.Base import Date

         example_parse = Date.parse "2020-12-23"

   > Example
     Recover from an error due to a wrong format.

         from Standard.Base import Date
         from Standard.Base.Error.Common import Time_Error

         example_parse_err = Date.parse "my birthday" . catch Time_Error _->
             Date.new 2000 1 1

   > Example
     Parse "1999-1-1" as Date using a custom format.

         from Standard.Base import Date

         example_parse = Date.parse "1999-1-1" "yyyy-M-d"

   > Example
     Recover from the parse error.

         from Standard.Base import Date
         from Standard.Base.Error.Common import Time_Error

         example_parse_err =
             date = Date.parse "1999-1-1" "yyyy-MM-dd"
             date.catch Time_Error (_->Date.new 2000 1 1)
parse : Text -> (Text | Nothing) -> Date ! Time_Error
parse text pattern=Nothing =
    result = Panic.recover Any <| case pattern of
        Nothing -> Date.internal_parse text 0
        Text -> Date.internal_parse text pattern
        _ -> Panic.throw (Time_Error_Data "An invalid pattern was provided.")
    result . map_error <| case _ of
        Polyglot_Error_Data err -> Time_Error_Data err.getMessage
        ex -> ex


## This type represents a date, often viewed as year-month-day.

   Arguments:
   - internal_local_date: The internal date representation.

   For example, the value "2nd October 2007" can be stored in a `Date`.

   This class does not store or represent a time or timezone. Instead, it
   is a description of the date, as used for birthdays. It cannot represent
   an instant on the time-line without additional information such as an
   offset or timezone.
@Builtin_Type
type Date

    ## Get the year field.

       > Example
         Get the current year.

             from Standard.Base import Date

             example_year = Date.now.year
    year : Integer
    year self = @Builtin_Method "Date.year"

    ## Get the month of year field, as a number from 1 to 12.

       > Example
         Get the current month.

             example_month = Date.now.month
    month : Integer
    month self = @Builtin_Method "Date.month"

    ## Get the day of month field.

       > Example
         Get the current day.

             from Standard.Base import Date

             example_day = Date.now.day
    day : Integer
    day self = @Builtin_Method "Date.day"

    ## Returns the number of week of year this date falls into.

       Arguments:
       - locale: the locale used to define the notion of weeks of year.
         If no locale is provided, then the ISO 8601 week of year is used.

       ! Locale Dependency
         Note that this operation is locale-specific. It varies both by the
         local definition of the first day of week and the definition of the
         first week of year. For example, in the US, the first day of the week
         is Sunday and week 1 is the week containing January 1. In the UK on the
         other hand, the first day of the week is Monday, and week 1 is the week
         containing the first Thursday of the year. Therefore it is important to
         properly specify the `locale` argument.
    week_of_year : (Locale.Locale | Nothing) -> Integer
    week_of_year self locale=Nothing =
        if locale.is_nothing then Time_Utils.get_field_as_localdate self IsoFields.WEEK_OF_WEEK_BASED_YEAR else
            Time_Utils.week_of_year_localdate self locale.java_locale

    ## Returns if the date is in a leap year.
    is_leap_year : Boolean
    is_leap_year self = Time_Utils.is_leap_year self

    ## Returns the number of days in the year represented by this date.
    length_of_year : Integer
    length_of_year self = if self.is_leap_year then 366 else 365

    ## Returns the century of the date.
    century : Integer
    century self = if self.year > 0 then (self.year - 1).div 100 + 1 else
        Error.throw (Illegal_Argument_Error "Century can only be given for AD years.")

    ## Returns the quarter of the year the date falls into.
    quarter : Integer
    quarter self = Time_Utils.get_field_as_localdate self IsoFields.QUARTER_OF_YEAR

    ## Returns the number of days in the month represented by this date.
    length_of_month : Integer
    length_of_month self = Time_Utils.length_of_month self

    ## Returns the day of the year.
    day_of_year : Integer
    day_of_year self = Time_Utils.get_field_as_localdate self ChronoField.DAY_OF_YEAR

    ## Returns the day of the week.
    day_of_week : Day_Of_Week
    day_of_week self =
        Day_Of_Week.from (Time_Utils.get_field_as_localdate self ChronoField.DAY_OF_WEEK) Day_Of_Week.Monday

    ## ALIAS Date to Time

       Combine this date with time of day to create a point in time.

       Arguments:
       - time_of_day: The time to combine with the date to create a time.
       - zone: The time-zone in which to create the time.

       > Example
         Convert this date to midnight UTC time.

             from Standard.Base import Date, Time_Of_Day, Time_Zone

             example_to_time = Date.new 2020 2 3 . to_time Time_Of_Day.new Time_Zone.utc
    to_time : Time_Of_Day -> Time_Zone -> Date_Time
    to_time self time_of_day (zone=Time_Zone.system) = self.to_time_builtin time_of_day zone

    ## Add the specified amount of time to this instant to get another date.

       Arguments:
       - amount: The time duration to add to this instant.

       > Example
         Add 6 months to a local date.

             import Standard.Base.Data.Time.Duration

             example_add = Date.new 2020 + 6.months
    + : Duration -> Date
    + self amount = if amount.is_time then Error.throw (Time_Error_Data "Date does not support time intervals") else
        (Time_Utils.date_adjust self Time_Utils.AdjustOp.PLUS amount.internal_period) . internal_local_date

    ## Subtract the specified amount of time from this instant to get another
       date.

       Arguments:
       - amount: The time duration to subtract from this date.

       > Example
         Subtract 7 days from a local date.

             from Standard.Base import Date
             import Standard.Base.Data.Time.Duration

             example_subtract = Date.new 2020 - 7.days
    - : Duration -> Date
    - self amount = if amount.is_time then Error.throw (Time_Error_Data "Date does not support time intervals") else
        (Time_Utils.date_adjust self Time_Utils.AdjustOp.MINUS amount.internal_period) . internal_local_date


    ## A Date to Json conversion.

       > Example
         Convert the current date to JSON.

             example_to_json = Date.now.to_json
    to_json : Json.Object
    to_json self = Json.from_pairs [["type", "Date"], ["day", self.day], ["month", self.month], ["year", self.year]]

    ## Format this date using the provided format specifier.

       Arguments:
       - pattern: The text specifying the format for formatting the date.

       ? Pattern Syntax
         Patterns are based on a simple sequence of letters and symbols. For
         example, "d MMM yyyy" will format "2011-12-03" as "3 Dec 2011".

       > Example
         Format "2020-06-02" as "2 June 2020"

             from Standard.Base import Date

             example_format = Date.new 2020 6 2 . format "d MMMM yyyy"

       > Example
         Format "2020-06-02" as "2 June 20"

             example_format = Date.new 2020 6 2 . format "d MMMM yy"

       > Example
         Format "2020-06-02" as "Tuesday, 02 June 2020"

             example_format = Date.new 2020 6 2 . format "EEEE, dd MMMM yyyy"

       > Example
         Format "2020-06-02" as "Tue Jun 2"

             example_format = Date.new 2020 6 2 . format "EEE MMM d"

       > Example
         Format "2020-06-02" as "2020AD"

             example_format = Date.new 2020 6 2 . format "yyyyGG"
    format : Text -> Text
    format self pattern = Time_Utils.local_date_format self pattern

    ## Compares `self` to `that` to produce an ordering.

       Arguments:
       - that: The other `Date` to compare against.

       > Example
         Compare two dates for their ordering.

         (Date.new 2000).compare_to (Date.new 2001)
    compare_to : Date -> Ordering
    compare_to self that =
        sign = Time_Utils.compare_to_localdate self that
        Ordering.from_sign sign

    ## Compares two Dates for equality.
    == : Date -> Boolean
    == self that =
        sign = Time_Utils.compare_to_localdate self that
        0 == sign
