from Standard.Base import all

polyglot java import org.enso.base.Time_Utils
polyglot java import java.time.temporal.ChronoUnit

# TODO Dubious constructor export
from project.Data.Time.Time_Period.Time_Period import all
from project.Data.Time.Time_Period.Time_Period export all

## Represents a period of time of a day or shorter.
type Time_Period
    Day
    Hour
    Minute
    Second

    ## PRIVATE
       This method could be replaced with matching on `Date_Period` supertype
       if/when that is supported.
    is_date_period : Boolean
    is_date_period self = False

    ## PRIVATE
    to_java_unit : TemporalUnit
    to_java_unit self = case self of
        Day -> ChronoUnit.DAYS
        Hour -> ChronoUnit.HOURS
        Minute -> ChronoUnit.MINUTES
        Second -> ChronoUnit.SECONDS

    ## PRIVATE
    adjust_start : (Time_Of_Day | Date_Time) -> (Time_Of_Day | Date_Time)
    adjust_start self date =
        (Time_Utils.utils_for date).start_of_time_period date self.to_java_unit

    ## PRIVATE
    adjust_end : (Time_Of_Day | Date_Time) -> (Time_Of_Day | Date_Time)
    adjust_end self date =
        (Time_Utils.utils_for date).end_of_time_period date self.to_java_unit
