from Standard.Base import all
import Standard.Base.System

polyglot java import java.time.Duration as Java_Duration
polyglot java import java.time.Period as Java_Period
polyglot java import org.enso.base.Time_Utils
polyglot java import java.lang.ArithmeticException

## Create an interval representing the duration between two points in time.

   Arguments:
   - start_inclusive: The start datetime of the duration.
   - end_inclusive: The end datetime of the duration.
   - timezone_aware: Whether the duration between two given times should be
     aware of the timezone, that can be set for start or end times.

   > Example
     An hour interval between two points in time.

         from Standard.Base import Date_Time
         import Standard.Base.Data.Time.Duration

         example_between = Duration.between Date_Time.now (Date_Time.new 2010 10 20)
between : Date_Time -> Date_Time -> Boolean -> Duration
between start_inclusive end_exclusive timezone_aware=True =
    Duration.between_builtin start_inclusive end_exclusive timezone_aware

## Create a duration from time units.

   Arguments:
   - hours: hours
   - minutes: minutes
   - seconds: seconds
   - milliseconds: milliseconds
   - nanoseconds: nanoseconds

   > Example
     Duration of 2 hours.

         import Standard.Base.Data.Time.Duration

         example_duration = Duration.new hours=2
new : Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Duration
new hours=0 minutes=0 seconds=0 milliseconds=0 nanoseconds=0 =
    Duration.new_builtin hours minutes seconds milliseconds nanoseconds


## Create a zero (empty) duration.
   > Example
     Folding a vector of durations.

         import Standard.Base.Data.Time.Duration

         durations = [(Duration.new seconds=1), (Duration.new seconds=2), (Duration.new seconds=3)]
         example_sum = durations.fold Duration.zero (+)
zero : Duration
zero = new

## ADVANCED

   Time the evaluation of a function, return a Pair of Duration and Result

   Arguments:
   - function: Function to execute.
time_execution : Any -> Pair Duration Any
time_execution ~function =
    start = System.nano_time
    result = Runtime.no_inline function
    end = System.nano_time
    duration = new nanoseconds=(end - start)
    Pair_Data duration result


@Builtin_Type
type Duration

    ## Add the specified amount of time to this duration.

       Arguments:
       - that: The duration to add to `self`.

       > Example
         Add 6 seconds to a duration of 3 minutes

             import Standard.Base.Data.Time.Duration

             example_add = (Duration.new minutes=3) + (Duration.new seconds=6)

       > Example
         Add 12 hours to a duration of a month.

             import Standard.Base.Data.Time.Duration

             example_add = 1.month + (Duration.new hours=12)
    + : Duration -> Duration ! Time_Error
    + self that =
        Panic.catch ArithmeticException (self.plus_builtin that) (err-> Error.throw (Time_Error_Data err.getMessage))

    ## Subtract the specified amount of time from this duration.

       Arguments:
       - that: The duration to subtract from `self`.

       > Example
         Subtract 11 months from a duration of 3 years

             import Standard.Base.Data.Time.Duration

             example_subtract = 3.years - 11.months

       > Example
         Substract 30 minutes from a duration of 6 hours.

             import Standard.Base.Data.Time.Duration

             example_subtract = (Duration.new hours=6) - (Duration.new minutes=30)
    - : Duration -> Duration ! Time_Error
    - self that =
        Panic.catch ArithmeticException (self.minus_builtin that) (err -> Error.throw (Time_Error_Data err.getMessage))

    ## Check two durations for equality.

       Arguments:
       - that: The duration to compare against `self`.

       > Examples
         Check if 60 seconds and 1 minute are equal.

             import Standard.Base.Data.Time.Duration

             example_eq = (Duration.new seconds=60).total_minutes == (Duration.new minutes=1).total_minutes
    == : Duration -> Boolean
    == self that = self.equals_builtin that

    ## Compares `self` to `that` to produce an ordering.

       Arguments:
       - that: The other `Duration` to compare against.

       > Example
         Compare two durations for their ordering.

             import Standard.Base.Data.Time.Duration

             example_compare_to =
                 duration_1 = (Duration.new hour=1)
                 duration_2 = (Duration.new minutes=60) + (Duration.new minutes=5)
                 duration_1.compare_to duration_2
    compare_to : Duration -> Ordering
    compare_to self that = Ordering.from_sign (self.compare_to_builtin that)

    ## Get the portion of the duration expressed in nanoseconds.

       > Example
         Get the portion of the duration expressed in nanoseconds.

             import Standard.Examples

             example_nanos = Examples.duration.nanoseconds
    nanoseconds : Integer
    nanoseconds self = @Builtin_Method "Duration.nanoseconds"

    ## Get the portion of the duration expressed in milliseconds.

       > Example
         Get the portion of the duration expressed in milliseconds.

             import Standard.Examples

             example_millis = Examples.duration.milliseconds
    milliseconds : Integer
    milliseconds self = @Builtin_Method "Duration.milliseconds"

    ## Get the portion of the duration expressed in seconds.

       > Example
         Get the portion of the duration expressed in seconds.

             import Standard.Examples

             example_seconds = Examples.duration.seconds
    seconds : Integer
    seconds self = @Builtin_Method "Duration.seconds"

    ## Get the portion of the duration expressed in minutes.

       > Example
         Get the portion of the duration expressed in minutes.

             import Standard.Examples

             example_minutes = Examples.duration.minutes
    minutes : Integer
    minutes self = @Builtin_Method "Duration.minutes"

    ## Get the portion of the duration expressed in hours.

       > Example
         Get the portion of the duration expressed in hours.

             import Standard.Examples

             example_hours = Examples.duration.milliseconds
    hours : Integer
    hours self = @Builtin_Method "Duration.hours"

    ## UNSTABLE
       Convert the duration to total milliseconds.
    total_milliseconds : Integer ! Illegal_State_Error
    total_milliseconds self =
        Panic.catch ArithmeticException (self.total_milliseconds_builtin) _->
            Error.throw (Illegal_State_Error_Data "The duration is too large to convert it to milliseconds")

    ## UNSTABLE
       Convert the duration to total seconds.
    total_seconds : Decimal ! Illegal_State_Error
    total_seconds self = self.total_milliseconds / 1000.0

    ## UNSTABLE
       Convert the duration to total minutes.
    total_minutes : Decimal ! Illegal_State_Error
    total_minutes self = self.total_seconds / 60.0

    ## UNSTABLE
       Convert the duration to total minutes.
    total_hours : Decimal ! Illegal_State_Error
    total_hours self = self.total_minutes / 60.0

    ## Convert this duration to a Vector of hours, minutes, seconds, milliseconds
       and nanoseconds.

       > Example
         Convert a duration of one hour to a vector resulting in
         `[1, 0, 30, 0, 0]`.

             import Standard.Base.Data.Time.Duration

             example_to_vec = (Duration.new hours=1 seconds=30).to_vector

       > Example
         Convert duration of 800 nanoseconds to a vector returning
         `[0, 0, 0, 0, 0, 800]`

             import Standard.Base.Data.Time.Duration

             example_to_vec = (Duration.new nanoseconds=800)).to_vector
    to_vector : Vector.Vector Integer
    to_vector self = [self.hours, self.minutes, self.seconds, self.milliseconds, self.nanoseconds]

    ## A Duration to Json conversion.

       > Example
         Convert a duration of 10 seconds to Json.

             import Standard.Base.Data.Time.Duration

             example_to_json = (Duration.new seconds=10).to_json
    to_json : Json.Object
    to_json self =
        b = Vector.new_builder
        b.append ["type", "Duration"]
        if self.hours==0 . not then b.append ["hours", self.hours]
        if self.minutes==0 . not then b.append ["minutes", self.minutes]
        if self.seconds==0 . not then b.append ["seconds", self.seconds]
        if self.milliseconds==0 . not then b.append ["milliseconds", self.milliseconds]
        if self.nanoseconds==0 . not then b.append ["nanoseconds", self.nanoseconds]
        Json.from_pairs b.to_vector

    ## Check if this duration represents an empty time-span.

       > Example
         Check if the duration of 10 seconds is empty.

             import Standard.Base.Data.Time.Duration

             example_is_empty = 10.seconds.is_empty
    is_empty : Boolean
    is_empty self = self.to_vector . all (==0)
