import project.Any.Any
import project.Data.Json.JS_Object
import project.Data.Numbers.Decimal
import project.Data.Numbers.Integer
import project.Data.Ordering.Comparable
import project.Data.Ordering.Default_Ordered_Comparator
import project.Data.Pair.Pair
import project.Data.Time.Date_Time.Date_Time
import project.Data.Time.Period.Period
import project.Data.Vector.Vector
import project.Error.Common.Type_Error
import project.Error.Error
import project.Error.Illegal_Argument.Illegal_Argument
import project.Error.Illegal_State.Illegal_State
import project.Error.Time_Error.Time_Error
import project.Meta
import project.Panic.Panic
import project.Runtime
import project.System

from project.Data.Boolean import Boolean, True, False

polyglot java import java.time.Duration as Java_Duration
polyglot java import java.time.Period as Java_Period
polyglot java import org.enso.base.Time_Utils
polyglot java import java.lang.ArithmeticException

## PRIVATE
   Create an interval representing the duration between two points in time.

   Arguments:
   - start_inclusive: The start datetime of the duration, included.
   - end_exclusive: The end datetime of the duration, excluded.
   - timezone_aware: Whether the duration between two given times should be
     aware of the timezone, that can be set for start or end times.

   Recommended to use `Duration.between` instead which provides defaults.
between_builtin : Date_Time -> Date_Time -> Boolean -> Duration
between_builtin start_inclusive end_exclusive timezone_aware = @Builtin_Method "Duration.between_builtin"

## PRIVATE
   Create a duration from time units.

   Arguments:
   - hours: hours
   - minutes: minutes
   - seconds: seconds
   - milliseconds: milliseconds
   - nanoseconds: nanoseconds

   Recommended to use `Duration.new` instead which provides defaults.
new_builtin : Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Duration
new_builtin hours minutes seconds milliseconds nanoseconds = @Builtin_Method "Duration.new_builtin"

## PRIVATE
ensure_duration : Any -> (Any -> Any) -> Any ! (Time_Error | Illegal_Argument)
ensure_duration object ~action =
    case object of
        _ : Duration -> action
        _ : Period -> Error.throw (Time_Error.Error "Cannot use Period as a parameter")
        x ->
            Error.throw Illegal_Argument.Error <|
                "Expected Duration type, got: " + (Meta.get_qualified_type_name x)

@Builtin_Type
type Duration
    ## Create an interval representing the duration between two points in time.

       Arguments:
       - start_inclusive: The start datetime of the duration, included.
       - end_exclusive: The end datetime of the duration, excluded.
       - timezone_aware: Whether the duration between two given times should be
         aware of the timezone, that can be set for start or end times.

       > Example
         An hour interval between two points in time.

             from Standard.Base import Date_Time
             import Standard.Base.Data.Time.Duration

             example_between = Duration.between Date_Time.now (Date_Time.new 2010 10 20)
    between : Date_Time -> Date_Time -> Boolean -> Duration
    between start_inclusive end_exclusive timezone_aware=True =
        between_builtin start_inclusive end_exclusive timezone_aware

    ## Create a duration from time units.

       Arguments:
       - hours: hours
       - minutes: minutes
       - seconds: seconds
       - milliseconds: milliseconds
       - nanoseconds: nanoseconds

       > Example
         Duration of 2 hours.

             import Standard.Base.Data.Time.Duration

             example_duration = Duration.new hours=2
    new : Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Duration
    new hours=0 minutes=0 seconds=0 milliseconds=0 nanoseconds=0 =
        new_builtin hours minutes seconds milliseconds nanoseconds

    ## Create a zero (empty) duration.
       > Example
         Folding a vector of durations.

             import Standard.Base.Data.Time.Duration

             durations = [(Duration.new seconds=1), (Duration.new seconds=2), (Duration.new seconds=3)]
             example_sum = durations.fold Duration.zero (+)
    zero : Duration
    zero = Duration.new

    ## ADVANCED

       Time the evaluation of a function, return a Pair of Duration and Result

       Arguments:
       - function: Function to execute.
    time_execution : Any -> Pair
    time_execution ~function =
        start = System.nano_time
        result = Runtime.no_inline function
        end = System.nano_time
        duration = Duration.new nanoseconds=(end - start)
        Pair.new duration result

    ## Add the specified amount of time to this duration.

       Arguments:
       - that: The duration to add to `self`.

       > Example
         Add 6 seconds to a duration of 3 minutes

             import Standard.Base.Data.Time.Duration

             example_add = (Duration.new minutes=3) + (Duration.new seconds=6)

       > Example
         Add 12 hours to a duration of 30 minutes.

             import Standard.Base.Data.Time.Duration

             example_add = (Duration.new minutes=30) + (Duration.new hours=12)
    + : Duration -> Duration ! Time_Error
    + self that =
        ensure_duration that <|
            Panic.catch ArithmeticException (self.plus_builtin that) err->
                Error.throw (Time_Error.Error err.payload.getMessage)

    ## Subtract the specified amount of time from this duration.

       Arguments:
       - that: The duration to subtract from `self`.

       > Example
         Substract 30 minutes from a duration of 6 hours.

             import Standard.Base.Data.Time.Duration

             example_subtract = (Duration.new hours=6) - (Duration.new minutes=30)
    - : Duration -> Duration ! Time_Error
    - self that =
        ensure_duration that <|
            Panic.catch ArithmeticException (self.minus_builtin that) err->
                Error.throw (Time_Error.Error err.payload.getMessage)

    ## Get the portion of the duration expressed in nanoseconds.

       > Example
         Get the portion of the duration expressed in nanoseconds.

             import Standard.Examples

             example_nanos = Examples.duration.nanoseconds
    nanoseconds : Integer
    nanoseconds self = @Builtin_Method "Duration.nanoseconds"

    ## Get the portion of the duration expressed in milliseconds.

       > Example
         Get the portion of the duration expressed in milliseconds.

             import Standard.Examples

             example_millis = Examples.duration.milliseconds
    milliseconds : Integer
    milliseconds self = @Builtin_Method "Duration.milliseconds"

    ## Get the portion of the duration expressed in seconds.

       > Example
         Get the portion of the duration expressed in seconds.

             import Standard.Examples

             example_seconds = Examples.duration.seconds
    seconds : Integer
    seconds self = @Builtin_Method "Duration.seconds"

    ## Get the portion of the duration expressed in minutes.

       > Example
         Get the portion of the duration expressed in minutes.

             import Standard.Examples

             example_minutes = Examples.duration.minutes
    minutes : Integer
    minutes self = @Builtin_Method "Duration.minutes"

    ## Get the portion of the duration expressed in hours.

       > Example
         Get the portion of the duration expressed in hours.

             import Standard.Examples

             example_hours = Examples.duration.milliseconds
    hours : Integer
    hours self = @Builtin_Method "Duration.hours"

    ## UNSTABLE
       Convert the duration to total milliseconds.
    total_milliseconds : Integer ! Illegal_State
    total_milliseconds self =
        Panic.catch ArithmeticException (self.total_milliseconds_builtin) _->
            Error.throw (Illegal_State.Error "The duration is too large to convert it to milliseconds")

    ## UNSTABLE
       Convert the duration to total seconds.
    total_seconds : Decimal ! Illegal_State
    total_seconds self = self.total_milliseconds / 1000.0

    ## UNSTABLE
       Convert the duration to total minutes.
    total_minutes : Decimal ! Illegal_State
    total_minutes self = self.total_seconds / 60.0

    ## UNSTABLE
       Convert the duration to total minutes.
    total_hours : Decimal ! Illegal_State
    total_hours self = self.total_minutes / 60.0

    ## Convert this duration to a Vector of hours, minutes, seconds, milliseconds
       and nanoseconds.

       > Example
         Convert a duration of one hour to a vector resulting in
         `[1, 0, 30, 0, 0]`.

             import Standard.Base.Data.Time.Duration

             example_to_vec = (Duration.new hours=1 seconds=30).to_vector

       > Example
         Convert duration of 800 nanoseconds to a vector returning
         `[0, 0, 0, 0, 0, 800]`

             import Standard.Base.Data.Time.Duration

             example_to_vec = (Duration.new nanoseconds=800)).to_vector
    to_vector : Vector Integer
    to_vector self = [self.hours, self.minutes, self.seconds, self.milliseconds, self.nanoseconds]

    ## Convert to a JavaScript Object representing a Duration.

       > Example
         Convert a duration of 10 seconds to a JS_Object.

             example_to_json = (Duration.new seconds=10).to_js_object
    to_js_object : JS_Object
    to_js_object self =
        b = Vector.new_builder 7
        b.append ["type", "Duration"]
        b.append ["constructor", "new"]
        if self.hours==0 . not then b.append ["hours", self.hours]
        if self.minutes==0 . not then b.append ["minutes", self.minutes]
        if self.seconds==0 . not then b.append ["seconds", self.seconds]
        if self.milliseconds==0 . not then b.append ["milliseconds", self.milliseconds]
        if self.nanoseconds==0 . not then b.append ["nanoseconds", self.nanoseconds]
        JS_Object.from_pairs b.to_vector

    ## Check if this duration represents an empty time-span.

       > Example
         Check if the duration of 10 seconds is empty.

             import Standard.Base.Data.Time.Duration

             example_is_empty = Duration.zero.is_empty
    is_empty : Boolean
    is_empty self = self.to_vector . all (==0)

Comparable.from (_:Duration) = Default_Ordered_Comparator
