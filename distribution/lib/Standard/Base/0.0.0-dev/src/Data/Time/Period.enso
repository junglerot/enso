import project.Any.Any
import project.Data.Json.JS_Object
import project.Data.Numbers.Integer
import project.Data.Ordering.Comparable
import project.Data.Text.Text
import project.Data.Time.Date.Date
import project.Data.Time.Duration.Duration
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Errors.Time_Error.Time_Error
import project.Math
import project.Meta
import project.Nothing.Nothing
import project.Panic.Panic
from project.Data.Boolean import Boolean, False, True
from project.Data.Text.Extensions import all

polyglot java import java.lang.ArithmeticException
polyglot java import java.time.DateTimeException
polyglot java import java.time.Period as Java_Period

## PRIVATE
ensure_period : Any -> (Any -> Any) -> Text -> Any ! (Time_Error | Illegal_Argument)
ensure_period object ~action error_msg="Cannot use Duration as a parameter" =
    case object of
        _ : Period -> action
        _ : Duration ->
            Error.throw (Time_Error.Error error_msg)
        x ->
            Error.throw Illegal_Argument.Error <|
                "Expected Period type, got: " + (Meta.get_qualified_type_name x)

## A date-based amount of time in the ISO-8601 calendar system, such as
   '2 years, 3 months and 4 days'.

   This type models an amount of time in terms of years, months and days.
   `Duration` is its time-based equivalent. Moreover, `Period` counts with
   daylight saving time. This means that a Period of 1 day does not necessarily
   have to be 24 hours of Duration.
type Period
    ## Create a Period representing the time interval between two dates.

       Arguments:
       - start_date_inclusive: The start date of the period, included.
       - end_date_exclusive: The end date of the period, excluded.

       > Example
         Get a Period between 2022-10-21 and 2022-09-12

             import Standard.Base.Data.Time.Period

             example_period = Period.between (Date.new 2022 10 21) (Date.new 2022 9 12)
    between : Date -> Date -> Period
    between start_date_inclusive end_date_exclusive =
        Period.Value (Java_Period.between start_date_inclusive end_date_exclusive)

    ## GROUP DateTime
       Create a new Period from years, months and days.

       Arguments:
       - years: Amount of years.
       - months: Amount of months.
       - days: Amount of days.

       > Example
         Create a Period of 2 years and 5 days

             import Standard.Base.Data.Time.Period

             example_period = Period.new 2 0 5
    new : Integer -> Integer -> Integer -> Period
    new years=0 months=0 days=0 =
        Period.Value (Java_Period.of years months days)

    ## PRIVATE

       Arguments:
       - internal_period: An internal representation of period of type
         java.time.Period.
    Value (internal_period : Java_Period)

    ## GROUP DateTime
       Get the portion of the period expressed in years.
    years : Integer
    years self = self.internal_period.getYears

    ## GROUP DateTime
       Get the portion of the period expressed in months.
    months : Integer
    months self = self.internal_period.getMonths

    ## GROUP DateTime
       Get the portion of the period coming from months and years as months
       (every year is translated to 12 months).
    total_months : Integer
    total_months self = self.internal_period.toTotalMonths

    ## GROUP DateTime
       Get the portion of the period expressed in days.
    days : Integer
    days self = self.internal_period.getDays

    ## ALIAS add period
       GROUP Operators
       Add the specified amount of time to this period.

       Arguments:
       - other_period: The period to add to `self`. Note that this cannot be a
         `Duration`, neither `Date_Time`.

       > Example
       Add 1 day to 1 month.

           import Standard.Base.Data.Time.Period

           example_add = (Period.new months=1) + (Period.new days=1)
    + : Period -> Period ! (Time_Error | Illegal_Argument)
    + self other_period =
        ensure_period other_period <|
            catch_java_exceptions "Period.+" <|
                Period.Value (self.internal_period.plus other_period.internal_period)

    ## ALIAS subtract period
       GROUP Operators
       Subtract a specified amount of time from this period.

       Arguments:
       - other_period: Other Period to add to this Period. Note that this
         cannot be a `Duration`, neither `Date_Time`.

       > Example
         Subtract 11 months from a period of 3 years

             import Standard.Base.Data.Time.Period

             example_subtract = (Period.new years=3) - (Period.new months=11)

    - : Period -> Period ! (Time_Error | Illegal_Argument)
    - self other_period =
        ensure_period other_period <|
            catch_java_exceptions "Period.-" <|
                Period.Value (self.internal_period.minus other_period.internal_period)

    ## ALIAS multiply, times
       GROUP Operators
       Multiply the amount of time in this period by the specified scalar.

       Arguments:
       - factor: The scalar to multiply by.

       > Example
         Multiply a period of 1 year and 2 months by 2

             import Standard.Base.Data.Time.Period

             example_multiply = (Period.new years=1 months=2) * 2
    * : Integer -> Period ! Time_Error
    * self factor =
        catch_java_exceptions "Period.*" <|
            Period.Value (self.internal_period.multipliedBy factor)

    ## GROUP Operators
       Negate all amounts in the period.

       This is useful when a period used for going forward in time needs to be
       used for going backwards instead.
    negate : Period
    negate self = Period.Value (self.internal_period.negated)

    ## PRIVATE
       Convert Period to a friendly string.
    to_display_text : Text
    to_display_text self = if self == Period.new then "0D" else
        years = self.years + (self.months/12).floor
        y = if years == 0 then "" else years.to_text + "Y "

        d = if self.days == 0 then "" else self.days.to_text + "D "

        months = self.months % 12
        m = if months == 0 && (y=="" || d=="") then "" else months.to_text + "M "

        (y + m + d) . trim

    ## PRIVATE
       Convert to a JavaScript Object representing a Period.

       > Example
         Convert a period of 10 months to a JS_Object.

             example_to_json = (Period.new months=10).to_js_object
    to_js_object : JS_Object
    to_js_object self =
        b = Vector.new_builder 7
        b.append ["type", "Period"]
        b.append ["constructor", "new"]
        if self.years==0 . not then b.append ["years", self.years]
        if self.months==0 . not then b.append ["months", self.months]
        if self.days==0 . not then b.append ["days", self.days]
        JS_Object.from_pairs b.to_vector

## PRIVATE
catch_java_exceptions operation ~action =
    handle_arithmetic_exception caught_panic =
        Error.throw (Time_Error.Error "An overflow has occurred during the "+operation+" operation:"+caught_panic.payload.getMessage)
    handle_date_time_exception caught_panic =
        Error.throw (Time_Error.Error "The operation "+operation+" has failed:"+caught_panic.payload.getMessage)
    Panic.catch ArithmeticException handler=handle_arithmetic_exception <|
        Panic.catch DateTimeException handler=handle_date_time_exception <|
            action
