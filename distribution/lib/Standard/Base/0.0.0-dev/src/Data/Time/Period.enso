import project.Any.Any
import project.Data.Numbers.Integer
import project.Data.Time.Date.Date
import project.Data.Time.Duration.Duration
import project.Data.Ordering.Comparable
import project.Data.Ordering.Incomparable
import project.Data.Text.Text
import project.Error.Error
import project.Error.Illegal_Argument.Illegal_Argument
import project.Error.Time_Error.Time_Error
import project.Meta
import project.Nothing.Nothing
import project.Panic.Panic

from project.Data.Boolean import Boolean, True, False

polyglot java import java.time.Period as Java_Period
polyglot java import java.time.DateTimeException
polyglot java import java.lang.ArithmeticException

## PRIVATE
ensure_period : Any -> (Any -> Any) -> Text -> Any ! (Time_Error | Illegal_Argument)
ensure_period object ~action error_msg="Cannot use Duration as a parameter" =
    case object of
        _ : Period -> action
        _ : Duration ->
            Error.throw (Time_Error.Error error_msg)
        x ->
            Error.throw Illegal_Argument.Error <|
                "Expected Period type, got: " + (Meta.get_qualified_type_name x)

## A date-based amount of time in the ISO-8601 calendar system, such as
   '2 years, 3 months and 4 days'.

   This type models an amount of time in terms of years, months and days.
   `Duration` is its time-based equivalent. Moreover, `Period` counts with
   daylight saving time. This means that a Period of 1 day does not necessarily
   have to be 24 hours of Duration.
type Period
    ## Create a Period representing the time interval between two dates.

       Arguments:
       - start_date_inclusive: The start date of the period, included.
       - end_date_exclusive: The end date of the period, excluded.

       > Example
         Get a Period between 2022-10-21 and 2022-09-12

             import Standard.Base.Data.Time.Period

             example_period = Period.between (Date.new 2022 10 21) (Date.new 2022 9 12)
    between : Date -> Date -> Period
    between start_date_inclusive end_date_exclusive =
        Period.Value (Java_Period.between start_date_inclusive end_date_exclusive)

    ## Create a new Period from years, months and days.

       Arguments:
       - years: Amount of years.
       - months: Amount of months.
       - days: Amount of days.

       > Example
         Create a Period of 2 years and 5 days

             import Standard.Base.Data.Time.Period

             example_period = Period.new 2 0 5
    new : Integer -> Integer -> Integer -> Period
    new years=0 months=0 days=0 =
        Period.Value (Java_Period.of years months days)

    ## PRIVATE

       Arguments:
       - internal_period: An internal representation of period of type
         java.time.Period.
    Value internal_period

    ## Get the portion of the period expressed in years.
    years : Integer
    years self = self.internal_period.getYears

    ## Get the portion of the period expressed in months.
    months : Integer
    months self = self.internal_period.getMonths

    ## Get the portion of the period expressed in days.
    days : Integer
    days self = self.internal_period.getDays

    ## Add the specified amount of time to this period.

       Arguments:
       - other_period: The period to add to `self`. Note that this cannot be a
         `Duration`, neither `Date_Time`.

       > Example
       Add 1 day to 1 month.

           import Standard.Base.Data.Time.Period

           example_add = (Period.new months=1) + (Period.new days=1)
    + : Period -> Period ! (Time_Error | Illegal_Argument)
    + self other_period =
        ensure_period other_period <|
            Panic.catch Any (Period.Value (self.internal_period.plus other_period.internal_period)) err->
                case err of
                    _ : DateTimeException -> Error.throw Time_Error.Error "Period addition failed:"+err.getMessage
                    _ : ArithmeticException -> Error.throw Illegal_Argument.Error "Arithmetic error:"+err.getMessage cause=err

    ## Subtract a specified amount of time from this period.

       Arguments:
       - other_period: Other Period to add to this Period. Note that this
         cannot be a `Duration`, neither `Date_Time`.

       > Example
         Subtract 11 months from a period of 3 years

             import Standard.Base.Data.Time.Period

             example_subtract = (Period.new years=3) - (Period.new months=11)

    - : Period -> Period ! (Time_Error | Illegal_Argument)
    - self other_period =
        ensure_period other_period <|
            Panic.catch Any (Period.Value (self.internal_period.minus other_period.internal_period)) err->
                case err of
                    DateTimeException -> Error.throw Time_Error.Error "Period subtraction failed"
                    ArithmeticException -> Error.throw Illegal_Argument.Error "Arithmetic error"
