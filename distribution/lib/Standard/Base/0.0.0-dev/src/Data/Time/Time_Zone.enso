import project.Any.Any
import project.Data.Json.JS_Object
import project.Data.Numbers.Integer
import project.Data.Text.Text
import project.Error.Error
import project.Errors.Time_Error.Time_Error
import project.Panic.Panic

from project.Data.Boolean import Boolean, True, False

polyglot java import java.lang.Exception as JException
polyglot java import java.time.ZoneId
polyglot java import java.time.ZoneOffset
polyglot java import org.enso.base.Time_Utils

## PRIVATE
   Obtains an instance of `Time_Zone` using an offset in hours, minutes and seconds
   from the UTC zone.

   Arguments:
   - hours: The timezone offset in hours from UTC, from -18 to +18.
   - minutes: The timezone offset in minutes from the nearest hour, from 0 to
     ±59. The sign must match that of the hours argument.
   - seconds: The timezone offset in seconds from the nearest minute, from 0 to
     ±59. The sign must match that of the minutes argument.

   Recommended to use `Time_Zone.new` instead which provides defaults.
new_builtin : Integer -> Integer -> Integer -> Time_Zone
new_builtin hours minutes seconds = @Builtin_Method "Time_Zone.new_builtin"

## PRIVATE

   This method parses the ID producing a `Time_Zone`.

   Arguments:
   - text: The text representing a zone identifier.

   Recommended to use `Time_Zone.parse` instead which handles potential exceptions.
parse_builtin : Text -> Time_Zone
parse_builtin text = @Builtin_Method "Time_Zone.parse_builtin"

## A type representing a time zone.

   Arguments:
   - internal_zone_id: The identifier for the internal zone of the
     representation.

   A time zone can be eiter offset-based like "-06:00" or id-based like
   "Europe/Paris".
@Builtin_Type
type Time_Zone
    ## The system default timezone.

       > Example
         Get the system default timezone.

             from Standard.Base import Time_Zone

             example_system = Time_Zone.system
    system : Time_Zone
    system = @Builtin_Method "Time_Zone.system"

    ## ALIAS Current Time Zone

       The system's local timezone.

       > Example
         Get the system's local timezone.

             from Standard.Base import Time_Zone

             example_local = Time_Zone.local
    local : Time_Zone
    local = Time_Zone.system

    ## ALIAS UTC Time Zone

       The UTC timezone.

       > Example
         Get the UTC timezone.

             from Standard.Base import Time_Zone

             example_utc = Time_Zone.utc
    utc : Time_Zone
    utc = Time_Zone.parse "UTC"

    ## Obtains an instance of `Time_Zone` using an offset in hours, minutes and seconds
       from the UTC zone.

       Arguments:
       - hours: The timezone offset in hours from UTC, from -18 to +18.
       - minutes: The timezone offset in minutes from the nearest hour, from 0 to
         ±59. The sign must match that of the hours argument.
       - seconds: The timezone offset in seconds from the nearest minute, from 0 to
         ±59. The sign must match that of the minutes argument.

       > Example
         Get time zone 1 hour 1 minute and 50 seconds from UTC.

             from Standard.Base.Time.Time_Zone import Time_Zone

             example_new = Time_Zone.new 1 1 50
    new : Integer -> Integer -> Integer -> Time_Zone
    new (hours = 0) (minutes = 0) (seconds = 0) =
        new_builtin hours minutes seconds

    ## ALIAS Time Zone from Text

       This method parses the ID producing a `Time_Zone`.

       Arguments:
       - id: The text representing a zone identifier.

       > Example
         Get Central European Time.

             from Standard.Base import Time_Zone

             example_parse = Time_Zone.parse "CET"

       > Example
         Get Moscow time.

             from Standard.Base import Time_Zone

             example_parse = Time_Zone.parse "Europe/Moscow"

       > Example
         Get time zone -06:00.

             from Standard.Base import Time_Zone

             example_parse = Time_Zone.parse "-06:00"

       > Example
         Get custom offset +03:02:01 of 3 hours 2 minutes an 1 second.

             from Standard.Base import Time_Zone

             example_parse = Time_Zone.parse "+03:02:01"
    parse : Text -> Time_Zone ! Time_Error
    parse id =
        Panic.catch JException handler=(catch -> Error.throw (Time_Error.Error catch.payload.getMessage)) <|
            parse_builtin id

    ## Get the unique timezone ID.

       > Example
         Get the unique identifier for your system's current timezone.

             from Standard.Base import Time_Zone

             example_zone_id = Time_Zone.system.zone_id
    zone_id : Text
    zone_id self = @Builtin_Method "Time_Zone.zone_id"

    ## PRIVATE
       Convert to a JavaScript Object representing this Time_Zone.

       > Example
         Convert your system's current timezone to a JS_Object.

             from Standard.Base import Time_Zone

             example_to_json = Time_Zone.system.to_js_object
    to_js_object : JS_Object
    to_js_object self =
        type_pair = ["type", "Time_Zone"]
        cons_pair = ["constructor", "new"]
        JS_Object.from_pairs [type_pair, cons_pair, ["id", self.zone_id]]

    ## PRIVATE
       Convert to a display representation of this Time_Zone.
    to_display_text : Text
    to_display_text self = self.to_text
