from Standard.Base import all

polyglot java import org.enso.base.Time_Utils
polyglot java import org.enso.base.time.Date_Period_Utils
polyglot java import java.time.temporal.TemporalAdjuster
polyglot java import java.time.temporal.TemporalAdjusters

## Represents a period of time longer on the scale of days (longer than a day).
type Date_Period
    Year
    Quarter
    Month

    ## Represents a 7-day week starting at a given day.

       By default, the first day of the week is Monday, but this can be adjusted
       to any other day.
    Week (first_day:Day_Of_Week = Day_Of_Week.Monday)

    ## PRIVATE
       This method could be replaced with matching on `Date_Period` supertype
       if/when that is supported.
    is_date_period : Boolean
    is_date_period self = True

    ## PRIVATE
    adjust_start : (Date | Date_Time) -> (Date | Date_Time)
    adjust_start self date =
        adjuster = case self of
            Year -> TemporalAdjusters.firstDayOfYear
            Quarter -> Date_Period_Utils.quarter_start
            Month -> TemporalAdjusters.firstDayOfMonth
            Week first_day -> TemporalAdjusters.previousOrSame first_day.to_java
        (Time_Utils.utils_for date).apply_adjuster date adjuster

    ## PRIVATE
    adjust_end : (Date | Date_Time) -> (Date | Date_Time)
    adjust_end self date =
        adjuster = case self of
            Year -> TemporalAdjusters.lastDayOfYear
            Quarter -> Date_Period_Utils.quarter_end
            Month -> TemporalAdjusters.lastDayOfMonth
            Week first_day -> Date_Period_Utils.end_of_week first_day.to_java
        (Time_Utils.utils_for date).apply_adjuster date adjuster
