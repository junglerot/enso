from Standard.Base import all
import project.Data.Map.No_Value_For_Key

import project.Data.Json.Internal

## Represents a JSON structure.
type Json
    ## A smart constructor, building an object representation based on a vector
       of key-value pairs.

       Arguments:
       - contents: A vector of key-value pairs.

       All values used as keys must define a `to_json_key : Text` method.

       > Example
         The following code returns a JSON object, that after serialization becomes
         { "foo": 533, "bar": false }

             import Standard.Base.Data.Json.Json

             example_from_pairs = Json.from_pairs [["foo", 533], ["bar", False]]
    from_pairs : Vector -> Json
    from_pairs contents =
        fs = contents.fold Map.empty map-> kv_pair->
            key = kv_pair . at 0 . to_json_key
            val = kv_pair . at 1 . to_json
            map.insert key val
        Json.Object fs

    ## Parses an RFC-8259 compliant JSON text into a `Json` structure.

       Arguments:
       - json_text: The RFC-8259-compliant JSON text.

       > Example
         Convert some text representing a JSON object into JSON.

             import Standard.Base.Data.Json.Json

             example_parse = Json.parse '{ "a": 1 }'
    parse : Text -> Json ! Json_Parse_Error
    parse json_text =
        Panic.catch_java Any (Internal.parse_helper json_text) java_exception->
            Error.throw (Json_Parse_Error.Error java_exception.getMessage)

    ## A representation of a JSON object.

       Arguments:
       - fields: The fields of the JSON object.
    Object fields

    ## A representation of a JSON array.

       Arguments:
       - items: The items in the JSON array.
    Array items

    ## A representation of a JSON string.

       Arguments:
       - value: The text contained in the JSON string.
    String value

    ## A representation of a JSON number.

       Arguments:
       - value: The number contained in the JSON number.
    Number value

    ## A representation of a JSON boolean.

       Arguments:
       - value: The boolean contained in a JSON boolean.
    Boolean value

    ## A representation of a JSON null.
    Null

    ## Marshals this JSON into an arbitrary value described by
       `type_descriptor`.

       Arguments:
       - type_descriptor: The type descriptor is a fully-applied type,
         describing all required sub-types. It can either be an Atom or one of
         the primitive types (`Number`, `Text`, `Boolean`, `Vector`).

       > Example
         The following shows an example of reading a nested JSON into a desired
         type. It will return a vector of `Book` objects containing data from
         `json_string`.

             import Standard.Examples

             type Book title author
             type Author name year_of_birth

             example_into =
                 json = Examples.json
                 format = (Vector.fill 1 (Book title=Text (Author name=Text year_of_birth=Number)))
                 json.into format
    into : Any -> Any ! Marshalling_Error
    into self type_descriptor =
        Panic.recover Any (Internal.into_helper type_descriptor self)

    ## Returns this Json object.

       This is a no-op on a JSON object, but is included to implement the
       `to_json` interface.
    to_json : Json
    to_json self = self

    ## Renders this JSON into an RFC-8259 compliant text.

       > Example
         Convert some JSON to text.

             import Standard.Examples

             example_to_text = Examples.json.to_text
    to_text : Text
    to_text self = Internal.render_helper "" self

    ## Recursively unwraps the JSON value into primitive values.

       > Example
         Unwrap the JSON number 3 to the primitive number 3.

             import Standard.Base.Data.Json.Json

             example_unwrap = Json.Number 3 . unwrap
    unwrap : Any
    unwrap self = case self of
        Json.Array its -> its.map .unwrap
        Json.Boolean b -> b
        Json.Number n -> n
        Json.String t -> t
        Json.Null -> Nothing
        Json.Object f -> f.map .unwrap

    ## Gets the value associated with the given key in this object.

       Arguments:
       - field: The name of the field from which to get the value.

       Throws `Nothing` if the associated key is not defined.

       > Example
         Get the "title" field from this JSON representing a book.

             import Standard.Examples

             example_get = Examples.json_object.get "title"
    get : Text -> Json ! No_Such_Field
    get self field = case self of
        Json.Object _ -> self.fields.get field . map_error case _ of
            No_Value_For_Key.Error _ -> No_Such_Field.Error field
            x -> x
        _ -> Error.throw (Illegal_Argument_Error_Data "Json.get: self must be an Object")

## UNSTABLE

   A failure indicating malformed text input into the JSON parser.

   Check the `message` field for detailed information on the specific failure.
type Json_Parse_Error
    Error message

    ## PRIVATE

       Converts the error to a display representation.
    to_display_text : Text
    to_display_text self =
        "Parse error in parsing JSON: " + self.message.to_text + "."

## UNSTABLE

   An error indicating that there is no such field in the JSON object.
type No_Such_Field
    Error field_name

    ## PRIVATE

       Pretty prints the no such field error.
    to_display_text : Text
    to_display_text self =
        "The field " + self.field_name.to_text + " is not present in this object."

## UNSTABLE

   A failure indicating the inability to marshall a `Json` object into the
   specified format.
type Marshalling_Error

    ## UNSTABLE

       The `json` object could not be converted into `format`, due to a type
       mismatch.

       Arguments:
       - json: The JSON that could not be marshalled.
       - format: The type format that did not match.

       This can occur e.g. when trying to reinterpret a number as a `Text`, etc.
    Type_Mismatch json format

    ## UNSTABLE

       The `json` object could not be converted into `format`, due to a field
       missing in the `json` structure.

       Arguments:
       - json: The json that had a missing field.
       - field: The field name that was missing.
       - format: The type format that diud not match.

       This can occure when trying to reinterpret a JSON object into an atom,
       when the JSON does not contain all the fields required by the atom.
    Missing_Field json field format

    ## UNSTABLE

       Convert the marshalling error into a human-readable format.
    to_display_text : Text
    to_display_text self = case self of
        Marshalling_Error.Type_Mismatch json format ->
            json_text = Meta.get_simple_type_name json
            format_text = Meta.get_simple_type_name format
            "Type mismatch error: the json with type `" + json_text + "` did not match the format `" + format_text + "`."
        Marshalling_Error.Missing_Field _ field _ ->
            "Missing field in Json: the field `" + field.to_text "` was missing in the json."

## ALIAS To JSON

   Generically converts an atom into a JSON object.

   The input atom is converted into a JSON object, with a `"type"` field set to
   the atom's type name and all other fields serialized with their name as
   object key and the value as the object value.

   > Example
     Convert a vector to JSON.
         [1, 2, 3, 4].to_json
Any.to_json : Json
Any.to_json self =
    m = Meta.meta self
    case m of
        Meta.Atom_Data _ ->
            cons = Meta.Constructor_Data m.constructor
            fs = m.fields
            fnames = cons.fields
            json_fs = 0.up_to fnames.length . fold Map.empty m-> i->
                m.insert (fnames.at i) (fs.at i . to_json)
            with_tp = json_fs . insert "type" (Json.String cons.name)
            Json.Object with_tp
        Meta.Constructor_Data _ ->
            Json.Object (Map.empty . insert "type" (Json.String m.name))

        ## The following two cases cannot be handled generically and should
           instead define their own `to_json` implementations.
        Meta.Polyglot_Data _ -> Json.Null
        Meta.Primitive_Data _ -> Json.Null

## Text to JSON conversion.

   > Example
     Convert the text "Hello World!" to JSON.

         "Hello World!".to_json
   > Example
     Convert the text "cześć" to JSON.

         "cześć".to_json
Text.to_json : Json
Text.to_json self = Json.String self

## Method used by object builders to convert a value into a valid JSON key.

   > Example
     Ensure that the text "foo" is a JSON key.
         "foo".to_json_key
Text.to_json_key : Text
Text.to_json_key self = self

## Convert a boolean to JSON.

   > Example
     Convert `True` to JSON.
         True.to_json
Boolean.to_json : Json
Boolean.to_json self = Json.Boolean self

## Convert `Nothing` to JSON.

   > Example
     Convert `Nothing` to JSON.
         Nothing.to_json
Nothing.to_json : Json
Nothing.to_json self = Json.Null
