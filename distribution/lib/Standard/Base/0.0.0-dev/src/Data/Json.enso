import project.Any.Any
import project.Data.Array.Array
import project.Data.Array_Proxy.Array_Proxy
import project.Data.Json.Extensions
import project.Data.Map.Map
import project.Data.Numbers.Integer
import project.Data.Numbers.Number
import project.Data.Pair.Pair
import project.Data.Range.Extensions
import project.Data.Text.Extensions
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Common.Type_Error
import project.Error.Error
import project.Error.Illegal_Argument.Illegal_Argument
import project.Error.No_Such_Key.No_Such_Key
import project.Meta
import project.Nothing.Nothing
import project.Panic.Panic
import project.Warning.Warning

from project.Data.Boolean import Boolean, True, False

## Methods for serializing from and to JSON.
type Json
    ## Parse a Text value into a `JS_Object` or an Enso primitive value (like `Text`, `Number`, `Boolean`, `Nothing`), or a `Vector` of values.
    parse : Text -> JS_Object | Boolean | Number | Nothing | Text | Vector ! Invalid_JSON
    parse json =
        error_handler js_exception =
            Error.throw (Invalid_JSON.Error js_exception.payload.message)

        Panic.catch Any handler=error_handler <|
            parsed = json_parse json
            make_enso parsed

    ## Serialize an Object to JSON
    stringify : (JS_Object | Boolean | Number | Nothing | Text | Vector) -> Text
    stringify object =
        json_stringify (make_javascript object.to_js_object)

    ## Convert a Vector of Keys and Values to JSON.
       Keys must be `Text` values.
    from_pairs : Vector -> Text
    from_pairs pairs =
        JS_Object.from_pairs pairs . to_text

## UNSTABLE

   A failure indicating malformed text input into the JSON parser.

   Check the `message` field for detailed information on the specific failure.
type Invalid_JSON
    Error message

    ## PRIVATE

       Converts the error to a display representation.
    to_display_text : Text
    to_display_text self =
        "Parse error in parsing JSON: " + self.message.to_text + "."

## UNSTABLE

   A failure indicating the inability to marshall a `Json` object into the
   specified format.
type Marshalling_Error

    ## UNSTABLE

       The `json` object could not be converted into `format`, due to a type
       mismatch.

       Arguments:
       - json: The JSON that could not be marshalled.
       - format: The type format that did not match.

       This can occur e.g. when trying to reinterpret a number as a `Text`, etc.
    Type_Mismatch json format

    ## UNSTABLE

       The `json` object could not be converted into `format`, due to a field
       missing in the `json` structure.

       Arguments:
       - json: The json that had a missing field.
       - field: The field name that was missing.
       - format: The type format that diud not match.

       This can occure when trying to reinterpret a JSON object into an atom,
       when the JSON does not contain all the fields required by the atom.
    Missing_Field json field format

    ## UNSTABLE

       Convert the marshalling error into a human-readable format.
    to_display_text : Text
    to_display_text self = case self of
        Marshalling_Error.Type_Mismatch json format ->
            json_text = Meta.get_simple_type_name json
            format_text = Meta.get_simple_type_name format
            "Type mismatch error: the json with type `" + json_text + "` did not match the format `" + format_text + "`."
        Marshalling_Error.Missing_Field _ field _ ->
            "Missing field in Json: the field `" + field.to_text "` was missing in the json."

type JS_Object
    ## Creates a JS_Object from a list of key-value pairs.
       Keys must be `Text` values.
       Values will be recursively converted to JSON serializable as needed.
    from_pairs : Vector -> JS_Object
    from_pairs pairs =
        js_object = pairs.fold new_object current->pair->
            case pair.first of
                text : Text ->
                    js_value = pair.second.to_js_object
                    set_value current text js_value
                _ -> Error.throw (Illegal_Argument.Error "JS_Object.from_pairs: key must be a Text value")
        JS_Object.Value js_object

    ## PRIVATE
    Value js_object

    ## Get a value for a key of the object, or a default value if that key is not present.

       Arguments:
       - key: The key to get.
       - if_missing: The value to return if the key is not found.
    get : Text -> Any -> JS_Object | Boolean | Number | Nothing | Text | Vector
    get self key ~if_missing=Nothing =
        if (has_property self.js_object key) . not then if_missing else
            value = get_value self.js_object key
            make_enso value

    ## Get a value for a key of the object.
       If the key is not found, throws a `No_Such_Key` error.

       Arguments:
       - key: The key to get.
    at : Text -> JS_Object | Boolean | Number | Nothing | Text | Vector ! No_Such_Key
    at self key = self.get key (Error.throw (No_Such_Key.Error self key))

    ## Get the keys of the object.
    field_names : Vector
    field_names self =
        Vector.from_polyglot_array (get_property_names self.js_object)

    ## Gets the number of keys in the object.
    length : Number
    length self =
        get_property_names self.js_object . length

    ## Convert the object to a Vector of Pairs.
    to_vector : Vector
    to_vector self =
        keys = get_property_names self.js_object
        proxy = Array_Proxy.new keys.length (i-> Pair.new (keys.at i) (self.get (keys.at i)))
        Vector.from_polyglot_array proxy

    ## Convert the object to a JS_Object.
    to_js_object : JS_Object
    to_js_object self = self

    ## Convert to a Text.
    to_text : Text
    to_text self = Json.stringify self

    ## Convert to a JSON representation.
    to_json : Text
    to_json self = self.to_text

    ## Checks if this JS_Object is equal to another JS_Object.

       Arguments:
       - that: The map to compare `self` to.
    == : JS_Object -> Boolean
    == self that = case that of
        _ : JS_Object ->
            self_keys = self.field_names
            that_keys = that.field_names
            self_keys.length == that_keys.length && self_keys.all key->
                (self.get key == that.at key).catch No_Such_Key.Error _->False
        _ -> False

    ## UNSTABLE

       Transform the vector into text for displaying as part of its default
       visualization.
    to_default_visualization_data : Text
    to_default_visualization_data self =
        render self

## PRIVATE
   Render the JS_Object to Text with truncated depth.
render object depth=0 max_depth=5 max_length=100 = case object of
    _ : JS_Object ->
        if depth == max_depth then '"{...}"' else
            len = object.length
            keys = object.field_names.take max_length
            children = keys.map key-> key.to_json + ': ' + (render (object.get key) (depth+1) max_depth max_length)
            '{' + (children.join ", ") + (if len > max_length then ', "...": "Another ' + (len - max_length).to_text + ' items truncated."' else "") + '}'
    _ : Vector ->
        if depth == max_depth then '"[...]"' else
            len = object.length
            children = 0.up_to (max_length.min len) . map i-> render (object.at i) (depth+1) max_depth max_length
            "[" + (children.join ", ") + (if len > max_length then ', "... another ' + (len - max_length).to_text + ' items truncated."' else "") + "]"
    _ : Array ->
        proxy = Array_Proxy.new object.length (i-> make_enso (object.at i))
        @Tail_Call render (Vector.from_polyglot_array proxy) depth max_depth max_length
    Nothing -> object.to_json
    _ : Text -> object.to_json
    _ : Boolean -> object.to_json
    _ : Number -> object.to_json
    _ -> @Tail_Call render (JS_Object.Value object) depth max_depth max_length

## PRIVATE
   Internal function ensuring that a JavaScript object is presented appropriately to Enso.
   js_object must be a Native JS Object, Text, Boolean, Nothing, Number, Vector, Array, JS_Object.
   Children of these types will be recursively passed through this function.
make_enso js_object =
    case js_object of
        Nothing -> Nothing
        _ : Text -> js_object
        _ : Boolean -> js_object
        _ : Number -> js_object
        _ : Vector ->
            proxy = Array_Proxy.new js_object.length (i-> make_enso (js_object.at i))
            Vector.from_polyglot_array proxy
        _ : Array ->
            proxy = Array_Proxy.new js_object.length (i-> make_enso (js_object.at i))
            Vector.from_polyglot_array proxy
        _ : JS_Object -> js_object
        _ -> JS_Object.Value js_object

## PRIVATE
   Internal function to convert any JS_Objects into their native JS objects before passing to JS.
   enso_object must be Text, Boolean, Nothing, Number, Vector, Array, JS_Object (and children as well).
make_javascript enso_object =
    ## Have to remove warnings before passing into JavaScript otherwise will be an Object.
    if Warning.get_all enso_object != [] then make_javascript (Warning.set enso_object []) else
        case enso_object of
            _ : JS_Object ->
                enso_object.field_names.fold new_object current->key->
                    value = enso_object.get key
                    js_value = make_javascript value
                    set_value current key js_value
            _ : Vector -> enso_object.map make_javascript
            _ : Array -> Vector.from_polyglot_array enso_object . map make_javascript
            _ -> enso_object

foreign js new_object = """
    return {}

foreign js json_parse text = """
    return JSON.parse(text)

foreign js json_stringify js_object = """
    return JSON.stringify(js_object)

foreign js has_property js_object key = """
    return js_object.hasOwnProperty(key)

foreign js get_value object key = """
    return object[key]

foreign js set_value object key value = """
    object[key] = value
    return object

foreign js get_property_names object = """
    return Object.getOwnPropertyNames(object)
