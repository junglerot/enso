import project.Data.Numbers.Integer
import project.Error.Common.Type_Error
import project.Error.Error

## Types representing the ordering of values.

   These are intended to be returned from the `compare_to` function, that has a
   type as follows for a type `A`: `A.compare_to : A -> Ordering`.

   The result should be returned in terms of how `self` orders in comparison to
   `that`. So, if `self` is greater than `that`, you should return `Greater.`
@Builtin_Type
type Ordering
    ## A representation that the first value orders as less than the second.
    Less

    ## A representation that the first value orders as equal to the second.
    Equal

    ## A representation that the first value orders as greater than the second.
    Greater

    ## Converts the ordering to the signed notion of ordering based on integers.

       > Example
         Converting equal ordering to a signed number.

             import Standard.Base.Data.Ordering

             example_to_sign = Ordering.Equal.to_sign
    to_sign : Integer
    to_sign self = case self of
        Ordering.Less -> -1
        Ordering.Greater -> 1
        Ordering.Equal -> 0

    ## A lexicographical comparison.

    and_then : Ordering -> Ordering
    and_then self ~other = case self of
        Ordering.Less -> Ordering.Less
        Ordering.Equal -> other
        Ordering.Greater -> Ordering.Greater

    compare_to : Ordering -> Ordering
    compare_to self that = case that of
        _ : Ordering -> self.to_sign.compare_to that.to_sign
        _ -> Error.throw (Type_Error.Error Ordering that "that")

    ## Converts a sign-based representation of ordering to Enso's native ordering.

       Arguments:
       - sign: The number representing the relative ordering of two entities.

       > Example
         Convert the number 0 to an Enso ordering.

             Ordering.from_sign 0
    from_sign : Integer -> Ordering
    from_sign sign = if sign == 0 then Ordering.Equal else
        if sign > 0 then Ordering.Greater else Ordering.Less
