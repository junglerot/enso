import project.Any.Any
import project.Data.Ordering.Natural_Order
import project.Data.Ordering.Ordering
import project.Data.Ordering.Comparable
import project.Data.Text.Case_Sensitivity.Case_Sensitivity
import project.Data.Text.Text_Ordering.Text_Ordering
import project.Error.Common.Incomparable_Values
import project.Nothing.Nothing

from project.Data.Boolean import True, False

polyglot java import org.enso.base.ObjectComparator

## ADVANCED
   Creates a Java Comparator object which can call back to Enso for comparison
   of non-primitive types.

   Arguments:
   - custom_comparator:
     If `Nothing` will get an ordered comparator from each element.
     Otherwise can support a custom fallback compare function.
new : Nothing | (Any -> Any -> Ordering) -> ObjectComparator
new custom_comparator=Nothing =
    comparator_to_java cmp x y = cmp x y . to_sign

    case custom_comparator of
        Nothing -> ObjectComparator.getInstance (comparator_to_java Ordering.compare)
        _ -> ObjectComparator.new (comparator_to_java custom_comparator)

## ADVANCED
   Create a Java Comparator with the specified Text_Ordering

   Arguments:
   - text_ordering:
     Specifies how to compare Text values within the Comparator.
for_text_ordering : Text_Ordering -> ObjectComparator
for_text_ordering text_ordering = case text_ordering.sort_digits_as_numbers of
    True ->
        txt_cmp a b = Natural_Order.compare a b text_ordering.case_sensitivity . to_sign
        new.withCustomTextComparator txt_cmp
    False -> case text_ordering.case_sensitivity of
        Case_Sensitivity.Default -> new
        Case_Sensitivity.Sensitive -> new
        Case_Sensitivity.Insensitive locale ->
            new.withCaseInsensitivity locale.java_locale
