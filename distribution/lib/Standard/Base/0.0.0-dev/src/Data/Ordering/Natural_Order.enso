import project.Data.Numbers.Integer
import project.Data.Ordering.Ordering
import project.Data.Pair.Pair
import project.Data.Text.Case_Sensitivity.Case_Sensitivity
import project.Data.Text.Text

from project.Data.Boolean import True, False

polyglot java import org.enso.base.Text_Utils
polyglot java import com.ibm.icu.text.BreakIterator

## Compares two text values according to the natural dictionary ordering.

   > Example
     Compare two texts according to the natural dictionary ordering.

         Natural_Order.compare "a2" "a100" == Ordering.Less

   > Example
     Sort a vector of texts according to the natural dictionary ordering.

         ["a2", "a1", "a100", "a001", "a0001"].sort by=Natural_Order.compare . should_equal ["a0001", "a001", "a1", "a2", "a100"]
compare : Text -> Text -> Case_Sensitivity -> Ordering
compare text1 text2 case_sensitivity=Case_Sensitivity.Sensitive =
    compare_text = case case_sensitivity of
        Case_Sensitivity.Insensitive locale -> a -> b -> a.compare_to_ignore_case b locale
        Case_Sensitivity.Sensitive -> _.compare_to _

    iter1 = BreakIterator.getCharacterInstance
    iter1.setText text1

    iter2 = BreakIterator.getCharacterInstance
    iter2.setText text2

    ## check if a single character is between '0' and '9'
    ascii_code_zero = 48
    ascii_code_nine = 57
    is_digit = character -> character>=ascii_code_zero && character<=ascii_code_nine

    ## Find the end of a number and then return the substring, value and new
       indices of the bounds of the next character. If the end of the text has
       been reached then the second index will be -1.
    get_number text prev next iter =
        ## Find end of number and return pair of index and flag if reached end
        loop text next iter =
            new_next = iter.next
            if (new_next == -1) then (Pair.new next True) else
                substring = Text_Utils.substring text next new_next
                character = Text_Utils.get_chars substring . at 0
                if (is_digit character).not then (Pair.new next False) else
                    @Tail_Call loop text new_next iter

        pair = loop text next iter
        substring = Text_Utils.substring text prev pair.first

        decimal = Integer.parse substring

        next_index = if pair.second then -1 else iter.current
        [substring, decimal, pair.first, next_index]


    ## Loop to computer the ordering of text1 and text2.
       Ordering: Nothing < Number < Text
       prev1 - index to start of current character in text1.
       next1 - index to start of next character (or -1 if finished) in text1.
       prev2 - index to start of current character in text2.
       next2 - index to start of next character (or -1 if finished) in text2.
    order prev1 next1 prev2 next2 =
        case Pair.new (next1 == -1) (next2 == -1) of
            Pair.Value True True -> Ordering.Equal
            Pair.Value True False -> Ordering.Less
            Pair.Value False True -> Ordering.Greater
            Pair.Value False False ->
                substring1 = Text_Utils.substring text1 prev1 next1
                first_char_1 = Text_Utils.get_chars substring1 . at 0

                substring2 = Text_Utils.substring text2 prev2 next2
                first_char_2 = Text_Utils.get_chars substring2 . at 0

                tmp = Pair.new (is_digit first_char_1) (is_digit first_char_2)
                ## ToDo: Move to case on second block
                   Appears to be an issue using a nested case statement on a pair
                   https://www.pivotaltracker.com/story/show/181280737
                if (tmp.first && tmp.second.not) then Ordering.Less else
                    if (tmp.first.not && tmp.second) then Ordering.Greater else
                        case tmp.first.not of
                            True ->
                                text_comparison = compare_text substring1 substring2
                                if text_comparison != Ordering.Equal then text_comparison else
                                    @Tail_Call order next1 iter1.next next2 iter2.next
                            False ->
                                parsed1 = get_number text1 prev1 next1 iter1
                                num_text1 = parsed1.at 0
                                value1 = parsed1.at 1

                                parsed2 = get_number text2 prev2 next2 iter2
                                num_text2 = parsed2.at 0
                                value2 = parsed2.at 1

                                value_comparison = value1.compare_to value2
                                if value_comparison != Ordering.Equal then value_comparison else
                                    text_comparison = compare_text num_text1 num_text2
                                    if text_comparison != Ordering.Equal then text_comparison else
                                        @Tail_Call order (parsed1.at 2) (parsed1.at 3) (parsed2.at 2) (parsed2.at 3)

    order 0 iter1.next 0 iter2.next
