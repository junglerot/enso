from Standard.Base import all

## Compares two Vectors according to the lexicographic ordering.

   Arguments:
   - vector1: The first vector to compare.
   - vector2: The second vector to compare.
   - element_comparator (optional): A custom comparator defining the order
     between particular elements. Uses the default ordering by default.

   Returns whether `vector1` is less, equal or greater than `vector2` according
   to the lexicographic ordering. The ordering is defined as follows:
   - If `vector1` is empty and `vector2` is not, than `Less` is returned;
     similarly if `vector1` is non-empty, but `vector2` is empty, `Greater` is
     returned.
   - If the first element of `vector1` is less or greater than the first element
     of `vector2` than this is specifies the ordering between the vectors. If
     the first element is equal, the tails of both vectors are compared
     according to the same algorithm.

   > Example
     Compare two vectors lexicographically.

         Vector_Lexicographic_Order.compare [1, 2, 3] [1, 3, 0] == Ordering.Less
         Vector_Lexicographic_Order.compare [1, 2, 3] [1, 2] == Ordering.Greater
         Vector_Lexicographic_Order.compare [] [1] == Ordering.Less
         Vector_Lexicographic_Order.compare [1] [1] == Ordering.Equal
compare : Vector -> Vector -> (Any -> Any -> Ordering) -> Ordering
compare vector1 vector2 (element_comparator = _.compare_to _) =
    is_index_contained_in_both ix = ix<vector1.length && ix<vector2.length
    go ix = case is_index_contained_in_both ix of
        True ->
            current_element_ordering = element_comparator (vector1.at ix) (vector2.at ix)
            case current_element_ordering of
                Ordering.Equal ->
                    ## If the current elements are equal, we need to compare the
                       next elements (if any).
                    @Tail_Call go ix+1
                _ ->
                    ## If the current elements compare differently, they
                       determine the whole ordering between these vectors.
                    current_element_ordering
        False ->
            ## At least one of the vectors ran out of elements. In that case,
               the longer Vector is the greater one and if both have the same
               length that means they must have been equal.
            vector1.length . compare_to vector2.length
    go 0

