import project.Any.Any
import project.Data.Locale.Locale
import project.Data.Ordering.Ordering
import project.Error.Common.Type_Error
import project.Error.Error
import project.Meta

from project.Data.Boolean import Boolean, True, False

polyglot java import org.enso.base.Text_Utils


## Enso's text type.

   Enso's text type is natively unicode aware, and will handle arbitrary
   textual data.

   ? Concatenation
     Enso's text type uses a rope-based structure under the hood to provide
     users with efficient concatenation operations.
@Builtin_Type
type Text

    ## Concatenates the text that to the right side of this.

       Arguments:
       - that: The text to concatenate to this.

       > Example
         Concatenating two texts.

             "Hello" + ", world!"
    + : Text -> Text
    + self that = @Builtin_Method "Text.+"

    ## Checks whether `self` is equal to `that`.

       Arguments:
       - that: The text to compare `self` for equality with.

       ! Unicode Equality
         The definition of equality includes Unicode canonicalization. I.e. two
         texts are equal if they are identical after canonical decomposition. This
         ensures that different ways of expressing the same character in the
         underlying binary representation are considered equal.

       > Example
         The string 'é' (i.e. the character U+00E9, LATIN SMALL LETTER E WITH ACUTE)
         is canonically the same as the string 'e\u0301' (i.e. the letter `e`
         followed by U+0301, COMBINING ACUTE ACCENT). Therefore:

             ('é' == 'e\u0301') == True
    == : Any -> Boolean
    == self that = if Meta.is_same_object self Text then Meta.is_same_object that Text else
        case that of
            _ : Text -> Text_Utils.equals self that
            _ -> False

    ## Compare two texts to discover their ordering.

       Arguments:
       - that: The text to order `self` with respect to.

       > Example
         Checking how "a" orders in relation to "b".

             "a".compare_to "b"
    compare_to : Text -> Ordering
    compare_to self that = case that of
        _ : Text ->
            comparison_result = Text_Utils.compare_normalized self that
            Ordering.from_sign comparison_result
        _ -> Error.throw (Type_Error.Error Text that "that")

    ## Checks whether `self` is equal to `that`, ignoring the case of the texts.

       Arguments:
       - that: The text to compare `self` for case-insensitive equality with.

       Two texts are considered equal ignoring case if they are of the same length
       and corresponding characters are equal ignoring case.

       ! Unicode Equality
         The definition of equality includes Unicode canonicalization. I.e. two
         texts are equal if they are identical after canonical decomposition. This
         ensures that different ways of expressing the same character in the
         underlying binary representation are considered equal.

       > Example
         The string 'É' (i.e. the character U+00C9, LATIN CAPITAL LETTER E WITH
         ACUTE) is equal ignore case to the string 'é' (i.e. the character U+00E9,
         LATIN SMALL LETTER E WITH ACUTE), which is canonically the same as the
         string 'e\u0301' (i.e. the letter `e` followed by U+0301, COMBINING ACUTE
         ACCENT). Therefore:

             (('É' . equals_ignore_case 'é') && ('é' . equals_ignore_case 'e\u0301')) == True
    equals_ignore_case : Text -> Locale -> Boolean
    equals_ignore_case self that locale=Locale.default =
        Text_Utils.equals_ignore_case self that locale.java_locale

    ## ADVANCED
       PRIVATE
       UNSTABLE
       Unifies the case of all letters in the text, generating a key which can be
       used to perform case-insensitive comparisons.
    to_case_insensitive_key : Locale -> Text
    to_case_insensitive_key self locale=Locale.default =
        Text_Utils.case_insensitive_key self locale.java_locale

    ## Compare two texts to discover their ordering.

       Arguments:
       - that: The text to order `self` with respect to.

       > Example
         Checking how "a" orders in relation to "b".

             "a".compare_to_ignore_case "b"
    compare_to_ignore_case : Text -> Locale -> Ordering
    compare_to_ignore_case self that locale=Locale.default =
        if that.is_nothing then Error.throw (Type_Error.Error Text that "that") else
            comparison_result = Text_Utils.compare_normalized_ignoring_case self that locale.java_locale
            Ordering.from_sign comparison_result

    ## ALIAS Check Emptiness

       Check if `self` is empty.

       ! What is Empty?
         Text is considered to be empty when its length is zero.

       > Example
         Check if the text "aaa" is empty.

             "aaa".is_empty
    is_empty : Boolean
    is_empty self = self == ""

    ## ALIAS Check Non-Emptiness

       Check if `self` is not empty.

       ! What is Not Empty?
         Text is considered to be not empty when its length is greater than zero.

       > Example
         Check if the text "aaa" is not empty.

             "aaa".not_empty
    not_empty : Boolean
    not_empty self = self.is_empty.not
