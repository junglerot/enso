import project.Data.Numbers.Integer
import project.Data.Vector.Vector
import project.Data.Pair.Pair
import project.Data.Text.Extensions
import project.Data.Text.Text
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Errors.No_Such_Key.No_Such_Key

from project.Data.Boolean import Boolean, True, False
from project import Error, Nothing, Any, Panic

## A key-value store. It is possible to use any type as keys and values and mix them in
   one Map. Keys are checked for equality based on their hash code and `==` operator, which
   is both an internal part of Enso. Enso is capable of computing a hash code, and checking
   for equality any objects that can appear in Enso - primitives, Atoms, values coming from
   different languages, etc.

   A single key-value pair is called an *entry*.

   It is possible to pass a Map created in Enso to foreign functions, where it will be treated
   as appropriate map structures - in Python that is a dictionary, and in JavaScript, it is
   a `Map`. And likewise, it is possible to pass a foreign map into Enso, where it will be
   treated as a Map.
@Builtin_Type
type Map key value
    ## Returns an empty map.
    empty : Map
    empty = @Builtin_Method "Map.empty"

    ## Returns a single-element map with the given key and value.
       A Call to `Map.singleton key value` is the same as a call to
       `Map.empty.insert key value`.

       Arguments:
       - key: The key to to use for `value` in the map.
       - value: The value to store under 'key' in the map.

       > Example
         Create a single element map storing the key "my_key" and the value 2.

             import Standard.Base.Data.Map.Map

             example_singleton = Map.singleton "my_key" 2
    singleton : Any -> Any -> Map
    singleton key value = Map.empty.insert key value

    ## Builds a map from a vector of key-value pairs, with each key-value pair
       represented as a 2 element vector.

       Arguments:
       - vec: A vector of key-value pairs (2 element vectors).
       - allow_duplicates: A flag which specifies if duplicate keys on the input
         vector are allowed. By default, set to `False`, meaning that if two
         entries in the vector share the same key, an `Illegal_Argument.Error`
         will be thrown. If set to `True`, the last entry with a given key will
         be kept.

       > Example
         Building a map containing two key-value pairs.

             import Standard.Base.Data.Map.Map

             example_from_vector = Map.from_vector [["A", 1], ["B", 2]]
    from_vector : Vector Any -> Boolean -> Map
    from_vector vec allow_duplicates=False =
        vec.fold Map.empty m-> el->
            key = el.at 0
            value = el.at 1
            if allow_duplicates || (m.contains_key key . not) then m.insert key value else
                Error.throw (Illegal_Argument.Error "`Map.from_vector` encountered duplicate key: "+key.to_display_text)

    ## Returns True iff the Map is empty, i.e., does not have any entries.
    is_empty : Boolean
    is_empty self = self.size == 0

    ## Returns True iff the Map is not empty, i.e., has at least one entry.
    not_empty : Boolean
    not_empty self = self.is_empty.not

    ## Returns the number of entries in this map.
    size : Integer
    size self = @Builtin_Method "Map.size"

    ## Inserts a key-value mapping into this map, overriding any existing
       instance of `key` with the new `value`.

       Note that since the return type is also a `Map`, multiple `insert`
       calls can be chained, e.g., `map.insert "A" 1 . insert "B" 2`.

       Due to the limitation of the current implementation, inserts with a
       key that is already contained in the map, or insert on a map instance that
       is re-used in other computations, have a linear time complexity.
       For all the other cases, the time complexity of this method is constant.

       Arguments:
       - key: The key to insert the value for.
       - value: The value to associate with the `key`.

       > Example
         Insert the value "seven" into the map for the key 7.

             import Standard.Base.Data.Map.Map
             import Standard.Examples

             example_insert = Examples.map.insert 7 "seven"
    insert : Any -> Any -> Map
    insert self key value = @Builtin_Method "Map.insert"

    ## Removes an entry specified by the given key from this map, and
       returns a new map without this entry. Throw `No_Such_Key.Error`
       if `key` is not present.

       Arguments:
       - key: The key to look up in the map.

       > Example
         Remove key "A" from a map

             import Standard.Data.Map.Map

             Examples.map.remove "A"

    remove : Any -> Map ! No_Such_Key
    remove self key =
        Panic.catch Any (self.remove_builtin key) _->
            Error.throw No_Such_Key.Error self key

    ## Gets the value associated with `key` in this map, or throws a
       `No_Such_Key.Error` if `key` is not present.

       This method has a constant time complexity.

       Arguments:
       - key: The key to look up in the map.

       > Example
         Looks up the value for the key "A" in a map.

             import Standard.Base.Data.Map.Map
             import Standard.Examples

             example_at = Examples.map.at "A"
    at : Any -> Any ! No_Such_Key
    at self key = self.get key (Error.throw (No_Such_Key.Error self key))

    ## Gets the value associated with `key` in this map, or returns
       `if_missing` if it isn't present.

       This method has a constant time complexity.

       Arguments:
       - key: The key to look up in the map.
       - if_missing: The value to use if the key isn't present.

       > Example
         Get the value for the key 2 in a map or instead return "zero" if it
         isn't present.

             import Standard.Base.Data.Map.Map
             import Standard.Examples

             example_get = Examples.map.get 2 "zero"
    get : Any -> Any -> Any
    get self key ~if_missing=Nothing = self.get_builtin key if_missing

    ## Returns True iff the Map contains the given `key`.
    contains_key : Any -> Boolean
    contains_key self key = @Builtin_Method "Map.contains_key"

    ## Returns an unsorted vector of all the keys in this Map.
    keys : Vector Any
    keys self = self.to_vector.map pair-> pair.at 0

    ## Returns an unsorted vector of all the values in this Map.
    values : Vector Any
    values self = self.to_vector.map pair-> pair.at 1

    ## Maps a function over each value in this map.

       Arguments:
       - function: The function to apply to each value in the map, taking a
         value and returning a value.

       > Example
         Append "_word" to all values in the map.

             import Standard.Base.Data.Map.Map
             import Standard.Examples

             example_map = Examples.map.map (+ "_word")
    map : (Any -> Any) -> Map
    map self function =
        kv_func = _ -> function
        self.map_with_key kv_func

    ## Maps a function over each key-value pair in the map, transforming the
       value.

       Arguments:
       - function: The function to apply to each key and value in the map,
         taking a key and a value and returning a value.

       > Example
         Prepend the keys to the values in the map.

             import Standard.Base.Data.Map.Map
             import Standard.Examples

             example_map_with_key =
                Examples.map.map_with_key (k -> v -> k.to_text + "-" + v)
    map_with_key : (Any -> Any -> Any) -> Map
    map_with_key self function =
        Map.from_vector <| self.to_vector.map pair->
            key = pair.first
            value = pair.last
            [key, (function key value)]

    ## Maps a function over each key in this map.

       Arguments:
       - function: The function to apply to each key in the map, taking a key
         and returning a key.

       > Example
         Doubling all keys in the map.

             import Standard.Base.Data.Map.Map
             import Standard.Examples

             example_map_keys = Examples.map.map_keys *2
    map_keys : (Any -> Any) -> Map
    map_keys self function =
        trans_function = k -> v -> [function k, v]
        self.transform trans_function

    ## Transforms the map's keys and values to create a new map.

       Arguments:
       - function: The function used to transform the map, taking a key and a
         value and returning a pair of `[key, value]`.

       ! Error Conditions
         - If multiple map entries end up with duplicate keys after the
           transformation, an `Illegal_Argument.Error` is thrown.

       > Example
         Turn all keys into `Text` and append "_word" to the values in the map.

             import Standard.Base.Data.Map.Map
             import Standard.Examples

             example_transform =
                Examples.map.transform (k -> v -> [k.to_text, v + "_word"])
    transform : (Any -> Any -> [Any, Any]) -> Map
    transform self function =
        func_pairs = p -> function (p.at 0) (p.at 1)
        vec_transformed = self.to_vector.map func_pairs
        new_map = Map.from_vector vec_transformed allow_duplicates=False
        new_map.catch Illegal_Argument error->
            case error.message.starts_with "`Map.from_vector` encountered duplicate key" of
                True ->
                    new_message = error.message.replace "from_vector" "transform"
                    Error.throw (Illegal_Argument.Error new_message error.cause)
                False -> new_map

    ## Combines the values in the map.

       Arguments:
       - init: The initial value for the fold.
       - function: A binary function to apply to pairs of values in the map.

       > Example
         Find the length of the longest word in the map.

             import Standard.Base.Data.Map.Map
             import Standard.Examples

             example_fold = Examples.map.fold 0 (l -> r -> Math.max l r.length)
    fold : Any -> (Any -> Any -> Any) -> Any
    fold self init function = self.values.fold init function

    ## Combines the key-value pairs in the map.

       Arguments:
       - init: The initial value for the fold.
       - function: A function taking the left value, the current key, and the
         current value, and combining them to yield a single value.

       > Example
         Glue the values in the map together with the keys.

             import Standard.Base.Data.Map.Map
             import Standard.Examples

             example_fold_with_key =
                Examples.map.fold_with_key "" (l -> k -> v -> l + k.to_text + v)
    fold_with_key : Any -> (Any -> Any -> Any -> Any) -> Any
    fold_with_key self init function =
        self.to_vector.fold init acc-> pair->
            function acc pair.first pair.last

    ## Applies a function to each value in the map.

       Arguments:
       - function: The function to apply to each value in the map, taking a
         value and returning anything.

       This method does not return the results, so is only useful for performing
       computations with side-effects.

       > Example
         Printing each value in the map.

             import Standard.Base.Data.Map.Map
             import Standard.Examples

             example_each = Examples.map.each IO.println
    each : (Any -> Any) -> Nothing
    each self function =
        kv_func = _ -> function
        self.each_with_key kv_func

    ## Applies a function to each key-value pair in the map.

       Arguments:
       - function: The function to apply to each key-value pair in the map,
         taking a key and a value and returning anything.

       This method does not return the results, so is only useful for performing
       computations with side-effects.

       > Example
         Printing each key and value in the map.

             import Standard.Base.Data.Map.Map
             import Standard.Examples

             example_each_with_key = Examples.map.each_with_key k->v->
                IO.println k
                IO.println v
    each_with_key : (Any -> Any -> Any) -> Nothing
    each_with_key self function =
        self.to_vector.each pair->
            function pair.first pair.last

    ## Returns an unsorted vector of key-value pairs (nested 2 element vectors).
       `Map.from_vector` method is an inverse method, so the following expression
       is true for all maps: `Map.from_vector map.to_vector == map`.
    to_vector : Vector Any
    to_vector self = @Builtin_Method "Map.to_vector"

    ## Returns a text representation of this Map.
    to_text : Text
    to_text self = @Builtin_Method "Map.to_text"

    ## PRIVATE
    get_builtin : Any -> Any -> Any
    get_builtin self key ~if_missing = @Builtin_Method "Map.get_builtin"
