import project.Any.Any
import project.Data.Array_Proxy.Array_Proxy
import project.Data.Json.Invalid_JSON
import project.Data.Json.JS_Object
import project.Data.Numbers.Integer
import project.Data.Numbers.Number
import project.Data.Pair.Pair
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.No_Such_Key.No_Such_Key
import project.Metadata.Display
import project.Metadata.Widget
import project.Nothing.Nothing
import project.Panic.Panic
from project.Data.Boolean import Boolean, False, True
from project.Data.Json.Extensions import all
from project.Data.Ordering import all
from project.Data.Text.Extensions import all
from project.Metadata.Choice import Option
from project.Metadata.Widget import Single_Choice

polyglot java import com.fasterxml.jackson.core.JsonProcessingException
polyglot java import com.fasterxml.jackson.databind.JsonNode
polyglot java import com.fasterxml.jackson.databind.ObjectMapper
polyglot java import com.fasterxml.jackson.databind.node.ArrayNode
polyglot java import com.fasterxml.jackson.databind.node.JsonNodeType
polyglot java import com.fasterxml.jackson.databind.node.ObjectNode

## PRIVATE
   Jackson-based JSON Parser
type Java_Json
    parse : Text -> Nothing | Boolean | Number | Text | Vector | Jackson_Object
    parse text:Text =
        error_handler js_exception =
            Error.throw (Invalid_JSON.Error js_exception.payload.message)

        Panic.catch JsonProcessingException handler=error_handler <|
            node = ObjectMapper.new.readTree text
            read_json_node node

## PRIVATE
   Read a JsonNode to an Enso type
read_json_node : JsonNode -> Nothing | Boolean | Number | Text | Vector | Jackson_Object
read_json_node node = case node.getNodeType of
    JsonNodeType.NULL -> Nothing
    JsonNodeType.BOOLEAN -> node.asBoolean
    JsonNodeType.STRING -> node.asText
    JsonNodeType.NUMBER ->
        if node.isFloatingPointNumber then node.asDouble else node.asLong
    JsonNodeType.ARRAY -> read_json_array node
    JsonNodeType.OBJECT -> Jackson_Object.new node

## PRIVATE
    Read a JsonNode to a Vector
read_json_array : ArrayNode -> Vector
read_json_array node =
    proxy = Array_Proxy.new node.size i->  (read_json_node (node.get i))
    Vector.from_polyglot_array proxy

## PRIVATE
type Jackson_Object
    new : ObjectNode -> Jackson_Object
    new object_node =
        make_field_names object =
            name_iterator = object.fieldNames
            builder = Vector.new_builder object.size
            loop iterator builder =
                if iterator.hasNext.not then builder.to_vector else
                    builder.append iterator.next
                    @Tail_Call loop iterator builder
            loop name_iterator builder
        Jackson_Object.Value object_node (make_field_names object_node)

    ## PRIVATE
    Value object_node ~field_array

    ## GROUP Logical
       Returns True iff the objects contains the given `key`.
    contains_key : Text -> Boolean
    contains_key self key:Text = self.object_node.has key

    ## Get a value for a key of the object, or a default value if that key is not present.

       Arguments:
       - key: The key to get.
       - if_missing: The value to return if the key is not found.
    @key make_field_name_selector
    get : Text -> Any -> Nothing | Boolean | Number | Text | Vector | Jackson_Object
    get self key:Text ~if_missing=Nothing =
        if self.contains_key key . not then if_missing else
            child = self.object_node.get key
            read_json_node child

    ## GROUP Selections
       Get a value for a key of the object.
       If the key is not found, throws a `No_Such_Key` error.

       Arguments:
       - key: The key to get.
    @key make_field_name_selector
    at : Text -> Jackson_Object | Boolean | Number | Nothing | Text | Vector ! No_Such_Key
    at self key:Text = self.get key (Error.throw (No_Such_Key.Error self key))

    ## GROUP Metadata
       Get the keys of the object.
    field_names : Vector
    field_names self = self.field_array

    ## Maps a function over each value in this object

       Arguments:
       - function: The function to apply to each value in the map, taking a
         value and returning a value.
    map : (Any->Any) -> Vector
    map self function =
        kv_func = _ -> function
        self.map_with_key kv_func

    ## Maps a function over each field-value pair in the object.

       Arguments:
       - function: The function to apply to each key and value in the map,
         taking a key and a value and returning a value.
    map_with_key : (Any -> Any -> Any) -> Vector
    map_with_key self function =
        self.field_names.map key->
            value = self.get key
            function key value

    ## GROUP Conversions
       Convert the object to a Vector of Pairs.
    to_vector : Vector
    to_vector self =
        keys = self.field_array
        proxy = Array_Proxy.new keys.length (i-> [(keys.at i), (self.get (keys.at i))])
        Vector.from_polyglot_array proxy

    ## GROUP Metadata
       Gets the number of keys in the object.
    length : Number
    length self = self.object_node.size

    ## GROUP Logical
       Returns True iff the Map is empty, i.e., does not have any entries.
    is_empty : Boolean
    is_empty self = self.length == 0

    ## GROUP Logical
       Returns True iff the Map is not empty, i.e., has at least one entry.
    not_empty : Boolean
    not_empty self = self.is_empty.not

    ## PRIVATE
       Convert the object to a JS_Object.
    to_js_object : JS_Object
    to_js_object self =
        pairs = self.field_names.map name-> [name, self.at name . to_js_object]
        JS_Object.from_pairs pairs

    ## PRIVATE
       Convert to a Text.
    to_text : Text
    to_text self = self.to_json

    ## PRIVATE
       Convert JS_Object to a friendly string.
    to_display_text : Text
    to_display_text self =
        self.to_text.to_display_text

    ## PRIVATE
       Convert to a JSON representation.
    to_json : Text
    to_json self = self.object_node.toString

## PRIVATE
   Make a field name selector
make_field_name_selector : Jackson_Object -> Display -> Widget
make_field_name_selector js_object display=Display.Always =
    Single_Choice display=display values=(js_object.field_names.map n->(Option n n.pretty))

## Extension for Text to allow use.
Text.parse_fast_json : Nothing | Boolean | Number | Text | Vector | Jackson_Object
Text.parse_fast_json self = Java_Json.parse self

## PRIVATE
type Jackson_Object_Comparator
    ## PRIVATE
    compare : Jackson_Object -> Jackson_Object -> (Ordering|Nothing)
    compare obj1 obj2 =
        obj1_keys = obj1.field_names
        obj2_keys = obj2.field_names
        same_values = obj1_keys.length == obj2_keys.length && obj1_keys.all key->
            (obj1.get key == obj2.at key).catch No_Such_Key _->False
        if same_values then Ordering.Equal else Nothing

    ## PRIVATE
    hash : Jackson_Object -> Integer
    hash obj =
        values_hashes = obj.field_names.map field_name->
            val = obj.get field_name
            Comparable.from val . hash val
        # Return sum, as we don't care about ordering of field names
        values_hashes.fold 0 (+)

## PRIVATE
Comparable.from (_:Jackson_Object) = Jackson_Object_Comparator
