private
import project.Data.Enso_Cloud.Enso_Secret.Enso_Secret
import project.Data.Enso_Cloud.Enso_Secret.Derived_Secret_Value
import project.Data.Enso_Cloud.Errors.Not_Logged_In
import project.Data.Pair.Pair
import project.Data.Text.Text
import project.Error.Error
import project.Network.HTTP.Header.Header
import project.Nothing.Nothing
import project.Runtime.Ref.Ref
import project.System.Environment
import project.System.File.File

polyglot java import org.enso.base.enso_cloud.AuthenticationProvider

## PRIVATE
cloud_root_uri = "" + AuthenticationProvider.getAPIRootURI

## PRIVATE
   Construct the authorization header for the request
authorization_header : Header
authorization_header =
    token = AuthenticationProvider.getToken.if_nothing <|
        f = credentials_file
        if f.exists.not then Error.throw Not_Logged_In else
            AuthenticationProvider.setToken (f.read_text)
    Header.authorization_bearer token

## PRIVATE
credentials_file : File
credentials_file = case Environment.get "ENSO_CLOUD_CREDENTIALS_FILE" of
    Nothing -> File.home / ".enso" / "credentials"
    path -> File.new path

## PRIVATE
   Root address for listing folders
directory_api = cloud_root_uri + "directories"

## PRIVATE
   Root address for listing folders
files_api = cloud_root_uri + "files"

## PRIVATE
   Root address for listing folders
projects_api = cloud_root_uri + "projects"

## PRIVATE
   Root address for Secrets API
secrets_api = cloud_root_uri + "secrets"

## PRIVATE
flush_caches : Nothing
flush_caches = AuthenticationProvider.flushCloudCaches
