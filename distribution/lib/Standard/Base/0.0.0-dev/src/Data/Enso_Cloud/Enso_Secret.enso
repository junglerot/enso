import project.Data.Enso_Cloud.Enso_File.Enso_File
import project.Data.Enso_Cloud.Utils
import project.Data.Json.JS_Object
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Common.Forbidden_Operation
import project.Errors.Common.Not_Found
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Network.HTTP.HTTP
import project.Network.HTTP.HTTP_Method.HTTP_Method
import project.Network.HTTP.Request_Body.Request_Body
import project.Nothing.Nothing
import project.Runtime.Context
from project.Data.Boolean import Boolean, False, True
from project.Data.Text.Extensions import all

type Enso_Secret
    ## PRIVATE
    Value name:Text id:Text

    ## Create a new secret.

       Arguments:
       - name: The name of the secret
       - value: The value of the secret
       - parent: The parent folder for the secret. If `Nothing` then it will be
         created in the root folder.
    create : Text -> Text -> Enso_File | Nothing -> Enso_Secret
    create name:Text value:Text parent:(Enso_File | Nothing)=Nothing = if name == "" then Error.throw (Illegal_Argument.Error "Secret name cannot be empty") else
        if Context.Output.is_enabled.not then Error.throw (Forbidden_Operation.Error "Creating a secret is forbidden as the Output context is disabled.") else
            if name.starts_with "connection-" then Error.throw (Illegal_Argument.Error "Secret name cannot start with 'connection-'") else
                if Enso_Secret.exists name parent then Error.throw (Illegal_Argument.Error "Secret with this name already exists.") else
                    auth_header = Utils.authorization_header
                    body = JS_Object.from_pairs [["name", name], ["value", value]]
                    headers = if parent.is_nothing then [auth_header] else [auth_header, ["parentDirectoryId", Enso_File.id]]
                    response = HTTP.post Utils.secrets_api body HTTP_Method.Post headers
                    id = response.decode_as_json
                    Enso_Secret.Value name id

    ## GROUP Output
       Deletes a secret.
    delete : Enso_Secret
    delete self =
        if Context.Output.is_enabled.not then Error.throw (Forbidden_Operation.Error "Deleting a secret is forbidden as the Output context is disabled.") else
            auth_header = Utils.authorization_header
            uri = Utils.secrets_api + "/" + self.id
            response = HTTP.post uri Request_Body.Empty HTTP_Method.Delete [auth_header]
            response.if_not_error self

    ## GROUP Input
       Gets a list of all the secrets in the folder.

       Arguments:
       - folder: The folder to get the secrets from. If `Nothing` then will get
         the secrets from the root folder.
    list : Enso_File | Nothing -> Vector Enso_Secret
    list parent:(Enso_File | Nothing)=Nothing =
        auth_header = Utils.authorization_header
        auth_header.if_not_error <|
            headers = if parent.is_nothing then [auth_header] else [auth_header, ["parent_id", Enso_File.id]]
            response = HTTP.fetch Utils.secrets_api HTTP_Method.Get headers
            response.if_not_error <|
                js_object = response.decode_as_json
                secrets = js_object.get "secrets" []
                raw_secrets = secrets.map v-> v.into Enso_Secret
                raw_secrets.filter s-> (s.name.starts_with "connection-" == False)

    ## Get a Secret if it exists.

       Arguments:
       - name: The name of the secret
       - parent: The parent folder for the secret. If `Nothing` then will check
         in the root folder.
    get : Text -> Enso_File | Nothing -> Enso_Secret ! Not_Found
    get name:Text parent:(Enso_File | Nothing)=Nothing =
        Enso_Secret.list parent . find s-> s.name == name

    ## GROUP Metadata
       Checks if a Secret exists.

       Arguments:
       - name: The name of the secret
       - parent: The parent folder for the secret. If `Nothing` then will check
         in the root folder.
    exists : Text -> Enso_File | Nothing -> Boolean
    exists name:Text parent:(Enso_File | Nothing)=Nothing =
        Enso_Secret.list parent . any s-> s.name == name

## PRIVATE
type Enso_Secret_Error
    ## PRIVATE
    Access_Denied

    ## PRIVATE
    to_display_text : Text
    to_display_text self = "Cannot read secret value into Enso."
