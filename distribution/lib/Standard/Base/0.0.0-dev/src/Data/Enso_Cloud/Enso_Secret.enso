import project.Data.Base_64.Base_64
import project.Data.Enso_Cloud.Enso_File.Enso_File
import project.Data.Enso_Cloud.Enso_File.Enso_Asset_Type
import project.Data.Enso_Cloud.Utils
import project.Data.Json.JS_Object
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Common.Forbidden_Operation
import project.Errors.Common.Not_Found
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Network.HTTP.HTTP
import project.Network.HTTP.HTTP_Method.HTTP_Method
import project.Network.HTTP.Request_Body.Request_Body
import project.Nothing.Nothing
import project.Runtime.Context
from project.Data.Boolean import Boolean, False, True
from project.Data.Text.Extensions import all
from project.Data.Enso_Cloud.Enso_File import list_assets

polyglot java import org.enso.base.enso_cloud.EnsoSecretHelper
polyglot java import org.enso.base.enso_cloud.HideableValue

## A reference to a secret stored in the Enso Cloud.
type Enso_Secret
    ## PRIVATE
    Value name:Text id:Text

    ## Create a new secret.

       Arguments:
       - name: The name of the secret
       - value: The value of the secret
       - parent: The parent folder for the secret. If `Nothing` then it will be
         created in the root folder.
    create : Text -> Text -> Enso_File | Nothing -> Enso_Secret
    create name:Text value:Text parent:(Enso_File | Nothing)=Nothing = if name == "" then Error.throw (Illegal_Argument.Error "Secret name cannot be empty") else
        if Context.Output.is_enabled.not then Error.throw (Forbidden_Operation.Error "Creating a secret is forbidden as the Output context is disabled.") else
            if name.starts_with "connection-" then Error.throw (Illegal_Argument.Error "Secret name cannot start with 'connection-'") else
                if Enso_Secret.exists name parent then Error.throw (Illegal_Argument.Error "Secret with this name already exists.") else
                    auth_header = Utils.authorization_header
                    parent_id_pair = if parent.is_nothing then [] else [["parentDirectoryId", parent.id]]
                    body = JS_Object.from_pairs [["name", name], ["value", value]]+parent_id_pair
                    response = HTTP.post Utils.secrets_api body HTTP_Method.Post [auth_header]
                    id = response.decode_as_json
                    Enso_Secret.Value name id

    ## GROUP Output
       Deletes a secret.
    delete : Enso_Secret
    delete self =
        if Context.Output.is_enabled.not then Error.throw (Forbidden_Operation.Error "Deleting a secret is forbidden as the Output context is disabled.") else
            auth_header = Utils.authorization_header
            uri = Utils.secrets_api + "/" + self.id
            response = HTTP.post uri Request_Body.Empty HTTP_Method.Delete [auth_header]
            response.if_not_error self

    ## GROUP Input
       Gets a list of all the secrets in the folder.

       Arguments:
       - folder: The folder to get the secrets from. If `Nothing` then will get
         the secrets from the root folder.
    list : Enso_File | Nothing -> Vector Enso_Secret
    list parent:(Enso_File | Nothing)=Nothing =
        secrets_as_files = list_assets (parent.if_nothing Enso_File.root) . filter f-> f.asset_type == Enso_Asset_Type.Secret
        secrets_as_files.map f->
            Enso_Secret.Value f.name f.id

    ## Get a Secret if it exists.

       Arguments:
       - name: The name of the secret
       - parent: The parent folder for the secret. If `Nothing` then will check
         in the root folder.
    get : Text -> Enso_File | Nothing -> Enso_Secret ! Not_Found
    get name:Text parent:(Enso_File | Nothing)=Nothing =
        Enso_Secret.list parent . find s-> s.name == name

    ## GROUP Metadata
       Checks if a Secret exists.

       Arguments:
       - name: The name of the secret
       - parent: The parent folder for the secret. If `Nothing` then will check
         in the root folder.
    exists : Text -> Enso_File | Nothing -> Boolean
    exists name:Text parent:(Enso_File | Nothing)=Nothing =
        Enso_Secret.list parent . any s-> s.name == name

    ## GROUP Output
       Updates the value of a secret.

       ! Secret Caching
         Note that secret values are cached, so the update may not be visible in
         other workflows unless they are restarted. You can also use the
         `Enso_User.flush_caches` function to flush the caches.

       Arguments:
       - new_value: The new value of the secret
    update_value : Text -> Enso_Secret
    update_value self (new_value : Text) =
        if Context.Output.is_enabled.not then Error.throw (Forbidden_Operation.Error "Updating a secret is forbidden as the Output context is disabled.") else
            auth_header = Utils.authorization_header
            ## TODO I'd rather not have this obfuscated path in Enso code
               (well it's clearly visible in Java code anyway, so no real harm),
               but it's needed due to Cloud API structure.
            uri = Utils.cloud_root_uri + "s3cr3tz" + "/" + self.id
            body = JS_Object.from_pairs [["value", new_value]]
            response = HTTP.post uri body HTTP_Method.Put [auth_header]
            response.if_not_error <|
                EnsoSecretHelper.deleteSecretFromCache self.id
                self

## PRIVATE
type Enso_Secret_Error
    ## PRIVATE
    Access_Denied

    ## PRIVATE
    to_display_text : Text
    to_display_text self = "Cannot read secret value into Enso."

## A derived value that may be derived from secrets.
type Derived_Secret_Value
    ## PRIVATE
    Plain_Text (text : Text)

    ## PRIVATE
    Secret_Value (secret : Enso_Secret)

    ## PRIVATE
    Concat (left : Derived_Secret_Value) (right : Derived_Secret_Value)

    ## PRIVATE
    Base_64_Encode (value : Derived_Secret_Value)

    ## PRIVATE
    + self (other : Derived_Secret_Value) = Derived_Secret_Value.Concat self other

    ## PRIVATE
       Converts to a plain text value, if the value contains no secrets.
       If the value contains secrets, it raises an error.
    to_plain_text : Text ! Enso_Secret_Error
    to_plain_text self =
        java_repr = as_hideable_value self
        if java_repr.containsSecrets then Error.throw Enso_Secret_Error.Access_Denied else
            java_repr.safeResolve

    ## PRIVATE
    to_text : Text
    to_text self = as_hideable_value self . render

    ## PRIVATE
       If this value does not contains any secrets, it will be simplified to a
       plain Text value, otherwise it will be returned as is.
    simplify : Derived_Secret_Value | Text
    simplify self = self.to_plain_text.catch Enso_Secret_Error _->self

## PRIVATE
Derived_Secret_Value.from (that : Text) = Derived_Secret_Value.Plain_Text that

## PRIVATE
Derived_Secret_Value.from (that : Enso_Secret) = Derived_Secret_Value.Secret_Value that

## PRIVATE
as_hideable_value : Text | Enso_Secret | Nothing -> HideableValue
as_hideable_value (value : Text | Enso_Secret | Derived_Secret_Value) = case value of
    text : Text -> HideableValue.PlainValue.new text
    secret : Enso_Secret -> HideableValue.SecretValue.new secret.id
    Derived_Secret_Value.Plain_Text text -> as_hideable_value text
    Derived_Secret_Value.Secret_Value secret -> as_hideable_value secret
    Derived_Secret_Value.Concat left right -> HideableValue.ConcatValues.new (as_hideable_value left) (as_hideable_value right)
    Derived_Secret_Value.Base_64_Encode inner -> HideableValue.Base64EncodeValue.new (as_hideable_value inner)
