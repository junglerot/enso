from Standard.Base.Data.Numbers import all
from Standard.Base.Error.Common import Error
from Standard.Base.Data.Boolean import True, False
import Standard.Base.Data.Filter_Condition.Filter_Condition
import Standard.Base.Data.Vector
import Standard.Base.Function.Function
import Standard.Base.Nothing
import Standard.Base.Runtime.Unsafe

# TODO Dubious constructor export
from project.Data.List.List import all
from project.Data.List.List export all

## The basic cons-list type.

   A cons-list allows storage of an arbitrary number of elements.

   Prepending to the list can be achieved by using the `Cons` constructor,
   while an empty list is represented by `Nil`.

   > Example
     A list containing the elements `1`, `2`, and `3`, in this order is:
         Cons 1 (Cons 2 (Cons 3 Nil))
## Cons lists.
type List

    ## The type that indicates the end of a cons list.
    Nil

    ## A cons cell for a cons list.

       Arguments:
       - x: The element at this position in the list.
       - xs: The rest of the list.
    Cons x xs

    ## Computes the number of elements in the list.

       > Example
         Get the length of a two item list.

             import Standard.Examples

             example_length = Examples.list.length
    length : Number
    length self = self.fold 0 (acc -> _ -> acc + 1)

    ## Combines all the elements of the list, by iteratively applying the
       passed function with next elements of the list.

       Arguments:
       - init: The initial value for the fold.
       - f: The binary function used to combine elements of the list.

       In general, the result of
           (Cons l0 <| Cons l1 <| ... <| Cons ln) . fold init f
       is the same as
           f (...(f (f init l0) l1)...) ln

       > Example
         In the following example, we'll compute the sum of all elements of a
         list.

             import Standard.Eamples

             example_fold = Examples.list.fold 0 (+)
    fold : Any -> (Any -> Any -> Any) -> Any
    fold self init f =
        go acc list = case list of
            Nil -> acc
            Cons h t -> @Tail_Call go (f acc h) t
        res = go init self
        res

    ## Checks whether any element of the list matches the given predicate.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       > Example
         Check if any element of the list is larger than 5.

             import Standard.Examples

             example_exists = Examples.list.exists (> 5)
    exists : (Any -> Boolean) -> Boolean
    exists self predicate =
        go list = case list of
            Nil -> False
            Cons h t -> if predicate h then True else
                @Tail_Call go t
        res = go self
        res

    ## Checks whether any element of the list matches the given predicate.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       A predicate is a function that takes a list element and returns
       a Boolean value.

       > Example
         Check if any element of the list is larger than 5.

             import Standard.Examples

             example_any = Examples.list.any (> 5)
    any : (Any -> Boolean) -> Boolean
    any self predicate = self.exists predicate

    ## Checks whether a predicate holds for all elements in this list.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       > Example
         Check if all elements in the list are greater than zero.

             import Standard.Examples

             example_all = Examples.list.all (> 0)
    all : (Any -> Boolean) -> Boolean
    all self predicate = self.fold True (l -> r -> l && predicate r)

    ## Checks whether this list contains a given value as an element.

       Arguments:
       - elem: The element to check if it is in the list.

       > Example
         Checking if the list contains the number 3.

             import Standard.Examples

             example_contains = Examples.list.contains 3
    contains : Any -> Boolean
    contains self elem = self.exists ix-> ix == elem

    ## Checks if this list is empty.

       > Example
         Checking for emptiness.

             import Standard.Examples

             example_empty = Examples.list.is_empty
    is_empty : Boolean
    is_empty self = self.length == 0

    ## Checks if the list is not empty.

       > Example
         Checking for emptiness.

             import Standard.Examples

             example_not_empty = Examples.list.not_empty
    not_empty : Boolean
    not_empty self = self.is_empty.not

    ## Selects all elements of this list which satisfy a condition.

       Arguments:
       - filter: The filter to apply to the list. It can either be an instance
         of `Filter_Condition` or a predicate taking a value and returning a
         boolean value indicating whether the corresponding element should be
         kept or not.

       > Example
         Selecting all elements that are less than 3.

             import Standard.Examples

             example_filter = Examples.list.filter (< 3)
             example_filter = Examples.list.filter (Filter_Condition.Less than=3)
    filter : (Filter_Condition | (Any -> Boolean)) -> Vector Any
    filter self filter = case filter of
        _ : Filter_Condition -> self.filter filter.to_predicate
        predicate : Function ->
            go_filter list = case list of
                Cons h t ->
                    rest = go_filter t
                    if predicate h then Cons h rest else rest
                Nil -> Nil
            go_filter self

    ## Applies a function to each element of the list, returning the list of
       results.

       Arguments:
       - f: The function to apply to each element of the list.

       > Example
         Add `1` to each element of the list:

             import Standard.Examples

             example_map = Examples.list.map +1
    map : (Any -> Any) -> List
    map self f = case self of
        Nil -> Nil
        Cons h t ->
            res = Cons (f h) Nil
            map_helper t res f
            res

    ## Applies a function to each element of the list.

       Arguments:
       - f: The function to apply to each element of the list.

       Unlike `map`, this method does not return the individual results,
       therefore it is only useful for side-effecting computations.

       > Example
         Print each of the list elements to the standard output.

             import Standard.Examples

             example_each = Examples.list.each IO.println
    each : (Any -> Any) -> Nothing
    each self f =
        go list = case list of
            Nil -> Nothing
            Cons h t ->
                f h
                @Tail_Call go t
        go self
        Nothing

    ## Reverses the list, returning a list with the same elements, but in the
       opposite order.

       > Example
         Reversing a small list.

             import Standard.Examples

             example_reverse = Examples.list.reverse
    reverse : List
    reverse self = self.fold Nil (l -> el -> Cons el l)

    ## Creates a new list with the first `count` elements at the start of `self`
       removed.

       Arguments:
       - count: The number of elements to take drop the start of `self`.

       > Example
         Removing the first element from a list.

             import Standard.Examples

             example_drop_start = Examples.list.drop_start 1
    drop_start : Integer -> List
    drop_start self count = if count <= 0 then self else case self of
        Cons _ b -> b.drop_start count-1
        Nil -> Nil

    ## Creates a new list consisting of the first `count` elements at the start
       of `self`.

       Arguments:
       - count: The number of elements to take from the start of `self`.

       > Example
         Obtaining the first 2 elements of a list.

             import Standard.Examples

             example_take_start = Examples.list.take_start 2
    take_start : Integer -> List
    take_start self count = if count <= 0 then Nil else case self of
        Cons a b -> Cons a (b.take_start count-1)
        Nil -> Nil

    ## Get the first element from the list.

       > Example
         This returns 1.

             import Standard.Examples

             example_head = Examples.list.x
    head : Any ! Empty_Error
    head self = case self of
        Cons a _ -> a
        Nil -> Error.throw Empty_Error

    ## Get all elements from the list except the first.

       > Example
         This returns (Cons 2 Nil).

             import Standard.Examples

             example_tail = Examples.list.tail
    tail : List ! Empty_Error
    tail self = case self of
        Cons _ b -> b
        Nil -> Error.throw Empty_Error

    ## Get all elements from the list except the last.

       > Example
         Removing the last element of the list to give (Cons 1 Nil).

             import Standard.Examples

             example_init = Examples.list.init
    init : List ! Empty_Error
    init self =
        init' x y = case y of
            Nil -> Nil
            Cons a b -> Cons x (init' a b)
        case self of
            Cons a b -> init' a b
            Nil -> Error.throw Empty_Error

    ## Get the last element of the list.

       > Example
         Getting the final element of the list.

             import Standard.Examples

             example_last = Examples.list.last
    last : Any ! Empty_Error
    last self = case self.fold Nothing (_ -> r -> r) of
        Nothing -> Error.throw Empty_Error
        a -> a

    ## Get the first element from the list.

       > Example
         Getting the first element in the list.

             import Standard.Examples

             example_first = Examples.list.first
    first : Any ! Empty_Error
    first self = self.head

    ## Get all elements from the list except the first.

       > Example
         Getting all elements in the list except the first.

             import Standard.Examples

             example_rest = Examples.list.rest
    rest : List ! Empty_Error
    rest self = self.tail

    ## UNSTABLE
       Convert this list to a vector with the same elements.
    to_vector : Vector
    to_vector self =
        builder = self.fold (Vector.new_builder self.length) builder-> elem->
            builder.append elem
        builder.to_vector

## UNSTABLE

   An error representing that the list is empty.
type Empty_Error
    ## PRIVATE

       Pretty prints the empty error.
    to_display_text : Text
    to_display_text self = "The List is empty."

## PRIVATE
   A helper for the `map` function.

   Arguments:
   - list: The list to map over.
   - cons: The current field to set.
   - f: The function to apply to the value.

   Uses unsafe field mutation under the hood, to rewrite `map` in
   a tail-recursive manner. The mutation is purely internal and does not leak
   to the user-facing API.
map_helper : List -> Any -> (Any -> Any) -> Nothing
map_helper list cons f = case list of
    Cons h t ->
        res = Cons (f h) Nil
        Unsafe.set_atom_field cons 1 res
        @Tail_Call map_helper t res f
    Nil -> Unsafe.set_atom_field cons 1 Nil
