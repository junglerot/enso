import project.Data.Numbers.Integer
import project.Data.Range.Range
import project.Error.Error
import project.Errors.Illegal_Argument.Illegal_Argument
from project.Data.Boolean import Boolean, False, True

## ALIAS range
   GROUP Input

   Creates an increasing range of integers from `self` to `n`.

   Arguments:
   - n: The end of the range.
   - include_end: Specifies if the right end of the range should be included.
     By default, the range is right-exclusive.
   - step: The step between each element in the range. By default, the step is
     1.

   > Example
     Create a range containing the numbers 0, 1, 2, 3, 4.

         0.up_to 5

   > Example
     Create a range containing elements 1, 2, 3.

         1.up_to 3 include_end=True
Integer.up_to : Integer -> Boolean -> Integer -> Range
Integer.up_to self n:Integer include_end:Boolean=False step:Integer=1 =
    effective_end = if include_end then n+1 else n
    unit_range = Range.Between self effective_end 1
    if step == 1 then unit_range else unit_range.with_step step

## ALIAS range
   GROUP Input

   Creates a decreasing right-exclusive range of integers from `self` to `n`.

   Arguments:
   - n: The end of the range.
   - include_end: Specifies if the right end of the range should be included.
     By default, the range is right-exclusive.
   - step: The step between each element in the range. By default, the step is
     1. Step should be a positive integer and will be subtracted between each.

   > Example
     Create a range containing the numbers 5, 4, 3, 2, 1.

         5.down_to 0

   > Example
     Create a range containing elements 3, 2, 1.

         3.down_to 1 include_end=True
Integer.down_to : Integer -> Boolean -> Integer -> Range
Integer.down_to self n:Integer include_end:Boolean=False step:Integer=1 =
    effective_end = if include_end then n-1 else n
    unit_range = Range.Between self effective_end -1
    if step == 1 then unit_range else unit_range.with_step step
