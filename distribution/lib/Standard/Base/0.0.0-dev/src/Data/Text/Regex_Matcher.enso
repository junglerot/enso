import project.Any.Any
import project.Data.Text.Case_Sensitivity.Case_Sensitivity
import project.Data.Text.Matching
import project.Data.Text.Regex
import project.Data.Text.Regex.Pattern.Pattern
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Problem_Behavior.Problem_Behavior

from project.Data.Boolean import Boolean, True, False

## Represents regex matching mode.
type Regex_Matcher
    ## Regex matching mode.

       Arguments:
       - case_sensitivity: Specifies whether the matching should be case
         sensitive.
       - multiline: Enables or disables the multiline option. Multiline
         specifies that the `^` and `$` pattern characters match the start and
         end of lines, as to well as the start and end of the input,
         respectively.
       - match_ascii: Enables or disables pure-ASCII matching for the regex. If
         you know your data only contains ASCII, you can enable this for a
         performance boost on some regex engines.
       - dot_matches_newline: Enables or disables the dot matches newline
         option. This specifies that the `.` special character should match
         everything _including_ newline characters. Without this flag, it
         matches all characters _except_ newlines.
       - comments: Enables or disables the comments mode for the regular
         expression. In comments mode, the following changes apply:
         - Whitespace within the pattern is ignored, except when within a
           character class or when preceded by an unescaped backslash, or within
           grouping constructs (e.g. `(?...)`).
         - When a line contains a `#` that is not in a character class and is
           not preceded by an unescaped backslash, all characters from the
           leftmost such `#` to the end of the line are ignored. That is to say;
           they act as 'comments' in the regex.
    Regex_Matcher_Data (case_sensitivity : Case_Sensitivity = Case_Sensitivity.Sensitive) (multiline : Boolean = False) (match_ascii : Boolean = False) (dot_matches_newline : Boolean = False) (comments : Boolean = False)

    ## UNSTABLE
       Compiles a provided pattern according to the rules defined in this
       `Regex_Matcher`.
    compile : Text -> Pattern
    compile self pattern =
        case_insensitive = case self.case_sensitivity of
            Case_Sensitivity.Sensitive -> False
            ## TODO [RW] Currently locale is not supported in case-insensitive
               Regex matching. There are plans to revisit it:
               https://www.pivotaltracker.com/story/show/181313576
            Case_Sensitivity.Insensitive _ -> True
        Regex.compile pattern case_insensitive=case_insensitive match_ascii=self.match_ascii dot_matches_newline=self.dot_matches_newline multiline=self.multiline comments=self.comments

    ## UNSTABLE
       Checks if a name matches the provided criterion according to the specified
       matching strategy.

       Arguments:
       - name: A `Text` representing the name being matched.
       - criterion: A `Text` representing the regular expression specifying the
         matching criterion.

       > Example
         Check if the provided name matches a regular expression.

             (Regex_Matcher.Regex_Matcher_Data case_sensitivity=Case_Sensitivity.Insensitive) . match_single_criterion "Foobar" "f.*" == True
    match_single_criterion : Text -> Text -> Boolean
    match_single_criterion self name criterion =
        self.compile criterion . matches name

    ## UNSTABLE
       Selects objects from an input list that match any of the provided criteria.

       Arguments:
       - objects: A list of objects to be matched.
       - criteria: A list of texts representing the matching criteria. Their meaning
         depends on the matching strategy.
       - reorder: Specifies whether to reorder the matched objects according to the
         order of the matching criteria.
         If `False`, the matched entries are returned in the same order as in the
         input.
         If `True`, the matched entries are returned in the order of the criteria
         matching them. If a single object has been matched by multiple criteria, it
         is placed in the group belonging to the first matching criterion on the
         list.
         If a single criterion's group has more than one element, their relative
         order is the same as in the input.
       - name_mapper: A function mapping a provided object to its name, which will
         then be matched with the criteria. It is set to the identity function by
         default, thus allowing the input to be a list of names to match. But it can
         be overridden to enable matching more complex objects.
       - matcher: A `Matcher` instance specifying how to interpret the criterion.
       - on_problems: Specifies the behavior when a problem occurs during the
         function.
         By default, a warning is issued, but the operation proceeds.
         If set to `Report_Error`, the operation fails with a dataflow error.
         If set to `Ignore`, the operation proceeds without errors or warnings.

       > Example
         Selects objects matching one of the provided patterns, preserving the input order.

             Regex_Matcher.Regex_Matcher_Data case_sensitivity=Case_Sensitivity.Sensitive . match_criteria ["foo", "foobar", "quux", "baz", "Foo"] [".*ba.*", "f.*"] == ["foo", "foobar", "baz"]

       > Example
         Selects pairs matching their first element with the provided criteria and
         ordering the result according to the order of criteria that matched them.

             Text_Matcher.match_criteria [Pair.new "foo" 42, Pair.new "bar" 33, Pair.new "baz" 10, Pair.new "foo" 0, Pair.new 10 10] ["bar", "foo"] reorder=True name_mapper=_.name == [Pair.new "bar" 33, Pair.new "foo" 42, Pair.new "foo" 0]
    match_criteria : Vector Any -> Vector Text -> Boolean -> (Any -> Text) -> Problem_Behavior -> Vector Any ! Matching.No_Matches_Found
    match_criteria self = Matching.match_criteria_implementation self
