## An `Engine` is a configuration and behaviour specification object for a
   particular regular expression engine.

   An implementation of a regular expression engine must implement the below
   interface, as well as conform to the following requirements:

   - The engine must operate in a unicode mode by default, using canonical
     form for equality and the unicode versions of the standard character
     classes.
   - It must support the standard options specified in
     `Standard.Base.Data.Text.Regex.Regex_Option`. It may specify additional,
     engine-specific options, but this is not required by the specification.
   - In the defining module, the engine implementation must provide a full
     specification of its syntax in the module documentation block.

   This file is _not executable_. It instead describes the interface for the
   customisable `Engine` and `Pattern` types.

import project.Data.Text.Text
import project.Data.Text.Regex.Regex_Option.Regex_Option
import project.Data.Text.Regex.Invalid_Option
import project.Data.Vector.Vector

from project.Error.Common import Compile_Error, Unimplemented

## The `Data.Text.Regex.Engine.Engine` interface.
type Engine

    ## PRIVATE

       Compile the provided `expression` into a regex pattern that can be used
       for matching.

       Arguments
       - expression: The text representing the regular expression that you want
         to compile.
       - options: The options to configure the matching process with. These are
         merged with the specific `engine_opts`.
    compile : Text -> Vector Regex_Option -> Pattern ! (Compile_Error | Invalid_Option)
    compile self _ _ = Unimplemented.throw "This is an interface only."

    ## PRIVATE

       Escape the special characters in `expression` such that the result is a
       valid literal pattern for the original string.

       Arguments:
       - expression: The expression to escape metacharacters in.
    escape : Text -> Text
    escape self _ = Unimplemented.throw "This is an interface only."
