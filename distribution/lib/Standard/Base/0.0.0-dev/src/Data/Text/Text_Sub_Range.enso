import project.Data.Index_Sub_Range as Index_Sub_Range_Module
import project.Data.Index_Sub_Range.Index_Sub_Range
import project.Data.Numbers.Integer
import project.Data.Pair.Pair
import project.Data.Range.Range
import project.Data.Text.Span as Span_Module
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Common.Index_Out_Of_Bounds
import project.Errors.Common.Type_Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Metadata.Display
import project.Metadata.Widget
import project.Nothing.Nothing
import project.Panic.Panic
import project.Random.Random
from project.Data.Boolean import Boolean, False, True
from project.Data.Index_Sub_Range import handle_unmatched_type
from project.Data.Range.Extensions import all
from project.Metadata.Choice import Option
from project.Metadata.Widget import Single_Choice

polyglot java import com.ibm.icu.text.BreakIterator
polyglot java import org.enso.base.Text_Utils

## Type defining a substring of a Text
type Text_Sub_Range
    ## Select characters until the first instance of `delimiter`.
       Select an empty string if `delimiter` is empty.
       Select the entire string if the input does not contain `delimiter`.
    Before (delimiter : Text)

    ## Select characters until the last instance of `delimiter`.
       Select an empty string if `delimiter` is empty.
       Select the entire string if the input does not contain `delimiter`.
    Before_Last (delimiter : Text)

    ## Select characters after the first instance of `delimiter`.
       Select an empty string if the input does not contain `delimiter`.
    After (delimiter : Text)

    ## Select characters after the last instance of `delimiter`.
       Select an empty string if the input does not contain `delimiter`.
    After_Last (delimiter : Text)

    ## PRIVATE
       Convert to a display representation of this `Text_Sub_Range`.
    to_display_text : Text
    to_display_text self = case self of
        Text_Sub_Range.Before delimiter -> "Before " + delimiter.pretty
        Text_Sub_Range.Before_Last delimiter -> "Before Last " + delimiter.pretty
        Text_Sub_Range.After delimiter -> "After " + delimiter.pretty
        Text_Sub_Range.After_Last delimiter -> "After Last " + delimiter.pretty

    ## PRIVATE
    default_options : Vector Option
    default_options =
        o1 = Option "Before" "(Text_Sub_Range.Before ' ')"
        o2 = Option "Before_Last" "(Text_Sub_Range.Before_Last ' ')"
        o3 = Option "After" "(Text_Sub_Range.After ' ')"
        o4 = Option "After_Last" "(Text_Sub_Range.After_Last ' ')"
        [o1, o2, o3, o4]

    ## PRIVATE
       The widget for `Text_Sub_Range` also displays options for
       `Index_Sub_Range` since the former is supposed to 'expand' the latter and
       is always used together with it.
    default_widget : Widget
    default_widget =
        options = Index_Sub_Range.default_options + Text_Sub_Range.default_options
        Single_Choice display=Display.Always options

type Codepoint_Ranges
    ## PRIVATE
       A list of codepoint ranges corresponding to the matched parts of the
       input.

       Arguments:
       - ranges: the list of ranges. Each `Range` has `step` equal to 1.
       - is_sorted_and_distinct: A helper value specifying if the ranges are
         already sorted and non-intersecting.
    Value (ranges : Vector Range) (is_sorted_and_distinct : Boolean)

    ## PRIVATE
       Returns a new sorted list of ranges where intersecting ranges have been
       merged.

       Empty ranges are not discarded.
    sorted_and_distinct_ranges : Vector Range
    sorted_and_distinct_ranges self = if self.is_sorted_and_distinct then self.ranges else
        Index_Sub_Range_Module.sort_and_merge_ranges self.ranges

    ## PRIVATE
       Finds code-point indices corresponding to the part of the input matching the
       range specified by one of the types: `Text_Sub_Range`, `Index_Sub_Range`,
       `Range`.

       This method may return either a single range instance or a vector of ranges.

       While the input ranges may have varying steps, they are processed and split
       in such a way that the ranges returned by this method always have a step
       equal to 1.
    resolve : Text -> (Text_Sub_Range | Index_Sub_Range | Range | Integer) -> (Range | Codepoint_Ranges)
    resolve text range =
        case range of
            Text_Sub_Range.Before delimiter ->
                if delimiter.is_empty then (0.up_to 0) else
                    span = Text_Utils.span_of text delimiter
                    if span.is_nothing then (0.up_to (Text_Utils.char_length text)) else
                        (0.up_to span.codeunit_start)
            Text_Sub_Range.Before_Last delimiter ->
                if delimiter.is_empty then (0.up_to (Text_Utils.char_length text)) else
                    span = Text_Utils.last_span_of text delimiter
                    if span.is_nothing then (0.up_to (Text_Utils.char_length text)) else
                        (0.up_to span.codeunit_start)
            Text_Sub_Range.After delimiter ->
                if delimiter.is_empty then (0.up_to (Text_Utils.char_length text)) else
                    span = Text_Utils.span_of text delimiter
                    if span.is_nothing then (0.up_to 0) else
                        (span.codeunit_end.up_to (Text_Utils.char_length text))
            Text_Sub_Range.After_Last delimiter ->
                if delimiter.is_empty then (0.up_to 0) else
                    span = Text_Utils.last_span_of text delimiter
                    if span.is_nothing then (0.up_to 0) else
                        (span.codeunit_end.up_to (Text_Utils.char_length text))
            Index_Sub_Range.First count ->
                if count <= 0 then (0.up_to 0) else
                    iterator = BreakIterator.getCharacterInstance
                    iterator.setText text
                    start_index = iterator.next count
                    0.up_to (if start_index == -1 then (Text_Utils.char_length text) else start_index)
            Index_Sub_Range.Last count ->
                if count <= 0 then (0.up_to 0) else
                    iterator = BreakIterator.getCharacterInstance
                    iterator.setText text
                    iterator.last
                    start_index = iterator.next -count
                    (if start_index == -1 then 0 else start_index).up_to (Text_Utils.char_length text)
            Index_Sub_Range.While predicate ->
                indices = find_sub_range_end text _-> start-> end->
                    predicate (Text_Utils.substring text start end) . not
                if indices.first.is_nothing then (0.up_to indices.second) else
                    0.up_to indices.first
            Index_Sub_Range.By_Index indices ->
                case indices of
                    _ : Vector ->
                        if indices.length == 1 then resolve_index_or_range text indices.first else
                            batch_resolve_indices_or_ranges text indices
                    _ -> resolve_index_or_range text indices
            Index_Sub_Range.Sample count seed ->
                rng = Random.new_generator seed
                indices = rng.indices text.length count
                Codepoint_Ranges.resolve text (Index_Sub_Range.By_Index indices)
            Index_Sub_Range.Every step start ->
                if step <= 0 then Error.throw (Illegal_Argument.Error "Step within Every must be positive.") else
                    len = text.length
                    if start >= len then 0.up_to 0 else
                        simple_range = start.up_to text.length . with_step step
                        Codepoint_Ranges.resolve text (Index_Sub_Range.By_Index simple_range)
            _ : Range ->
                Codepoint_Ranges.resolve text (Index_Sub_Range.By_Index range)
            _ : Integer ->
                Codepoint_Ranges.resolve text (Index_Sub_Range.First range)
            _ -> handle_unmatched_type [Text_Sub_Range, Index_Sub_Range, Range, Integer] range


## PRIVATE
   Utility function to find char indices for Text_Sub_Range.
   Arguments:
   - text: Text to search
   - predicate: Function to test each character, receives:
     - index: current index
     - start: index the char array to start of grapheme cluster
     - end: index the char array to start of next grapheme cluster
     If the predicate returns True for a given character, the loop will exit.
   Returns: either a Pair of char indices for current grapheme cluster or
     Pair Nothing (char array length) if not found.
find_sub_range_end text predicate =
    iterator = BreakIterator.getCharacterInstance
    iterator.setText text

    loop index start end =
        if end == -1 then (Pair.new Nothing start) else
            if predicate index start end then (Pair.new start end) else
                @Tail_Call loop (index + 1) end iterator.next

    loop 0 0 iterator.next

## PRIVATE
resolve_index_or_range text descriptor = Panic.recover [Index_Out_Of_Bounds, Illegal_Argument] <|
    iterator = BreakIterator.getCharacterInstance
    iterator.setText text
    case descriptor of
        _ : Integer ->
            if descriptor < 0 then
                iterator.last
            start = iterator.next descriptor
            end = iterator.next
            if (start == -1) || (end == -1) then Error.throw (Index_Out_Of_Bounds.Error descriptor text.length) else
                start.up_to end
        _ : Range ->
            len = text.length
            true_range = normalize_range descriptor len
            if descriptor.is_empty then 0.up_to 0 else
                case true_range.step == 1 of
                    True -> Span_Module.range_to_char_indices text true_range
                    False ->
                        ranges = Vector.new_builder
                        if true_range.step <= 0 then panic_on_non_positive_step
                        go start_index current_grapheme =
                            end_index = iterator.next
                            if (start_index == -1) || (end_index == -1) || (current_grapheme >= true_range.end) then Nothing else
                                ranges.append (start_index.up_to end_index)
                                ## We advance by step-1, because we already advanced by
                                   one grapheme when looking for the end of the previous
                                   one.
                                @Tail_Call go (iterator.next true_range.step-1) current_grapheme+true_range.step

                        go (iterator.next true_range.start) true_range.start
                        Codepoint_Ranges.Value ranges.to_vector is_sorted_and_distinct=True

## PRIVATE
   Returns an array of UTF-16 code-unit indices corresponding to the beginning
   and end of each consecutive grapheme cluster.

   These indices are consistent with the vector returned by `Text.char_vector`.
character_ranges text =
    iterator = BreakIterator.getCharacterInstance
    iterator.setText text
    ranges = Vector.new_builder
    go prev nxt = if nxt == -1 then Nothing else
        ranges.append (prev.up_to nxt)
        @Tail_Call go nxt iterator.next
    go iterator.first iterator.next
    ranges.to_vector

## PRIVATE
batch_resolve_indices_or_ranges text descriptors = Panic.recover [Index_Out_Of_Bounds, Illegal_Argument] <|
    ## This is pre-computing the ranges for all characters in the string, which
       may be much more than necessary, for example if all ranges reference only
       the beginning of the string. In the future we may want to replace this
       with a lazy data structure which advances the break iterator only on
       demand, using a Vector.Builder to cache any prior ranges for random
       access.
    characters = character_ranges text
    ranges = Vector.new_builder
    descriptors.each descriptor->
        case descriptor of
            _ : Integer ->
                ranges.append (Panic.rethrow <| characters.at descriptor)
            _ : Range ->
                if descriptor.is_empty then 0.up_to 0 else
                    true_range = normalize_range descriptor characters.length
                    case true_range.step == 1 of
                        True ->
                            first_grapheme = Panic.rethrow <| characters.at true_range.start
                            last_grapheme = Panic.rethrow <| characters.at true_range.end-1
                            ranges.append (first_grapheme.start.up_to last_grapheme.end)
                        False ->
                            if true_range.start >= characters.length then
                                Panic.throw (Index_Out_Of_Bounds.Error true_range.start characters.length)
                            true_range.to_vector.each ix->
                                ranges.append (Panic.rethrow <| characters.at ix)
    Codepoint_Ranges.Value ranges.to_vector is_sorted_and_distinct=False

## PRIVATE
panic_on_non_positive_step =
    Panic.throw (Illegal_Argument.Error "Range step must be positive.")

## PRIVATE
   Ensures that the range is valid and trims it to the length of the collection.
normalize_range range length =
    if range.step <= 0 then panic_on_non_positive_step
    # We may add support for negative indices in the future.
    if (range.start < 0) || (range.end < 0) then
        Panic.throw (Illegal_Argument.Error "Ranges with negative indices are not supported for indexing.")
    if (range.start >= length) then
        Panic.throw (Index_Out_Of_Bounds.Error range.start length)
    if range.end >= length then range.start.up_to length . with_step range.step else
        range
