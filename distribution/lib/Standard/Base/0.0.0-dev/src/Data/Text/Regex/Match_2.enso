from project.Data.Boolean import Boolean, True, False
import project.Data.Numbers.Integer
import project.Data.Range.Range
import project.Data.Text.Span.Span
import project.Data.Text.Span.Utf_16_Span
import project.Data.Text.Text
import project.Nothing.Nothing

type Match_2
    ## internal_regex_result : RegexResult (Truffle)
       (See https://github.com/oracle/graal/blob/master/regex/docs/README.md)
    Value (pattern : Pattern_2) (internal_regex_result : Any) (input : Text)

    ## PRIVATE
       Returns the start character of group n.

       Arguments:
       - n: the integer group number. Note that the groups explicitly
         defined in the regex are numbered starting at 1; group 0 refers to the
         entire match range.
    start : Integer -> Integer
    start self n = self.internal_regex_result.getStart n

    ## PRIVATE
       Returns the start character of group n

       Arguments:
       - n: the integer group number
    end : Integer -> Integer
    end self n = self.internal_regex_result.getEnd n

    ## PRIVATE

       Gets the text matched by the group with the provided identifier, or
       `Nothing` if the group did not participate in the match. If no such group
       exists for the provided identifier, a `No_Such_Group` is returned.

       Arguments:
       - id: The integer index or name of that group.

       ? The Full Match
         The group with index 0 is always the full match of the pattern.

       ? Named Groups by Index
         If the regex contained named groups, these may also be accessed by
         index based on their position in the pattern.

       Note that it is possible for a group to "not participate in the match",
       for example with a disjunction. In the example below, the "(d)" group
       does not participate -- it neither matches nor fails.

            "ab((c)|(d))".find "abc"

       In this case, the group id for "(d)", which is 3, is a valid group id and
       (Pattern_2.lookup_group 3) will return 3. If the caller tries to get group 3,
       Match_2.group will return Nothing.
    group : Integer | Text -> Span
    group self id =
        n = self.pattern.lookup_group id
        start = self.start n
        end = self.end n
        does_not_participate = start == -1 || end == -1
        case does_not_participate of
            True -> Nothing
            False ->
                range = Range.new (self.start n) (self.end n)
                (Utf_16_Span.Value range self.input).to_grapheme_span
