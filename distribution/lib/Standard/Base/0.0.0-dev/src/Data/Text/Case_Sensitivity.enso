import project.Data.Locale.Locale
import project.Data.Text.Regex
import project.Data.Text.Text

from project.Data.Boolean import Boolean, True, False

polyglot java import org.enso.base.text.TextFoldingStrategy

type Case_Sensitivity
    ## Use the default case-sensitivity for the environment.
       For in-memory operations, it will be case sensitive.
       For database operations, it will follow the collation default.
    Default

    ## Represents a case-sensitive comparison mode.
    Sensitive

    ## Represents a case-insensitive comparison mode.

       Arguments:
       - locale: The locale used for the comparison.
    Insensitive locale=Locale.default

    ## PRIVATE
       Creates a Java `TextFoldingStrategy` from the case sensitivity setting.
    folding_strategy : Case_Sensitivity -> TextFoldingStrategy
    folding_strategy case_sensitivity = case case_sensitivity of
        Case_Sensitivity.Default -> TextFoldingStrategy.unicodeNormalizedFold
        Case_Sensitivity.Sensitive -> TextFoldingStrategy.unicodeNormalizedFold
        Case_Sensitivity.Insensitive locale ->
            TextFoldingStrategy.caseInsensitiveFold locale.java_locale

    ## PRIVATE
       Is case insensitive when in memory.
    is_case_insensitive_in_memory : Boolean
    is_case_insensitive_in_memory self = case self of
        Case_Sensitivity.Default -> False
        Case_Sensitivity.Sensitive -> False
        Case_Sensitivity.Insensitive _ -> True

    ## PRIVATE
       Create matcher function
    create_match_function : Boolean -> (Text -> Text -> Boolean)
    create_match_function self use_regex=False = case use_regex of
        True -> (name-> pattern-> Regex.compile pattern case_insensitive=self.is_case_insensitive_in_memory . matches name)
        False -> case self of
            Case_Sensitivity.Default -> (==)
            Case_Sensitivity.Sensitive -> (==)
            Case_Sensitivity.Insensitive locale -> (name-> criterion-> name.equals_ignore_case criterion locale)
