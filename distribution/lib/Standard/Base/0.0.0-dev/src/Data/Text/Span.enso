## A `Span` represents a range of characters in a piece of `Text`.

   > Example
     Creating a span over the first three characters of the text "hello!".

         import Standard.Base.Data.Text.Span

         example_span =
             text = "Hello!"
             Span.Value (Range.new 0 3) text

import project.Data.Numbers.Integer
import project.Data.Pair.Pair
from project.Data.Range.Extensions import all
import project.Data.Range.Range
import project.Data.Text.Text
import project.Errors.Common.Index_Out_Of_Bounds
import project.Error.Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Errors.Illegal_State.Illegal_State
import project.Nothing.Nothing

from project.Data.Boolean import Boolean, True, False

polyglot java import org.enso.base.Text_Utils
polyglot java import com.ibm.icu.text.BreakIterator

type Span

    ## A representation of a span of characters in Enso's `Text` type.

       Arguments:
       - range: The range of characters over which the span exists. The range is
         assumed to have `step` equal to 1.
       - parent: The text over which the span exists.

       ! What is a Character?
         A character is defined as an Extended Grapheme Cluster, see Unicode
         Standard Annex 29. This is the smallest unit that still has semantic
         meaning in most text-processing applications.

       > Example
         Creating a span over the first three characters of the text "hello!".

             import Standard.Base.Data.Text.Span

             example_span =
                 text = "Hello!"
                 range = 0.up_to 3
                 Span.Value range text
    Value (range : Range) (parent : Text)

    ## The index of the first character included in the span.

       ! What is a Character?
         A character is defined as an Extended Grapheme Cluster, see Unicode
         Standard Annex 29. This is the smallest unit that still has semantic
         meaning in most text-processing applications.
    start : Integer
    start self = self.range.start

    ## The index of the first character after `start` that is _not_ included in
       the span.

       ! What is a Character?
         A character is defined as an Extended Grapheme Cluster, see Unicode
         Standard Annex 29. This is the smallest unit that still has semantic
         meaning in most text-processing applications.
    end : Integer
    end self = self.range.end

    ## The length of the span in extended grapheme clusters.

       ! What is a Character?
         A character is defined as an Extended Grapheme Cluster, see Unicode
         Standard Annex 29. This is the smallest unit that still has semantic
         meaning in most text-processing applications.
    length : Integer
    length self = self.range.length

    ## Returns the part of the text that this span covers.
    text : Text
    text self = self.to_utf_16_span.text

    ## ADVANCED
       Converts the span of extended grapheme clusters to a corresponding span
       of UTF-16 code units.

       > Example
         Find the span of code units corresponding to the span of extended grapheme clusters.

         text = 'ae\u{301}fz'
         (Span.Value (Range 1 3) text).to_utf_16_span == (Utf_16_Span.Value (Range 1 4) text)
    to_utf_16_span : Utf_16_Span
    to_utf_16_span self =
        Utf_16_Span.Value (range_to_char_indices self.parent self.range) self.parent

    ## PRIVATE
       Convert to a display representation of this Span.
    to_display_text : Text
    to_display_text self = self.text


type Utf_16_Span
    ## A representation of a span of UTF-16 code units in Enso's `Text` type.

       Arguments:
       - range: The range of code units over which the span exists. The range is
         assumed to have `step` equal to 1.
       - parent: The text over which the span exists.

       > Example
         Creating a span over the first three code units of the text 'a\u{301}bc'.

             import Standard.Base.Data.Text.Span

             example_span =
                 text = 'a\u{301}bc'
                 Span.Utf_16_Span.Value (Range 0 3) text
    Value (range : Range) (parent : Text)

    ## The index of the first code unit included in the span.
    start : Integer
    start self = self.range.start

    ## The index of the first code unit after `start` that is _not_ included in
       the span.
    end : Integer
    end self = self.range.end

    ## The length of the span in UTF-16 code units.
    length : Integer
    length self = self.range.length

    ## Returns the part of the text that this span covers.
    text : Text
    text self = Text_Utils.substring self.parent self.start self.end

    ## Returns a span of extended grapheme clusters which is the closest
       approximation of this span of code units.

       The resulting span is extended in such a way that every code unit that
       was contained by the original span is also contained in a new span. Since
       some grapheme clusters consist of multiple code units, after the span was
       extended it may also contain code units which were not contained inside
       of the original span.

       > Example
         Convert a codepoint span to graphemes and back.

         text = 'a\u{301}e\u{302}o\u{303}'
         span = Utf_16_Span.Value (Range 1 5) text # The span contains the units [\u{301}, e, \u{302}, o].
         extended = span.to_grapheme_span
         extended == Span.Value (Range 0 3) text # The span is extended to the whole string since it contained code units from every grapheme cluster.
         extended.to_utf_16_span == Utf_16_Span.Value (Range 0 6) text
    to_grapheme_span : Span
    to_grapheme_span self = if (self.start < 0) || (self.end > Text_Utils.char_length self.parent) then Error.throw (Illegal_State.Error "Utf_16_Span indices are out of range of the associated text.") else
        if self.end < self.start then Error.throw (Illegal_State.Error "Utf_16_Span invariant violation: start <= end") else
            case self.start == self.end of
                True ->
                    grapheme_ix = Text_Utils.utf16_index_to_grapheme_index self.parent self.start
                    Span.Value (grapheme_ix.up_to grapheme_ix) self.parent
                False ->
                    grapheme_ixes = Text_Utils.utf16_indices_to_grapheme_indices self.parent [self.start, self.end - 1].to_array
                    grapheme_first = grapheme_ixes.at 0
                    grapheme_last = grapheme_ixes.at 1
                    ## We find the grapheme index of the last code unit actually contained within our span and set the
                       end grapheme to the first grapheme after that. This ensures that if code units associated with
                       only a part of a grapheme were contained in our original span, the resulting span will be
                       extended to contain this whole grapheme.
                    grapheme_end = grapheme_last + 1
                    Span.Value (grapheme_first.up_to grapheme_end) self.parent

    ## PRIVATE
       Convert to a display representation of this Span.
    to_display_text : Text
    to_display_text self = self.text

## PRIVATE
   Utility function taking a range pointing at grapheme clusters and converting
   to a range on the underlying code units.
range_to_char_indices : Text -> Range -> Range ! (Index_Out_Of_Bounds | Illegal_Argument)
range_to_char_indices text range = if range.step != 1 then Error.throw (Illegal_Argument.Error "Text indexing only supports ranges with step equal to 1.") else
    len = text.length
    start = if range.start < 0 then range.start + len else range.start
    end = if range.end == Nothing then len else (if range.end < 0 then range.end + len else range.end)
    is_valid = (0.up_to len+1).contains

    case Pair.new (is_valid start) (is_valid end) of
        Pair.Value False _ -> Error.throw (Index_Out_Of_Bounds.Error range.start len)
        Pair.Value True False -> Error.throw (Index_Out_Of_Bounds.Error range.end len)
        Pair.Value True True ->
            if start>=end then (0.up_to 0) else
                iterator = BreakIterator.getCharacterInstance
                iterator.setText text

                start_index = iterator.next start
                end_index = iterator.next (end - start)
                start_index.up_to end_index
