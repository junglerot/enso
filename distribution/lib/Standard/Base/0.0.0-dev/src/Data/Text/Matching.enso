import project.Data.Numbers.Integer
import project.Data.Pair.Pair
import project.Data.Range.Extensions
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Errors.Problem_Behavior.Problem_Behavior
import project.Panic.Panic
import project.Panic.Wrapped_Dataflow_Error

from project.Data.Boolean import Boolean, True, False

## UNSTABLE
   An error indicating that some criteria did not match any names in the input.
type No_Matches_Found
    Error (criteria : Vector Text)

    to_display_text : Text
    to_display_text self =
        "The criteria "+self.criteria.to_text+" did not match any names in the input."

## PRIVATE
match_criteria_implementation matcher objects criteria reorder=False name_mapper=(x->x) on_problems=Problem_Behavior.Report_Warning =
    result = internal_match_criteria_implementation matcher objects criteria reorder name_mapper
    unmatched_criteria = result.second
    problems = if unmatched_criteria.is_empty then [] else
        [No_Matches_Found.Error unmatched_criteria]
    on_problems.attach_problems_after result.first problems

## PRIVATE
match_criteria_callback matcher objects criteria problem_callback reorder=False name_mapper=(x->x) =
    result = internal_match_criteria_implementation matcher objects criteria reorder name_mapper
    unmatched_criteria = result.second
    problem_callback unmatched_criteria
    result.first

type Match_Matrix
    ## PRIVATE
       A helper type holding a matrix of matches.
    Value matrix criteria objects

    # Checks if the ith object is matched by any criterion.
    is_object_matched_by_anything : Integer -> Boolean
    is_object_matched_by_anything self i =
        self.matrix.at i . any x->x

    # Checks if the ith criterion matches any objects.
    does_criterion_match_anything : Integer -> Boolean
    does_criterion_match_anything self i =
        self.matrix.map (col -> col.at i) . any x->x

    ## PRIVATE
       Extracts the list of criteria that did not have any matches.
    unmatched_criteria self =
        checked_criteria = self.criteria.map_with_index j-> criterion->
            has_matches = self.does_criterion_match_anything j
            Pair.new has_matches criterion
        checked_criteria.filter (p -> p.first.not) . map .second

    ## PRIVATE
       Returns the list of criteria that match the ith object.
    criteria_matching_object : Integer -> Vector
    criteria_matching_object self i =
        self.criteria.filter_with_index j-> _->
            self.matrix . at i . at j

    ## PRIVATE
       Returns the list of criteria indices that match the ith object.
    criteria_indices_matching_object : Integer -> Vector
    criteria_indices_matching_object self i =
        (0.up_to self.criteria.length).filter j->
            self.matrix . at i . at j

## PRIVATE
   Generates a matrix specifying which criteria match which object.

   The returned `match_matrix` satisfies the following condition:
   `match_matrix . at i . at j` is `True` if and only if `objects.at i` matches
   `criteria.at j`.
make_match_matrix matcher objects criteria object_name_mapper=(x->x) criterion_mapper=(x->x) =
    matrix = objects.map obj->
        criteria.map criterion->
            matcher.match_single_criterion (object_name_mapper obj) (criterion_mapper criterion)
    Match_Matrix.Value matrix criteria objects

## PRIVATE
internal_match_criteria_implementation matcher objects criteria reorder=False name_mapper=(x->x) = Panic.catch Wrapped_Dataflow_Error (handler = x-> x.payload.unwrap) <|
    ## TODO [RW] discuss: this line of code also shows an issue we had with ensuring input dataflow-errors are correctly propagated, later on we stopped doing that and testing for that as it was too cumbersome. Maybe it could be helped with an @Accepts_Error annotation similar to the one from the interpreter???
    [matcher, objects, criteria, reorder, name_mapper] . each v->
        Panic.rethrow (v.map_error Wrapped_Dataflow_Error.Error)

    match_matrix = make_match_matrix matcher objects criteria name_mapper
    unmatched_criteria = match_matrix.unmatched_criteria

    # Selects object indices which satisfy the provided predicate.
    select_matching_indices : (Integer -> Boolean) -> Vector Text
    select_matching_indices matcher =
        0.up_to objects.length . to_vector . filter matcher

    selected_indices = case reorder of
        True ->
            nested_indices = 0.up_to criteria.length . map j->
                is_object_matched_by_this_criterion i =
                    match_matrix.matrix.at i . at j
                select_matching_indices is_object_matched_by_this_criterion
            nested_indices.flat_map x->x . distinct
        False ->
            select_matching_indices match_matrix.is_object_matched_by_anything

    result = selected_indices.map objects.at
    Pair.new result unmatched_criteria
