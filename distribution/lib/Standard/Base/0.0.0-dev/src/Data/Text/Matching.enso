from Standard.Base import all

import Standard.Base.Data.Locale
import Standard.Base.Data.Text.Regex
from Standard.Base.Error.Problem_Behavior as Problem_Behavior_Module import Problem_Behavior, Report_Warning
from Standard.Base.Error.Common import Wrapped_Dataflow_Error

## UNSTABLE
   An error indicating that some criteria did not match any names in the input.
type No_Matches_Found (criteria : Vector Text)

No_Matches_Found.to_display_text : Text
No_Matches_Found.to_display_text =
    "The criteria "+this.criteria.to_text+" did not match any names in the input."


## Represents case-insensitive comparison mode.

   Arguments:
   - locale: The locale used for the comparison.
type Case_Insensitive locale=Locale.default

## Represents exact text matching mode.

   Arguments:
   - case_sensitive: Case Sensitive if True. Otherwise, the comparison is case
     insensitive using the specified locale.
type Text_Matcher (case_sensitive : (True | Case_Insensitive) = True)

## Represents regex matching mode.

   Arguments:
   - case_sensitive: Enables or disables case-insensitive matching. Case
     insensitive matching behaves as if it normalizes the case of all input text
     before matching on it.
   - multiline: Enables or disables the multiline option. Multiline specifies
     that the `^` and `$` pattern characters match the start and end of lines,
     as to well as the start and end of the input, respectively.
   - match_ascii: Enables or disables pure-ASCII matching for the regex. If you
     know your data only contains ASCII, you can enable this for a performance
     boost on some regex engines.
   - dot_matches_newline: Enables or disables the dot matches newline option.
     This specifies that the `.` special character should match everything
     _including_ newline characters. Without this flag, it matches all
     characters _except_ newlines.
   - comments: Enables or disables the comments mode for the regular expression.
     In comments mode, the following changes apply:
     - Whitespace within the pattern is ignored, except when within a character
       class or when preceded by an unescaped backslash, or within grouping
       constructs (e.g. `(?...)`).
     - When a line contains a `#` that is not in a character class and is not
       preceded by an unescaped backslash, all characters from the leftmost such
       `#` to the end of the line are ignored. That is to say; they act as
       'comments' in the regex.
type Regex_Matcher (case_sensitive : (True | Case_Insensitive) = True) (multiline : Boolean = False) (match_ascii : Boolean = False) (dot_matches_newline : Boolean = False) (comments : Boolean = False)

## UNSTABLE
   Compiles a provided pattern according to the rules defined in this
   `Regex_Matcher`.
Regex_Matcher.compile : Text -> Pattern
Regex_Matcher.compile pattern =
    case_insensitive = case this.case_sensitive of
        True -> False
        ## TODO [RW] Currently locale is not supported in case-insensitive
           Regex matching. There are plans to revisit it:
           https://www.pivotaltracker.com/story/show/181313576
        Case_Insensitive _ -> True
    compiled_pattern = Regex.compile pattern case_insensitive=case_insensitive match_ascii=this.match_ascii dot_matches_newline=this.dot_matches_newline multiline=this.multiline comments=this.comments
    compiled_pattern

## UNSTABLE
   Represents case-insensitive comparison mode.

   Arguments:
   - locale: The locale used for the comparison.

   A temporary workaround to allow the `Case_Insensitive` constructor to work
   with default arguments.

   It is needed, because there are issues with relying on default arguments of
   Atom constructors, as described in the following issue:
   https://github.com/enso-org/enso/issues/1600
   Once that issue is fixed, it can be removed.
Case_Insensitive.new : Locale -> Case_Insensitive
Case_Insensitive.new locale=Locale.default = Case_Insensitive locale

## UNSTABLE
   Represents exact text matching mode.

   Arguments:
   - case_sensitive: Case Sensitive if True. Otherwise, the comparison is case
     insensitive using the specified locale.

   A temporary workaround to allow the `Text_Matcher` constructor to work with
   default arguments.

   It is needed, because there are issues with relying on default arguments of
   Atom constructors, as described in the following issue:
   https://github.com/enso-org/enso/issues/1600
   Once that issue is fixed, it can be removed.
Text_Matcher.new : (True | Case_Insensitive) -> Text_Matcher
Text_Matcher.new case_sensitive=True = Text_Matcher case_sensitive

## UNSTABLE
   Represents regex matching mode.

   Arguments:
   - case_sensitive: Enables or disables case-insensitive matching. Case
     insensitive matching behaves as if it normalizes the case of all input text
     before matching on it.
   - multiline: Enables or disables the multiline option. Multiline specifies
     that the `^` and `$` pattern characters match the start and end of lines,
     as to well as the start and end of the input, respectively.
   - match_ascii: Enables or disables pure-ASCII matching for the regex. If you
     know your data only contains ASCII, you can enable this for a performance
     boost on some regex engines.
   - dot_matches_newline: Enables or disables the dot matches newline option.
     This specifies that the `.` special character should match everything
     _including_ newline characters. Without this flag, it matches all
     characters _except_ newlines.
   - comments: Enables or disables the comments mode for the regular expression.
     In comments mode, the following changes apply:
     - Whitespace within the pattern is ignored, except when within a character
       class or when preceded by an unescaped backslash, or within grouping
       constructs (e.g. `(?...)`).
     - When a line contains a `#` that is not in a character class and is not
       preceded by an unescaped backslash, all characters from the leftmost such
       `#` to the end of the line are ignored. That is to say; they act as
       'comments' in the regex.

   A temporary workaround to allow the `Regex_Matcher` constructor to work with
   default arguments.

   It is needed, because there are issues with relying on default arguments of
   Atom constructors, as described in the following issue:
   https://github.com/enso-org/enso/issues/1600
   Once that issue is fixed, it can be removed.
Regex_Matcher.new : (True | Case_Insensitive) -> Boolean -> Boolean -> Boolean -> Boolean -> Regex_Matcher
Regex_Matcher.new case_sensitive=True multiline=False match_ascii=False dot_matches_newline=False comments=False =
    Regex_Matcher case_sensitive multiline match_ascii dot_matches_newline comments

## UNSTABLE
   Checks if a name matches the provided criterion according to the specified
   matching strategy.

   Arguments:
   - name: A `Text` representing the name being matched.
   - criterion: A `Text` representing the name to be matched.

   > Example
     Check if the provided name matches a regular expression.

         Text_Matcher.new.match_single_criterion "Foobar" "foo" == False
Text_Matcher.match_single_criterion : Text -> Text -> Boolean
Text_Matcher.match_single_criterion name criterion =
    case this.case_sensitive of
        True -> name == criterion
        Case_Insensitive locale -> name.equals_ignore_case criterion locale=locale

## UNSTABLE
   Checks if a name matches the provided criterion according to the specified
   matching strategy.

   Arguments:
   - name: A `Text` representing the name being matched.
   - criterion: A `Text` representing the regular expression specifying the
     matching criterion.

   > Example
     Check if the provided name matches a regular expression.

         Regex_Matcher.new case_sensitive=Case_Insensitive.new . match_single_criterion "Foobar" "f.*" == True
Regex_Matcher.match_single_criterion : Text -> Text -> Boolean
Regex_Matcher.match_single_criterion name criterion =
    this.compile criterion . matches name

## UNSTABLE
   Selects objects from an input list that match any of the provided criteria.

   Arguments:
   - objects: A list of objects to be matched.
   - criteria: A list of texts representing the matching criteria. Their meaning
     depends on the matching strategy.
   - reorder: Specifies whether to reorder the matched objects according to the
     order of the matching criteria.
     If `False`, the matched entries are returned in the same order as in the
     input.
     If `True`, the matched entries are returned in the order of the criteria
     matching them. If a single object has been matched by multiple criteria, it
     is placed in the group belonging to the first matching criterion on the
     list.
     If a single criterion's group has more than one element, their relative
     order is the same as in the input.
   - name_mapper: A function mapping a provided object to its name, which will
     then be matched with the criteria. It is set to the identity function by
     default, thus allowing the input to be a list of names to match. But it can
     be overridden to enable matching more complex objects.
   - matcher: A `Matcher` instance specifying how to interpret the criterion.
   - on_problems: Specifies the behavior when a problem occurs during the
     function.
     By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.

   > Example
     Selects objects matching one of the provided patterns, preserving the input order.

         Regex_Matcher.new case_sensitive=True . match_criteria ["foo", "foobar", "quux", "baz", "Foo"] [".*ba.*", "f.*"] == ["foo", "foobar", "baz"]

   > Example
     Selects pairs matching their first element with the provided criteria and
     ordering the result according to the order of criteria that matched them.

         Text_Matcher.new.match_criteria [Pair "foo" 42, Pair "bar" 33, Pair "baz" 10, Pair "foo" 0, Pair 10 10] ["bar", "foo"] reorder=True name_mapper=_.name == [Pair "bar" 33, Pair "foo" 42, Pair "foo" 0]
Text_Matcher.match_criteria : Vector Any -> Vector Text -> Boolean -> (Any -> Text) -> Problem_Behavior -> Vector Any ! No_Matches_Found
Text_Matcher.match_criteria = here.match_criteria_implementation this

## UNSTABLE
   Selects objects from an input list that match any of the provided criteria.

   Arguments:
   - objects: A list of objects to be matched.
   - criteria: A list of texts representing the matching criteria. Their meaning
     depends on the matching strategy.
   - reorder: Specifies whether to reorder the matched objects according to the
     order of the matching criteria.
     If `False`, the matched entries are returned in the same order as in the
     input.
     If `True`, the matched entries are returned in the order of the criteria
     matching them. If a single object has been matched by multiple criteria, it
     is placed in the group belonging to the first matching criterion on the
     list.
     If a single criterion's group has more than one element, their relative
     order is the same as in the input.
   - name_mapper: A function mapping a provided object to its name, which will
     then be matched with the criteria. It is set to the identity function by
     default, thus allowing the input to be a list of names to match. But it can
     be overridden to enable matching more complex objects.
   - matcher: A `Matcher` instance specifying how to interpret the criterion.
   - on_problems: Specifies the behavior when a problem occurs during the
     function.
     By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.

   > Example
     Selects objects matching one of the provided patterns, preserving the input order.

         Regex_Matcher.new case_sensitive=True . match_criteria ["foo", "foobar", "quux", "baz", "Foo"] [".*ba.*", "f.*"] == ["foo", "foobar", "baz"]

   > Example
     Selects pairs matching their first element with the provided criteria and
     ordering the result according to the order of criteria that matched them.

         Text_Matcher.new.match_criteria [Pair "foo" 42, Pair "bar" 33, Pair "baz" 10, Pair "foo" 0, Pair 10 10] ["bar", "foo"] reorder=True name_mapper=_.name == [Pair "bar" 33, Pair "foo" 42, Pair "foo" 0]
Regex_Matcher.match_criteria : Vector Any -> Vector Text -> Boolean -> (Any -> Text) -> Problem_Behavior -> Vector Any ! No_Matches_Found
Regex_Matcher.match_criteria = here.match_criteria_implementation this

## A common supertype representing a matching strategy.
type Matcher
    Text_Matcher
    Regex_Matcher

## PRIVATE
match_criteria_implementation matcher objects criteria reorder=False name_mapper=(x->x) on_problems=Report_Warning =
    result = here.internal_match_criteria_implementation matcher objects criteria reorder name_mapper
    unmatched_criteria = result.second
    problems = if unmatched_criteria.is_empty then [] else
        [No_Matches_Found unmatched_criteria]
    on_problems.attach_problems_after result.first problems

## PRIVATE
match_criteria_callback matcher objects criteria problem_callback reorder=False name_mapper=(x->x) =
    result = here.internal_match_criteria_implementation matcher objects criteria reorder name_mapper
    unmatched_criteria = result.second
    problem_callback unmatched_criteria
    result.first

## PRIVATE
internal_match_criteria_implementation matcher objects criteria reorder=False name_mapper=(x->x) = Panic.catch Wrapped_Dataflow_Error (handler = x-> x.payload.unwrap) <|
    ## TODO [RW] discuss: this line of code also shows an issue we had with ensuring input dataflow-errors are correctly propagated, later on we stopped doing that and testing for that as it was too cumbersome. Maybe it could be helped with an @Accepts_Error annotation similar to the one from the interpreter???
    [matcher, objects, criteria, reorder, name_mapper] . each v->
        Panic.rethrow (v.map_error Wrapped_Dataflow_Error)

    # match_matrix . at i . at j specifies whether objects.at i matches criteria.at j
    match_matrix = objects.map obj->
        criteria.map criterion->
            name = name_mapper obj
            matcher.match_single_criterion name criterion

    # Checks if the ith object is matched by any criterion.
    is_object_matched_by_anything : Integer -> Boolean
    is_object_matched_by_anything i =
        match_matrix.at i . any x->x

    # Checks if the ith criterion matches any columns.
    does_criterion_match_anything : Integer -> Boolean
    does_criterion_match_anything i =
        match_matrix.map (col -> col.at i) . any x->x

    # Selects object indices which satisfy the provided predicate.
    select_matching_indices : (Integer -> Boolean) -> Vector Text
    select_matching_indices matcher =
        0.up_to objects.length . to_vector . filter matcher

    # Check consistency
    checked_criteria = criteria.map_with_index j-> criterion->
        has_matches = does_criterion_match_anything j
        Pair has_matches criterion
    unmatched_criteria = checked_criteria.filter (p -> p.first.not) . map .second

    selected_indices = case reorder of
        True ->
            nested_indices = 0.up_to criteria.length . map j->
                is_object_matched_by_this_criterion i =
                    match_matrix.at i . at j
                select_matching_indices is_object_matched_by_this_criterion
            nested_indices.flat_map x->x . distinct
        False ->
            select_matching_indices is_object_matched_by_anything

    result = selected_indices.map objects.at
    Pair result unmatched_criteria
