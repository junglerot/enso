import project.Any.Any
import project.Data.Array.Array
import project.Data.Array_Proxy.Array_Proxy
import project.Data.Json.Json
import project.Data.Json.JS_Object
import project.Data.Locale.Locale
import project.Data.Map.Map
import project.Data.Numbers.Decimal
import project.Data.Numbers.Integer
import project.Data.Numbers.Number
import project.Data.Range.Extensions
import project.Data.Text.Extensions
import project.Data.Text.Text
import project.Data.Text.Text_Sub_Range.Text_Sub_Range
import project.Data.Vector.Vector
import project.Error.Error
import project.Meta
import project.Nothing.Nothing

from project.Data.Boolean import Boolean, True, False

## Converts the given value to a JSON serialized value.
Any.to_json : Text
Any.to_json self = Json.stringify self

## Converts the given value to a JSON serialized value.
Error.to_json : Text
Error.to_json self = self.to_js_object.to_text

## Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms and maps, the object is converted to a JS_Object.
Text.to_js_object : JS_Object | Text
Text.to_js_object self = case self of
    Text -> JS_Object.from_pairs [["type", "Text"]]
    _ -> self

## Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms and maps, the object is converted to a JS_Object.
Number.to_js_object : JS_Object | Number
Number.to_js_object self = case self of
    Number -> JS_Object.from_pairs [["type", "Number"]]
    Integer -> JS_Object.from_pairs [["type", "Integer"]]
    Decimal -> JS_Object.from_pairs [["type", "Decimal"]]
    _ : Integer ->
        ## JS Safe Integer range -(2^53 - 1) to (2^53 - 1)
        js_max_integer = 9007199254740991
        if self >= -js_max_integer && self < js_max_integer then self else
            JS_Object.from_pairs [["type", "BigInt"], ["value", self.to_text]]
    _ -> self

## Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms and maps, the object is converted to a JS_Object.
Boolean.to_js_object : JS_Object | Boolean
Boolean.to_js_object self = case self of
    Boolean -> JS_Object.from_pairs [["type", "Boolean"]]
    _ -> self

## Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms and maps, the object is converted to a JS_Object.
Nothing.to_js_object : Nothing
Nothing.to_js_object self = self

## Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms and maps, the object is converted to a JS_Object.
Array.to_js_object : Vector
Array.to_js_object self =
    proxy = Array_Proxy.new self.length i-> self.at i . to_js_object
    Vector.from_polyglot_array proxy

## Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms, the object is converted to a JS_Object.
Vector.to_js_object : Vector
Vector.to_js_object self =
    proxy = Array_Proxy.new self.length i-> self.at i . to_js_object
    Vector.from_polyglot_array proxy

## Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms, the object is converted to a JS_Object.
Any.to_js_object : JS_Object
Any.to_js_object self =
    m = Meta.meta self
    case m of
        _ : Meta.Atom ->
            type_pair = ["type", Meta.type_of self . to_text]
            cons = m.constructor
            java_cons = cons.value ...
            if java_cons == self then JS_Object.from_pairs [type_pair] else
                fs = m.fields
                field_names = cons.fields

                builder = Vector.new_builder field_names.length+2
                builder.append type_pair
                builder.append ["constructor", cons.name]
                0.up_to field_names.length . map i-> builder.append [field_names.at i, fs.at i . to_js_object]
                JS_Object.from_pairs builder.to_vector
        _ : Meta.Constructor ->
            type_name = Meta.get_qualified_type_name self . split '.' . at -2
            JS_Object.from_pairs [["type", type_name], ["constructor", m.name]]
        _ -> Error.throw ("Cannot convert " + self.to_text + " to JSON")

## Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms, the object is converted to a JS_Object.
Error.to_js_object : JS_Object
Error.to_js_object self =
    caught = self.catch
    error_type = ["type", "Error"]
    error_content = ["content", caught]
    error_message = ["message", caught.to_display_text]
    JS_Object.from_pairs [error_type, error_content, error_message]

## Converts the given value to a JSON serializable object.
   Custom serialization for Locale, serializes the language, country and variant.
Locale.to_js_object : JS_Object
Locale.to_js_object self =
    b = Vector.new_builder 5
    b.append ["type", "Locale"]
    b.append ["constructor", "new"]
    b.append ["language", self.language]
    b.append ["country", self.country]
    b.append ["variant", self.variant]
    JS_Object.from_pairs b.to_vector
