import project.Data.Any.Any
import project.Data.List.List
import project.Data.Map.Map
import project.Data.Numbers.Decimal
import project.Data.Numbers.Integer
import project.Data.Numbers.Number
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Meta
import project.Nothing.Nothing
import project.Runtime.Ref.Ref

from project.Data.Boolean import Boolean, True, False
from project.Data.Json import Json, Marshalling_Error
from project.Error.Common import Panic

polyglot java import org.enso.base.json.Parser
polyglot java import org.enso.base.json.Printer

## PRIVATE

   A JSON parser event consumer, passed to the Java parser backend.

   Conforms to the `org.enso.base.json.Parser.JsonConsumer` Java interface.
type Consumer
    ## PRIVATE

       Creates a new top-level consumer.
    new : Consumer
    new =
        child = Ref.new List.Nil
        val = Ref.new Nothing
        Consumer.Value child val

    ## PRIVATE

       A JSON parser event consumer, passed to the Java parser backend.

       Arguments:
       - child_consumer: The child consumer of this.
       - value: The value being consumed.

       Conforms to the `org.enso.base.json.Parser.JsonConsumer` Java interface.
    Value child_consumer value

    ## PRIVATE

       A helper for handling "value emitted" events.

       Arguments:
       - v: The value to act upon.
    on_value : Any -> Nothing
    on_value self v = case self.child_consumer . get of
        List.Nil -> self.value . put v
        cons -> cons.on_value v

    ## PRIVATE

       Closes the child consumer and either sets the current consumer to its
       parent, or takes its returned value as the final result of parsing.
    seal_child : Nothing
    seal_child self =
        child = self.child_consumer.get
        val = child.seal
        case child.parent of
            List.Nil ->
                self.value . put val
            p ->
                self.child_consumer . put p
                p.on_value val

    ## PRIVATE

       Consumes the `start_object` event.
    on_start_object : Nothing
    on_start_object self =
        parent = self.child_consumer . get
        self.child_consumer . put (Object_Consumer.new parent)

    ## PRIVATE

       Consumes the `key` event.

       Arguments:
       - k: The key to act upon.
    on_key : Text -> Nothing
    on_key self k = self.child_consumer . get . on_key k

    ## PRIVATE

       Consumes the `end_object` event.
    on_end_object : Nothing
    on_end_object self = self.seal_child

    ## PRIVATE

       Consumes the `start_array` event.
    on_start_array : Nothing
    on_start_array self =
        parent = self.child_consumer . get
        self.child_consumer . put (Array_Consumer.new parent)

    ## PRIVATE

       Consumes the `end_array` event.
    on_end_array : Nothing
    on_end_array self = self.seal_child

    ## PRIVATE

       Consumes the `long` event.

       Arguments:
       - n: The long value to process.
    on_long : Integer -> Nothing
    on_long self n = self.on_value (Json.Number n)

    ## PRIVATE

       Consumes the `double` event.

       Arguments:
       - n: The double value to process.
    on_double : Decimal -> Nothing
    on_double self n = self.on_value (Json.Number n)

    ## PRIVATE

       Consumes the `string` event.

       Arguments:
       - s: The string value to process.
    on_string : Text -> Nothing
    on_string self s = self.on_value (Json.String s)

    ## PRIVATE

       Consumes the `true` event.
    on_true : Nothing
    on_true self = self.on_value (Json.Boolean True)

    ## PRIVATE

       Consumes the `false` event.
    on_false : Nothing
    on_false self = self.on_value (Json.Boolean False)

    ## PRIVATE

       Consumes the `null` event.
    on_null : Nothing
    on_null self = self.on_value Json.Null

## PRIVATE

   A child consumer, used to process events inside arrays.
type Array_Consumer
    ## PRIVATE

      Creates a new array consumer with the given parent.

      Arguments:
      - parent: The parent of the new consumer.
    new : Any -> Array_Consumer
    new parent =
        Array_Consumer.Value Vector.new_builder parent

    ## PRIVATE

       A child consumer, used to process events inside arrays.

       Arguments:
       - builder: The builder for array values.
       - parent: The parent consumer.
    Value builder parent

    ## PRIVATE

       Consumes a value.

       Arguments:
       - v: The value to process.
    on_value : Any -> Nothing
    on_value self v = self.builder.append v

    ## PRIVATE

       Returns the final value built by this consumer.
    seal : Json
    seal self =
        vec = self.builder.to_vector
        Json.Array vec

## PRIVATE

   A child consumer, used to process events inside objects.
type Object_Consumer
    ## PRIVATE

       Creates a new object consumer with the given parent.

       Arguments:
       - parent: The parent of the new consumer.
    new : Any -> Object_Consumer
    new parent =
        k = Ref.new ""
        m = Ref.new Map.empty
        Object_Consumer.Value k m parent

    ## PRIVATE

       A child consumer, used to process events inside objects.

       Arguments:
       - last_key: The last object key that has been seen.
       - map: The map representing the object.
       - parent: The parent consumer.
    Value last_key map parent

    ## PRIVATE

       Consumes a key.

       Arguments:
       - k: The key to process.
    on_key : Text -> Nothing
    on_key self k = self.last_key . put k

    ## PRIVATE

       Consumes a value.

       Arguments:
       - v: The value to process.
    on_value : Any -> Nothing
    on_value self v =
        k = self.last_key . get
        m = self.map . get
        new_m = m.insert k v
        self.map . put new_m

    ## PRIVATE

       Returns the final value built by this consumer.
    seal : Json
    seal self =
        m = self.map . get
        Json.Object m

## PRIVATE

   A helper method for printing JSON values to Text.

   Arguments:
   - builder: An accumulator for text.
   - json: The json value being converted to text.
render_helper : Text -> Json -> Text
render_helper builder json = case json of
    Json.Object fields ->
        r = Ref.new ""
        render_key_value acc key value =
            separator = r . get
            r.put ","
            val = render_helper "" value
            acc + separator + (Printer.json_escape key) + ":" + val
        arr = fields.fold_with_key "" render_key_value
        builder + "{" + arr + "}"
    Json.Array items ->
        r = Ref.new ""
        render_array_element acc element =
            separator = r.get
            r.put ","
            val = render_helper "" element
            acc + separator + val
        arr = items.fold "" render_array_element
        builder + "[" + arr + "]"
    Json.String value ->
        builder + (Printer.json_escape value)
    Json.Number value ->
        builder + value.to_text
    Json.Boolean value ->
        val = if value then "true" else "false"
        builder + val
    Json.Null ->
        builder + "null"

## PRIVATE

   A helper method for converting JSON objects into arbitrary types.

   Arguments:
   - fmt: The format to convert the JSON into.
   - json: The JSON being converted.

   See `Json.into` for semantics documentation.
into_helper : Any -> Json -> Any
into_helper fmt json = case fmt of
    _ : Vector -> case json of
        Json.Array items -> items.map (into_helper (fmt.at 0))
        _ -> Panic.throw (Marshalling_Error.Type_Mismatch json fmt)
    _ : Boolean -> case json of
        Json.Boolean v -> v
        _ -> Panic.throw (Marshalling_Error.Type_Mismatch json fmt)
    _ : Number -> case json of
        Json.Number v -> v
        _ -> Panic.throw (Marshalling_Error.Type_Mismatch json fmt)
    _ : Text -> case json of
        Json.String v -> v
        _ -> Panic.throw (Marshalling_Error.Type_Mismatch json fmt)
    _ ->
        m = Meta.meta fmt
        case m of
            Meta.Atom_Data _ -> case json of
                Json.Object json_fields ->
                    cons = Meta.Constructor_Data m.constructor
                    field_names = cons.fields
                    field_formats = m.fields
                    field_values = field_names.zip field_formats n-> inner_format->
                        field_json = json_fields . get n . catch Any _->
                            Panic.throw (Marshalling_Error.Missing_Field json fmt n)
                        into_helper inner_format field_json
                    cons.new field_values
                _ -> Panic.throw (Marshalling_Error.Type_Mismatch json fmt)
            _ -> Panic.throw (Marshalling_Error.Type_Mismatch json fmt)

## PRIVATE

   A helper used to parse text into a JSON value.

   Arguments:
   - json_text: The textual representation of the JSON.
parse_helper : Text -> Json
parse_helper json_text =
    consumer = Consumer.new
    Parser.parse json_text consumer
    consumer.value . get
