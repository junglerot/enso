from Standard.Base import all hiding Number, Boolean, Array
import Standard.Base

import Standard.Base.Data.Numbers as Base_Number
import Standard.Base.Runtime.Ref
from Standard.Base.Data.Json import all

polyglot java import org.enso.base.json.Parser
polyglot java import org.enso.base.json.Printer

## PRIVATE

   A JSON parser event consumer, passed to the Java parser backend.

   Conforms to the `org.enso.base.json.Parser.JsonConsumer` Java interface.
type Consumer

    ## PRIVATE

       A JSON parser event consumer, passed to the Java parser backend.

       Arguments:
       - child_consumer: The child consumer of this.
       - value: The value being consumed.

       Conforms to the `org.enso.base.json.Parser.JsonConsumer` Java interface.
    Consumer_Data child_consumer value

    ## PRIVATE

       A helper for handling "value emitted" events.

       Arguments:
       - v: The value to act upon.
    on_value : Any -> Nothing
    on_value self v = case self.child_consumer . get of
        Nil -> self.value . put v
        cons -> cons.on_value v

    ## PRIVATE

       Closes the child consumer and either sets the current consumer to its
       parent, or takes its returned value as the final result of parsing.
    seal_child : Nothing
    seal_child self =
        child = self.child_consumer.get
        val = child.seal
        case child.parent of
            Nil ->
                self.value . put val
            p ->
                self.child_consumer . put p
                p.on_value val

    ## PRIVATE

       Consumes the `start_object` event.
    on_start_object : Nothing
    on_start_object self =
        parent = self.child_consumer . get
        self.child_consumer . put (mk_object_consumer parent)

    ## PRIVATE

       Consumes the `key` event.

       Arguments:
       - k: The key to act upon.
    on_key : Text -> Nothing
    on_key self k = self.child_consumer . get . on_key k

    ## PRIVATE

       Consumes the `end_object` event.
    on_end_object : Nothing
    on_end_object self = self.seal_child

    ## PRIVATE

       Consumes the `start_array` event.
    on_start_array : Nothing
    on_start_array self =
        parent = self.child_consumer . get
        self.child_consumer . put (mk_array_consumer parent)

    ## PRIVATE

       Consumes the `end_array` event.
    on_end_array : Nothing
    on_end_array self = self.seal_child

    ## PRIVATE

       Consumes the `long` event.

       Arguments:
       - n: The long value to process.
    on_long : Integer -> Nothing
    on_long self n = self.on_value (Number n)

    ## PRIVATE

       Consumes the `double` event.

       Arguments:
       - n: The double value to process.
    on_double : Decimal -> Nothing
    on_double self n = self.on_value (Number n)

    ## PRIVATE

       Consumes the `string` event.

       Arguments:
       - s: The string value to process.
    on_string : Text -> Nothing
    on_string self s = self.on_value (String s)

    ## PRIVATE

       Consumes the `true` event.
    on_true : Nothing
    on_true self = self.on_value (Boolean True)

    ## PRIVATE

       Consumes the `false` event.
    on_false : Nothing
    on_false self = self.on_value (Boolean False)

    ## PRIVATE

       Consumes the `null` event.
    on_null : Nothing
    on_null self = self.on_value Null

## PRIVATE

   A child consumer, used to process events inside arrays.
type Array_Consumer
    ## PRIVATE

       A child consumer, used to process events inside arrays.

       Arguments:
       - builder: The builder for array values.
       - parent: The parent consumer.
    Array_Consumer_Data builder parent

    ## PRIVATE

       Consumes a value.

       Arguments:
       - v: The value to process.
    on_value : Any -> Nothing
    on_value self v = self.builder.append v

    ## PRIVATE

       Returns the final value built by this consumer.
    seal : Array
    seal self =
        vec = self.builder.to_vector
        Array vec

## PRIVATE

   A child consumer, used to process events inside objects.
type Object_Consumer
    ## PRIVATE

       A child consumer, used to process events inside objects.

       Arguments:
       - last_key: The last object key that has been seen.
       - map: The map representing the object.
       - parent: The parent consumer.
    Object_Consumer_Data last_key map parent

    ## PRIVATE

       Consumes a key.

       Arguments:
       - k: The key to process.
    on_key : Text -> Nothing
    on_key self k = self.last_key . put k

    ## PRIVATE

       Consumes a value.

       Arguments:
       - v: The value to process.
    on_value : Any -> Nothing
    on_value self v =
        k = self.last_key . get
        m = self.map . get
        new_m = m.insert k v
        self.map . put new_m

    ## PRIVATE

       Returns the final value built by this consumer.
    seal : Object
    seal self =
        m = self.map . get
        Object m

## PRIVATE

   Creates a new object consumer with the given parent.

   Arguments:
   - parent: The parent of the new consumer.
mk_object_consumer : Any -> Object_Consumer
mk_object_consumer parent =
    k = Ref.new ""
    m = Ref.new Map.empty
    Object_Consumer_Data k m parent

## PRIVATE

  Creates a new array consumer with the given parent.

  Arguments:
  - parent: The parent of the new consumer.
mk_array_consumer : Any -> Array_Consumer
mk_array_consumer parent =
    bldr = Vector.new_builder
    Array_Consumer_Data bldr parent

## PRIVATE

   Creates a new top-level consumer.
mk_consumer : Consumer
mk_consumer =
    child = Ref.new Nil
    val = Ref.new Nothing
    Consumer_Data child val

## PRIVATE

   A helper method for printing JSON values to Text.

   Arguments:
   - builder: An accumulator for text.
   - json: The json value being converted to text.
render_helper : Text -> Json -> Text
render_helper builder json = case json of
    Object fields ->
        r = Ref.new ""
        render_key_value acc key value =
            separator = r . get
            r.put ","
            val = render_helper "" value
            acc + separator + (Printer.json_escape key) + ":" + val
        arr = fields.fold_with_key "" render_key_value
        builder + "{" + arr + "}"
    Array items ->
        r = Ref.new ""
        render_array_element acc element =
            separator = r.get
            r.put ","
            val = render_helper "" element
            acc + separator + val
        arr = items.fold "" render_array_element
        builder + "[" + arr + "]"
    String value ->
        builder + (Printer.json_escape value)
    Number value ->
        builder + value.to_text
    Boolean value ->
        val = if value then "true" else "false"
        builder + val
    Null ->
        builder + "null"

## PRIVATE

   A helper method for converting JSON objects into arbitrary types.

   Arguments:
   - fmt: The format to convert the JSON into.
   - json: The JSON being converted.

   See `Json.into` for semantics documentation.
into_helper : Any -> Json -> Any
into_helper fmt json = case fmt of
    Base.Vector.Vector -> case json of
        Array items -> items.map (into_helper (fmt.at 0))
        _ -> Panic.throw (Type_Mismatch_Error json fmt)
    Base.Boolean -> case json of
        Boolean v -> v
        _ -> Panic.throw (Type_Mismatch_Error json fmt)
    Base_Number.Number -> case json of
        Number v -> v
        _ -> Panic.throw (Type_Mismatch_Error json fmt)
    Base.Text -> case json of
        String v -> v
        _ -> Panic.throw (Type_Mismatch_Error json fmt)
    _ ->
        m = Meta.meta fmt
        case m of
            Meta.Atom_Data _ -> case json of
                Object json_fields ->
                    cons = Meta.Constructor_Data m.constructor
                    fnames = cons.fields
                    ffmts = m.fields
                    field_values = fnames.zip ffmts n-> inner_fmt->
                        fjson = json_fields . get n . catch Any _->
                            Panic.throw (Missing_Field_Error json fmt n)
                        into_helper inner_fmt fjson
                    cons.new field_values
                _ -> Panic.throw (Type_Mismatch_Error json fmt)
            _ -> Panic.throw (Type_Mismatch_Error json fmt)

## PRIVATE

   A helper used to parse text into a JSON value.

   Arguments:
   - json_text: The textual representation of the JSON.
parse_helper : Text -> Json
parse_helper json_text =
    consumer = mk_consumer
    Parser.parse json_text consumer
    consumer.value . get
