import project.Any.Any
import project.Data.Array.Array
import project.Data.Numbers.Decimal
import project.Data.Numbers.Integer
import project.Data.Numbers.Number
import project.Data.Ordering.Comparator
import project.Data.Ordering.Ordering
import project.Data.Ordering.Comparable
import project.Data.Range.Extensions
import project.Data.Vector.Vector
import project.Errors.Common.Incomparable_Values
import project.Error.Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Meta
import project.Nothing.Nothing
import project.Runtime.Ref.Ref
import project.Panic.Panic

from project.Data.Boolean import Boolean, True, False
from project.Data.Vector import Empty_Error
from project.Errors.Common import Unsupported_Argument_Types

polyglot java import org.enso.base.CompareException
polyglot java import org.enso.base.statistics.Moments
polyglot java import org.enso.base.statistics.MomentStatistic
polyglot java import org.enso.base.statistics.CountMinMax
polyglot java import org.enso.base.statistics.CorrelationStatistics
polyglot java import org.enso.base.statistics.Rank

polyglot java import java.lang.NullPointerException

## Specifies how to handle ranking of equal values.
type Rank_Method
    ## Use the mean of all ranks for equal values.
    Average

    ## Use the lowest of all ranks for equal values.
    Minimum

    ## Use the highest of all ranks for equal values.
    Maximum

    ## Use same rank value for equal values and next group is the immediate
       following ranking number.
    Dense

    ## Equal values are assigned the next rank in order that they occur.
    Ordinal

    ## Assigns a rank to each value of data, dealing with equal values according to the method.

       Arguments:
       - data: Input data to rank.
    compute : Vector -> Vector
    compute self input =
        java_method = case self of
            Rank_Method.Minimum -> Rank.Method.MINIMUM
            Rank_Method.Maximum -> Rank.Method.MAXIMUM
            Rank_Method.Average -> Rank.Method.AVERAGE
            Rank_Method.Ordinal -> Rank.Method.ORDINAL
            Rank_Method.Dense -> Rank.Method.DENSE

        report_nullpointer caught_panic = Error.throw (Illegal_Argument.Error caught_panic.payload.getMessage)
        handle_nullpointer = Panic.catch NullPointerException handler=report_nullpointer
        handle_cmp_exc = Panic.catch CompareException handler=exc->
            Error.throw (Incomparable_Values.Error exc.payload.getLeftOperand exc.payload.getRightOperand)

        handle_cmp_exc <| handle_nullpointer <|
            java_ranks = Rank.rank input.to_array Comparator.new java_method
            Vector.from_polyglot_array java_ranks

type Statistic
    ## Count the number of non-Nothing and non-NaN values.
    Count

    ## The minimum value.
    Minimum

    ## The maximum value.
    Maximum

    ## Sum the non-Nothing and non-NaN values.
    Sum

    ## The sample mean of the values.
    Mean

    ## The variance of the values.
       Arguments:
       - population: specifies if data is a sample or the population.
    Variance (population:Boolean=False)

    ## The standard deviation of the values.
       Arguments:
       - population: specifies if data is a sample or the population.
    Standard_Deviation (population:Boolean=False)

    ## The skewness of the values.
       Arguments:
       - population: specifies if data is a sample or the population.
    Skew (population:Boolean=False)

    ## The sample kurtosis of the values.
    Kurtosis

    ## Calculate the Covariance between data and series.

       Arguments:
       - series: the series to compute the covariance with.
    Covariance (series:Vector)

    ## Calculate the Pearson Correlation between data and series.

       Arguments:
       - series: the series to compute the correlation with.
    Pearson (series:Vector)

    ## Calculate the Spearman Rank Correlation between data and series.

       Arguments:
       - series: the series to compute the correlation with.
    Spearman (series:Vector)

    ## Calculate the coefficient of determination between data and predicted
       series.

       Arguments:
       - predicted: the series to compute the r_squared with.
    R_Squared (predicted:Vector)

    ## Gets the order needed to compute a statistic for a moment based statistic.
    order : Integer | Nothing
    order self = case self of
        Statistic.Sum -> 1
        Statistic.Mean -> 1
        Statistic.Variance _ -> 2
        Statistic.Standard_Deviation _ -> 2
        Statistic.Skew _ -> 3
        Statistic.Kurtosis -> 4
        _ -> Nothing

    ## Compute a single statistic on a vector like object.

       Arguments:
       - data: Vector like object which has a `to_array` method.
       - statistic: Statistic to calculate.
    compute : Vector -> Statistic -> Any
    compute data statistic=Statistic.Count =
        Statistic.compute_bulk data [statistic] . first

    ## Compute a set of statistics on a vector like object.

       Arguments:
       - data: Vector like object which has a `to_array` method.
       - statistics: Set of statistics to calculate.
    compute_bulk : Vector -> Vector Statistic -> Vector Any
    compute_bulk data statistics=[Statistic.Count, Statistic.Sum] =
        counter = CountMinMax.new

        moment_order = statistics.map .order
        skip_moments = moment_order.all s->s.is_nothing
        moments = if skip_moments then Nothing else Moments.new (moment_order.filter (v-> v != Nothing) . fold 0 .max)

        result = data.fold moments current-> value-> compute_fold counter current value

        report_error stats =
            first = 0.up_to stats.length . find i-> (moment_order.at i . is_nothing . not)
            stat = stats.at first
            Error.throw (Illegal_Argument.Error ("Can only compute " + stat.to_text + " on numerical data sets."))

        if counter.count == 0 then statistics.map empty_value else
            if skip_moments.not && result.is_nothing then report_error statistics else
                statistics.map statistic-> case statistic of
                    Statistic.Count -> counter.count
                    Statistic.Minimum -> if counter.comparatorError then (Error.throw (Incomparable_Values.Error Nothing Nothing)) else counter.minimum
                    Statistic.Maximum -> if counter.comparatorError then (Error.throw (Incomparable_Values.Error Nothing Nothing)) else counter.maximum
                    Statistic.Covariance series -> calculate_correlation_statistics data series . covariance
                    Statistic.Pearson series -> calculate_correlation_statistics data series . pearsonCorrelation
                    Statistic.Spearman series -> calculate_spearman_rank data series
                    Statistic.R_Squared series -> calculate_correlation_statistics data series . rSquared
                    _ -> moments.compute (to_moment_statistic statistic)

    ## Compute a running statistics on a vector like object.

       Arguments:
       - data: Vector like object which has a `to_array` method.
       - statistics: Set of statistics to calculate.
    running : Vector -> Statistic -> Vector Any
    running data statistic=Statistic.Sum =
        Statistic.running_bulk data [statistic] . map .first

    ## Compute a set running statistics on a vector like object.

       Arguments:
       - data: Vector like object which has a `to_array` method.
       - statistics: Set of statistics to calculate.
    running_bulk : Vector -> Vector Statistic -> Vector Any
    running_bulk data statistics=[Statistic.Count, Statistic.Sum] =
        is_unsupported s = case s of
            Statistic.Covariance _ -> True
            Statistic.Pearson _ -> True
            Statistic.Spearman _ -> True
            Statistic.R_Squared _ -> True
            _ -> False

        if statistics.any is_unsupported then Error.throw (Illegal_Argument.Error ("Unsupported Statistics ( " + (statistics.filter is_unsupported . to_text) ") for running calculations.")) else
            counter = CountMinMax.new

            moment_order = statistics.map .order
            skip_moments = moment_order.all s->s.is_nothing
            moments = if skip_moments then Nothing else Moments.new (moment_order.filter (v-> v != Nothing) . fold 0 .max)
            ref_moment = Ref.new moments

            Panic.handle_wrapped_dataflow_error <|
                output = Vector.new_builder data.length

                data.each value->
                    result = compute_fold counter ref_moment.get value
                    ref_moment.put result

                    row = Panic.throw_wrapped_if_error <| statistics.map s-> case s of
                        Statistic.Count -> counter.count
                        Statistic.Minimum -> if counter.comparatorError then (Error.throw (Incomparable_Values.Error Nothing Nothing)) else counter.minimum
                        Statistic.Maximum -> if counter.comparatorError then (Error.throw (Incomparable_Values.Error Nothing Nothing)) else counter.maximum
                        _ -> if result.is_nothing then Error.throw (Illegal_Argument.Error ("Can only compute " + s.to_text + " on numerical data sets.")) else result.compute (to_moment_statistic s)
                    output.append row

                output.to_vector

    ## Calculate a variance-covariance matrix between the input series.

       Arguments:
       - data: The input data sets
    covariance_matrix : Vector Vector -> Vector Vector
    covariance_matrix data =
        stats_vectors = calculate_correlation_statistics_matrix data
        stats_vectors.map v->(v.map .covariance)

    ## Calculate a Pearson correlation matrix between the input series.

       Arguments:
       - data: The input data sets
    pearson_correlation : Vector Vector -> Vector Vector
    pearson_correlation data =
        stats_vectors = calculate_correlation_statistics_matrix data
        stats_vectors.map v->(v.map .pearsonCorrelation)

    ## Calculate a Spearman Rank correlation matrix between the input series.

       Arguments:
       - data: The input data sets
    spearman_correlation : Vector Vector -> Vector Vector
    spearman_correlation data =
        Panic.handle_wrapped_dataflow_error <|
            output = Vector.new_builder data.length

            0.up_to data.length . each i->
                output.append <|
                    Vector.new data.length j->
                        if j == i then 1 else
                            if j < i then (output.at j . at i) else
                                Panic.throw_wrapped_if_error <|
                                    calculate_spearman_rank (data.at i) (data.at j)

            output.to_vector

    ## Assigns a rank to each value of data, dealing with equal values according to the method.

       Arguments:
       - data: Input data to rank.
       - method: Method used to deal with equal values.
    rank_data : Vector -> Rank_Method -> Vector
    rank_data input method=Rank_Method.Average =
        method.compute input

## PRIVATE
   Convert the Enso Statistic into Java equivalent.
to_moment_statistic : Statistic -> MomentStatistic
to_moment_statistic s = case s of
    Statistic.Sum -> Moments.SUM
    Statistic.Mean -> Moments.MEAN
    Statistic.Variance p -> if p then Moments.VARIANCE_POPULATION else Moments.VARIANCE
    Statistic.Standard_Deviation p -> if p then Moments.STANDARD_DEVIATION_POPULATION else Moments.STANDARD_DEVIATION
    Statistic.Skew p -> if p then Moments.SKEW_POPULATION else Moments.SKEW
    Statistic.Kurtosis -> Moments.KURTOSIS
    _ -> Nothing

## PRIVATE
wrap_java_call : Any -> Any
wrap_java_call ~function =
    report_unsupported _ = Error.throw (Illegal_Argument.Error ("Can only compute correlations on numerical data sets."))
    handle_unsupported = Panic.catch Unsupported_Argument_Types handler=report_unsupported

    handle_unsupported <| Illegal_Argument.handle_java_exception <| function

## PRIVATE
   Given two series, get a computed CorrelationStatistics object
calculate_correlation_statistics : Vector -> Vector -> CorrelationStatistics
calculate_correlation_statistics x_data y_data =
    wrap_java_call <| CorrelationStatistics.compute x_data.to_array y_data.to_array

## PRIVATE
   Given two series, get a compute the Spearman Rank correlation
calculate_spearman_rank : Vector -> Vector -> Decimal
calculate_spearman_rank x_data y_data =
    wrap_java_call <| CorrelationStatistics.spearmanRankCorrelation x_data.to_array y_data.to_array

## PRIVATE
   Given a set of series get CorrelationStatistics objects
calculate_correlation_statistics_matrix : Vector Vector -> Vector CorrelationStatistics
calculate_correlation_statistics_matrix data =
    data_array = Vector.new data.length i->(data.at i).to_array . to_array
    stats_array = wrap_java_call <| CorrelationStatistics.computeMatrix data_array
    Vector.new stats_array.length i->(Vector.from_polyglot_array (stats_array.at i))

## Compute a single statistic on the vector.

   Arguments:
   - statistic: Statistic to calculate.
Vector.compute : Statistic -> Any
Vector.compute self statistic=Statistic.Count =
    self.compute_bulk [statistic] . first

## Compute statistics on the vector.

   Arguments:
   - statistics: Set of statistics to calculate.
Vector.compute_bulk : Vector Statistic -> Vector Any
Vector.compute_bulk self statistics=[Statistic.Count, Statistic.Sum] =
    Statistic.compute_bulk self statistics

## Compute a single running statistic on the vector.

   Arguments:
   - statistic: Statistic to calculate.
Vector.running : Statistic -> Vector Any
Vector.running self statistic=Statistic.Count =
    Statistic.running self statistic

## PRIVATE
compute_fold counter current value =
    if is_valid value . not then current else
        counter.increment

        if counter.comparatorError.not then
            if counter.minimum.is_nothing then counter.setMinimum value else
                ordering = Ordering.compare value counter.minimum
                if ordering.is_error then counter.failComparator else
                    if ordering == Ordering.Less then counter.setMinimum value
            if counter.maximum.is_nothing then counter.setMaximum value else
                ordering = Ordering.compare value counter.maximum
                if ordering.is_error then counter.failComparator else
                    if ordering == Ordering.Greater then counter.setMaximum value

        if current.is_nothing then Nothing else case value of
            _ : Number -> current.add value
            _ -> Nothing

## PRIVATE
empty_value statistic = case statistic of
    Statistic.Count -> 0
    Statistic.Sum -> 0
    Statistic.Minimum -> Error.throw Empty_Error
    Statistic.Maximum -> Error.throw Empty_Error
    _ -> Number.nan

## PRIVATE
is_valid v = case v of
    Nothing -> False
    _ : Number -> v.is_nan.not
    _ -> True
