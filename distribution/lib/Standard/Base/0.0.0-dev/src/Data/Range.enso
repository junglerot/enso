from Standard.Base import all

## Represents a right-exclusive range of integer values.
type Range

    ## UNSTABLE
       A representation of a right-exclusive range of integer values.

       Arguments:
       - start: The left boundary of the range. Its value is included.
       - end: The right boundary of the range. Its value is excluded.
       - step: The step between consecutive elements of the range. It must be
         non-zero. Defaults to 1.
    type Range (start : Integer) (end : Integer) (step : Integer = 1)

    ## Creates a copy of this range with a changed step.

       > Example
         Create a range of even numbers from 0 to 10 (exclusive).

             0.up_to 10 . with_step 2 . to_vector == [0, 2, 4, 6, 8]

       > Example
         Create a a decreasing range of even numbers from 10 to 0 (exclusive).

             10.down_to 0 . with_step 2 . to_vector == [10, 8, 6, 4, 2]
    with_step : Integer -> Range
    with_step new_step = case new_step of
        Integer ->
            if new_step == 0 then here.throw_zero_step_error else
                if new_step < 0 then Error.throw (Illegal_Argument_Error "The step should be positive. A decreasing sequence will remain decreasing after updating it with positive step, as this operation only sets the magnitude without changing the sign.") else
                    Range this.start this.end this.step.signum*new_step
        _ ->
            Error.throw (Illegal_Argument_Error "Range step should be an integer.")

    ## Returns the last element that is included within the range or `Nothing`
       if the range is empty.
    last : Integer | Nothing
    last = if this.is_empty then Nothing else case this.step > 0 of
        True ->
            diff = this.end - this.start
            rem = diff % this.step
            if rem == 0 then this.end - this.step else this.end - rem
        False ->
            diff = this.start - this.end
            rem = diff % (-this.step)
            if rem == 0 then this.end - this.step else this.end + rem

    ## Get the number of elements in the range.

       > Example
         The following range has 100 elements.

            0.up_to 100 . length
    length : Number
    length = case this.last of
        Nothing -> 0
        last -> ((last - this.start) . div this.step) + 1

    ## Checks if this range is empty.

       > Example
         Checking if the range from 0 to 100 is empty.

             0.up_to 100 . is_empty
    is_empty : Boolean
    is_empty = if this.step > 0 then this.end <= this.start else
        if this.step < 0 then this.start <= this.end else
            here.throw_zero_step_error

    ## Checks if this range is not empty.

       > Example
         Checking if the range from 0 to 100 is not empty.

             0.up_to 100 . not_empty
    not_empty : Boolean
    not_empty = this.is_empty.not

    ## Applies a function to each element in the range, producing a vector of
       results.

       Arguments:
       - function: The function to apply to each integer in the range.

       > Example
         Create a vector that contains the numbers twice that of the numbers in
         the range.

             1.up_to 10 . map (*2)
    map : (Number -> Any) -> Vector Any
    map function =
        Vector.new this.length (i -> function (this.start + i*this.step))

    ## Returns a vector of all elements of this range which satisfy a predicate.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       > Example
         Selecting all elements that are greater than 3.

             (0.up_to 7).filter (> 3)
    filter : (Any -> Boolean) -> Vector Any
    filter predicate =
        builder = this.fold Vector.new_builder builder-> elem->
            if predicate elem then builder.append elem else builder
        builder.to_vector

    ## Applies a function for each element in the range.

       Arguments:
       - function: The function to apply to each integer in the range.

       > Example
         To print all the numbers from 1 to 10 use:
             1.up_to 11 . each IO.println
    each : (Number -> Any) -> Nothing
    each function =
        go end_condition current =
            if end_condition current this.end then Nothing else
                function current
                @Tail_Call go end_condition current+this.step
        if this.step > 0 then go (>=) this.start else
            if this.step < 0 then go (<=) this.start else
                here.throw_zero_step_error

    ## Combines all the elements of the range, by iteratively applying the
       passed function with next elements of the range.

       Arguments:
       - init: The initial integral value for the fold.
       - function: A binary function taking an item and a number, and returning
         an item.

       In general, the result of
           Range start end step . fold init f
       is the same as
           f (...(f (f init start) start+step)...) last

       > Example
         In the following example, we'll compute the sum of all even integers
         less than 100.

             0.up_to 100 . with_step 2 . fold 0 (+)
    fold : Any -> (Any -> Number -> Any) -> Any
    fold init function =
        go end_condition acc current =
            if end_condition current this.end then acc else
                new_acc = function acc current
                @Tail_Call go end_condition new_acc current+this.step
        if this.step > 0 then go (>=) init this.start else
            if this.step < 0 then go (<=) init this.start else
                here.throw_zero_step_error

    ## Checks whether `predicate` is satisfied for all numbers in this range.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       > Example
         Checking that all numbers in the range are greater than 5.

             10.up_to 100 . all (> 5)
    all : (Number -> Boolean) -> Boolean
    all predicate = this . exists (predicate >> .not) . not

    ## Checks whether `predicate` is satisfied for any number in this range.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       > Example
         Checking that at least one number in the range is greater than 10.

             1.up_to 100 . exists (> 10)
    exists : (Number -> Boolean) -> Boolean
    exists predicate = this.find predicate . is_nothing . not

    ## Checks whether `predicate` is satisfied for any number in this range.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       > Example
         Checking that at least one number in the range is greater than 10.

             1.up_to 100 . any (> 10)
    any : (Number -> Boolean) -> Boolean
    any predicate = this.exists predicate

    ## Gets the first index when `predicate` is satisfied this range.
       If no index satisfies the predicate, return Nothing

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       > Example
         Get the first number in the range divisible by 2, 3 and 5.

             1.up_to 100 . find i->(i%2==0 && i%3==0 && i%5==0)
    find : (Integer -> Boolean) -> Integer | Nothing
    find predicate =
        go end_condition current =
            if end_condition current this.end then Nothing else
                if predicate current then current else
                    @Tail_Call go end_condition current+this.step
        if this.step > 0 then go (>=) this.start else
            if this.step < 0 then go (<=) this.start else
                here.throw_zero_step_error

    ## Converts the range to a vector containing the numbers in the range.

       > Example
         Getting a vector of the numbers 1 to 5.

             1.up_to 6 . to_vector
    to_vector : Vector.Vector
    to_vector = this.map x->x

    ## Checks if the range contains the specified value.

       > Example
         Check if an index is in the range of a Vector

              vec = ["A", "B", "C", "D", "E"]
              0.up_to vec.length . contains 3
    contains : Integer -> Boolean
    contains value = case value of
        Integer ->
            if this.step > 0 then (value >= this.start) && (value < this.end) && (((value - this.start) % this.step) == 0) else
                if this.step < 0 then (value <= this.start) && (value > this.end) && (((this.start - value) % (-this.step)) == 0) else
                    here.throw_zero_step_error
        ## In the future this will be handled by type-checking, but for now we
           add this so that we avoid a confusing
           `Range 0 10 . contains 3.0 == False` and get a type error for
           decimals instead.
        _ ->
            Error.throw (Illegal_Argument_Error "`Range.contains` only accepts Integers.")

## ALIAS Range

   Creates an increasing right-exclusive range of integers from `this` to `n`.

   Arguments:
   - n: The end of the range.

   > Example
     Create a range containing the numbers 0, 1, 2, 3, 4.

         0.up_to 5
Integer.up_to : Integer -> Range
Integer.up_to n = case n of
    Integer -> Range this n
    _ -> Error.throw (Illegal_Argument_Error "Expected range end to be an Integer.")

## ALIAS Range

   Creates a decreasing right-exclusive range of integers from `this` to `n`.

   Arguments:
   - n: The end of the range.

   > Example
     Create a range containing the numbers 5, 4, 3, 2, 1.

         5.down_to 0
Integer.down_to : Integer -> Range
Integer.down_to n = case n of
    Integer -> Range this n -1
    _ -> Error.throw (Illegal_Argument_Error "Expected range end to be an Integer.")

## PRIVATE
throw_zero_step_error = Error.throw (Illegal_State_Error "A range with step = 0 is ill-formed.")
