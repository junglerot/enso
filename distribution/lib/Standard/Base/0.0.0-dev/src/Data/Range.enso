import project.Any.Any
import project.Data.Filter_Condition.Filter_Condition
import project.Data.Numbers.Integer
import project.Data.Pair.Pair
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Errors.Common.Index_Out_Of_Bounds
import project.Error.Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Function.Function
import project.Nothing.Nothing
import project.Errors.Illegal_State.Illegal_State

from project.Data.Boolean import Boolean, True, False
from project.Data.Filter_Condition import unify_condition_or_predicate

## Represents a right-exclusive range of integer values.
type Range
    ## PRIVATE
       ADVANCED
       Create a representation of a right-exclusive range of integer values.

       Arguments:
       - start: The left boundary of the range. Its value is included.
       - end: The right boundary of the range. Its value is excluded.
       - step: The step between values. Must be a positive value.
    new : Integer -> Integer -> Integer -> Range
    new start=0 end=100 step=1 =
        Range.Between start end (if start > end then -1 else 1) . with_step step

    ## PRIVATE
       A representation of a right-exclusive range of integer values.

       Arguments:
       - start: The left boundary of the range. Its value is included.
       - end: The right boundary of the range. Its value is excluded.
       - step: The step between consecutive elements of the range. It must be
         non-zero. Defaults to 1.
    Between (start : Integer) (end : Integer) (step : Integer = 1)

    ## Creates a copy of this range with a changed step.

       > Example
         Create a range of even numbers from 0 to 10 (exclusive).

             0.up_to 10 . with_step 2 . to_vector == [0, 2, 4, 6, 8]

       > Example
         Create a a decreasing range of even numbers from 10 to 0 (exclusive).

             10.down_to 0 . with_step 2 . to_vector == [10, 8, 6, 4, 2]
    with_step : Integer -> Range
    with_step self new_step = case new_step of
        _ : Integer ->
            if new_step == 0 then throw_zero_step_error else
                if new_step < 0 then Error.throw (Illegal_Argument.Error "The step should be positive. A decreasing sequence will remain decreasing after updating it with positive step, as this operation only sets the magnitude without changing the sign.") else
                    Range.Between self.start self.end self.step.signum*new_step
        _ ->
            Error.throw (Illegal_Argument.Error "Range step should be an integer.")

    ## Returns the first element that is included within the range.

       It will raise `Index_Out_Of_Bounds` if the range is empty.
    first : Integer ! Index_Out_Of_Bounds
    first self = if self.is_empty then Error.throw (Index_Out_Of_Bounds.Error 0 0) else self.start

    ## Returns the second element that is included within the range.

       It will raise `Index_Out_Of_Bounds` if the range has less than two elements.
    second : Integer ! Index_Out_Of_Bounds
    second self = if self.length < 2 then Error.throw (Index_Out_Of_Bounds.Error 1 self.length) else self.start + self.step

    ## Returns the last element that is included within the range.

       It will raise `Index_Out_Of_Bounds` if the range is empty.
    last : Integer ! Index_Out_Of_Bounds
    last self = if self.is_empty then Error.throw (Index_Out_Of_Bounds.Error 0 0) else
        self.start + self.step*(self.length - 1)

    ## Get the number of elements in the range.

       > Example
         The following range has 100 elements.

            0.up_to 100 . length
    length : Integer
    length self = if self.is_empty then 0 else
        diff = self.end - self.start
        steps = diff . div self.step
        exact_fit = (self.start + steps*self.step) == self.end
        ## The `end` is excluded if it is reached exactly by the last step.
           If it is not reached, that means that the last step is also included,
           so we increase by one.
        if exact_fit then steps else steps+1

    ## Gets an element from the Range at a specified index (0-based).

       Arguments:
       - index: The location in the Range to get the element from. The index is
         also allowed be negative, then the elements are indexed from the back,
         i.e. -1 will correspond to the last element.

       > Example
         Get the second element of a range.

             0.up_to 10 . get 1 == 1

       > Example
         Get the last element of a range with step.

            0.up_to 10 . with_step 2 . get -1 == 8
    at : Integer -> Any ! Index_Out_Of_Bounds
    at self index =
        self.get index (Error.throw (Index_Out_Of_Bounds.Error index self.length))

    ## Gets an element from the Range at a specified index (0-based).
       If the index is invalid then `if_missing` is returned.

       Arguments:
       - index: The location in the Range to get the element from. The index is
         also allowed be negative, then the elements are indexed from the back,
         i.e. -1 will correspond to the last element.
       - if_missing: The value to return if the index is out of bounds.
    get : Integer -> Any -> Any
    get self index ~if_missing=Nothing =
        len = self.length
        used_index = if index < 0 then len + index else index
        if used_index >= 0 && used_index < len then self.start + used_index * self.step else
            if_missing

    ## Checks if this range is empty.

       > Example
         Checking if the range from 0 to 100 is empty.

             0.up_to 100 . is_empty
    is_empty : Boolean
    is_empty self = if self.step > 0 then self.end <= self.start else
        if self.step < 0 then self.start <= self.end else
            throw_zero_step_error

    ## Checks if this range is not empty.

       > Example
         Checking if the range from 0 to 100 is not empty.

             0.up_to 100 . not_empty
    not_empty : Boolean
    not_empty self = self.is_empty.not

    ## Applies a function to each element in the range, producing a vector of
       results.

       Arguments:
       - function: The function to apply to each integer in the range.

       > Example
         Create a vector that contains the numbers twice that of the numbers in
         the range.

             1.up_to 10 . map (*2)
    map : (Integer -> Any) -> Vector Any
    map self function =
        Vector.new self.length (i -> function (self.start + i*self.step))

    ## Returns a vector of all elements of this range which satisfy a condition.

       Arguments:
       - filter: The filter to apply to the range. It can either be an instance
         of `Filter_Condition` or a predicate taking a value and returning a
         boolean value indicating whether the corresponding element should be
         kept or not.

       > Example
         Selecting all elements that are greater than 3.

             (0.up_to 7).filter (> 3)
             (0.up_to 7).filter (Filter_Condition.Greater than=3)
    @filter range_default_filter_condition_widget
    filter : (Filter_Condition | (Integer -> Boolean)) -> Vector Integer
    filter self filter = case filter of
        _ : Filter_Condition -> self.filter filter.to_predicate
        predicate : Function ->
            builder = self.fold Vector.new_builder builder-> elem->
                if predicate elem then builder.append elem else builder
            builder.to_vector

    ## Partitions the range into `Vector`s of elements which satisfy a given
       condition and ones that do not.

       Returns a `Pair` whose `first` element is the `Vector` of elements
       satisfying the predicate and the `second` element is a `Vector` of
       elements which did not satisfy it.

       The relative order of elements kept in each returned list is the same as
       in the input.

       Arguments:
       - condition: A `Filter_Condition` or a predicate function to test each
         element.

       > Example
         Splitting a range into even and odd elements.

             (0.up_to 4).partition (x-> x%2 == 0) == (Pair [0, 2] [1, 3])
    @condition range_default_filter_condition_widget
    partition : (Filter_Condition | (Integer -> Boolean)) -> Pair (Vector Integer) (Vector Integer)
    partition self condition =
        predicate = unify_condition_or_predicate condition
        pair = self.fold (Pair.new Vector.new_builder Vector.new_builder) acc-> elem->
            case predicate elem of
                True ->
                    Pair.new (acc.first.append elem) acc.second
                False ->
                    Pair.new acc.first (acc.second.append elem)
        pair.map .to_vector

    ## PRIVATE
       ADVANCED
       Applies a function for each element in the range.

       Arguments:
       - function: The function to apply to each integer in the range.

       > Example
         To print all the numbers from 1 to 10 use:
             1.up_to 11 . each IO.println
    each : (Integer -> Any) -> Nothing
    each self function =
        if self.step == 0 then throw_zero_step_error else
            end_condition = if self.step > 0 then (>=) else (<=)
            go current =
                if end_condition current self.end then Nothing else
                    function current
                    @Tail_Call go current+self.step
            go self.start

    ## PRIVATE
       ADVANCED

       Executes a function for each element in the range. Exits early if the body
       produces an `Error`.
    each_propagate : (Integer -> Nothing) -> Nothing ! Error
    each_propagate self function =
        if self.step == 0 then throw_zero_step_error else
            end_condition = if self.step > 0 then (>=) else (<=)
            go current =
                if end_condition current self.end then Nothing else
                    result = function current
                    result.if_not_error <|
                        @Tail_Call go current+self.step
            go self.start

    ## PRIVATE
       ADVANCED
       Applies a function to each element of the range.

       Essentially acts like `range.to_vector.each_with_index`, but it is more
       efficient.

       Arguments:
       - function: A function to apply that takes two parameters: first the
         index of a given range element and then the actual range element.

       > Example
         Print range elements with their indices within the range.

             (10.up_to 13).each_with_index ix-> elem-> IO.println (Pair ix elem) # Will print Pair 0 10, Pair 1 11, Pair 2 12
    each_with_index : (Integer -> Integer -> Nothing) -> Nothing
    each_with_index self function =
        if self.step == 0 then throw_zero_step_error else
            end_condition = if self.step > 0 then (>=) else (<=)
            go ix current =
                if end_condition current self.end then Nothing else
                    function ix current
                    @Tail_Call go ix+1 current+self.step
            go 0 self.start

    ## Combines all the elements of the range, by iteratively applying the
       passed function with next elements of the range.

       Arguments:
       - init: The initial value for the fold.
       - function: A binary function taking an item and a number, and returning
         an item.

       In general, the result of
           Range start end step . fold init f
       is the same as
           f (...(f (f init start) start+step)...) last

       > Example
         In the following example, we'll compute the sum of all even integers
         less than 100.

             0.up_to 100 . with_step 2 . fold 0 (+)
    fold : Any -> (Any -> Integer -> Any) -> Any
    fold self init function =
        if self.step == 0 then throw_zero_step_error else
            end_condition = if self.step > 0 then (>=) else (<=)
            go acc current =
                if end_condition current self.end then acc else
                    new_acc = function acc current
                    @Tail_Call go new_acc current+self.step
            go init self.start

    ## Combines all the elements of the range, by iteratively applying the
       passed function with the next element of the range. After each step the
       value is stored resulting in a new Vector of the same size as self.

       Arguments:
       - init: The initial value for the fold.
       - function: A function taking two elements and combining them.

       > Example
         Compute the running sum of all of the elements in a range.

            (0.up_to 4).running_fold 0 (+)
    running_fold : Any -> (Any -> Any -> Any) -> Vector Any
    running_fold self init function =
        wrapped builder value =
            current = if builder.length == 0 then init else builder.last
            builder.append (function current value)
        built = self.fold (Vector.new_builder self.length) wrapped
        built.to_vector

    ## Checks whether a condition is satisfied for all numbers in this range.

       Arguments:
       - condition: A `Filter_Condition` or a predicate function to test each
         element.

       > Example
         Checking that all numbers in the range are greater than 5.

             10.up_to 100 . all (Filter_Condition.Greater than=5)

       > Example
         Checking that all numbers in the range are even.

             10.up_to 100 . with_step 2 . all (x-> x%2 == 0)
    @condition range_default_filter_condition_widget
    all : (Filter_Condition | (Integer -> Boolean)) -> Boolean
    all self condition =
        predicate = unify_condition_or_predicate condition
        self.any (predicate >> .not) . not

    ## Checks whether a condition is satisfied for any number in this range.

       Arguments:
       - condition: A `Filter_Condition` or a predicate function to test each
         element.

       > Example
         Checking that at least one number in the range is greater than 10.

             1.up_to 100 . any (Filter_Condition.Greater than=10)

       > Example
         Checking that at least one number in the range is even.

             1.up_to 100 . any (x-> x%2 == 0)
    @condition range_default_filter_condition_widget
    any : (Filter_Condition | (Integer -> Boolean)) -> Boolean
    any self condition = self.find condition . is_nothing . not

    ## Gets the first element of this range that satisfies a condition.
       If no element satisfies the condition, returns `if_missing`.

       Arguments:
       - condition: A `Filter_Condition` or a predicate function to test each
         element.
       - start: The index to start searching from. If the index is negative, it
         is counted from the end of the range.
       - if_missing: Value returned if no element satisfies the predicate.

       > Example
         Get the first number in the range divisible by 2, 3 and 5.

             1.up_to 100 . find i->(i%2==0 && i%3==0 && i%5==0)

       > Example
         Get the first number in the range that is greater than 10.

             1.up_to 100 . find (Filter_Condition.Greater than=10)
    @condition range_default_filter_condition_widget
    find : (Filter_Condition | (Integer -> Boolean)) -> Integer -> Any -> Any
    find self condition start=0 ~if_missing=Nothing =
        predicate = unify_condition_or_predicate condition
        check_start_valid start self used_start->
            result = find_internal self used_start predicate
            if result.is_nothing then if_missing else result.first

    ## Checks if the range contains the specified value.

       > Example
         Check if an index is in the range of a Vector

              vec = ["A", "B", "C", "D", "E"]
              0.up_to vec.length . contains 3
    contains : Integer -> Boolean
    contains self value = case value of
        _ : Integer ->
            if self.step > 0 then (value >= self.start) && (value < self.end) && (((value - self.start) % self.step) == 0) else
                if self.step < 0 then (value <= self.start) && (value > self.end) && (((self.start - value) % (-self.step)) == 0) else
                    throw_zero_step_error
        ## In the future this will be handled by type-checking, but for now we
           add this so that we avoid a confusing
           `Range 0 10 . contains 3.0 == False` and get a type error for
           decimals instead.
        _ -> Error.throw (Illegal_Argument.Error "`Range.contains` only accepts Integers.")

    ## Returns the index of an element in the range.
       Returns Nothing if the element is not found.

       Arguments:
       - condition: Either the element to search for, a `Filter_Condition` or a
         predicate function to test each element.
       - start: The index to start searching from. If the index is negative, it
         is counted from the end of the range.

       > Example
         Find the index of an element in a range.

             0.up_to 100 . index_of 20 == 20
             0.up_to 100 . with_step 5 . index_of 20 == 4
             0.up_to 100 . with_step 5 . index_of (>10) == 3
    @condition range_default_filter_condition_widget
    index_of : (Integer | Filter_Condition | (Integer -> Boolean)) -> Integer -> Integer | Nothing
    index_of self condition start=0 =
        check_start_valid start self used_start->
            case condition of
                element : Integer -> get_index self used_start self.length-1 element
                f : Function ->
                    result = find_internal self used_start f
                    if result.is_nothing then Nothing else result.second
                fc : Filter_Condition ->
                    self.index_of fc.to_predicate start
                _ -> Error.throw (Illegal_Argument.Error "`Range.index_of` only accepts Integer, Filter_Condition or a predicate.")

    ## Returns the last index of an element in the range.
       Returns Nothing if the element is not found.

       Arguments:
       - condition: Either the element to search for, a `Filter_Condition` or a
         predicate function to test each element.
       - start: The index to start searching backwards from. If the index is
         negative, it is counted from the end of the range.

       > Example
         Find the last index of an element in a pair.

             Pair.new 2 2 . last_index_of 2 == 1
    @condition range_default_filter_condition_widget
    last_index_of : (Integer | Filter_Condition | (Integer -> Boolean)) -> Integer -> Integer | Nothing
    last_index_of self condition start=-1 =
        if self.is_empty && (start==-1 || start==0) then Nothing else
            check_start_valid start self include_end=False used_start->
                case condition of
                    element : Integer -> get_index self 0 used_start element
                    f : Function ->
                        start_value = self.start + used_start*self.step
                        go current idx =
                            if f current then idx else
                                if current == self.start then Nothing else
                                    @Tail_Call go current-self.step idx-1
                        go start_value used_start
                    fc : Filter_Condition ->
                        self.last_index_of fc.to_predicate start
                    _ -> Error.throw (Illegal_Argument.Error "`Range.last_index_of` only accepts Integer, Filter_Condition or a predicate.")

    ## Reverses the range, returning a range with the same elements, but in
       the opposite order.

       > Example
         Reverse a step 5 from 0 to 23

             Range.new 0 23 . with_step 5 . reverse
    reverse : Range
    reverse self =
        if self.step == 0 then throw_zero_step_error else
            Range.Between self.last (self.first-self.step) (-self.step)

    ## Converts the range to a vector containing the numbers in the range.

       > Example
         Getting a vector of the numbers 1 to 5.

             1.up_to 6 . to_vector
    to_vector : Vector Integer
    to_vector self = self.map x->x

    ## Combines all the elements of a non-empty range using a binary operation.
       If the range is empty, returns `if_empty`.

       Arguments:
       - function: A binary operation that takes two integers and combines them.
       - if_empty: Value returned if the range is empty.

       > Example
         Compute the sum of all the elements in a range.

             0.up_to 10 . reduce (+)
    reduce : (Integer -> Integer -> Integer) -> Any -> Any
    reduce self function ~if_empty=(Error.throw Empty_Error) =
        len = self.length
        case len of
            0 -> if_empty
            1 -> self.start
            _ ->
                end_condition = if self.step > 0 then (>=self.end) else (<=self.end)
                fold_function current value =
                    if end_condition value then current else
                        @Tail_Call fold_function (function current value) (value + self.step)
                fold_function self.start self.start+self.step

    ## PRIVATE
       Convert to a display representation of this Range.
    to_display_text : Text
    to_display_text self =
        start = "[" + self.start.to_display_text + " .. " + self.end.to_display_text
        step = if self.step.abs == 1 then "" else " by " + self.step.to_display_text
        start + step + "]"

## PRIVATE
throw_zero_step_error = Error.throw (Illegal_State.Error "A range with step = 0 is ill-formed.")

## PRIVATE
   Check inputs are valid for a range
check_start_valid start range function include_end=True =
    if range.step == 0 then throw_zero_step_error else
        self_len = range.length
        used_start = if start < 0 then start + self_len else start
        max = if include_end then self_len+1 else self_len
        if used_start < 0 || used_start >= max then Error.throw (Index_Out_Of_Bounds.Error start max) else
            function used_start

## PRIVATE
   Find value and index for a predicate
find_internal range start predicate =
    end_condition = if range.step > 0 then (>=) else (<=)
    start_value = range.start + start*range.step
    go current idx =
        if end_condition current range.end then Nothing else
            if predicate current then [current, idx] else
                @Tail_Call go current+range.step idx+1
    go start_value start

## PRIVATE
   Work out the index of a value in a range
get_index range min max value =
    diff = value - range.start
    if diff % range.step != 0 then Nothing else
        index = (diff / range.step).floor
        if index < min || index > max then Nothing else
            index

## An error representing that the list is empty.
type Empty_Error
    ## PRIVATE

       Pretty prints the empty error.
    to_display_text : Text
    to_display_text self = "The Range is empty."

## PRIVATE
range_default_filter_condition_widget =
    Filter_Condition.default_widget include_text=False include_boolean=False include_nullable=False
