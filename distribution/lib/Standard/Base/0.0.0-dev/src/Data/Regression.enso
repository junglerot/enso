import project.Any.Any
import project.Data.Numbers.Number
import project.Data.Statistics.Statistic
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Nothing.Nothing
import project.Panic.Panic

polyglot java import org.enso.base.statistics.Regression
polyglot java import org.enso.base.statistics.FitError

type Model
    ## Fit a line (y = A x + B) to the data with an optional fixed intercept.
    Linear (intercept:Number|Nothing=Nothing)

    ## Fit a exponential line (y = A exp(B x)) to the data with an optional fixed intercept.
    Exponential (intercept:Number|Nothing=Nothing)

    ## Fit a logarithmic line (y = A log x + B) to the data.
    Logarithmic

    ## Fit a power series (y = A x ^ B) to the data.
    Power

    ## PRIVATE
       Convert to a display representation of this Model.
    to_display_text : Text
    to_display_text self = case self of
        Model.Linear intercept ->
            if intercept.is_nothing then "Linear" else "Linear(intercept: " + intercept.to_display_text + ")"
        Model.Exponential intercept ->
            if intercept.is_nothing then "Exponential" else "Exponential(intercept: " + intercept.to_display_text + ")"
        Model.Logarithmic -> "Logarithmic"
        Model.Power -> "Power"

    ## PRIVATE
       Computes the R Squared value for a model and returns a new instance.
    fitted_model_with_r_squared : Any -> Number -> Number -> Vector -> Vector -> Fitted_Model
    fitted_model_with_r_squared constructor a b known_xs known_ys =
        model = constructor a b
        r_squared = Statistic.compute known_ys (Statistic.R_Squared (known_xs.map model.predict))
        constructor a b r_squared

    ## PRIVATE
       Computes the natural log series as long as all values are positive.
    ln_series : Vector -> Text -> Vector ! Illegal_Argument
    ln_series xs series_name="Values" =
        ln_with_panic x = if x.is_nothing then Nothing else
            if x <= 0 then Panic.throw (Illegal_Argument.Error (series_name + " must be positive.")) else x.ln
        Panic.recover Illegal_Argument <| xs.map ln_with_panic

## Use Least Squares to fit a line to the data.
fit_least_squares : Vector -> Vector -> Model -> Fitted_Model ! Illegal_Argument | Fit_Error
fit_least_squares known_xs known_ys model=Model.Linear =
    Illegal_Argument.handle_java_exception <| Fit_Error.handle_java_exception <| case model of
        Model.Linear intercept ->
            fitted = if intercept.is_nothing then Regression.fit_linear known_xs.to_array known_ys.to_array else
                Regression.fit_linear known_xs.to_array known_ys.to_array intercept
            Fitted_Model.Linear fitted.slope fitted.intercept fitted.rSquared
        Model.Exponential intercept ->
            log_ys = Model.ln_series known_ys "Y-values"
            fitted = if intercept.is_nothing then Regression.fit_linear known_xs.to_array log_ys.to_array else
                Regression.fit_linear known_xs.to_array log_ys.to_array intercept.ln
            Model.fitted_model_with_r_squared Fitted_Model.Exponential fitted.intercept.exp fitted.slope known_xs known_ys
        Model.Logarithmic ->
            log_xs = Model.ln_series known_xs "X-values"
            fitted = Regression.fit_linear log_xs.to_array known_ys.to_array
            Model.fitted_model_with_r_squared Fitted_Model.Logarithmic fitted.slope fitted.intercept known_xs known_ys
        Model.Power ->
            log_xs = Model.ln_series known_xs "X-values"
            log_ys = Model.ln_series known_ys "Y-values"
            fitted = Regression.fit_linear log_xs.to_array log_ys.to_array
            Model.fitted_model_with_r_squared Fitted_Model.Power fitted.intercept.exp fitted.slope known_xs known_ys
        _ -> Error.throw (Illegal_Argument.Error "Unsupported model.")

type Fitted_Model
    ## Fitted line (y = slope x + intercept).
    Linear slope:Number intercept:Number r_squared:Number=0.0

    ## Fitted exponential line (y = a exp(b x)).
    Exponential a:Number b:Number r_squared:Number=0.0

    ## Fitted logarithmic line (y = a log x + b).
    Logarithmic a:Number b:Number r_squared:Number=0.0

    ## Fitted power series (y = a x ^ b).
    Power a:Number b:Number r_squared:Number=0.0

    ## PRIVATE
       Display the fitted line.
    to_text : Text
    to_text self =
        "Fitted_Model(" + self.to_display_text + ")"

    ## PRIVATE
       Convert to a display representation of this Fitted_Model.
    to_display_text : Text
    to_display_text self = case self of
        Fitted_Model.Linear slope intercept _ -> slope.to_text + " * X + " + intercept.to_text
        Fitted_Model.Exponential a b _ -> a.to_text + " * (" + b.to_text + " * X).exp"
        Fitted_Model.Logarithmic a b _ -> a.to_text + " * X.ln + " + b.to_text
        Fitted_Model.Power a b _ -> a.to_text + " * X ^ " + b.to_text

    ## Use the model to predict a value.
    predict : Number -> Number
    predict self x = case self of
        Fitted_Model.Linear slope intercept _ -> slope * x + intercept
        Fitted_Model.Exponential a b _ -> a * (b * x).exp
        Fitted_Model.Logarithmic a b _ -> a * x.ln + b
        Fitted_Model.Power a b _ -> a * (x ^ b)
        _ -> Error.throw (Illegal_Argument.Error "Unsupported model.")

## PRIVATE

   An error thrown when the linear regression cannot be computed.

   Arguments:
   - message: The error message.
type Fit_Error
    Error message

    ## PRIVATE
       Converts the `Fit_Error` to a human-readable representation.
    to_display_text : Text
    to_display_text self = "Could not fit the model: " + self.message.to_text

    ## PRIVATE
    handle_java_exception =
        Panic.catch FitError handler=(cause-> Error.throw (Fit_Error.Error cause.payload.getMessage))
