from Standard.Base import all
import Standard.Base.Data.Index_Sub_Range
import Standard.Base.Random
import Standard.Base.Runtime.Unsafe

polyglot java import java.lang.IndexOutOfBoundsException
polyglot java import org.enso.base.Array_Builder

## Creates a new vector of the given length, initializing elements using
   the provided constructor function.

   Arguments:
   - length: The length of the vector (>= 0).
   - constructor: A function taking the index in the vector and returning an
     item for that index in the vector.

   A vector allows to store an arbitrary number of elements in linear memory. It
   is the recommended data structure for most applications.

   > Example
     Create a vector containing the numbers 1 through 50.
         Vector.new 50 (ix -> ix + 1)

   > Example
     Create a copy of the given vector (`my_vec`).

         Vector.new my_vec.length (ix -> my_vec.at ix)
new : Number -> (Number -> Any) -> Vector Any
new length constructor = @Builtin_Method "Vector.new_builtin"

## ADVANCED

   Converts an array into a vector by copying content of the array.

   Arguments:
   - array: The array with content to copy into the new vector.

   A vector allows to store an arbitrary number of elements in linear memory. It
   is the recommended data structure for most applications.
from_array : Array -> Vector
from_array array = @Builtin_Method "Vector.from_array"

## Creates a new vector of the given length, filling the elements with
   the provided constant.

   Arguments:
   - length: The length of the vector (>= 0).
   - constructor: A value fo be placed into each element of the vector.

   A vector allows to store an arbitrary number of elements in linear memory. It
   is the recommended data structure for most applications.

   > Example
     Create a vector containing 50 elements, each being the number `42`.

         Vector.fill length=50 item=42
fill : Number -> Any -> Vector Any
fill length ~item =
    builder = (0.up_to length).fold (new_builder length) builder-> _->
        builder.append item
    builder.to_vector

## Creates a new vector builder instance.

   A vector builder is a mutable data structure, that allows for gathering
   a number of elements and then converting them into a vector. This is
   particularly useful when the number of elements is not known upfront.

   A vector allows to store an arbitrary number of elements in linear memory. It
   is the recommended data structure for most applications.

   Arguments:
   - capacity: Initial capacity of the Vector.Builder

   > Example
     Construct a vector using a builder that contains the items 1 to 5.

         example_new_builder =
              builder = Vector.new_builder 5
              do_build start stop =
                  builder.append start
                  if start >= stop then Nothing else
                      @Tail_Call do_build start+1 stop
              do_build 1 5
              builder.to_vector
new_builder : Integer -> Builder
new_builder (capacity=10) = Builder.new capacity

## ADVANCED

   Converts a polyglot value representing an array into a vector.

   Arguments:
   - arr: The polyglot array value to wrap into a vector.

   This is useful when wrapping polyglot APIs for further use in Enso.

   A vector allows to store an arbitrary number of elements in linear memory. It
   is the recommended data structure for most applications.
from_polyglot_array : Any -> Vector Any
from_polyglot_array array = @Builtin_Method "Vector.from_polyglot_array"

##  The basic, immutable, vector type.
    A vector allows to store an arbitrary number of elements, in linear memory.
    It is the recommended data structure for most applications.

    > Example
      A vector containing the elements `1`, `2`, and `3`, in this order is:
          [1, 2, 3]

    > Example
      A vector containing 50 elements, each being the number `42`, can be
      created by:
          Vector.fill length=50 item=42

@Builtin_Type
type Vector a

    ## ADVANCED
       Copies content of a vector into an Array.
    to_array self = @Builtin_Method "Vector.to_array"

    ## Returns the number of elements stored in this vector.

       > Example
         Checking the length of a vector.

             [1, 2, 3, 4].length
    length : Number
    length self = @Builtin_Method "Vector.length"

    ## Gets an element from the vector at a specified index (0-based).

       Arguments:
       - index: The location in the vector to get the element from. The index is
         also allowed be negative, then the elements are indexed from the back
         of the vector, i.e. -1 will correspond to the last element.

       > Example
         Get the second element of a vector.

             [1, 2, 3].at 1 == 2

       > Example
         Get the last element of a vector.

             [1, 2, 3].at -1 == 3
    at : Integer -> Any ! Index_Out_Of_Bounds_Error
    at self index =
        actual_index = if index < 0 then self.length + index else index
        Panic.catch Invalid_Array_Index_Error_Data (self.unsafe_at actual_index) _->
            Error.throw (Index_Out_Of_Bounds_Error_Data index self.length)

    ## ADVANCED
       UNSTABLE

       An unsafe variant of the `at` operation. It only allows non-negative
       indices and will panic with a raw Java exception on out-of-bounds access.
       Thus it should only be used when the access is guaranteed to be within
       bounds or with additional error handling.
    unsafe_at : Integer -> Any
    unsafe_at self index = @Builtin_Method "Vector.unsafe_at"

    ## Combines all the elements of the vector, by iteratively applying the
       passed function with next elements of the vector.

       Arguments:
       - init: The initial value for the fold.
       - function: A function taking two elements and combining them.

       In general, the result of
           [l0, l1, ..., ln] . fold init f
       is the same as
           f (...(f (f init l0) l1)...) ln

       > Example
         Compute the sum of all of the elements in a vector.

             [0, 1, 2] . fold 0 (+)
    fold : Any -> (Any -> Any -> Any) -> Any
    fold self init function =
        f = acc -> ix -> function acc (self.unsafe_at ix)
        0.up_to self.length . fold init f

    ## Combines all the elements of the vector, by iteratively applying the
       passed function with next elements of the vector.

       Arguments:
       - init: The initial value for the fold.
       - function: A function taking the current value, an index and an item
         and combining them.

       > Example
         Compute the sum of all of the elements and indexes in a vector.

             [0, 1, 2] . fold_with_index 0 (s->i->e->s+i+e)
    fold_with_index : Any -> (Any -> Integer -> Any -> Any) -> Any
    fold_with_index self init function =
        f = acc -> ix -> function acc ix (self.at ix)
        0.up_to self.length . fold init f

    ## Combines all the elements of a non-empty vector using a binary operation.

       Arguments:
       - function: A binary operation that takes two items and combines them.

       If the vector is empty, it throws an `Empty_Error`.

       > Example
         Compute the sum of all the elements in a vector.

             [0, 1, 2] . reduce (+)
    reduce : (Any -> Any -> Any) -> Any ! Empty_Error
    reduce self function =
        case self.not_empty of
            True -> if self.length == 1 then self.unsafe_at 0 else
                f = acc -> ix -> function acc (self.at ix)
                1.up_to self.length . fold (self.unsafe_at 0) f
            False -> Error.throw Empty_Error

    ## Computes the sum of the values in the vector.

       For this method to be defined, the elements of the vector must be able to
       have the `+` operator used to combine them.

       > Example
         Compute the sum of all fo the elements in a vector.

             [0, 1, 2].sum
    sum : Any ! (Empty_Error | No_Such_Method_Error)
    sum self =
        result = Panic.recover Any <| self.reduce (+)
        result.map_error x->case x of
            No_Such_Method_Error_Data _ _ -> x
            Empty_Error -> x
            _ -> Panic.throw x

    ## Checks whether a predicate holds for at least one element of this vector.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       > Example
         Check if any element of the list is larger than 3.

             [1, 2, 3, 4, 5].exists (> 3)
    exists : (Any -> Boolean) -> Boolean
    exists self predicate =
        0.up_to self.length . exists (idx -> (predicate (self.unsafe_at idx)))

    ## Returns the first element of the vector that satisfies the predicate or
       if no elements of the vector satisfy the predicate, it throws nothing.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       > Example
         Finding a first element of the list that is larger than 3.

             [1, 2, 3, 4, 5].find (> 3)
    find : (Any -> Boolean) -> Any ! Nothing
    find self predicate =
        len = self.length
        go idx =
            if (idx >= len) then Error.throw Nothing else
                elem = self.unsafe_at idx
                if predicate elem then elem else
                    @Tail_Call go idx+1
        go 0

    ## Checks whether a predicate holds for at least one element of self vector.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       > Example
         Checking if any element of the list is larger than 3.

             [1, 2, 3, 4, 5].any (> 3)
    any : (Any -> Boolean) -> Boolean
    any self predicate = self.exists predicate

    ## Checks whether a predicate holds for all elements in this vector.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       > Example
         Check if all elements in the vector are less than zero.

             [-1, 1, 5, 8].all (< 0)
    all : (Any -> Boolean) -> Boolean
    all self predicate = self . exists (predicate >> .not) . not

    ## Checks whether this vector contains a given value as an element.

       Arguments:
       - elem: The item to see if it exists in the vector.

       > Example
         Checking if the vector contains the number 72.

             [1, 383, 72, 301].contains 72
    contains : Any -> Boolean
    contains self elem = self.exists ix-> ix == elem

    ## Checks if this vector is empty.

       > Example
         Checking for emptiness.

             [].is_empty
    is_empty : Boolean
    is_empty self = self.length == 0

    ## Checks if this vector is not empty.

       > Example
         Checking for non-emptiness.

             [1].not_empty
    not_empty : Boolean
    not_empty self = self.is_empty.not

    ## Selects all elements of this vector which satisfy a predicate.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       > Example
         Selecting all elements that are greater than 3.

             [1, 2, 3, 4, 5].filter (> 3)
    filter : (Any -> Boolean) -> Vector Any
    filter self predicate =
        builder = self.fold new_builder builder-> elem->
            if predicate elem then builder.append elem else builder
        builder.to_vector

    ## Selects all elements of this vector which satisfy a predicate.

       Arguments:
       - predicate: A function that takes an index and a list element and
         returns a boolean value that says whether that value should be included
         in the result.

       > Example
         Selecting all elements which are equal to their position in the vector.

             [0, 10, 2, 2].filter (==) == [0, 2]
    filter_with_index : (Integer -> Any -> Boolean) -> Vector Any
    filter_with_index self predicate =
        builder = self.fold_with_index new_builder builder-> ix-> elem->
            if predicate ix elem then builder.append elem else builder
        builder.to_vector

    ## Partitions the vector into vectors of elements which satisfy a given
       predicate and ones that do not.

       Returns a `Pair` whose `first` element is the vector of elements
       satisfying the predicate and the `second` element is a vector of elements
       which did not satisfy it.

       The relative order of elements kept in each returned list is the same as
       in the input vector.

       Arguments:
       - predicate: A function that takes an element and returns a boolean
         value.

       > Example
         Splitting a vector into even and odd elements.

             [1, 2, 3, 4, 5].partition (x -> x % 2 == 0) == (Pair [2, 4] [1, 3, 5])
    partition : (Any -> Boolean) -> Pair (Vector Any) (Vector Any)
    partition self predicate =
        pair = self.fold (Pair_Data new_builder new_builder) acc-> elem->
            case predicate elem of
                True ->
                    Pair_Data (acc.first.append elem) acc.second
                False ->
                    Pair_Data acc.first (acc.second.append elem)
        pair.map .to_vector

    ## Partitions the vector into vectors of elements which satisfy a given
       predicate and ones that do not.

       Returns a `Pair` whose `first` element is the vector of elements
       satisfying the predicate and the `second` element is a vector of elements
       which did not satisfy it.

       The relative order of elements kept in each returned list is the same as
       in the input vector.

       Arguments:
       - predicate: A function that takes an index and an element and returns a
         boolean value.

       > Example
         Splitting a vector into elements at even and odd positions.

             ["a", "b", "c", "d"].partition_with_index (ix -> _ -> ix % 2 == 0) == (Pair ["a", "c"] ["b", "d"])
    partition_with_index : (Integer -> Any -> Boolean) -> Pair (Vector Any) (Vector Any)
    partition_with_index self predicate =
        pair = self.fold_with_index (Pair_Data new_builder new_builder) acc-> ix-> elem->
            case predicate ix elem of
                True -> Pair_Data (acc.first.append elem) acc.second
                False -> Pair_Data acc.first (acc.second.append elem)
        pair.map .to_vector

    ## Applies a function to each element of the vector, returning the vector of
       results.

       Arguments:
       - function: A function that takes an element in the vector and returns
         some transformation of that element.

       > Example
         Add 1 to each element of the vector.

             [1, 2, 3] . map +1
    map : (Any -> Any) -> Vector Any
    map self function =
        new self.length i-> function (self.unsafe_at i)

    ## Applies a function to each element of the vector, returning the vector
       that contains all results concatenated.

       Arguments:
       - function: A function that takes an element in the vector, transforms
         it, and returns a vector.

       > Example
         Replace each number `n` in the vector with itself repeated n times.

            [0, 1, 2] . flat_map (n -> Vector.fill n n)
    flat_map : (Any -> Vector Any) -> Vector Any
    flat_map self function =
        self.map function . flatten

    ## Transforms a vector of vectors into a vector of inner elements - removes
       one layer of nesting from a stack of nested vectors.

       > Example
         Flatten a vector of vectors of numbers.

            [[1, 2, 3], [4, 10], [], [0], [0]] . flatten == [1, 2, 3, 4, 10, 0, 0]
    flatten : Vector Any
    flatten self =
        length = self.fold 0 acc-> elem-> acc + elem.length
        arr = Array.new length
        self.fold 0 i-> vec->
            Array.copy vec.to_array 0 arr i vec.length
            i + vec.length
        Vector.from_polyglot_array arr

    ## Applies a function to each element of the vector, returning the vector
       of results.

       Arguments:
       - function: A function that takes an index and an item and calculates a
         new value for at that index.

       The function is called with both the element index as well as the
       element itself.

       > Example
         Sum numbers with their indices in a vector.

             [1, 2, 3].map_with_index (+)
    map_with_index : (Integer -> Any -> Any) -> Vector Any
    map_with_index self function = new self.length i-> function i (self.unsafe_at i)

    ## Applies a function to each element of the vector.

       Arguments:
       - function: A function to apply to each element of the vector.

       Unlike `map`, this method does not return the individual results,
       therefore it is only useful for side-effecting computations.

       > Example
         Print each element in the vector to standard output.

             [1, 2, 3, 4, 5] . each IO.println
    each : (Any -> Any) -> Nothing
    each self f =
        0.up_to self.length . each ix->
            f (self.unsafe_at ix)

    ## Applies a function to each element of the vector.

       Arguments:
       - function: A function to apply that takes an index and an item.

       The function is called with both the element index as well as the
       element itself.

       Unlike `map`, this method does not return the individual results,
       therefore it is only useful for side-effecting computations.

       > Example
         Print each element in the vector to standard output.

             [1, 2, 3, 4, 5] . each_with_index (ix->elem-> IO.println Pair ix elem)
    each_with_index : (Integer -> Any -> Any) -> Nothing
    each_with_index self f =
        0.up_to self.length . each ix->
            f ix (self.unsafe_at ix)

    ## Reverses the vector, returning a vector with the same elements, but in
       the opposite order.

       > Example
         Reverse a two-element vector.

             [1, 2].reverse
    reverse : Vector Any
    reverse self = new self.length (i -> self.unsafe_at (self.length - (1 + i)))

    ## Generates a human-readable text representation of the vector.

       > Example
         Convert a vector of numbers to text.

             [1, 2, 3].to_text == "[1, 2, 3]"
    to_text : Text
    to_text self = self.map .to_text . join ", " "[" "]"

    ## UNSTABLE
       Generates a human-readable text representation of the vector, keeping its
       length limited.

       Arguments:
       - max_entries: The maximum number of entries that are displayed. If the
         vector contains more elements, the number of hidden elements is also
         displayed.

       > Example
         Convert a large vector of numbers to a short text.

             (0.up_to 100).to_vector.short_display_text max_entries=2 == "[0, 1 and 98 more elements]"
    short_display_text : Integer -> Text
    short_display_text self max_entries=10 =
        if max_entries < 1 then Error.throw <| Illegal_Argument_Error_Data "The `max_entries` parameter must be positive." else
            prefix = self.take (First max_entries)
            if prefix.length == self.length then self.to_text else
                remaining_count = self.length - prefix.length
                remaining_text = if remaining_count == 1 then "and 1 more element" else
                    "and " + remaining_count.to_text + " more elements"
                prefix.map .to_text . join ", " "[" " "+remaining_text+"]"

    ## Checks whether this vector is equal to `that`.

       Arguments:
       - that: The vector to compare this vector against.

       Two vectors are considered equal, when they have the same length and
       their items are pairwise equal.

       > Example
         Compare two vectors for equality (this case is false).

             [1, 2, 3] == [2, 3, 4]
    == : Vector -> Boolean
    == self that = case that of
        Vector ->
            eq_at i = self.unsafe_at i == that.unsafe_at i
            if self.length == that.length then 0.up_to self.length . all eq_at else False
        Array ->
            eq_at i = self.at i == that.at i
            if self.length == that.length then 0.up_to self.length . all eq_at else False
        _ -> False

    ## Concatenates two vectors, resulting in a new vector, containing all the
       elements of `self`, followed by all the elements of `that`.

       Arguments:
       - that: The vector to concatenate to the end of `self`.

       > Example
         Concatenate two single-element vectors.

             [1] + [2]
    + : Vector Any -> Vector Any
    + self that =
        self_len = self.length
        arr = Array.new (self_len + that.length)
        Array.copy self.to_array 0 arr 0 self_len
        Array.copy that.to_array 0 arr self_len that.length
        Vector.from_polyglot_array arr

    ## Add `element` to the beginning of `self` vector.

       Arguments:
       - `element`: An element to add to this vector.

       > Example
         Add 1 to the start of the vector.

             [2, 3].prepend 1
    prepend : Any -> Vector Any
    prepend self element = [element] + self

    ## Add `element` to the end of `self` vector.

       Arguments:
       - `element`: An element to add to this vector.

       > Example
         Add 3 to the end of the vector.

             [1, 2].append 3
    append : Any -> Vector Any
    append self element = self + [element]

    ## When `self` is a vector of text values, concatenates all the values by
       interspersing them with `separator`.

       Arguments:
       - separator (optional): The text to use to join the textual elements of the vector.
       - prefix (optional): The prefix to add at the beginning.
       - suffix (optional): The suffix to add at the end.

       > Example
         Join the elements of the vector together as a string.

             ["foo", "bar", "baz"].join ", "
    join : Text -> Text -> Text -> Text
    join self separator="" prefix="" suffix="" =
        if self.is_empty then prefix+suffix else
            if self.length == 1 then prefix + self.unsafe_at 0 + suffix else
                prefix + self.unsafe_at 0 + (1.up_to self.length . fold "" acc-> i-> acc + separator + self.unsafe_at i) + suffix

    ## PRIVATE
       Creates a new vector with the skipping elements until `start` and then
       continuing until `end` index.

       Arguments:
       - start: The index of the first element to include.
       - end: The index to stop slicing at.

       > Example
         Remove the first 2 elements then continue until index 5 from the vector.

             [1, 2, 3, 4, 5, 6, 7, 8].slice 2 5 == [3, 4, 5]
    slice : Integer -> Integer -> Vector Any
    slice self start end =
        slice_start = Math.max 0 start
        slice_end = Math.min self.length end
        if slice_start >= slice_end then [] else
            if (slice_start == 0) && (slice_end == self.length) then self else
                len = slice_end - slice_start
                arr = Array.new len
                Array.copy self.to_array slice_start arr 0 len
                Vector.from_polyglot_array arr

    ## Creates a new vector with only the specified range of elements from the
       input, removing any elements outside the range.

       Arguments:
       - range: The section of the this Vector to return.
         If an `Index_Sub_Range`, then the selection is interpreted following
         the rules of that type.
         If a `Range`, the selection is specified by two indices, from and to.
    take : (Index_Sub_Range | Range) -> Vector Any
    take self range=(First 1) = case range of
        ## We are using a specialized implementation for `take Sample`, because
           the default implementation (which needs to be generic for any
           collection) generates a random set of indices and then selects these
           indices, but we can sample the vector directly.
        Index_Sub_Range.Sample count seed ->
            rng = Random.new seed
            Random.sample self count rng
        _ ->
            Index_Sub_Range.take_helper self.length (self.at _) self.slice (slice_ranges self) range

    ## Creates a new vector, removing any elements from the specified range.

       Arguments:
       - range: The section of the this Vector to return.
         If an `Index_Sub_Range`, then the selection is interpreted following
         the rules of that type.
         If a `Range`, the selection is specified by two indices, from and to.
    drop : (Index_Sub_Range | Range) -> Vector Any
    drop self range=(First 1) =
        Index_Sub_Range.drop_helper self.length (self.at _) self.slice (slice_ranges self) range

    ## Performs a pair-wise operation passed in `function` on consecutive
       elements of `self` and `that`.

       Arguments:
       - that: The vector to zip with `self`.
       - function: The function used to combine pairwise elements of `self` and
         `that`.

       The result of this function is a vector of length being the shorter of
       `self` and `that`, containing results of calling `function`.

       > Example
         Calculate the pairwise sum of two vectors.

             [1, 2, 3].zip [4, 5, 6] (+)

       > Example
         When the `function` is not provided, it defaults to creating a pair
         of both elements.

             [1, 2, 3].zip [4, 5, 6] == [[1, 4], [2, 5], [3, 6]]
    zip : Vector Any -> (Any -> Any -> Any) -> Vector Any
    zip self that function=[_,_] =
        len = Math.min self.length that.length
        new len i-> function (self.unsafe_at i) (that.unsafe_at i)

    ## Extend `self` vector to the length of `n` appending elements `elem` to
       the end.

       Arguments:
       - n: The length to pad `self` out to.
       - elem: The element to fill the new padded slots with.

       If the new length `n` is less than existing length, `self` vector is
       returned.

       > Example
         Extending vector to the length of 5 returns `[1, 2, 3, 0, 0]`

             [1, 2, 3].pad 5 0

       > Example
         Extending vector to the length of 5 returns `[1, 2, 3, 4, 5]`

             [1, 2, 3, 4, 5].pad 5 0
    pad : Integer -> Any -> Vector Any
    pad self n elem =
        if self.length >= n then self else
            self + (fill n-self.length elem)

    ## Vector to JSON conversion.

       > Example
         Convert a vector of numbers to JSON.

             [1, 2, 3].to_json
    to_json : Json.Array
    to_json self = Json.Array (self.map .to_json)

    ## Get the first element from the vector, or an `Empty_Error` if the vector
       is empty.

       > Example
         The following code returns 1.

             [1, 2, 3, 4].head
    head : Any ! Empty_Error
    head self = if self.length >= 1 then self.unsafe_at 0 else Error.throw Empty_Error

    ## Get all elements in the vector except the first.

       > Example
         The following code returns [2, 3, 4].

             [1, 2, 3, 4].tail
    tail : Vector ! Empty_Error
    tail self = if self.length >= 1 then self.drop (First 1) else
        Error.throw Empty_Error

    ## Get the all elements in the vector except the last.

       > Example
         The following code returns [1, 2, 3].

             [1, 2, 3, 4].init
    init : Vector ! Empty_Error
    init self = if self.length >= 1 then self.drop (Last 1) else Error.throw Empty_Error

    ## Get the last element of the vector, or an `Empty_Error` if the vector is
       empty.

       > Example
         The following code returns 4.

             [1, 2, 3, 4].last
    last : Vector ! Empty_Error
    last self = if self.length >= 1 then self.unsafe_at (self.length-1) else
        Error.throw Empty_Error

    ## Get the first element from the vector, or an `Empty_Error` if the vector
       is empty.

       > Example
         The following code returns 1.

             [1, 2, 3, 4].first
    first : Vector ! Empty_Error
    first self = self.head

    ## Get the second element from the vector, or a `Index_Out_Of_Bounds_Error` if the
       vector doesn't have a second element.

       Useful when tuples are implemented as vectors.

       > Example
         The following code returns 2.

             [1, 2, 3, 4].second
    second : Vector ! Index_Out_Of_Bounds_Error
    second self = self.at 1

    ## Get all elements in the vector except the first.

       > Example
         The following code returns [2, 3, 4].
             [1, 2, 3, 4].rest
    rest : Vector ! Empty_Error
    rest self = self.tail

    ## Sort the Vector.

       Arguments:
       - on: A projection from the element type to the value of that element
         being sorted on.
       - by: A function that compares the result of applying `on` to two
         elements, returning an Ordering to compare them.
       - order: The order in which the vector elements are sorted.

       By default, elements are sorted in ascending order, using the comparator
       `compare_to`. A custom comparator may be passed to the sort function.

       This is a stable sort, meaning that items that compare the same will not
       have their order changed by the sorting process.

       ! Computational Complexity
         The complexities for this sort are:
         - *Worst-Case Time:* `O(n * log n)`
         - *Best-Case Time:* `O(n)`
         - *Average Time:* `O(n * log n)`
         - *Worst-Case Space:* `O(n)` additional

       ? Implementation Note
         The sort implementation is based upon an adaptive, iterative mergesort
         that requires far fewer than `n * log(n)` comparisons when the vector
         is partially sorted. When the vector is randomly ordered, the
         performance is equivalent to a standard mergesort.

         It takes equal advantage of ascending and descending runs in the array,
         making it much simpler to merge two or more sorted arrays: simply
         concatenate them and sort.

       > Example
         Sorting a vector of numbers.

             [5, 2, 3, 45, 15].sort == [2, 3, 5, 15, 45]

       > Example
         Sorting a vector of `Pair`s on the first element, descending.

             [Pair 1 2, Pair -1 8].sort (_.first) (order = Sort_Direction.Descending)
    sort : (Any -> Any) -> (Any -> Any -> Ordering) -> Sort_Direction -> Vector Any
    sort self (on = x -> x) (by = (_.compare_to _)) (order = Sort_Direction.Ascending) =
        ## Prepare the destination array that will underlie the vector. We do
           not want to sort in place on the original vector, as `sort` is not
           intended to be mutable.
        new_vec_arr = Array.new self.length
        Array.copy self.to_array 0 new_vec_arr 0 self.length

        ## As we want to account for both custom projections and custom
           comparisons we need to construct a comparator for internal use that
           does both.
        comp_ascending l r  = by (on l) (on r)
        comp_descending l r = by (on r) (on l)
        compare = if order == Sort_Direction.Ascending then comp_ascending else
            comp_descending

        new_vec_arr.sort compare

        Vector.from_polyglot_array new_vec_arr

    ## UNSTABLE
       Keeps only unique elements within the Vector, removing any duplicates.

       Arguments:
       - on: A projection from the element type to the value of that element
             which determines the uniqueness criteria.

       The returned unique elements are kept in the same order as they appeared
       in the input.

       Out of multiple equivalent (equal up to the `on` projection) elements,
       always the one appearing first in the input is kept.

       > Example
         Removing repeating entries.

             [1, 3, 1, 2, 2, 1] . distinct == [1, 3, 2]

       > Example
         Keeping only pairs whose first elements are unique.

             [Pair 1 "a", Pair 2 "b", Pair 1 "c"] . distinct (on = _.first) == [Pair 1 "a", Pair 2 "b"]
    distinct : (Any -> Any) -> Vector Any
    distinct self (on = x->x) =
        ## TODO [JD] This is based on the Map class until a HashMap is available.

           Current implementation allows for a consistent distinct with the Enso `==` operator.
           Using the Map, is less efficient than a HashMap based as requires searching the tree (O(Log N)).
           A HashMap would allow for a O(1) operation to confirm if an item has been seen already.
           There is no native HashMap within Enso at present, and the polyglot approach does not produce
           consistent results with the `==` operator.

           More details on the HashCode / HashMap ticket https://www.pivotaltracker.com/story/show/181027272.

        handle_incomparable_value <|
            builder = new_builder
            self.fold Map.empty existing->
                item->
                    key = on item
                    if (existing.get_or_else key False) then existing else
                        builder.append item
                        existing.insert key True
            builder.to_vector


    ## UNSTABLE

       Transform the vector into text for displaying as part of its default
       visualization.
    to_default_visualization_data : Text
    to_default_visualization_data self =
        json = self.take (First 100) . to_json
        json.to_text

## PRIVATE
type Wrapped_Error error

type Builder

    ## PRIVATE

       A builder type for Enso vectors.

       Arguments:
       - java_builder: The accumulator for the new vector.

       A vector builder is a mutable data structure, that allows to gather a
       number of elements and then convert them to a vector. This is
       particularly useful when the number of elements is not known upfront.

       > Example
         In the following example we'll read items from the standard input,
         until the string "end" is entered by the user and then return a vector
         containing all items.

             Construct a vector using a builder that contains the items 1 to 10.

                 example_new_builder =
                     do_build builder start stop =
                         new_builder = builder.append start
                         if start >= stop then new_builder else
                             @Tail_Call do_build new_builder start+1 stop
                     builder = do_build Vector.new_builder 1 10
                     builder.to_vector

       ! TODO
         We may want to revisit the fold pattern - it is required for correct
         propagation of dataflow errors, but it is very easy to forget about it
         and get wrong error propagation. Instead we may want to have a `Ref`
         inside of the Builder. Any error detected during `append` could set
         that `Ref` and then `to_vector` could propagate that error.
    Builder_Data java_builder

    ## Creates a new builder.

       Arguments:
       - capacity: Initial capacity of the Vector.Builder

       > Example
         Make a new builder

             Vector.new_builder
    new : Integer -> Builder
    new (capacity=10) = Builder_Data (Array_Builder.newBuilder capacity)

    ## Checks if this builder is empty.
    is_empty : Boolean
    is_empty self = self.java_builder.isEmpty

    ## Checks if this builder is not empty.
    not_empty : Boolean
    not_empty self = self.is_empty.not

    ## Appends a new element into this builder and returns it, propagating any
       errors that the provided element could have contained.

       Arguments:
       - item: The item to append to the vector builder.

       > Example
         Append two items.

             builder = Vector.new_builder
             builder . append 10 . append 20
    append : Any ! Error -> Builder ! Error
    append self item = case item of
        _ ->
            self.unsafe_append item
            self

    ## Appends a part of a given vector to this builder

       Arguments:
       - vector: The vector from which the elements are sourced.
       - start: The start index of the range to append.
       - end: The end index (the first index after the last element to be
         appended) of the range to be appended.

       > Example
         Append a part of the vector.

             builder = Vector.new_builder
             builder . append_vector_range [20, 30, 40, 50] 1 3 . to_vector == [30, 40]
    append_vector_range : Vector Any ! Error -> Integer -> Integer -> Builder ! Error
    append_vector_range self vector start end =
        subrange = vector.slice start end
        ## This workaround is needed because
           `self.java_builder.addAll subrange.to_array` fails with
           `Unsupported argument types: [Array]`.
        self.java_builder.appendTo subrange.to_array

    ## PRIVATE
       Appends a new element into this builder.

       ? Propagating Dataflow Errors
         Since this is an imperative operation which returns Nothing, if the
         item to be appended contained a dataflow error, the operation will fail
         and unless its result is inspected, the error can very easily be
         ignored. To avoid this, prefer to use the `append` operation and
         consume the returned builder which will contain any dataflow errors if
         they need to be propagated.

       Arguments:
       - item: The item to append to the vector builder.

       > Example
         Append an item to a vector builder.

             Vector.new_builder.unsafe_append 10
    unsafe_append : Any -> Nothing
    unsafe_append self item = self.java_builder.add item

    ## Gets an element from the vector at a specified index (0-based).

       Arguments:
       - index: The location in the vector to get the element from. The index is
         also allowed be negative, then the elements are indexed from the back
         of the vector, i.e. -1 will correspond to the last element.
    at : Integer -> Any ! Index_Out_Of_Bounds_Error
    at self index =
        actual_index = if index < 0 then self.length + index else index
        Panic.catch IndexOutOfBoundsException (self.java_builder.get actual_index) _->
            Error.throw (Index_Out_Of_Bounds_Error_Data index self.length)

    ## Checks whether a predicate holds for at least one element of this builder.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         that says whether that value satisfies the conditions of the function.

    exists : (Any -> Boolean) -> Boolean
    exists self predicate =
        0.up_to self.length . exists (idx -> (predicate (self.java_builder.get idx)))

    ## Converts this builder to a vector containing all the appended elements.

       > Example
         Use a builder to add elements to and then create a vector.

            example_to_vector =
                bldr = Vector.new_builder
                bldr.append 1
                bldr.append 10
                bldr.append 100
                bldr.to_vector
    to_vector : Vector Any
    to_vector self =
        ## This creates a fresh copy of the builders storage, so any future
           changes to the builder will not affect the returned vector.
        new_array = self.java_builder.toArray
        from_polyglot_array new_array

## UNSTABLE

   An error that indicates that the vector is empty.
type Empty_Error

    ## UNSTABLE

       Pretty prints the empty error.
    to_display_text : Text
    to_display_text self = "The vector is empty."

## UNSTABLE

   An error indicating that the vector contains incomparable types.

type Incomparable_Values_Error

## ADVANCED
   Catches possible errors from comparing values and throws an
   Incomparable_Values_Error if any occur.
handle_incomparable_value ~function =
    handle t = Panic.catch t handler=(Error.throw Incomparable_Values_Error)
    handle No_Such_Method_Error_Data <| handle Type_Error_Data <| handle Unsupported_Argument_Types_Data <| function

## PRIVATE
   Creates a new vector where for each range, a corresponding section of the
   source vector is added to the result.

   Assumes that the ranges have been already bounds-checked (for example by
   passing them through `resolve_ranges`).
slice_ranges vector ranges =
    if ranges.length == 0 then [] else
        if ranges.length != 1 then slice_many_ranges vector ranges else
            case ranges.first of
                Integer -> [vector.unsafe_at ranges.first]
                Range_Data start end step -> case step == 1 of
                    True -> vector.slice start end
                    False -> slice_many_ranges vector ranges

## PRIVATE
   See `slice_ranges`.
slice_many_ranges vector ranges =
    new_length = ranges.fold 0 acc-> descriptor-> case descriptor of
        Integer -> acc+1
        Range_Data _ _ _ -> acc+descriptor.length
    builder = new_builder new_length
    ranges.each descriptor-> case descriptor of
        Integer ->
            builder.append (vector.unsafe_at descriptor)
        Range_Data start end step -> case step == 1 of
            True ->
                builder.append_vector_range vector start end
            False ->
                descriptor.each ix->
                    builder.append (vector.unsafe_at ix)
    builder.to_vector
