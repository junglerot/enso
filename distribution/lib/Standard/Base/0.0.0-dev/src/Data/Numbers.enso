import project.Any.Any
import project.Data.Ordering.Comparable
import project.Data.Locale.Locale
import project.Data.Text.Text
import project.Error.Error
import project.Errors.Common.Arithmetic_Error
import project.Errors.Common.Incomparable_Values
import project.Errors.Common.Unsupported_Argument_Types
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Function.Function
import project.Internal.Rounding_Helpers
import project.Nothing.Nothing
import project.Panic.Panic
from project.Data.Boolean import Boolean, False, True

polyglot java import java.lang.Double
polyglot java import java.lang.Long
polyglot java import java.lang.Math
polyglot java import java.lang.NumberFormatException
polyglot java import java.text.DecimalFormat
polyglot java import java.text.DecimalFormatSymbols
polyglot java import java.text.NumberFormat
polyglot java import java.text.ParseException
polyglot java import org.enso.polyglot.common_utils.Core_Math_Utils

## The root type of the Enso numeric hierarchy.

   If a Number is expected, then the program can provide either a Float or
   an Integer in its place.
@Builtin_Type
type Number
    ## ALIAS add, plus
       GROUP Operators
       Adds two arbitrary numbers.

       Arguments:
       - that: The number to add to this.

       Addition in Enso will undergo automatic conversions such that you need
       not convert between Integer and Float manually.

       > Example
         Adding 10 and 15.

             10 + 15
    + : Number -> Number
    + self that = @Builtin_Method "Integer.+"

    ## ALIAS minus, subtract
       GROUP Operators
       Subtract an arbitrary number from this.

       Arguments:
       - that: The number to subtract from this.

       > Example
         Subtract 5 from 2.

             2 - 5
    - : Number -> Number
    - self that = @Builtin_Method "Integer.-"

    ## ALIAS multiply, product, times
       GROUP Operators
       Multiply two arbitrary numbers.

       Arguments:
       - that: The number to multiply this by.

       Multiplication in Enso will undergo automatic conversions such that you
       need not convert between Integer and Float manually.

       > Example
         Multiplying 3 by 5.

             3 * 5
    * : Number -> Number
    * self that = @Builtin_Method "Integer.*"

    ## ALIAS divide
       GROUP Operators
       Divides an this by an arbitrary number.

       Arguments:
       - that: The number to divide this by.

       Division in Enso will undergo automatic conversions such that you need
       not convert between Integer and Float manually.

       > Example
         Dividing 10 by 4 to get 2.5.

             10 / 4
    / : Number -> Number
    / self that = @Builtin_Method "Integer./"

    ## ALIAS power
       GROUP Operators
       Compute the result of raising this to the power that.

       Arguments:
       - that: The exponent.

       > Example
         Computing 2 cubed.

             2^3
    ^ : Number -> Number
    ^ self that = @Builtin_Method "Integer.^"

    ## ALIAS inverse sine
       GROUP Trigonometry

       Computes the inverse of the sine function

       Selects a value in the -pi/2 through pi/2 range.

       > Example
         Calculate the inverse sine of 1.

             1.asin
    asin : Float
    asin self = Math.asin self.to_float

    ## ALIAS inverse cosine
       GROUP Trigonometry

       Computes the inverse of the cosine function.

       Selects a value in the -pi/2 through pi/2 range.

       > Example
         Calculate the inverse cosine of 1.

             1.acos
    acos : Float
    acos self = Math.acos self.to_float

    ## ALIAS inverse tangent
       GROUP Trigonometry

       Computes the inverse of the tangent function.

       Selects a value in the -pi/2 through pi/2 range.

       > Example
         Calculate the inverse tangent of 1.

             1.atan
    atan : Float
    atan self = Math.atan self.to_float

    ## GROUP Trigonometry
       Computes the argument (angle) in the conversion from cartesian
       to polar coordinates, taking `self` as the x coordinate.

       Arguments:
       - y: The y coordinate.

       The returned angle is in the -pi through pi range.

       > Example
         Convert the coordinates 1 and 2 to polar form.

             1.atan_2 2
    atan_2 : Number -> Float
    atan_2 self y = Math.atan2 self.to_float y.to_float

    ## ALIAS sine
       GROUP Trigonometry

       Computes the sine function.

       > Example
         Calculate the sine of 2.

             2.sin
    sin : Float
    sin self = Math.sin self.to_float

    ## ALIAS cosine
       GROUP Trigonometry

       Computes the cosine function.

       > Example
         Calculate the cosine of 2.

             2.cos
    cos : Float
    cos self = Math.cos self.to_float

    ## ALIAS tangent
       GROUP Trigonometry

       Computes the tangent function.

       > Example
         Calculate the tangent of 2.

             2.tan
    tan : Float
    tan self = Math.tan self.to_float

    ## GROUP Trigonometry
       Computes the hyperbolic sine function.

       > Example
         Calculate the hyperbolic sine of 1.

             1.sinh
    sinh : Float
    sinh self = Math.sinh self.to_float

    ## GROUP Trigonometry
       Computes the hyperbolic cosine function.

       > Example
         Calcualte the hyperbolic cosine of 1.

             1.cosh
    cosh : Float
    cosh self = Math.cosh self.to_float

    ## GROUP Trigonometry
       Computes the hyperbolic tangent function.

       > Example
         Calculate the hyperbolic tangent of 1.

             1.tanh
    tanh : Float
    tanh self = Math.tanh self.to_float

    ## ALIAS exponential
       GROUP Math

       Computes the exponential function, raising Euler's number `r` to the power of
       `self`.

       > Example
         Calculate e to the 4th power.

             4.exp
    exp : Float
    exp self = Math.exp self.to_float

    ## ALIAS natural logarithm
       GROUP Math

       Computes the natural logarithm function.

       > Example
         Calculate the natural logarithm of 2.

             2.ln
    ln : Float
    ln self = Math.log self.to_float

    ## ALIAS square root
       GROUP Math

       Computes the square root of `self`.

       > Example
         Calculate the square root of 8.

             8.sqrt
    sqrt : Float
    sqrt self = Math.sqrt self.to_float

    ## ALIAS logarithm
       GROUP Math

       Computes the `base`-log of `self`.

       Arguments:
       - base: The base for the logarithm.

       > Example
         Calculate log 2 of 4.

             4.log 2
    log : Number -> Float
    log self base = self.ln / base.ln

    ## GROUP Conversions
       Converts a numeric value to a string, using the Java DecimalFormat
       formatter.

       Arguments:
       - format: The java-style formatting specifier.

       > Example
         Convert the value 5000 to a string.

             5000.format "#,##0"
    @locale Locale.default_widget
    format : Text -> Locale -> Text
    format self format locale=Locale.default =
        symbols = DecimalFormatSymbols.new locale.java_locale
        formatter = DecimalFormat.new format symbols
        formatter.format self

    ## GROUP Logical
       Checks equality of numbers, using an `epsilon` value.

       ! Error Conditions
         If either of the arguments is `Number.nan`, an `Incomparable_Values` error is raised.

       Arguments:
       - that: The number to check equality against.
       - epsilon: The value by which `self` and `that` can be separated by before
         counting as not equal.

       > Example
         Check if 1 is equal to 1.0000001 within 0.001.

             1.equals 1.0000001 epsilon=0.001
    equals : Number -> Number -> Boolean ! Incomparable_Values
    equals self that epsilon=0.0 =
        (self == that) || ((self - that).abs <= epsilon)

    ## GROUP Math
       Returns the smaller value of `self` and `that`.

       Arguments:
       - that: The number to compare `self` against.

       ? Math.min or Number.min
         While we provide the min method on `Number`, we find it more intuitive to
         write `Math.min a b` rather than `a.min b`. To that end, we recommend using
         the first style.

       > Example
         Find the minimum of 2 and 5.

             2.min 5
    min : Number -> Number
    min self that = if self < that then self else that

    ## GROUP Math
       Returns the larger value of `self` and `that`.

       Arguments:
       - that: The number to compare `self` against.

       ? Math.max or Number.max
         While we provide the max method on `Number`, we find it more intuitive to
         write `Math.max a b` rather than `a.max b`. To that end, we recommend using
         the first style.

       > Example
         Find the maximum of 2 and 5.

             2.max 5
    max : Number -> Number
    max self that = if self > that then self else that

    ## A constant holding the floating-point positive infinity.
    positive_infinity : Float
    positive_infinity = Double.POSITIVE_INFINITY

    ## A constant holding the floating-point negative infinity.
    negative_infinity : Float
    negative_infinity = Double.NEGATIVE_INFINITY

    ## A constant holding the floating-point Not-a-Number value.
    nan : Float
    nan = Double.NaN

    ## GROUP Math
       Checks if the given number is the floating-point Not-a-Number value.

       This is needed, because the NaN value will return `False` even when being
       compared with itself, so `x == Number.nan` would not work.
    is_nan : Boolean
    is_nan self = case self of
        _ : Float -> Double.isNaN self
        _ -> False

    ## GROUP Math
       Checks if the given number is infinite.
    is_infinite : Boolean
    is_infinite self = case self of
        _ : Float -> Double.isInfinite self
        _ -> False

    ## GROUP Math
       Returns the sign of the number.
    signum : Integer
    signum self =
        if self > 0 then 1 else
            if self < 0 then -1 else 0


## Float is the type of float numbers in Enso.

   ? Representation
     Enso's float numbers are represented as IEEE754 double-precision
     floating point numbers.
@Builtin_Type
type Float
    ## ALIAS add, plus
       GROUP Operators
       Adds a float and an arbitrary number.

       Arguments:
       - that: The number to add to this.

       Addition in Enso will undergo automatic conversions such that you need
       not convert between Integer and Float manually.

       > Example
         Adding 10.1 and 15.

             10.1 + 15
    + : Number -> Number
    + self that = @Builtin_Method "Float.+"

    ## ALIAS minus, subtract
       GROUP Operators
       Subtract an arbitrary number from this.

       Arguments:
       - that: The number to subtract from this.

       > Example
         Subtract 5 from 2.78.

             2.78 - 5
    - : Number -> Number
    - self that = @Builtin_Method "Float.-"

    ## ALIAS multiply, product, times
       GROUP Operators
       Multiply a float by an arbitrary number.

       Arguments:
       - that: The number to multiply this by.

       Multiplication in Enso will undergo automatic conversions such that you
       need not convert between Integer and Float manually.

       > Example
         Multiplying 3 by 5.27.

             5.27 * 3
    * : Number -> Number
    * self that = @Builtin_Method "Float.*"

    ## ALIAS divide
       GROUP Operators
       Divides a float by an arbitrary number.

       Arguments:
       - that: The number to divide this by.

       Division in Enso will undergo automatic conversions such that you need
       not convert between Integer and Float manually.

       > Example
         Dividing 10 by 4.5.

             10 / 4.5
    / : Number -> Number
    / self that = @Builtin_Method "Float./"

    ## ALIAS modulo, modulus
       GROUP Operators
       Computes the remainder when dividing this by that.

       Arguments:
       - that: The number to divide this by.

       Modulus in Enso will undergo automatic conversions such that you need
       not convert between Integer and Float manually.

       > Example
         Computing the remainder when dividing 3.5 by 2.

             3.5 % 2 == 1.5

       > Example
         Computing the fractional part of a number.

             10.5 % 1.0 == 0.5
    % : Number -> Number ! Arithmetic_Error
    % self that = @Builtin_Method "Float.%"

    ## ALIAS power
       GROUP Operators
       Compute the result of raising this to the power that.

       Arguments:
       - that: The exponent.

       > Example
         Computing 2.2 cubed.

             2.2^3
    ^ : Number -> Number
    ^ self that = @Builtin_Method "Float.^"

    ## ALIAS greater than
       GROUP Operators
       Checks if this is greater than that.

       Arguments:
       - that: The number to compare this against.

       > Example
         Checking if 10 is greater than 7.3.

             10 > 7.3
    > : Number -> Boolean
    > self that = @Builtin_Method "Float.>"

    ## ALIAS greater than or equal
       GROUP Operators
       Checks if this is greater than or equal to that.

       Arguments:
       - that: The number to compare this against.

       > Example
         Checking if 10 is greater than or equal to 7.3.

             10 >= 7.3
    >= : Number -> Boolean
    >= self that = @Builtin_Method "Float.>="

    ## ALIAS less than
       GROUP Operators
       Checks if this is less than that.

       Arguments:
       - that: The number to compare this against.

       > Example
         Checking if 10 is less than 7.3.

             10 < 7.3
    < : Number -> Boolean
    < self that = @Builtin_Method "Float.<"

    ## ALIAS less than or equal
       GROUP Operators
       Checks if this is less than or equal to that.

       Arguments:
       - that: The number to compare this against.

       > Example
         Checking if 10.4 is less than or equal to 7.

             10.4 <= 7
    <= : Number -> Boolean
    <= self that = @Builtin_Method "Float.<="

    ## GROUP Math
       Computes the absolute value of this.

       The absolute value of a positive number is itself, while the absolute
       value of a negative number is that number multiplied by -1.

       > Example
         Computing the absolute value of -10.63.

            -10.63.abs
    abs : Float
    abs self = @Builtin_Method "Float.abs"

    ## GROUP Rounding
       Computes the nearest integer above this number.

       This method provides a means of converting a Float to an Integer.

       > Example
         Computing the ceiling of 4.736 (which is 5).

             4.736.ceil
    ceil : Integer
    ceil self = @Builtin_Method "Float.ceil"

    ## GROUP Rounding
       Computes the nearest integer below this float.

       This method provides a means of converting a Float to an Integer.

       > Example
         Computing the floor of 4.323 (which is 4).

             4.323.floor
    floor : Integer
    floor self = @Builtin_Method "Float.floor"

    ## ALIAS int
       GROUP Rounding

       Truncate a floating-point number to an integer by dropping the fractional
       part. This is equivalent to "round-toward-zero".
    truncate : Integer
    truncate self = self.truncate_builtin

    ## GROUP Rounding
       Round to a specified number of decimal places.

       By default, rounding uses "asymmetric round-half-up", also known as
       "round towards positive infinity." If use_bankers=True, then it uses
       "round-half-even", also known as "banker's rounding".

       If `decimal_places` > 0, `round` returns a `Float`; otherwise, it
       returns an `Integer`.

       If the argument is `NaN` or `+/-Inf`, an `Arithmetic_Error` error is
       thrown.

       Arguments:
       - decimal_places: The number of decimal places to round to. Can be
         negative, which results in rounding to positive integer powers of 10.
         Must be between -15 and 15 (inclusive).
       - use_bankers: Rounds mid-point to nearest even number.

       ! Error Conditions

         If `self` is outside the range -99999999999999..99999999999999
         (inclusive), an `Illegal_Argument` error is thrown.

         If `decimal_places` is outside the range -15..15 (inclusive), an
         `Illegal_Argument` error is thrown.

       ? Negative decimal place counts
         Rounding to `n` digits can be thought of as "rounding to the nearest
         multiple of 10^(-n)". For negative decimal counts, this results in
         rounding to the nearest positive integer power of 10.

       > Example
         Round to the nearest integer.

            3.3 . round == 3

       > Example
         Round to two decimal places.

            3.1415 . round 2 == 3.14

       > Example
         Round to the nearest hundred.

            1234.0 . round -2 == 1200

       > Example
         Use Banker's Rounding.

            2.5 . round use_bankers=True == 2
    round : Integer -> Boolean -> Integer | Float ! Illegal_Argument
    round self (decimal_places:Integer=0) (use_bankers:Boolean=False) =
        report_unsupported cp = Error.throw (Illegal_Argument.Error cp.payload.message)
        Panic.catch Unsupported_Argument_Types handler=report_unsupported
            Float.round_float_builtin self decimal_places use_bankers

    ## PRIVATE
    round_float_builtin n decimal_places use_bankers = @Builtin_Method "Float.round"

    ## GROUP Operators
       Compute the negation of this.

       > Example
         Negate 5.1 to get -5.1.

             5.1.negate
    negate : Float
    negate self = @Builtin_Method "Float.negate"

    ## Convert this to a float.

       This is a no-op on floats, but is provided for completeness of the Enso
       Number API.

       > Example
         Convert 5.0 to a float to get 5.0.

             5.0.to_float
    to_float : Float
    to_float self = @Builtin_Method "Float.to_float"

    ## ALIAS from text
       GROUP Conversions

       Parses a textual representation of a float into a float number, returning
       a `Number_Parse_Error` if the text does not represent a valid float.

       Arguments:
       - text: The text to parse into a float.
       - locale: The locale that specifies the format to use when parsing

       > Example
         Parse the text "7.6" into a float number.

             Float.parse "7.6"
    parse : Text -> Locale | Nothing -> Float ! Number_Parse_Error
    parse text locale=Nothing = case locale of
        Nothing -> Panic.catch NumberFormatException (Double.parseDouble text) _->
            Error.throw (Number_Parse_Error.Error text)
        Locale.Value java_locale -> Panic.catch ParseException ((NumberFormat.getInstance java_locale).parse text) _->
            Error.throw (Number_Parse_Error.Error text)

## Integer is the type of integral numbers in Enso. They are of unbounded
   size and can grow as large as necessary.

   ? Representation
     For certain operations (such as bitwise logic), the underlying
     representation of the number matters. Enso Integers are represented as
     signed 2's complement numbers.

   ? Performance
     Integers that fit into 64 bits are represented in memory as 64 bits.
     This means that operations on them achieve excellent performance. Once
     the integer grows beyond being able to fit in 64 bits, performance will
     degrade.
@Builtin_Type
type Integer
    ## ALIAS add, plus
       GROUP Operators
       Adds an integer and an arbitrary number.

       Arguments:
       - that: The number to add to this.

       Addition in Enso will undergo automatic conversions such that you need
       not convert between Integer and Float manually.

       > Example
         Adding 10 and 15.

             10 + 15
    + : Number -> Number
    + self that = @Builtin_Method "Integer.+"

    ## ALIAS minus, subtract
       GROUP Operators
       Subtract an arbitrary number from this.

       Arguments:
       - that: The number to subtract from this.

       > Example
         Subtract 5 from 2.

             2 - 5
    - : Number -> Number
    - self that = @Builtin_Method "Integer.-"

    ## ALIAS multiply, product, times
       GROUP Operators
       Multiply an integer by an arbitrary number.

       Arguments:
       - that: The number to multiply this by.

       Multiplication in Enso will undergo automatic conversions such that you
       need not convert between Integer and Float manually.

       > Example
         Multiplying 3 by 5.

             3 * 5
    * : Number -> Number
    * self that = @Builtin_Method "Integer.*"

    ## ALIAS divide
       GROUP Operators
       Divides an integer by an arbitrary number.

       Arguments:
       - that: The number to divide this by.

       Division in Enso will undergo automatic conversions such that you need
       not convert between Integer and Float manually.

       > Example
         Dividing 10 by 4 to get 2.5.

             10 / 4
    / : Number -> Number
    / self that = @Builtin_Method "Integer./"

    ## ALIAS modulo, modulus
       GROUP Operators
       Computes the remainder when dividing this by that.

       Arguments:
       - that: The number to divide this by.

       Modulus in Enso will undergo automatic conversions such that you need
       not convert between Integer and Float manually.

       Returns an error if the shift amount exceeds 2^32.

       > Example
         Computing the remainder when dividing 10 by 3 (which is 1).

             10 % 3
    % : Number -> Number ! Arithmetic_Error
    % self that = @Builtin_Method "Integer.%"

    ## ALIAS power
       GROUP Operators
       Compute the result of raising this to the power that.

       Arguments:
       - that: The exponent.

       > Example
         Computing 2 cubed.

             2^3
    ^ : Number -> Number
    ^ self that = @Builtin_Method "Integer.^"

    ## ALIAS greater than
       GROUP Operators
       Checks if this is greater than that.

       Arguments:
       - that: The number to compare this against.

       > Example
         Checking if 10 is greater than 7.

             10 > 7
    > : Number -> Boolean
    > self that = @Builtin_Method "Integer.>"

    ## ALIAS greater than or equal
       GROUP Operators
       Checks if this is greater than or equal to that.

       Arguments:
       - that: The number to compare this against.

       > Example
         Checking if 10 is greater than or equal to 7.

             10 >= 7
    >= : Number -> Boolean
    >= self that = @Builtin_Method "Integer.>="

    ## ALIAS less than
       GROUP Operators
       Checks if this is less than that.

       Arguments:
       - that: The number to compare this against.

       > Example
         Checking if 10 is less than 7.

             10 < 7
    < : Number -> Boolean
    < self that = @Builtin_Method "Integer.<"

    ## ALIAS less than or equal
       GROUP Operators
       Checks if this is less than or equal to that.

       Arguments:
       - that: The number to compare this against.

       > Example
         Checking if 10 is less than or equal to 7.

             10 <= 7
    <= : Number -> Boolean
    <= self that = @Builtin_Method "Integer.<="

    ## GROUP Math
       Computes the absolute value of this.

       The absolute value of a positive number is itself, while the absolute
       value of a negative number is that number multiplied by -1.

       > Example
         Computing the absolute value of -10.

            -10.abs
    abs : Integer
    abs self = @Builtin_Method "Integer.abs"

    ## GROUP Rounding
       Computes the nearest integer above this integer.

       This is a no-op on integers but is provided for completeness of the Enso
       number API.

       > Example
         Computing the ceiling of 4.

             4.ceil
    ceil : Integer
    ceil self = @Builtin_Method "Integer.ceil"

    ## GROUP Math
       Computes the integer division of this by that.

       Arguments:
       - that: The number to divide this by.

       Integer division rounds down to the nearest integer.

       Returns an error if `that` is zero.

       > Example
         Dividing 10 by 3 to get 3.

             10.div 3
    div : Integer -> Number ! Arithmetic_Error
    div self that = @Builtin_Method "Integer.div"

    ## GROUP Rounding
       Computes the nearest integer below this integer.

       This is a no-op on integers but is provided for completeness of the Enso
       number API.

       > Example
         Computing the floor of 4.

             4.floor
    floor : Integer
    floor self = @Builtin_Method "Integer.floor"

    ## ALIAS int
       GROUP Rounding

       Truncate an `Integer` to an `Integer`, i.e. returns its argument. For
       compatibility with `Float.truncate`.
    truncate : Integer
    truncate self = self

    ## GROUP Rounding
       Round to a specified number of decimal places.

       For integers, rounding to 0 or more decimal places simply returns the
       argument. For negative decimal places, see below.

       By default, rounding uses "asymmetric round-half-up", also known as
       "round towards positive infinity." If use_bankers=True, then it uses
       "round-half-even", also known as "banker's rounding".

       Arguments:
       - decimal_places: The number of decimal places to round to. Can be
         negative, which results in rounding to positive integer powers of 10.
         Must be between -15 and 15 (inclusive).
       - use_bankers: Rounds mid-point to nearest even number.

       ! Error Conditions
         If `self` is outside the range -99999999999999..99999999999999
         (inclusive), an `Illegal_Argument` error is thrown.

         If `decimal_places` is outside the range -15..15 (inclusive), an
         `Illegal_Argument` error is thrown.

       ? Negative decimal place counts
         Rounding to `n` digits can be thought of as "rounding to the nearest
         multiple of 10^(-n)". For negative decimal counts, this results in
         rounding to the nearest positive integer power of 10.

       > Example
         Round an integer (returns the value unchanged).

            3 . round == 3

       > Example
         Round to the nearest thousand.

            2511 . round -3 == 3000

       > Example
         Round to the nearest hundred, using Banker's Rounding.

            12250 . round -2 use_bankers=True == 12200
    round : Integer -> Boolean -> Integer ! Illegal_Argument
    round self (decimal_places:Integer=0) (use_bankers:Boolean=False) =
        ## We reject values outside the range of `long` here, so we don't also
           do this check in the Java.
        Rounding_Helpers.check_round_input self <|
            report_unsupported cp = Error.throw (Illegal_Argument.Error cp.payload.message)
            Panic.catch Unsupported_Argument_Types handler=report_unsupported
                Integer.round_integer_builtin self decimal_places use_bankers

    ## PRIVATE
    round_integer_builtin n decimal_places use_bankers = @Builtin_Method "Integer.round"

    ## GROUP Operators
       Compute the negation of this.

       > Example
         Negate 5 to get -5.

             5.negate
    negate : Integer
    negate self = @Builtin_Method "Integer.negate"

    ## Convert this to a float.

       > Example
         Convert 5 to a float to get 5.0.

             5.to_float
    to_float : Float
    to_float self = @Builtin_Method "Integer.to_float"

    ## GROUP Bitwise
       Computes the bitwise and (conjunction) operation between this and
       that.

       Arguments:
       - that: The number to compute the bitwise conjunction with.

       Bitwise and computes the logical conjunction of the corresponding pairs
       of bits in the operands.

       ? Example
         Computing the bitwise conjunction of 2_01101101 and 2_11110000.

             2_01101101.bit_and 2_11110000
    bit_and : Integer -> Integer
    bit_and self that = @Builtin_Method "Integer.bit_and"

    ## GROUP Bitwise
       Computes the bitewise compliment of this.

       The bitwise compliment negates the value of each bit in the operand.

       ? Example
         Bitwise negation of 2_0110.

             2_0110.bit_not
    bit_not : Integer
    bit_not self = @Builtin_Method "Integer.bit_not"

    ## GROUP Bitwise
       Computes the bitwise or (disjunction) operation between this and
       that.

       Arguments:
       - that: The number to compute the bitwise disjunction with.

       Bitwise or computes the logical disjunction of the pairs of corresponding
       bits in the operands.

       > Example
         Computing the bitwise disjunction of 2_01101101 and 2_11110000.

             2_01101101.bit_or 2_11110000
    bit_or : Integer -> Integer
    bit_or self that = @Builtin_Method "Integer.bit_or"

    ## GROUP Bitwise
       Computes the bitwise exclusive or between this and that.

       Arguments:
       - that: The number to compute the bitwise exclusive or with.

       Bitwise exclusive or computes the exclusive or of the pairs of
       corresponding bits in the operands.

       > Example
         Computing the bitwise exclusive or of 2_01101101 and 2_11110000.

             2_01101101.bit_xor 2_11110000
    bit_xor : Integer -> Integer
    bit_xor self that = @Builtin_Method "Integer.bit_xor"

    ## GROUP Bitwise
       Shifts the bits of this by the amount that.

       Left-shifts fill the new bits with zeroes, while right-shifts perform
       sign extension.

       Returns an error if the shift amount exceeds 2^32.

       Arguments:
       - that: The number of bits by which the shift should be performed.
         Positive numbers perform a left-shift, while negative numbers perform a
         right-shift.


       > Example
         Shift the bits of the number 1 left by four bits.

             1.bit_shift 4
    bit_shift : Integer -> Integer ! Arithmetic_Error
    bit_shift self that = @Builtin_Method "Integer.bit_shift"

    ## GROUP Bitwise
       Performs a bitwise left-shift on the number.

       Left-shifts fill the new bits with zeroes, while right-shifts perform
       sign extension.

       Returns an error if the shift amount exceeds 2^32.

       Arguments:
       - that: The number of bits by which the shift should be performed.
         Positive numbers perform a left-shift, while negative numbers perform a
         right-shift.

       > Example
         Shift the bits of the number 1 left by four bits.

             1.bit_shift_l 4
    bit_shift_l : Integer -> Integer ! Arithmetic_Error
    bit_shift_l self that = self.bit_shift that

    ## GROUP Bitwise
       Performs a bitwise right-shift on the number.

       Left-shifts fill the new bits with zeroes, while right-shifts perform
       sign extension.

       Returns an error if the shift amount exceeds 2^32.

       Arguments:
       - that: The number of bits by which the shift should be performed.
         Positive numbers perform a right-shift, while negative numbers perform
         a left-shift.

       > Example
         Shift the bits of the number 1 right by four bits.

             1.bit_shift_r 4
    bit_shift_r : Integer -> Integer ! Arithmetic_Error
    bit_shift_r self that = @Builtin_Method "Integer.bit_shift_r"

    ## ALIAS from text
       GROUP Conversions

       Parses a textual representation of an integer into an integer number, returning
       a `Number_Parse_Error` if the text does not represent a valid integer.

       Arguments:
       - text: The text to parse into a integer.
       - radix: The number base to use for parsing (defaults to 10). `radix`
         must be between 2 and 36 (inclusive) -- see https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/Character.html#MIN_RADIX.

       > Example
         Parse the text "20220216" into an integer number.

            Integer.parse "20220216"
    parse : Text -> Integer -> Integer ! Number_Parse_Error
    parse text (radix=10) = Integer.parse_builtin text radix

    ## PRIVATE

        Internally handles the parsing.

    parse_builtin text radix = @Builtin_Method "Integer.parse"

## A syntax error when parsing a double.
@Builtin_Type
type Number_Parse_Error
    ## PRIVATE
    Error text

    ## PRIVATE
       Pretty print the syntax error.
    to_display_text : Text
    to_display_text self =
        "Could not parse " + self.text.to_text + " as a double."

Float.from (that:Integer) = (1.0 * that):Float

## A wrapper type that ensures that a function may only take positive integers.
type Positive_Integer
    ## PRIVATE
       This constructor should not be used by user code as it can be used to
       break the invariants. Instead, this type should only be created by `new`
       or conversions.
    Value (integer : Integer)

    ## PRIVATE
       ADVANCED
       Constructor to create a `Positive_Integer` from an `Integer` - checking
       if it satisfies the condition. User code should prefer the
       `Positive_Integer.from` conversion.
    new (integer : Integer) =
        if integer > 0 then Positive_Integer.Value integer else
            Error.throw (Illegal_Argument.Error "Expected a positive integer, but got "+integer.to_display_text)

## Allows to create a `Positive_Integer` from an `Integer`.
   It will throw `Illegal_Argument` if the provided integer is not positive.
Positive_Integer.from (that : Integer) = Positive_Integer.new that

## PRIVATE
Integer.from (that : Positive_Integer) = that.integer

## PRIVATE
type Positive_Integer_Comparator
    ## PRIVATE
    compare x y =
        Comparable.from x.integer . compare x.integer y.integer

    ## PRIVATE
    hash x = Comparable.from x.integer . hash x.integer

## PRIVATE
Comparable.from (_:Positive_Integer) = Positive_Integer_Comparator
