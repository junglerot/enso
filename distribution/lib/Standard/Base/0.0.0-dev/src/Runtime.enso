import project.Any.Any
import project.Data.Array.Array
import project.Data.Boolean.Boolean
import project.Data.Text.Case.Case
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Errors.Common.Assertion_Error
import project.Errors.Common.Forbidden_Operation
import project.Errors.Common.Type_Error
import project.Function.Function
import project.IO
import project.Nothing.Nothing
import project.Panic.Panic
import project.Polyglot.Polyglot
import project.Runtime.Source_Location.Source_Location
import project.System
from project.Data.Index_Sub_Range.Index_Sub_Range import First, Last
from project.Data.Text.Extensions import all
from project.Runtime.Context import Input, Output

## Utilities for interacting with the runtime.

## PRIVATE

   Returns a raw representation of the current execution stack trace.
   You probably want `Runtime.get_stack_trace` instead.
primitive_get_stack_trace : Array
primitive_get_stack_trace = @Builtin_Method "Runtime.primitive_get_stack_trace"

## PRIVATE
   ADVANCED

   Returns the execution stack trace of its call site. The ordering of the
   resulting vector is such that the top stack frame is the first element.
get_stack_trace : Vector Stack_Trace_Element
get_stack_trace =
    prim_stack = primitive_get_stack_trace
    stack_with_own_frame = Vector.from_polyglot_array prim_stack
    stack = stack_with_own_frame.drop (First 1)
    stack.map wrap_primitive_stack_trace_element

## PRIVATE
   ADVANCED

   Suggests that the runtime perform garbage collection.

   It is not _guaranteed_ to perform garbage collection, but in practice
   will _usually_ begin a garbage collection cycle.

   > Example
     Ask for the runtime to collect garbage.

         Runtime.gc
gc : Nothing
gc = @Builtin_Method "Runtime.gc"

## PRIVATE
   ADVANCED

   Asserts that the given action succeeds, otherwise throws a panic.

   Assertions are disable by default, meaning that call to this method is
   a no-op. To enable assertions, either set the environment variable
   `ENSO_ENABLE_ASSERTIONS=true` or enable JVM assertions by passing `-ea`
   cmd line option to java.
assert : Boolean -> Text -> Nothing
assert (~action : Boolean) (message : Text = "") =
    if assertions_enabled.not then Nothing else
        if action then Nothing else
            Panic.throw <| Assertion_Error.Error message

## PRIVATE
   Returns True if assertions are enabled.
assertions_enabled = @Builtin_Method "Runtime.assertions_enabled"

## PRIVATE
   ADVANCED

   Executes the provided action without allowing it to inline.

   Arguments:
   - action: The computation to be executed.

   This is particularly useful when writing benchmarks and
   performance-critical code where you need to prevent inlining from
   occurring.

   > Example
     Print something to the console without it being inlined.

         Runtime.no_inline <| IO.println "Hi!"
no_inline : Any -> Any
no_inline ~action = @Builtin_Method "Runtime.no_inline"

## PRIVATE
   ADVANCED

   Applies the following function to the given argument, without allowing
   them to inline.

   Arguments:
   - function: The one-argument function to call.
   - arg: The single argument for the function.

   This is particularly useful to avoid constant folding in benchmarks.

   > Example
     Print something to the console without it being inlined.

         Runtime.no_inline_with_arg IO.println "Hi!"
no_inline_with_arg : (Any -> Any) -> Any -> Any
no_inline_with_arg function arg = @Builtin_Method "Runtime.no_inline_with_arg"

## PRIVATE
   Converts a primitive stack trace element into the regular one.
wrap_primitive_stack_trace_element el =
    loc = if Polyglot.has_source_location el then Source_Location.Value (Polyglot.get_source_location el) else Nothing
    name = Panic.catch Type_Error (Polyglot.get_executable_name el) _->
        # Workaround for a bug where some stack frames' root nodes do not have a name.
        "<unknown node>"
    Stack_Trace_Element.Value name loc

## PRIVATE
   ADVANCED

   Represents a single stack frame in an Enso stack trace.
type Stack_Trace_Element
    ## PRIVATE
    Value name source_location

    ## PRIVATE
    to_display_text : Text
    to_display_text self =
        loc = case self.source_location of
            Nothing -> "Unknown location"
            loc -> loc.formatted_coordinates
        "at "+self.name+" ("+loc+")"

## PRIVATE
   ADVANCED

    Type indicating allowed execution context.

@Builtin_Type
type Context
    ## PRIVATE
       ADVANCED
    Input
    ## PRIVATE
       ADVANCED
    Output

    ## PRIVATE
       ADVANCED

       Returns the name of the context.

    name : Text
    name self =
        case self of
            Input  -> "Input"
            Output -> "Output"

    ## PRIVATE
       ADVANCED

       Checks whether the context is enabled. If it is, evaluates the provided
       function and returns the result. If not, panics.

       Arguments:
       - environment: Name of the execution environment.
       - context: The context to enable.
       - action: Action to be performed with the context enabled.
    if_enabled : Function -> Text -> Any
    if_enabled self ~action environment=Runtime.current_execution_environment =
        if self.is_enabled environment then action else Panic.throw (Forbidden_Operation.Error self.name)

    ## PRIVATE
       ADVANCED

       Checks whether the permission is enabled in the given environment.

       Arguments:
       - environment: Name of the execution environment.
       - context: The context to enable.
    is_enabled : Text -> Boolean
    is_enabled self environment=Runtime.current_execution_environment =
        self.is_enabled_builtin (environment.to_case Case.Lower)

    ## PRIVATE
    is_enabled_builtin : Text -> Boolean
    is_enabled_builtin self environment = @Builtin_Method "Context.is_enabled_builtin"

    ## PRIVATE
       Run an action with the Context enabled.
    with_enabled : Function -> Any
    with_enabled self ~action =
        with_enabled_context self Runtime.current_execution_environment action

    ## PRIVATE
       Run an action with the Context disabled.
    with_disabled : Function -> Any
    with_disabled self ~action =
        with_disabled_context self Runtime.current_execution_environment action

## PRIVATE
   ADVANCED

   Returns the name of the current execution environment.
current_execution_environment : Text
current_execution_environment = @Builtin_Method "Runtime.current_execution_environment"

## PRIVATE
   ADVANCED

   Enables a specific context in the provided runtime environment for the duration of the execution of the action.

   Arguments:
   - environment: Name of the execution environment.
   - context: The context to enable.
   - action: Action to be performed with the context enabled.
with_enabled_context : Context -> Text -> Function -> Any
with_enabled_context context environment=Runtime.current_execution_environment ~action =
    with_enabled_context_builtin context (environment.to_case Case.Lower) action

## PRIVATE
   ADVANCED

   Enables a specific context in the provided runtime environment for the duration of the execution of the action.

   This method is internal, using `with_enabled_context` is preferred as it provides correct defaults.

   Arguments:
   - environment: Name of the execution environment.
   - context: The context to enable.
   - action: Action to be performed with the context enabled.
with_enabled_context_builtin : Context -> Text -> Function -> Any
with_enabled_context_builtin context environment ~action = @Builtin_Method "Runtime.with_enabled_context_builtin"

## PRIVATE
   ADVANCED

   Disables a specific context in the provided runtime environment for the duration of the execution of the action.

   Arguments:
   - environment: Name of the execution environment.
   - context: The context to disable.
   - action: Action to be performed with the context disabled.
with_disabled_context : Context -> Text -> Function -> Any
with_disabled_context context environment=Runtime.current_execution_environment ~action =
    with_disabled_context_builtin context (environment.to_case Case.Lower) action

## PRIVATE
   ADVANCED

   Disables a specific context in the provided runtime environment for the duration of the execution of the action.

   This method is internal, using `with_disabled_context` is preferred as it provides correct defaults.

   Arguments:
   - environment: Name of the execution environment.
   - context: The context to disable.
   - action: Action to be performed with the context disabled.
with_disabled_context_builtin : Context -> Text -> Function -> Any
with_disabled_context_builtin context environment ~action = @Builtin_Method "Runtime.with_disabled_context_builtin"
