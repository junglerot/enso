import project.Any.Any
import project.Data.Array.Array
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Nothing.Nothing
import project.Polyglot.Polyglot
import project.Runtime.Source_Location.Source_Location

from project.Data.Index_Sub_Range.Index_Sub_Range import First, Last

## Utilities for interacting with the runtime.

## PRIVATE

   Returns a raw representation of the current execution stack trace.
   You probably want `Runtime.get_stack_trace` instead.
primitive_get_stack_trace : Array
primitive_get_stack_trace = @Builtin_Method "Runtime.primitive_get_stack_trace"

## PRIVATE
   ADVANCED

   Returns the execution stack trace of its call site. The ordering of the
   resulting vector is such that the top stack frame is the first element.
get_stack_trace : Vector Stack_Trace_Element
get_stack_trace =
    prim_stack = primitive_get_stack_trace
    stack_with_prims = Vector.from_polyglot_array prim_stack
    # (First 2) drops the `Runtime.primitive_get_stack_trace` frame and this one
    stack = stack_with_prims.drop (First 2)
    stack.map wrap_primitive_stack_trace_element

## PRIVATE
   ADVANCED

   Suggests that the runtime perform garbage collection.

   It is not _guaranteed_ to perform garbage collection, but in practice
   will _usually_ begin a garbage collection cycle.

   > Example
     Ask for the runtime to collect garbage.

         Runtime.gc
gc : Nothing
gc = @Builtin_Method "Runtime.gc"

## PRIVATE
   ADVANCED

   Executes the provided action without allowing it to inline.

   Arguments:
   - action: The computation to be executed.

   This is particularly useful when writing benchmarks and
   performance-critical code where you need to prevent inlining from
   occurring.

   > Example
     Print something to the console without it being inlined.

         Runtime.no_inline <| IO.println "Hi!"
no_inline : Any -> Any
no_inline ~action = @Builtin_Method "Runtime.no_inline"

## PRIVATE
   ADVANCED

   Applies the following function to the given argument, without allowing
   them to inline.

   Arguments:
   - function: The one-argument function to call.
   - arg: The single argument for the function.

   This is particularly useful to avoid constant folding in benchmarks.

   > Example
     Print something to the console without it being inlined.

         Runtime.no_inline_with_arg IO.println "Hi!"
no_inline_with_arg : (Any -> Any) -> Any -> Any
no_inline_with_arg function arg = @Builtin_Method "Runtime.no_inline_with_arg"

## PRIVATE
   Converts a primitive stack trace element into the regular one.
wrap_primitive_stack_trace_element el =
    loc = if Polyglot.has_source_location el then Source_Location.Value (Polyglot.get_source_location el) else Nothing
    name = Polyglot.get_executable_name el
    Stack_Trace_Element.Value name loc

## PRIVATE
   ADVANCED

   Represents a single stack frame in an Enso stack trace.
type Stack_Trace_Element
    ## PRIVATE
    Value name source_location

    ## PRIVATE
    to_display_text : Text
    to_display_text self =
        loc = case self.source_location of
            Nothing -> "Unknown location"
            loc -> loc.formatted_coordinates
        "at "+self.name+" ("+loc+")"

## PRIVATE
   ADVANCED

    Types indicating allowed IO operations
type IO_Permissions
    ## PRIVATE
       ADVANCED
    Input
    ## PRIVATE
       ADVANCED
    Output

## PRIVATE
   ADVANCED

   Allows an action in the `Input` context to be performed in the given `env`,
   regardless of the Env configuration.

   This can be used to enable certain nodes to run their actions in the
   interactive mode, even if the configuration forbids it.
allow_input_in : Text -> Any -> Any
allow_input_in env ~action = @Builtin_Method "Runtime.allow_input_in"

## PRIVATE
   ADVANCED

   Allows an action in the `Output` context to be performed in the given `env`,
   regardless of the Env configuration.

   This can be used to enable certain nodes to run their actions in the
   interactive mode, even if the configuration forbids it.
allow_output_in : Text -> Any -> Any
allow_output_in env ~action = @Builtin_Method "Runtime.allow_output_in"
