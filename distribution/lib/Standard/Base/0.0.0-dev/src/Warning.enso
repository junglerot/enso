from Standard.Base import all
from Standard.Base.Data.Index_Sub_Range import While
from Standard.Base.Runtime import Stack_Trace_Element_Data

## A representation of a dataflow warning attached to a value.
@Builtin_Type
type Warning
    ## UNSTABLE

       Returns the warning value â€“ usually its explanation or other contents.
    value : Any
    value self = @Builtin_Method "Warning.value"

    ## UNSTABLE
       ADVANCED

       A stack trace for the original warning creation.
    origin : Vector.Vector Stack_Trace_Element
    origin self = @Builtin_Method "Warning.origin"

    ## UNSTABLE
       ADVANCED

       A list of locations where the warning was reassigned in the order of
       latest-first.

       Warnings are reassigned whenever they interact with specific language
       elements:
       - When pattern matching, the warnings of the scrutinee will be reassigned
         to the `case` expression result.
       - When calling a method, warnings assigned to `self` will be reassigned to
         the method return value.
       - When calling a polyglot function or method, warnings assigned to any
         arguments will be accumulated in the return value.
       - The standard library methods reassign warnings such that their dataflow
         nature is preserved.
    reassignments : Vector.Vector Stack_Trace_Element
    reassignments self =
        Vector.Vector_Data self.get_reassignments . map r->
            loc = case Polyglot.has_source_location r of
                False -> Nothing
                True -> Source_Location_Data (Polyglot.get_source_location r)
            Stack_Trace_Element_Data (Polyglot.get_executable_name r) loc

    ## PRIVATE

       Builtin method for getting the list of locations where the warnings was reassigned.
       Should use `Warning.reassignments` instead.
    get_reassignments : Any
    get_reassignments self = @Builtin_Method "Warning.get_reassignments"

## PRIVATE

   Creates a new instance of the primitive warning value.
   Arguments:
   - payload: value to which a Warning will be associated with.
   - origin: stacktrace representing the location where the warning is being created at.
create : Any -> Any -> Warning
create payload origin = @Builtin_Method "Warning.create"

## UNSTABLE

   Attaches a new warning to the value.
attach : Any -> Any -> Any
attach warning value =
    origin = Runtime.get_stack_trace
    attach_with_stacktrace value warning (origin.drop (First 1))

## PRIVATE

   Builtin utility function which attaches a new warning to the value
   and, compared to `Warning.attach` requires an explicit stacktrace associated with it.
attach_with_stacktrace : Any -> Any -> Vector.Vector Stack_Trace_Element -> Any
attach_with_stacktrace value warning origin = @Builtin_Method "Warning.attach_with_stacktrace"

## UNSTABLE

   Gets all the warnings attached to the given value. Warnings are returned in the
   reverse-chronological order with respect to their attachment time.
get_all : Any -> Vector.Vector Warning
get_all value = Vector.Vector_Data (get_all_array value)


## PRIVATE

   Builtin function that gets all the warnings attached to the given value.
get_all_array : Any -> Array Warning
get_all_array value = @Builtin_Method "Warning.get_all_array"

## UNSTABLE
   ADVANCED

   Sets a new list of warnings for the given value. Any warnings already present
   in `value` will be lost.

   Arguments:
   - value: the value to which warnings should be set to.
   - warnings: vector of warnings to set to the value.
set : Any -> Vector.Vector Warning -> Any
set value warnings = set_array value warnings.to_array

## PRIVATE

   Sets a new list of warnings for the given value. Any warnings already present
   in `value` will be lost.

   Arguments:
   - value: the value to which warnings should be set to.
   - warnings: array of warnings to set to the value.
set_array : Any -> Array Warning -> Any
set_array value warnings = @Builtin_Method "Warning.set_array"

## UNSTABLE
   Maps warnings attached to a value.

   Arguments:
   - mapper: the function to apply to all warnings. If it returns `Some` value,
     the given warning is replaced with the new value. If it returns `Nothing`
     the original warning remains unaffected.
   - value: the value whose warnings should be modified.

   > Example
     Map all `No_Match_Found` warnings to more specific messages. Any other
     attached warnings are unaffected.

         mapper warning = case warning of
             Matching.No_Matches_Found criteria -> Maybe.Some (Missing_Input_Columns criteria)
             _ -> Nothing
         Warning.map_attached_warnings mapper value
map_attached_warnings : (Any -> Maybe Any) -> Any -> Any
map_attached_warnings mapper value =
    map_attached_warnings_helper mapper value 1

## UNSTABLE
   An utility function which applies the mapping function both to any attached
   warnings and dataflow errors.

   Arguments:
   - mapper: the function to apply to all warnings or errors. If it returns
     `Some` value, the given warning or error is replaced with the new value. If
     it returns `Nothing` the original warning or error remains unaffected.
   - value: the value whose errors or warnings should be modified.

   > Example
     Map all `No_Match_Found` warnings or errors to more specific messages. Any
     other attached warnings or errors are unaffected.

         mapper error = case error of
             Matching.No_Matches_Found criteria -> Maybe.Some (Missing_Input_Columns criteria)
             _ -> Nothing
         Warning.map_warnings_and_errors mapper value
map_warnings_and_errors : (Any -> Maybe Any) -> Any -> Any
map_warnings_and_errors mapper value =
    mapped_warnings_or_error = map_attached_warnings_helper mapper value 1
    mapped_warnings_or_error.catch Any error->
        case mapper error of
            Maybe.Some new_error -> Error.throw new_error
            ## If the mapper did not want to affect the error, we return the
               original dataflow error as-is, to preserve its stacktrace.
            Nothing -> mapped_warnings_or_error

## PRIVATE
   Maps warnings attached to a value.

   An internal helper function to avoid repeating the implementation.
map_attached_warnings_helper : (Any -> Maybe Any) -> Any -> Integer -> Any
map_attached_warnings_helper mapper value frames_to_drop =
    warnings = get_all value
    mapped_warnings = warnings.map warning->
        case mapper warning.value of
            Maybe.Some new_payload ->
                self_call_name = "Warning.map_attached_warnings_helper"
                stack_trace = Runtime.get_stack_trace
                stack_trace_up_to_this_function = stack_trace.drop (While element-> element.name != self_call_name)
                new_origin = stack_trace_up_to_this_function.drop (First 1+frames_to_drop)
                create new_payload new_origin
            ## If the mapper did not want to affect this warning, we return the
               original (unwrapped) warning instance.
            Nothing -> warning
    set value mapped_warnings

## UNSTABLE
   A helper function which selects warnings matching a predicate and returns a
   pair whose first element is the original value with the matched warnings
   removed and the second element is the list of matched warnings.

   Arguments:
   - value: the value whose warnings are to be filtered.
   - predicate: a predicate specifying which warnings to detach. The predicate
     receives the warnings' payloads as its argument.

   > Example
     Detach warnings of a specific type.

         result = Warning.detach_selected_warnings value (_.is_a Illegal_State_Error)
         result.first # `value` with the matched warnings removed
         result.second # the list of matched warnings
detach_selected_warnings : Any -> (Any -> Boolean) -> Pair Any Vector
detach_selected_warnings value predicate =
    warnings = get_all value
    result = warnings.partition w-> predicate w.value
    matched = result.first
    remaining = result.second
    Pair_Data (set remaining value) matched

## UNSTABLE
   A helper function which gathers warnings matching some predicate and passes
   them into a function which can aggregate them.

   The merger function will not be called at all if no warnings match the
   criteria.

   Arguments:
   - value: the value whose warnings will be transformed.
   - matcher: a predicate selecting warnings to merge.
   - merger: a function taking a list of found payloads which should return a
     list of new warnings that should be attached. It returns a list to not
     limit it to merging warnings into a single warning.

   > Example
     Merge `No_Matches_Found` warnings into a single such warning.

         Warning.merge_matched_warnings value (_.is_a No_Matches_Found) warnings->
             all_criteria = warnings.flat_map .criteria
             [No_Matches_Found all_criteria]
merge_matched_warnings : Any -> (Any -> Boolean) -> (Vector -> Vector) -> Any
merge_matched_warnings value matcher merger =
    result = detach_selected_warnings value matcher
    if result.second.is_empty then result.first else
        new_warnings = merger (result.second.map .value)
        new_warnings.fold result.first acc-> warning->
            Warning.attach warning acc
