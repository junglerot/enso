import project.Any.Any
import project.Data.Array.Array
import project.Data.Index_Sub_Range.Index_Sub_Range
import project.Data.Maybe.Maybe
import project.Data.Numbers.Integer
import project.Data.Pair.Pair
import project.Data.Vector.Vector
import project.Error.Error
import project.Meta
import project.Nothing.Nothing
import project.Polyglot.Polyglot
import project.Runtime
import project.Runtime.Source_Location.Source_Location
import project.Runtime.Stack_Trace_Element

from project.Data.Boolean import Boolean, True, False

## A representation of a dataflow warning attached to a value.
@Builtin_Type
type Warning
    ## PRIVATE
       ADVANCED
       Attaches a new warning to the value.
    attach : Any -> Any -> Any
    attach warning value =
        origin = Runtime.get_stack_trace
        attach_with_stacktrace value warning (origin.drop (Index_Sub_Range.First 1))

    ## ADVANCED
       Are any warnings attached to the value?
    has_warnings : Any -> Boolean
    has_warnings value warning_type=Any =
        Warning.get_all value . any (w-> w.value.is_a warning_type)

    ## Remove the warnings (either all or of a specified type) attached to the value.

       Arguments:
       - warning_type: The type to remove if attached to the value. Defaults to all warnings.
    remove_warnings : Any -> Any
    remove_warnings value warning_type=Any =
        Warning.detach_selected_warnings value (w-> w.is_a warning_type) . first

    ## Throws the first matching warning (either all or of a specified type) as a data flow error.

       Arguments:
       - warning_type: The type to throw if attached to the value. Defaults to all warnings.
    throw_on_warning : Any -> Any
    throw_on_warning self warning_type=Any =
        warnings = Warning.get_all self
        first = warnings.find (w-> w.value.is_a warning_type) if_missing=Nothing
        if first.is_nothing then self else Error.throw first.value

    ## ADVANCED
       Gets all the warnings attached to the given value. Warnings are returned in the
       reverse-chronological order with respect to their attachment time.
    get_all : Any -> Vector Warning
    get_all value = Vector.from_polyglot_array (get_all_array value)

    ## PRIVATE
       ADVANCED

       Sets a new list of warnings for the given value. Any warnings already present
       in `value` will be lost.

       Arguments:
       - value: the value to which warnings should be set to.
       - warnings: vector of warnings to set to the value.
    set : Any -> Vector Warning -> Any
    set value warnings = set_array value warnings.to_array

    ## ADVANCED
       Returns the provided value with any warnings removed from it.

       Arguments:
       - value: the value from which warnings should be removed.
    clear : Any -> Any
    clear value = Warning.set value []

    ## PRIVATE
       ADVANCED
       Executes the provided function with the given argument with its warnings
       suspended.

       Inside of the provided function, the argument value will have no warnings
       attached. The result will inherit the warnings from the original argument
       as well as any warnings that were attached to it inside of the function.

       Arguments:
       - arg: the value to pass to the function whose warnings should be
         suspended.
       - function: the function to execute with the given argument.

       > Example
         Detect warnings reported during a call to `bar` and raise them as
         errors, but also ensure that the result inherits any warnings
         originally attached to `foo`.

             Warning.with_suspended foo foo->
                result = bar foo
                ## This will contain warnings reported during execution of
                   `bar`, but it will not be tainted with earlier warnings
                   coming from `foo`.
                inner_warnings = Warning.get_all result . map .value
                if inner_warnings.is_empty then result else
                    Error.throw inner_warnings.first
    with_suspended : Any -> (Any -> Any) -> Any
    with_suspended arg function =
       ## The case-of is used to ensure that warnings of `arg` will be inherited
          by the result.
       case arg of
           _ -> function (Warning.clear arg)

    ## PRIVATE
       ADVANCED
       Maps warnings attached to a value.

       Arguments:
       - mapper: the function to apply to all warnings. If it returns `Some` value,
         the given warning is replaced with the new value. If it returns `Nothing`
         the original warning remains unaffected.
       - value: the value whose warnings should be modified.

       > Example
         Map all `No_Match_Found` warnings to more specific messages. Any other
         attached warnings are unaffected.

             mapper warning = case warning of
                 Matching.No_Matches_Found criteria -> Maybe.Some (Missing_Input_Columns.Error criteria)
                 _ -> Nothing
             Warning.map_attached_warnings mapper value
    map_attached_warnings : (Any -> Maybe Any) -> Any -> Any
    map_attached_warnings mapper value =
        map_attached_warnings_helper mapper value 1

    ## PRIVATE
       ADVANCED
       An utility function which applies the mapping function both to any attached
       warnings and dataflow errors.

       Arguments:
       - mapper: the function to apply to all warnings or errors. If it returns
         `Some` value, the given warning or error is replaced with the new value. If
         it returns `Nothing` the original warning or error remains unaffected.
       - value: the value whose errors or warnings should be modified.

       > Example
         Map all `No_Match_Found` warnings or errors to more specific messages. Any
         other attached warnings or errors are unaffected.

             mapper error = case error of
                 Matching.No_Matches_Found criteria -> Maybe.Some (Missing_Input_Columns.Error criteria)
                 _ -> Nothing
             Warning.map_warnings_and_errors mapper value
    map_warnings_and_errors : (Any -> Maybe Any) -> Any -> Any
    map_warnings_and_errors mapper value =
        mapped_warnings_or_error = map_attached_warnings_helper mapper value 1
        mapped_warnings_or_error.catch Any error->
            case mapper error of
                Maybe.Some new_error -> Error.throw new_error
                ## If the mapper did not want to affect the error, we return the
                   original dataflow error as-is, to preserve its stacktrace.
                Nothing -> mapped_warnings_or_error

    ## ADVANCED
       A helper function which selects warnings matching a predicate and returns a
       pair whose first element is the original value with the matched warnings
       removed and the second element is the list of matched warnings.

       Arguments:
       - value: the value whose warnings are to be filtered.
       - predicate: a predicate specifying which warnings to detach. The predicate
         receives the warnings' payloads as its argument.

       > Example
         Detach warnings of a specific type.

             result = Warning.detach_selected_warnings value (_.is_a Illegal_State.Error)
             result.first # `value` with the matched warnings removed
             result.second # the list of matched warnings
    detach_selected_warnings : Any -> (Any -> Boolean) -> Pair Any Vector
    detach_selected_warnings value predicate =
        warnings = Warning.get_all value
        result = warnings.partition w-> predicate w.value
        matched = result.first
        remaining = result.second
        Pair.new (Warning.set value remaining) matched

    ## PRIVATE
       ADVANCED
       A helper function which gathers warnings matching some predicate and passes
       them into a function which can aggregate them.

       The merger function will not be called at all if no warnings match the
       criteria.

       Arguments:
       - value: the value whose warnings will be transformed.
       - matcher: a predicate selecting warnings to merge.
       - merger: a function taking a list of found payloads which should return a
         list of new warnings that should be attached. It returns a list to not
         limit it to merging warnings into a single warning.

       > Example
         Merge `No_Matches_Found` warnings into a single such warning.

             Warning.merge_matched_warnings value (_.is_a No_Matches_Found) warnings->
                 all_criteria = warnings.flat_map .criteria
                 [No_Matches_Found all_criteria]
    merge_matched_warnings : Any -> (Any -> Boolean) -> (Vector -> Vector) -> Any
    merge_matched_warnings value matcher merger =
        result = Warning.detach_selected_warnings value matcher
        if result.second.is_empty then result.first else
            new_warnings = merger (result.second.map .value)
            new_warnings.fold result.first acc-> warning->
                Warning.attach warning acc

    ## Returns the warning value â€“ usually its explanation or other contents.
    value : Any
    value self = @Builtin_Method "Warning.value"

    ## ADVANCED

       A stack trace for the original warning creation.
    origin : Vector Stack_Trace_Element
    origin self = @Builtin_Method "Warning.origin"

    ## PRIVATE
       ADVANCED

       A list of locations where the warning was reassigned in the order of
       latest-first.

       Warnings are reassigned whenever they interact with specific language
       elements:
       - When pattern matching, the warnings of the scrutinee will be reassigned
         to the `case` expression result.
       - When calling a method, warnings assigned to `self` will be reassigned to
         the method return value.
       - When calling a polyglot function or method, warnings assigned to any
         arguments will be accumulated in the return value.
       - The standard library methods reassign warnings such that their dataflow
         nature is preserved.
    reassignments : Vector Stack_Trace_Element
    reassignments self =
        Vector.from_polyglot_array self.get_reassignments . map r->
            loc = case Polyglot.has_source_location r of
                False -> Nothing
                True -> Source_Location.Value (Polyglot.get_source_location r)
            Stack_Trace_Element.Value (Polyglot.get_executable_name r) loc

    ## PRIVATE

       Builtin method for getting the list of locations where the warnings was reassigned.
       Should use `Warning.reassignments` instead.
    get_reassignments : Array Any
    get_reassignments self = @Builtin_Method "Warning.get_reassignments"

## PRIVATE

   Creates a new instance of the primitive warning value.
   Arguments:
   - payload: value to which a Warning will be associated with.
   - origin: stacktrace representing the location where the warning is being created at.
create : Any -> Any -> Warning
create payload origin = @Builtin_Method "Warning.create"

## PRIVATE

   Builtin utility function which attaches a new warning to the value
   and, compared to `Warning.attach` requires an explicit stacktrace associated with it.
attach_with_stacktrace : Any -> Any -> Vector Stack_Trace_Element -> Any
attach_with_stacktrace value warning origin = @Builtin_Method "Warning.attach_with_stacktrace"

## PRIVATE

   Builtin function that gets all the warnings attached to the given value.
get_all_array : Any -> Array Warning
get_all_array value = @Builtin_Method "Warning.get_all_array"

## PRIVATE

   Sets a new list of warnings for the given value. Any warnings already present
   in `value` will be lost.

   Arguments:
   - value: the value to which warnings should be set to.
   - warnings: array of warnings to set to the value.
set_array : Any -> Array Warning -> Any
set_array value warnings = @Builtin_Method "Warning.set_array"

## PRIVATE
   Maps warnings attached to a value.

   An internal helper function to avoid repeating the implementation.
map_attached_warnings_helper : (Any -> Maybe Any) -> Any -> Integer -> Any
map_attached_warnings_helper mapper value frames_to_drop =
    warnings = Warning.get_all value
    mapped_warnings = warnings.map warning->
        case mapper warning.value of
            Maybe.Some new_payload ->
                self_call_name = "Warning.map_attached_warnings_helper"
                stack_trace = Runtime.get_stack_trace
                stack_trace_up_to_this_function = stack_trace.drop (Index_Sub_Range.While element-> element.name != self_call_name)
                new_origin = stack_trace_up_to_this_function.drop (Index_Sub_Range.First 1+frames_to_drop)
                create new_payload new_origin
            ## If the mapper did not want to affect this warning, we return the
               original (unwrapped) warning instance.
            Nothing -> warning
    Warning.set value mapped_warnings
