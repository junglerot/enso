import project.Data.Text.Text
import project.Error.Error
import project.Meta
import project.Nothing.Nothing
import project.Panic.Panic
import project.System.File.File

polyglot java import java.io.IOException
polyglot java import java.nio.file.AccessDeniedException
polyglot java import java.nio.file.NoSuchFileException
polyglot java import java.nio.file.FileAlreadyExistsException

## Errors when reading or writing to a file.
type File_Error
    ## An error that indicates that the requested file does not exist.

       Arguments:
       - file: The file that doesn't exist.
    Not_Found (file : File)

    ## Indicates that a destination file already exists.
    Already_Exists (file : File)

    ## Indicates that the user did not have the permission to complete the
       requested operation on the given file.
    Access_Denied (file : File)

    ## A generic IO error.

       Arguments:
       - file: The file that couldn't be read.
       - message: The message for the error.
    IO_Error (file : File) (message : Text)

    ## Indicates that the given file's type is not supported.
    Unsupported_Type (file : File)

    ## Indicates that the given type cannot be serialized to the provided file
       format.
    Unsupported_Output_Type (format : File_Format | File) (data_type : Any)

    ## Indicates that the given file is corrupted, i.e. the data it contains
       is not in the expected format.
    Corrupted_Format (file : File) (message : Text) (cause : Any | Nothing = Nothing)

    ## UNSTABLE

       Convert the File error to a human-readable format.
    to_display_text : Text
    to_display_text self = case self of
        File_Error.Not_Found  file -> "The file at " + file.path + " does not exist."
        File_Error.IO_Error file msg -> msg + " (" + file.path + ")."
        File_Error.Already_Exists file -> "The file at "+file.path+" already exists."
        File_Error.Access_Denied file -> "Insufficient permissions to perform the desired operation on the file at "+file.path+"."
        File_Error.Unsupported_Type file -> "The "+file.path+" has a type that is not supported."
        File_Error.Unsupported_Output_Type format data_type ->
            format_name = case format of
                file : File -> file.name
                _ -> (Meta.meta format).constructor.name
            "Values of type "+data_type.to_text+" cannot be written as format "+format_name.to_text+"."
        File_Error.Corrupted_Format file msg _ -> "The file at " + file.path + " is corrupted: " + msg

    ## PRIVATE

       Utility method for running an action with Java exceptions mapping.
    handle_java_exceptions file ~action =
        Panic.catch IOException action caught_panic->
            File_Error.wrap_io_exception file caught_panic.payload

    ## PRIVATE
       Raises an error indicating that the user does not have permission to
       access the file in a given way.
    access_denied : File -> Nothing ! File_Error
    access_denied file = Error.throw (File_Error.Access_Denied file)

    ## PRIVATE

       Converts a Java `IOException` into its Enso counterpart.
    wrap_io_exception file io_exception = case io_exception of
        _ : NoSuchFileException -> Error.throw (File_Error.Not_Found file)
        _ : FileAlreadyExistsException -> Error.throw (File_Error.Already_Exists file)
        _ : AccessDeniedException -> File_Error.access_denied file
        _ -> Error.throw (File_Error.IO_Error file "An IO error has occurred: "+io_exception.to_text)
