from Standard.Base import all

## PRIVATE
   A placeholder for reporting warnings. It should be replaced once the warning
   mechanism is designed and implemented.
type Warning_System
    type Warning_System (warning_callback : Any -> Nothing) (mapping : Any -> Any)

    ## UNSTABLE
       Attaches a warning to a value.

       If the warning argument holds a dataflow error, the error is also
       inherited by the decorated value.
    attach : Any -> Any -> Any
    attach decorated_value warning_payload =
        case decorated_value of
            _ ->
                case warning_payload of
                    _ ->
                        this.warning_callback <| this.mapping warning_payload
                        decorated_value

    ## UNSTABLE
       Attaches multiple warnings to a value.

       If the warning argument holds a dataflow error, the error is also
       inherited by the decorated value.
    attach_many : Any -> Vector -> Any
    attach_many decorated_value warnings =
        warnings.fold decorated_value acc-> warning->
            this.attach acc warning

    ## PRIVATE
    with_mapping : (Any -> Any) -> Warning_System
    with_mapping new_mapping =
        Warning_System this.warning_callback (new_mapping << this.mapping)

## PRIVATE
   The default implementation of a warning system mock.

   To be removed once warnings are implemented.
default : Warning_System
default =
    callback = warning->
        IO.println "[WARNING] "+warning.to_display_text
    Warning_System callback (x->x)

## UNSTABLE
   Maps warnings attached to a value.

   Currently it is not implemented as the warning system is missing. It just
   returns the original value without changes.
map_attached_warnings : (Any -> Any) -> Warning_System -> (Warning_System -> Any) -> Any
map_attached_warnings mapper warnings callback =
    new_warnings = warnings.with_mapping mapper
    result = callback new_warnings
    result

## UNSTABLE
   An utility function which applies the mapping function both to any attached
   warnings and dataflow errors.

   The Warning_System has to be passed through to be able to correctly map the
   warnings.

   Once the proper Warning system is implemented, the new signature will be:
       (Any -> Any) -> Any -> Any

map_warnings_and_errors : (Any -> Any) -> Warning_System -> (Warning_System -> Any) -> Any
map_warnings_and_errors mapper warnings callback =
    (here.map_attached_warnings mapper warnings callback) . map_error mapper

## PRIVATE
   A temporary helper for testing warnings.

   Gets a closure which takes a `Warning_System` instance and runs some action.
   It returns a `Pair` containing the result of the closure and a list of
   warnings reported when running it.
test_warnings : (Warning_System -> Any) -> Pair Any (Vector Any)
test_warnings closure =
    builder = Vector.new_builder
    warning_system = Warning_System builder.append (x->x)
    result = closure warning_system
    warnings = builder.to_vector
    Pair result warnings
