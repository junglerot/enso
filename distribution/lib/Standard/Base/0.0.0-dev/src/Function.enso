import project.Any.Any
import project.Data.Vector.Vector

## A function is any type that represents a not-yet evaluated computation.

   Methods are represented as functions with dynamic dispatch semantics on
   the this argument.
@Builtin_Type
type Function

    ## ADVANCED
       Applies the function `self` to the provided argument.

       Arguments:
       - argument: The argument to apply `self` to.

       ? Piping Blocks to Functions
         This construction is particularly useful for passing a block as an argument
         to a function. This means that you can compute more sophisticated values
         in-line, as shown in the example below.

       > Example
         Applying a function to a block.

             (x -> x + 1) <|
                y = 1 ^ 3
                3 + y
    <| : Any -> Any
    <| self ~argument = @Builtin_Method "Function.<|"

    ## ADVANCED
       Composes two functions together, for `f << g` creating the function
       composition `f ∘ g` (equivalent to `x -> f (g x)`).

       Arguments:
       - that: The function to compose with `self`.

       > Example
         Multiply by 2 and then add 1 as a function applied to 2.

             (+1 << *2) 2
    << : (Any -> Any) -> (Any -> Any)
    << self ~that = x -> self (that x)

    ## ADVANCED
       Composes two functions together in the forward direction, for `f >> g`
       creating the function composition `g ∘ f` (equivalent to `x -> g (f (x))`).

       Arguments:
       - that: The function to compose with `self`.

       > Example
         Add one and then multiply by two as a function applied to 2.

             (+1 >> *2) 2
    >> : (Any -> Any) -> (Any -> Any)
    >> self ~that = x -> that (self x)


## An identity function which returns the provided argument.

   Arguments:
   - x: the value to return.

   > Example
     five = Function.identity 5 # returns number 5
identity : Any -> Any
identity x = x

## Flips the first two arguments of a function. Returns function that
   takes two arguments, but in opposite order.

   Arguments:
   - f function that takes two arguments

   > Example
    IO.println <| Function.flip (+) "world" "hello" # Prints 'helloworld'
flip : (Any -> Any -> Any) -> (Any -> Any -> Any)
flip f = (x -> y -> f y x)


## Creates a function which drops its input and returns the provided value instead.
   The expression const a is the same as \_ -> a.

   Arguments:
   - x constant value to return

   > Example
    IO.println <| [1, 2, 3].map (Function.const 7) # Prints '[7, 7, 7]'
const : Any -> Any -> Any
const x _ = x

## Converts a single-argument function accepting a pair of elements into a multi-argument one.

   Arguments:
   - f function accepting pair of values
curry : (Vector Any -> Any) -> (Any -> Any -> Any)
curry f = x -> y -> f [x, y]

## Converts a multi-argument function into a single-argument one accepting a pair of elements.

   Arguments:
   - f function accepting multiple arguments
uncurry : (Any -> Any -> Any) -> (Vector Any -> Any)
uncurry f = (pair -> f pair.first pair.second)
