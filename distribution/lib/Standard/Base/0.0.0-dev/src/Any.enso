import project.Data.Pair.Pair
import project.Data.Range.Extensions
import project.Data.Text.Text
import project.Error.Error
import project.Errors.Common.Incomparable_Values
import project.Errors.Common.No_Such_Conversion
import project.Errors.Common.Type_Error
import project.Nothing.Nothing
import project.Meta
import project.Panic.Panic

from project.Data.Boolean import Boolean, True, False
from project.Data.Ordering import all

## Any is the universal top-type, with all other types being subsumed by it.

   If a value of type Any is expected in a given location, _any value_ can
   be used in that position.
@Builtin_Type
type Any

    ## PRIVATE

       Executes the provided handler on a dataflow error, or executes as
       identity on a non-error value.

       Arguments:
       - handler: The function to call on this if it is an error value.
    catch_primitive : (Error -> Any) -> Any
    catch_primitive self handler = @Builtin_Method "Any.catch_primitive"

    ## Generic conversion of an arbitrary Enso value to a corresponding textual
       representation.

       > Example
         Getting a textual representation of the number 7.

             7.to_text
    to_text : Text
    to_text self = @Builtin_Method "Any.to_text"

    ## Generic conversion of an arbitrary Enso value to a corresponding human-readable
       representation.

       > Example
         Getting a human-readable representation of the number 7.

             7.to_text
    pretty : Text
    pretty self = @Builtin_Method "Any.pretty"

    ## Generic conversion of an arbitrary Enso value to a corresponding short
       human-readable representation.

       > Example
         Getting a short human-readable textual representation of the number 7.

             7.to_display_text
    to_display_text : Text
    to_display_text self = @Builtin_Method "Any.to_display_text"

    ## ALIAS Equality

       Checks if `self` is equal to `that`.

       Arguments:
       - that: The object to compare `self` with.

       Two values are considered to be equal in Enso when they obey the following
       recursive properties:
       - At each level, they have the same structure.
       - The value of each field in `self` is equal (by this definition) to the
         corresponding field in `that`.

       ! Implementing Your Own Equality
         Equality in Enso is defined to allow comparison of any two values
         (universal equality), no matter if they are not directly comparable. When
         implementing equality for your own types, keep in mind that it needs to
         work with any Enso value as the `that` argument.

       ! Unicode Equality
         The definition of equality includes Unicode canonicalization. I.e. two
         texts are equal if they are identical after canonical decomposition. This
         ensures that different ways of expressing the same character in the
         underlying binary representation are considered equal.

       ? Generic Equality and Performance
         While the generic equality provided here will work for _all_ values in
         Enso, its performance may often be suboptimal. Many types can implement
         their own equality operations that will be more efficient than these.

       > Example
         The string 'é' (i.e. the character U+00E9, LATIN SMALL LETTER E WITH ACUTE)
         is canonically the same as the string 'e\u0301' (i.e. the letter `e`
         followed by U+0301, COMBINING ACUTE ACCENT). Therefore:

             ('é' == 'e\u0301') == True

       > Example
         Checking if the variable `a` is equal to `147`.

             from Standard.Base import all

             example_equality =
                 a = 7 * 21
                 a == 147
    == : Any -> Boolean
    == self that =
        # If there is No_Such_Conversion, then `self` and `that` are probably
        # host or polyglot values, so we just compare them with the default comparator.
        eq_self = Panic.catch No_Such_Conversion (Comparable.from self) _-> Default_Comparator
        eq_that = Panic.catch No_Such_Conversion (Comparable.from that) _-> Default_Comparator
        similar_type = Meta.is_same_object eq_self eq_that
        case similar_type of
            False -> False
            True ->
                case Meta.is_same_object eq_self Default_Comparator of
                    # Shortcut for objects with Default_Comparator, because of the performance.
                    True -> Comparable.equals_builtin self that
                    False ->
                        case eq_self.compare self that of
                            Ordering.Equal -> True
                            _ -> False

    ## ALIAS Inequality

       Checks if `self` is not equal to `that`.

       Arguments:
       - that: The object to compare `self` against.

       ! Implementing Your Own Inequality
         We recommend that you do not implement your own inequality, instead relying
         on the default definition given here. If you do, please ensure that you
         satisfy universal equality, as described in the documentation for `Any.==`.

       > Example
         Checking if the variable `a` is not equal to `147`.

             from Standard.Base import all

             example_inequality =
                 a = 7 * 21
                 a != 147
    != : Any -> Boolean
    != self that = (self == that).not

    ## ALIAS Greater Than

       Checks if `self` is greater than `that`.

       Arguments:
       - that: The value to compare `self` against.

       To be comparable, a custom object must have an associated comparator
       which will return `Ordering.Less/Greater` for unequal values. Otherwise,
       this will raise `Incomparable_Values` error. See `Ordering.enso` for
       information how comparators work.

       > Example
         Checking if the variable `a` is greater than `147`.

             from Standard.Base import all

             example_greater =
                 a = 7 * 28
                 a > 147
    > : Any -> Boolean ! Incomparable_Values
    > self that =
        assert_same_comparators self that <|
            case (Comparable.from self).compare self that of
                Ordering.Greater -> True
                Nothing -> Error.throw (Incomparable_Values.Error self that)
                _ -> False

    ## ALIAS Greater Than or Equal

       Checks if `self` is greater than or equal to `that`.

       Arguments:
       - that: The value to compare `self` against.

       ! Implementing Greater Than or Equal
         While it is often possible to implement a more efficient version of this
         operation for complex types, care must be taken to ensure that your
         implementation is semantically equivalent to the disjunction of the
         greater than and equal to operations.

       > Example
         Checking if the variable `a` is greater than or equal to `147`.

             from Standard.Base import all

             example_greater_eq =
                 a = 6 * 21
                 a >= 147
    >= : Any -> Boolean ! Incomparable_Values
    >= self that =
        assert_same_comparators self that <|
            case (Comparable.from self).compare self that of
                Ordering.Equal -> True
                Ordering.Greater -> True
                Nothing -> Error.throw (Incomparable_Values.Error self that)
                _ -> False

    ## ALIAS Less Than

       Checks if `self` is less than `that`.

       Arguments:
       - that: The value to compare `self` against.

       To be comparable, a custom object must have an associated comparator
       which will return `Ordering.Less/Greater` for unequal values. Otherwise,
       this will raise `Incomparable_Values` error. See `Ordering.enso` for
       information how comparators work.

       > Example
         Checking if the variable `a` is less than `147`.

             from Standard.Base import all

             example_less =
                 a = 7 * 21
                 a < 147
    < : Any -> Boolean ! Incomparable_Values
    < self that =
        assert_same_comparators self that <|
            case (Comparable.from self).compare self that of
                Ordering.Less -> True
                Nothing -> Error.throw (Incomparable_Values.Error self that)
                _ -> False

    ## ALIAS Less Than or Equal

       Checks if `self` is less than or equal to `that`.

       Arguments:
       - that: The value to compare `self` against.

       To have `<=` defined, a type must define both `<` and `==`.

       ! Implementing Less Than or Equal
         While it is often possible to implement a more efficient version of this
         operation for complex types, care must be taken to ensure that your
         implementation is semantically equivalent to the disjunction of the
         less than than and equal to operations.

       > Example
         Checking if the variable `a` is less than or equal to `147`.

             from Standard.Base import all

             example_less_eq =
                 a = 7 * 21
                 a < 147
    <= : Any -> Boolean ! Incomparable_Values
    <= self that =
        assert_same_comparators self that <|
            case (Comparable.from self).compare self that of
                Ordering.Equal -> True
                Ordering.Less -> True
                Nothing -> Error.throw (Incomparable_Values.Error self that)
                _ -> False

    ## Checks if the type is an instance of `Nothing`.

       Nothing in Enso is used as a universal value to indicate the lack of presence
       of a value. This function is primarily useful in the IDE.

       > Example
         Checking if the value 1 is nothing.

             1.is_nothing
    is_nothing : Boolean
    is_nothing self = False

    ## UNSTABLE
       If `self` is Nothing then returns `function`.

       > Example
         If the value "Hello" is nothing return "".

             "Hello".if_nothing ""
    if_nothing : Any -> Any
    if_nothing self ~_ = self

    ## Executes the provided handler on an error, or returns the value unchanged.

       Arguments:
       - error_type: The type of error to handle. Defaults to `Any` to handle
         all errors.
       - handler: The function to call on this if it is an error value of a
         matching type. By default this is identity.

       > Example
         Catching an `Illegal_Argument` and returning its message.

             from Standard.Base import all

             example_catch =
                 error = Error.throw (Illegal_Argument.Error "My message")
                 error.catch Illegal_Argument (err -> err.message)

       > Example
         Catching any dataflow error and turning it into a regular value.

             from Standard.Base import all

             example_catch =
                 error = Error.throw 42
                 error.catch == 42
    catch : Any -> (Error -> Any) -> Any
    catch self (error_type = Any) (handler = x->x) =
        self.catch_primitive error_value->
            case error_value.is_a error_type of
                True -> handler error_value
                False -> self

    ## Transforms an error.

       Arguments:
       - f: The function used to transform the error.

       If `self` is a non-error value it is returned unchanged. However, if `self`
       is an error, the error is transformed using the provided function.

       > Example
         Transforming an error value to provide more information.

             from Standard.Base import all
             from Standard.Examples import Example_Error_Type

             example_map_error =
                my_map = Map.empty
                error = my_map.at "x"
                error.map_error (_ -> Example_Error_Type "x is missing")
    map_error : (Error -> Error) -> Any
    map_error self _ = self

    ## Checks if `self` is an error.

       > Example
         Checking if the provided value is an error.

             1.is_error
    is_error : Boolean
    is_error self = False

    ## UNSTABLE
       Returns the provided `other` value, unless `self` is an error.

       Arguments:
       - other: The value to return if `self` is not an error.

       The primary application of this function is to introduce a dataflow
       dependency between two otherwise unrelated operations. Very useful if one
       of the operations is performing a side-effect.

       Aside from ensuring that any dataflow errors are propagated, the result
       will also inherit any warnings attached to any of the two inputs.

       > Example
         Writing to a file and returning the file object if all went well, or an
         error if it failed.

             file.write "foo" . if_not_error file
    if_not_error : Any -> Any
    if_not_error self ~other = other

    ## Applies the provided function to `self` unless `self` is `Nothing`, which is
       returned unchanged.

       Arguments:
       - f: The function to apply to `self` if `self` is not `Nothing`.

       > Example
         Applying a function over a value 10.

             10.map_nothing *2
    map_nothing : (Any -> Any) -> Any | Nothing
    map_nothing self f = case self of
        Nothing -> Nothing
        a -> f a

    ## Applies the function `self` to the provided argument.

       Arguments:
       - argument: The argument to apply `self` to.

       ? Piping Blocks to Functions
         This construction is particularly useful for passing a block as an argument
         to a function. This means that you can compute more sophisticated values
         in-line, as shown in the example below.

       > Example
         Applying a function to a block.

             (x -> x + 1) <|
                y = 1 ^ 3
                3 + y
    <| : Any -> Any
    <| self ~argument = self argument

    ## Applies the function on the right hand side to the argument on the left.

       Arguments
       - function: The function to apply to `self`.

       ? `|>` or `.`?
         The eagle-eyed reader will notice that the operator dot (`.`) is very
         similar to the operator `|>`. In Enso, with the variable precedence of
         operators, this makes perfect sense. In general, we recommend using `.`.
         However, there are some contexts where variable precedence might be unclear
         or confusing, or where the function being applied is not a method. In these
         contexts we recommend using `|>`.

       > Example
         Applying multiple functions in a pipeline to compute a number and transform
         it to text.

             1 |> (* 2) |> (/ 100) |> .to_text
    |> : (Any -> Any) -> Any
    |> self ~function = function self

    ## Composes two functions together, for `f << g` creating the function
       composition `f ∘ g` (equivalent to `x -> f (g x)`).

       Arguments:
       - that: The function to compose with `self`.

       > Example
         Multiply by 2 and then add 1 as a function applied to 2.

             (+1 << *2) 2
    << : (Any -> Any) -> (Any -> Any)
    << self ~that = x -> self (that x)

    ## Composes two functions together in the forward direction, for `f >> g`
       creating the function composition `g ∘ f` (equivalent to `x -> g (f (x))`).

       Arguments:
       - that: The function to compose with `self`.

       > Example
         Add one and then multiply by two as a function applied to 2.

             (+1 >> *2) 2
    >> : (Any -> Any) -> (Any -> Any)
    >> self ~that = x -> that (self x)


## PRIVATE
   Checks if the comparators for the given objects are both of the same type. If so,
   proceeds with the given action, and if not, throws `Type_Error`.
assert_same_comparators : Any -> Any -> (Any -> Any) -> Any ! Type_Error
assert_same_comparators this that ~action =
    comp_this = Comparable.from this
    comp_that = Comparable.from that
    case Meta.is_same_object comp_this comp_that of
        True -> action
        False -> Error.throw (Type_Error.Error (Meta.type_of comp_this) comp_that "comp_that")
