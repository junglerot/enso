import project.Any.Any
import project.Data.Boolean.Boolean
import project.Data.Numbers.Integer
import project.Data.Numbers.Decimal
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.System

polyglot java import java.lang.Integer as Java_Integer
polyglot java import java.util.Random as Java_Random
polyglot java import org.enso.base.Random_Utils

## UNSTABLE
   Returns a default seed to use for random number generation.

   The returned seed may differ between each call to this method.
get_default_seed : Integer
get_default_seed = System.nano_time

## Constructs a new random number generator.
new : Integer -> Random_Number_Generator
new seed=get_default_seed =
    Random_Number_Generator.Value (Java_Random.new seed)

type Random_Number_Generator
    ## A random number generator.
    Value java_random

    ## Gets the next random Boolean.
    boolean : Decimal
    boolean self =
        self.java_random.nextBoolean

    ## Gets the next random Decimal between 0 and 1.
    decimal : Decimal
    decimal self =
        self.java_random.nextDouble

    ## Gets the next random Decimal from a normal distribution with mean 0 and std-dev 1.
    gaussian : Decimal
    gaussian self =
        self.java_random.nextGaussian

    ## Gets the next random integer between min (inclusive) and max (exclusive).

       Arguments:
        - min: the minimum value (inclusive) of the random integer.
        - max: the maximum value (exclusive) of the random integer.
    integer : Integer -> Integer -> Integer
    integer self min=0 max=100 =
        range = max - min
        if range < Java_Integer.MAX_VALUE then min + (self.java_random.nextInt range) else
            Error.throw (Illegal_Argument.Error "Currently only integer ranges of up to 2^31-1 are supported.")

## Returns a new vector containing a random sample of the input vector, without
   replacement.

   If the amount of elements to select is larger than the input vector size, it
   returns a random permutation of the input vector.
sample : Vector Any -> Integer -> Random_Number_Generator -> Vector Any
sample vector k rng =
    new_array = Random_Utils.sample vector.to_array k rng.java_random
    Vector.from_polyglot_array new_array

## Returns `k` indices sampled from the range [0, n-1] without replacement.

   If `k >= n`, it will return a random permutation of the indices.
random_indices : Integer -> Integer -> Random_Number_Generator -> Vector Integer
random_indices n k rng =
    array = Random_Utils.random_indices n k rng.java_random
    Vector.from_polyglot_array array
