from Standard.Base import all

import Standard.Base.Data.Text.Regex.Match.Match
import Standard.Base.Errors.Common.No_Such_Method
import Standard.Base.Network.HTTP.Response.Response
import Standard.Base.Network.HTTP.Response_Body.Response_Body

from Standard.Table import Table, Column

from Standard.Image import Image, Read_Flag, Matrix

## An example error type used in a number of examples.

   Arguments:
   - message: The message contained in the error type.
type Example_Error_Type
    Error message

## The standard library data directory.
data_dir : File
data_dir = enso_project.data

## An example CSV file for experimenting with Table and its APIs.
csv : File
csv = enso_project.data / "food_shop_inventory.csv"

## The path to the CSV.
csv_path : Text
csv_path = csv.path

## An example XLS file for experimenting with Table and its APIs.

   ! Downloading
     Calling this method will result in the spreadsheet file being downloaded
     from the internet if it is not already present on your disk. If you do not
     want this to happen, please place the spreadsheet in the
     `lib/Standard/Examples/<version>/data` folder for your Enso distribution.
xls : File
xls =
    url = "https://enso-data-samples.s3.us-west-1.amazonaws.com/spreadsheet.xls"
    file = enso_project.data / 'spreadsheet.xls'
    if file.exists.not then
        HTTP.fetch url . to_file file
    file

## An example XLSX file for experimenting with Table and its APIs.

   ! Downloading
     Calling this method will result in the spreadsheet file being downloaded
     from the internet if it is not already present on your disk. If you do not
     want this to happen, please place the spreadsheet in the
     `lib/Standard/Examples/<version>/data` folder for your Enso distribution.
xlsx : File
xlsx =
    url = "https://enso-data-samples.s3.us-west-1.amazonaws.com/spreadsheet.xlsx"
    file = enso_project.data / 'spreadsheet.xlsx'
    if file.exists.not then
        HTTP.fetch url . to_file file
    file

## A file that is used for writing temporary data as part of tests.
scratch_file : File
scratch_file =
    file = enso_project.data / "scratch_file"
    if file.exists then file.delete else Nothing
    file

## An example duration for experimenting with duration APIs.
duration : Duration
duration = Duration.between (Date_Time.new 2020 10 20) Date_Time.now

## An example amount of JSON as text.
json_text : Text
json_text = """
    [
      {
        "title": "Lord of the Rings",
        "author": {
          "name": "J. R. R. Tolkien",
          "year_of_birth": 1892
        }
      },
      {
        "title": "The Little Prince",
        "author": {
          "name": "Antoine de Saint-Exup√©ry",
          "year_of_birth": 1900
        }
      },
      {
        "title": "And Then There Were None",
        "author": {
          "name": "Agatha Christie",
          "year_of_birth": 1890
        }
      }
    ]

## Example JSON for working with.
json : Vector
json = Json.parse json_text

## An example JSON object.
json_object : JS_Object
json_object = json.first

## An example cons-list.
list : List
list = List.Cons 1 (List.Cons 2 (List.Cons 3 List.Nil))

## A simple map that contains some numbers mapped to their word equivalents.
map : Map
map = Map.empty . insert 1 "one" . insert 3 "three" . insert 5 "five"

## A dummy type that is used for example purposes.
type No_Methods

## Returns a no_such_method_error as a value.
no_such_method : No_Such_Method
no_such_method = Panic.recover Any No_Methods.frobnicate . catch

## A simple error type for example purposes.
type My_Error
    Error message

## Throws an error.
throw_error : Nothing ! My_Error
throw_error = Error.throw <| My_Error.Error "Example error."

## Throws a panic.
throw_panic : Nothing
throw_panic = Panic.throw <| My_Error.Error "Example panic."

## A URL for open-source geographic data about the locations of bus-stop ads in
   Los Angeles.
geo_data_url : Text
geo_data_url = "https://enso-data-samples.s3.us-west-1.amazonaws.com/Bus_Stop_Benches.geojson"

## Gets an HTTP response from a network endpoint.

   ! Makes a Network Request
     Calling this method will cause Enso to make a network request to a data
     endpoint.
get_response : Response
get_response = HTTP.fetch geo_data_url

## Gets HTTP data from a network endpoint.

   ! Makes a Network Request
     Calling this method will cause Enso to make a network request to a data
     endpoint.
get_geo_data : Response_Body
get_geo_data = HTTP.fetch geo_data_url

## A simple HTTP client for examples.
http_client : HTTP
http_client = HTTP.new (timeout = Duration.new seconds=30)

## A basic URI for examples.
uri : URI
uri = URI.parse "http://user:pass@example.com/foo/bar?key=val"

## A file that contains an image.

   ! Downloading
     Calling this method will result in the image file being downloaded from
     the internet if it is not already present on your disk. If you do not want
     this to happen, please place the image in the
     `lib/Standard/Examples/<version>/data` folder for your Enso distribution.
image_file : File
image_file =
    url = "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Hue_alpha_falloff.png/320px-Hue_alpha_falloff.png"
    file = enso_project.data / "image.png"
    if file.exists.not then
        HTTP.fetch url . to_file file
    file

## A PNG image.

   ! Downloading
     Calling this method will result in the image file being downloaded from
     the internet if it is not already present on your disk. If you do not want
     this to happen, please place the image in the
     `lib/Standard/Examples/<version>/data` folder for your Enso distribution.
image : Image
image = Image.read image_file [Read_Flag.Alpha_Channel]

## A matrix that corresponds to `image`.
matrix : Matrix
matrix = image.to_matrix

## A silly little function that adds one to the provided number.
add_1_to : Number -> Number
add_1_to n = n + 1

## A function that just returns a constant boolean value.
get_boolean : Boolean
get_boolean = False

## A simple small piece of JSON that can easily be converted into a table.
simple_table_json : Text
simple_table_json =
    row_1 = JS_Object.from_pairs [['foo', 20], ['bar', 'baz'], ['baz', False]]
    row_2 = JS_Object.from_pairs [['bar', 'xyz'], ['baz', True]]
    row_3 = JS_Object.from_pairs [['baz', False], ['foo', 13]]
    [row_1, row_2, row_3].to_json

## The headers for the columns in the JSON table `simple_table_json`.
simple_table_json_headers : Vector Text
simple_table_json_headers = ["foo", "bar", "baz"]

## Some simple GeoJSON.
geo_json : JS_Object
geo_json = Json.parse <| '''
    {
      "type": "FeatureCollection",
      "features": [
        {
            "type": "Feature",
            "properties": { "foo": 1, "bar": "value2"},
            "geometry": { "type": "Point", "coordinates": [ -118.58, 34.19 ] }
        },
        {
            "type": "Feature",
            "properties": { "foo": 2, "baz": 3},
            "geometry": { "type": "Point", "coordinates": [ 10.11, 4.88, 19 ] }
        }
      ]
    }

## A small table column containing integers.
integer_column : Column
integer_column = Column.from_vector "Integer" [1, 4, 8, 2, 5]

## A small table column containing decimal numbers.
decimal_column : Column
decimal_column = Column.from_vector "Decimal" [2.30, -2.1, Nothing, -10.1, 1.0]

## A small table column containing booleans.
bool_column_1 : Column
bool_column_1 = Column.from_vector "Bools" [True, True, False, True, False]

## A small table column containing booleans.
bool_column_2 : Column
bool_column_2 = Column.from_vector "Bools" [False, True, Nothing, True, True]

## A small table column containing text.
text_column_1 : Column
text_column_1 = Column.from_vector "Text" ["Hello,", "my", "name", "is", "Enso"]

## A small table column containing text.
text_column_2 : Column
text_column_2 = Column.from_vector "Text" ["He,", "he", "he", "i", "so"]

## A simple table that contains basic shop inventory data for the food shop.
inventory_table : Table
inventory_table = csv.read

## A simple table that contains basic item popularity data for the food shop.
popularity_table : Table
popularity_table =
    (enso_project.data / "food_shop_popularity.csv") . read

## A simple tablethat contains basic transaction data for the food shop.
transactions_table : Table
transactions_table =
    (enso_project.data / "food_shop_transactions.csv") . read

## An example regex match.
match : Match
match =
    pattern = Regex.compile "(.. .. )(?<letters>.+)()??(?<empty>)??"
    pattern.match "aa ab abc a bc bcd"
