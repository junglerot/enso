from Standard.Base import all

from Standard.Table import all
import Standard.Table.Errors.Invalid_JSON_Format

import project.Helpers
import project.Helpers.Object_Type

## Converts a GeoJSON object to a Table.

   Arguments:
   - geo_json: The GeoJSON object to convert.
   - fields: The set of fields to extract from the GeoJSON object.
geo_json_to_table : (Vector | JS_Object) -> Vector Text -> Table
geo_json_to_table geo_json fields=Nothing = case geo_json of
    _ : Vector ->
        rows = geo_json.map item-> case item of
            _ : JS_Object ->
                if item.get "type" != Object_Type.Feature.to_text then Vector.fill fields.length Nothing else
                    row = Helpers.get_feature_row item
                    fields.map row.get
            _ -> Vector.fill fields.length Nothing
        cols = fields.map_with_index i->n-> [n, rows.map (_.at i)]
        Table.new cols
    _ : JS_Object ->
        if geo_json.get "type" != Object_Type.Feature_Collection.to_text then Error.throw (Invalid_JSON_Format.Error geo_json "not being a feature collection") else
            features = geo_json.get "features"
            case features of
                _ : Vector ->
                    feature_rows = features.map Helpers.get_feature_row
                    Table.from_objects feature_rows fields
                _ -> Error.throw (Invalid_JSON_Format.Error geo_json "not having the 'features' key.")
