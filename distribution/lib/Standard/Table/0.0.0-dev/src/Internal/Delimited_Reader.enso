from Standard.Base import all
import Standard.Table

import Standard.Base.Error.Common as Errors
from Standard.Base.Error.Problem_Behavior as Problem_Behavior_Module import Problem_Behavior
from Standard.Table.Error as Table_Errors import Duplicate_Output_Column_Names, Invalid_Output_Column_Names, Invalid_Row, Mismatched_Quote, Parser_Error, Additional_Invalid_Rows
from Standard.Base.Data.Text.Encoding as Encoding_Module import Encoding, Encoding_Error
from Standard.Table.Io.File_Format import Infer
from Standard.Table.Data.Data_Formatter as Data_Formatter_Module import Data_Formatter

polyglot java import org.enso.table.read.DelimitedReader
polyglot java import org.enso.table.read.ParsingFailedException
polyglot java import org.enso.table.parsing.problems.InvalidRow
polyglot java import org.enso.table.parsing.problems.MismatchedQuote
polyglot java import org.enso.table.parsing.problems.AdditionalInvalidRows
polyglot java import org.enso.table.util.problems.DuplicateNames
polyglot java import org.enso.table.util.problems.InvalidNames
polyglot java import java.lang.IllegalArgumentException
polyglot java import java.io.IOException
polyglot java import com.univocity.parsers.common.TextParsingException
polyglot java import org.enso.base.Encoding_Utils
polyglot java import java.io.InputStream
polyglot java import java.io.Reader

polyglot java import org.enso.table.parsing.IdentityParser
polyglot java import org.enso.table.parsing.TypeInferringParser
polyglot java import org.enso.table.read.QuoteStrippingParser

## Reads a delimited file according to the provided format.

   Arguments:
   - format: The specification of the delimited file format.
   - file: The file to read.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
read_file : Delimited -> File -> Problem_Behavior -> Any
read_file format file on_problems =
    ## We use the default `max_columns` setting. If we want to be able to
       read files with unlimited column limits (risking OutOfMemory
       exceptions), we can catch the exception indicating the limit has been
       reached and restart parsing with an increased limit.
    file.with_input_stream [File.Option.Read] stream->
        stream.with_java_stream java_stream->
            here.read_stream format java_stream on_problems related_file=file

## PRIVATE
   Reads an input stream according to the provided format.

   Arguments:
   - format: The specification of the delimited file format.
   - java_stream: A Java `InputStream` used as the data source.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
   - max_columns: Specifies the limit of columns to read. The limit is set to
     avoid `OutOfMemory` errors on malformed files. It must be a positive
     integer.
   - related_file: The file related to the provided `java_stream`, if available,
     or `Nothing`. It is used for more detailed error reporting.
read_stream : Delimited -> InputStream -> Problem_Behavior -> Integer -> File | Nothing -> Any
read_stream format java_stream on_problems max_columns=4096 related_file=Nothing =
    handle_io_exception ~action = Panic.catch IOException action caught_panic->
        Error.throw (File.wrap_io_exception related_file caught_panic.payload.cause)

    java_charset = format.encoding.to_java_charset
    handle_io_exception <|
        Encoding_Utils.with_stream_decoder java_stream java_charset reporting_stream_decoder->
            result = here.read_from_reader format reporting_stream_decoder on_problems max_columns
            decoding_problems = Vector.Vector reporting_stream_decoder.getReportedProblems . map Encoding_Error
            on_problems.attach_problems_after result decoding_problems

## PRIVATE
   Reads data from the provided `Reader` according to the provided format.

   The `encoding` parameter is ignored, instead the provided reader should
   handle any necessary decoding.

   Arguments:
   - format: The specification of the delimited file format.
   - java_reader: A Java `Reader` used as the source of decoded characters.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
   - max_columns: Specifies the limit of columns to read. The limit is set to
     avoid `OutOfMemory` errors on malformed files. It must be a positive
     integer.
read_from_reader : Delimited -> InputStream -> Problem_Behavior -> Integer -> Any
read_from_reader format java_reader on_problems max_columns=4096 =
    java_headers = case format.headers of
        True -> DelimitedReader.HeaderBehavior.USE_FIRST_ROW_AS_HEADERS
        Infer -> DelimitedReader.HeaderBehavior.INFER
        False -> DelimitedReader.HeaderBehavior.GENERATE_HEADERS
    row_limit = case format.row_limit of
        Nothing -> -1
        Integer -> format.row_limit
        _ -> Error.throw (Illegal_Argument_Error "`row_limit` should be Integer or Nothing.")

    translate_illegal_argument caught_panic =
        Error.throw (Illegal_Argument_Error caught_panic.payload.cause.getMessage)
    handle_illegal_arguments = Panic.catch IllegalArgumentException handler=translate_illegal_argument

    translate_parsing_failure caught_panic =
        Error.throw (here.translate_reader_problem caught_panic.payload.cause.problem)
    handle_parsing_failure = Panic.catch ParsingFailedException handler=translate_parsing_failure

    translate_parsing_exception caught_panic =
        cause = caught_panic.payload.cause.getCause
        if Java.is_instance cause IOException then Panic.throw cause else
            Error.throw (Parser_Error caught_panic.payload)
    handle_parsing_exception = Panic.catch TextParsingException handler=translate_parsing_exception

    handle_illegal_arguments <| handle_parsing_failure <| handle_parsing_exception <|
        warnings_as_errors = on_problems == Problem_Behavior_Module.Report_Error
        base_parser = if format.quote.is_nothing then IdentityParser.new else
            QuoteStrippingParser.new format.quote
        value_parser = if format.value_formatter.is_nothing then base_parser else
            wrapped = format.value_formatter.wrap_base_parser base_parser
            TypeInferringParser.new format.value_formatter.get_specific_type_parsers.to_array wrapped
        cell_type_guesser = if format.headers != Infer then Nothing else
            formatter = format.value_formatter.if_nothing Data_Formatter
            TypeInferringParser.new formatter.get_specific_type_parsers.to_array IdentityParser.new
        reader = DelimitedReader.new java_reader format.delimiter format.quote format.quote_escape java_headers format.skip_rows row_limit max_columns value_parser cell_type_guesser format.keep_invalid_rows warnings_as_errors
        result_with_problems = reader.read
        parsing_problems = Vector.Vector (result_with_problems.problems) . map here.translate_reader_problem
        on_problems.attach_problems_after (Table.Table result_with_problems.value) parsing_problems

translate_reader_problem problem =
    invalid_row = [InvalidRow, (java_problem-> Invalid_Row java_problem.source_row java_problem.table_index (Vector.Vector java_problem.row))]
    additional_invalid_rows = [AdditionalInvalidRows, (java_problem-> Additional_Invalid_Rows java_problem.count)]
    mismatched_quote = [MismatchedQuote, (_-> Mismatched_Quote)]
    duplicate_names = [DuplicateNames, (java_problem-> Duplicate_Output_Column_Names (Vector.Vector java_problem.duplicatedNames))]
    invalid_names = [InvalidNames, (java_problem-> Invalid_Output_Column_Names (Vector.Vector java_problem.invalidNames))]

    translations = [invalid_row, additional_invalid_rows, mismatched_quote, duplicate_names, invalid_names]
    found = translations.find t-> Java.is_instance problem t.first
    if found.is_error then problem else
        found.second problem
