from Standard.Base import all

import Standard.Base.Errors.Common.Index_Out_Of_Bounds
import Standard.Base.Errors.Common.Type_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

import project.Data.Table.Table
import project.Data.Column.Column
import project.Data.Conversions.Convertible_To_Columns.Convertible_To_Columns
import project.Data.Conversions.Convertible_To_Rows.Convertible_To_Rows
import project.Errors.No_Such_Column
import project.Extensions.Prefix_Name.Prefix_Name
import project.Internal.Fan_Out
import project.Internal.Java_Exports
import project.Internal.Java_Problems
from project.Internal.Java_Exports import make_inferred_builder

## PRIVATE
expand_column : Table -> Text | Integer -> (Vector Text) | Nothing -> Prefix_Name -> Table ! Type_Error | No_Such_Column | Index_Out_Of_Bounds
expand_column (table : Table) (column : Text | Integer) (fields : (Vector Text) | Nothing = Nothing) (prefix : Prefix_Name = Prefix_Name.Column_Name) =
    column_object = table.at column
    expanded = create_table_from_objects column_object.to_vector fields

    output_builder = Vector.new_builder table.column_count+expanded.column_count-1

    ## Resolve names
    resolved_prefix = case prefix of
        Prefix_Name.None -> ""
        Prefix_Name.Column_Name -> column_object.name+" "
        Prefix_Name.Custom value -> value
    naming_strategy = table.column_naming_helper.create_unique_name_strategy
    naming_strategy.mark_used (table.column_names.filter (c->c!=column_object.name))
    new_names = naming_strategy.make_all_unique (expanded.column_names.map n-> resolved_prefix+n)
    new_columns = new_names.zip expanded.columns (n->c-> c.rename n)

    ## Create Merged Columns
    table.columns.each c->
        if c.name != column_object.name then output_builder.append c else
            output_builder.append_vector_range new_columns

    Table.new output_builder.to_vector

## GROUP Standard.Base.Conversions
   Expand aggregate values in a column to separate rows.

   For each value in the specified column, if it is an aggregate (`Vector`,
   `Range`, etc.), expand it to multiple rows, duplicating the values in the
   other columns.

   Arguments:
   - column: The column to expand.
   - at_least_one_row: for an empty aggregate value, if `at_least_one_row` is
     true, a single row is output with `Nothing` for the aggregates column; if
     false, no row is output at all.

   The following aggregate values are supported:
   - `Array`
   - `Vector`
   - `List`
   - `Range`
   - `Date_Range`
   - `Pair

   Any other values are treated as non-aggregate values, and their rows are kept
   unchanged.

   In in-memory tables, it is permitted to mix values of different types.

   > Example
     Expand a column of integer `Vectors` to a column of `Integer`

     table = Table.new [["aaa", [1, 2]], ["bbb", [[30, 31], [40, 41]]]]
     # => Table.new [["aaa", [1, 1, 2, 2]], ["bbb", [30, 31, 40, 41]]]
@column Widget_Helpers.make_column_name_selector
expand_to_rows : Table -> Text | Integer -> Boolean -> Table ! Type_Error | No_Such_Column | Index_Out_Of_Bounds
expand_to_rows table column at_least_one_row=False =
    row_expander : Any -> Vector
    row_expander value:Convertible_To_Rows = value.to_vector

    Java_Problems.with_problem_aggregator Problem_Behavior.Report_Warning java_problem_aggregator->
        builder size = make_inferred_builder size java_problem_aggregator
        Fan_Out.fan_out_to_rows table column row_expander at_least_one_row column_builder=builder

## PRIVATE
create_table_from_objects : Any -> ((Vector Text) | Nothing) -> Table
create_table_from_objects (value : Convertible_To_Rows) (fields : Vector | Nothing) = if fields.is_nothing.not && fields.is_empty then Error.throw (Illegal_Argument.Error "The fields parameter cannot be empty.") else
    len = value.length

    Java_Problems.with_problem_aggregator Problem_Behavior.Report_Warning java_problem_aggregator->
        preset_fields = fields.is_nothing.not
        initial_map = if preset_fields.not then Map.empty else
            Map.from_vector (fields.map field_name-> [field_name, Java_Exports.make_inferred_builder len java_problem_aggregator]) error_on_duplicates=False

        # This is used to ensure that field names in the resulting table are in the order they were encountered.
        discovered_field_names = Vector.new_builder

        builder_map = case preset_fields of
            # Just get the queried keys from each object.
            True ->
                0.up_to len . each idx->
                    v = (value.getter idx).to Convertible_To_Columns
                    initial_map.each_with_key field_name-> builder->
                        builder.append (v.getter field_name)

                initial_map

            # In this mode we are discovering the key set as we go.
            False ->
                0.up_to len . fold initial_map current_map-> idx->
                    v = (value.getter idx).to Convertible_To_Columns
                    v.field_names.fold current_map inner_current_map-> f->
                        existing_builder = inner_current_map.get f Nothing
                        builder = existing_builder.if_nothing <|
                            discovered_field_names.append f
                            Java_Exports.make_inferred_builder len java_problem_aggregator
                        builder.fillUpToSize idx
                        builder.append (v.getter f)
                        new_map = if existing_builder.is_nothing.not then inner_current_map else
                            inner_current_map.insert f builder
                        new_map

        # Seal all builders and create columns
        column_map = builder_map.map_with_key name-> builder->
            builder.fillUpToSize len
            Column.from_storage name builder.seal

        column_map.if_not_error <|
            # Create a vector of columns, preserving the original order if it was specified.
            columns = case preset_fields of
                True  -> fields.distinct.map column_map.get
                False ->
                    if discovered_field_names.is_empty then Error.throw (Illegal_Argument.Error "Unable to discover expected column names, because all input objects had no fields. Specify fields explicitly if you need a constant set of expected columns.") else
                        discovered_field_names.to_vector.map column_map.get
            Table.new columns
