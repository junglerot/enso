from Standard.Base import all
import Standard.Base.Metadata.Display
import Standard.Base.Metadata.Widget
from Standard.Base.Metadata.Choice import Option
from Standard.Base.Metadata.Widget import Single_Choice, Vector_Editor
from Standard.Base.System.File_Format import format_types

import project.Data.Aggregate_Column.Aggregate_Column
import project.Data.Join_Condition.Join_Condition
import project.Data.Table.Table
import project.Data.Table_Conversions
import project.Data.Type.Value_Type.Auto
import project.Data.Type.Value_Type.Value_Type
import project.Internal.Parse_Values_Helper

## PRIVATE
   Make an aggregate column selector.
make_aggregate_column_selector : Table -> Display -> Boolean -> Widget
make_aggregate_column_selector table display=Display.Always include_group_by=True =
    col_names_selector = make_column_name_selector table display=Display.Always
    column_widget = ["column", col_names_selector]

    col_list_selector = make_column_name_vector_selector table display=Display.Always

    fqn = Meta.get_qualified_type_name Aggregate_Column
    group_by = if include_group_by then [Option "Group By" fqn+".Group_By" [column_widget]] else []
    count = Option "Count" fqn+".Count"
    count_distinct = Option "Count Distinct" fqn+".Count_Distinct" [["columns", col_list_selector]]
    first = Option "First" fqn+".First" [column_widget, ["order_by" , col_list_selector]]
    last = Option "Last" fqn+".Last" [column_widget, ["order_by" , col_list_selector]]

    count_not_nothing = Option "Count Not Nothing" fqn+".Count_Not_Nothing" [column_widget]
    count_nothing = Option "Count Nothing" fqn+".Count_Nothing" [column_widget]

    ## Should be a list of Text columns only
    count_not_empty = Option "Count Not Empty" fqn+".Count_Not_Empty" [column_widget]
    count_empty = Option "Count Empty" fqn+".Count_Empty" [column_widget]
    concatenate = Option "Concatenate" fqn+".Concatenate" [column_widget]
    shortest = Option "Shortest" fqn+".Shortest" [column_widget]
    longest = Option "Longest" fqn+".Longest" [column_widget]

    ## Should be a list of Numeric columns only
    sum = Option "Sum" fqn+".Sum" [column_widget]
    average = Option "Average" fqn+".Average" [column_widget]
    median = Option "Median" fqn+".Median" [column_widget]
    percentile = Option "Percentile" fqn+".Percentile" [column_widget]
    mode = Option "Mode" fqn+".Mode" [column_widget]
    standard_deviation = Option "Standard Deviation" fqn+".Standard_Deviation" [column_widget]

    # Should be a list of comparable columns only
    maximum = Option "Maximum" fqn+".Maximum" [column_widget]
    minimum = Option "Minimum" fqn+".Minimum" [column_widget]

    Single_Choice display=display values=(group_by+[count, count_distinct, first, last, count_not_nothing, count_nothing, count_not_empty, count_empty, concatenate, shortest, longest, sum, average, median, percentile, mode, standard_deviation, maximum, minimum])

## PRIVATE
   Make an Aggregate_Column list editor
make_aggregate_column_vector_selector : Table -> Display -> Widget
make_aggregate_column_vector_selector table display=Display.Always =
    item_editor = make_aggregate_column_selector table display=Display.Always
    # TODO this is a workaround for a dropdown issue
    Vector_Editor item_editor=item_editor item_default="(Aggregate_Column.Group_By)" display=display

## PRIVATE
   Make a column name selector.
make_column_name_selector : Table -> Display -> Widget
make_column_name_selector table display=Display.Always =
    col_names = table.column_names
    names = col_names.map n-> Option n n.pretty
    Single_Choice display=display values=names

## PRIVATE
   Make a multiple column name selector.
make_column_name_vector_selector : Table -> Display -> Widget
make_column_name_vector_selector table display=Display.Always =
    item_editor = make_column_name_selector table display=Display.Always
    Vector_Editor item_editor=item_editor item_default=item_editor.values.first.value display=display

## PRIVATE
   Make a join condition selector.
make_join_condition_selector : Table -> Display -> Widget
make_join_condition_selector table display=Display.Always =
    col_names_selector = make_column_name_selector table display=Display.Always

    fqn = "Join_Condition"
    equals = Option "Equals" fqn+".Equals" [["left", col_names_selector]]
    equals_ci = Option "Equals (Ignore Case)" fqn+".Equals_Ignore_Case" [["left", col_names_selector]]
    between = Option "Between" fqn+".Between" [["left", col_names_selector]]
    names=[equals, equals_ci, between]

    item_editor = Single_Choice display=display values=names
    Vector_Editor item_editor=item_editor item_default="("+item_editor.values.first.value+")" display=display

## PRIVATE
   Make a column name selector.
make_order_by_selector : Table -> Display -> Widget
make_order_by_selector table display=Display.Always =
    col_names = table.column_names
    names = col_names.fold [] c-> n-> c + [Option n+" (Asc)" n.pretty, Option n+" (Desc)" "(Sort_Column.Name "+n.pretty+" Sort_Direction.Descending)"]
    item_editor = Single_Choice display=display values=names
    Vector_Editor item_editor=item_editor item_default=names.first.value display=display

## PRIVATE
   Make a column rename name selector.
make_rename_name_vector_selector : Table -> Display -> Vector_Editor
make_rename_name_vector_selector table display=Display.Always =
    col_names = table.column_names
    names = col_names.map n-> Option n "["+n.pretty+", "+n.pretty+"]"
    item_editor = Single_Choice display=Display.Always values=names
    default_item = "["+col_names.first.pretty+", "+col_names.first.pretty+"]"
    Vector_Editor item_editor=item_editor item_default=default_item display=display

## PRIVATE
   Selector for type argument on `Column.parse`.
parse_type_selector : Boolean -> Widget
parse_type_selector include_auto=True =
    valid_parse_targets = Parse_Values_Helper.valid_parse_targets

    prefix = if include_auto then ['Auto'] else []
    names = prefix + valid_parse_targets

    fqn = Meta.get_qualified_type_name Value_Type
    choice = names.map n-> if n=='Auto' then (Meta.get_qualified_type_name Auto) else fqn+'.'+n

    options = names.zip choice . map pair-> Option pair.first pair.second
    Single_Choice display=Display.Always values=options

## PRIVATE
   Selector for writing a table to a file.
write_table_selector : Widget
write_table_selector =
    can_write type = if type == JSON_Format then True else
        Meta.meta type . methods . contains "write_table"
    all_types = [Auto_Detect] + (format_types.filter can_write)
    make_name type_obj = type_obj.to_text.replace "_Format" "" . replace "_" " "
    Single_Choice display=Display.Always values=(all_types.map n->(Option (make_name n) (File_Format.constructor_code n)))
