from Standard.Base import all

import project.Data.Table.Table
import project.Data.Type.Value_Type.Value_Type
from project.Internal.Fan_Out import all

polyglot java import org.enso.table.data.mask.OrderMask

## PRIVATE
   Splits a column of text into a set of new columns.
   See `Table.split_to_columns`.
split_to_columns : Table -> Text | Integer -> Text -> Integer | Nothing -> Problem_Behavior -> Table
split_to_columns table input_column_id delimiter="," column_count=Nothing on_problems=Report_Error =
    column = table.at input_column_id
    Value_Type.expect_text column <|
        fan_out_to_columns table input_column_id (handle_nothing (_.split delimiter)) column_count on_problems=on_problems

## PRIVATE
   Splits a column of text into a set of new rows.
   See `Table.split_to_rows`.
split_to_rows : Table -> Text | Integer -> Text -> Table
split_to_rows table input_column_id delimiter="," =
    column = table.at input_column_id
    Value_Type.expect_text column
        fan_out_to_rows table input_column_id (handle_nothing (_.split delimiter))

## PRIVATE
   Tokenizes a column of text into a set of new columns using a regular
   expression.
   See `Table.tokenize_to_columns`.
tokenize_to_columns : Table -> Text | Integer -> Text -> Case_Sensitivity -> Integer | Nothing -> Problem_Behavior -> Table
tokenize_to_columns table input_column_id pattern case_sensitivity column_count on_problems =
    column = table.at input_column_id
    Value_Type.expect_text column
        fan_out_to_columns table input_column_id (handle_nothing (_.tokenize pattern case_sensitivity)) column_count on_problems=on_problems

## PRIVATE
   Tokenizes a column of text into a set of new rows using a regular
   expression.
   See `Table.tokenize_to_rows`.
tokenize_to_rows : Table -> Text | Integer -> Text -> Case_Sensitivity -> Boolean -> Table
tokenize_to_rows table input_column_id pattern="." case_sensitivity=Case_Sensitivity.Sensitive at_least_one_row=False =
    column = table.at input_column_id
    Value_Type.expect_text column
        fan_out_to_rows table input_column_id (handle_nothing (_.tokenize pattern case_sensitivity)) at_least_one_row=at_least_one_row

## PRIVATE
   Converts a Text column into new columns using a regular expression
   pattern.
   See `Table.parse_to_columns`.
parse_to_columns : Table -> Text | Integer -> Text | Regex -> Case_Sensitivity -> Boolean -> Problem_Behavior -> Table
parse_to_columns table input_column_id (pattern:(Text | Regex)=".") case_sensitivity=Case_Sensitivity.Sensitive parse_values=True on_problems=Report_Error =
    regex = case pattern of
        _ : Regex -> pattern.recompile case_sensitivity
        _ : Text ->
            case_insensitive = case_sensitivity.is_case_insensitive_in_memory
            Regex.compile pattern case_insensitive=case_insensitive

    fun = handle_nothing (regex_parse_to_vectors regex)
    column_names = regex_to_column_names regex input_column_id

    column = table.at input_column_id

    new_table = Value_Type.expect_text column <|
        fan_out_to_rows_and_columns table input_column_id fun column_names at_least_one_row=True on_problems=on_problems
    if parse_values then new_table.parse on_problems=on_problems else new_table

## PRIVATE
   Create a parser from a regex to a nested `Vector`. Each match becomes an
   element of the vector; each group (or the whole match, if there are no
   groups) becomes an element of the inner vectors.
regex_parse_to_vectors : Regex -> (Text -> Vector (Vector (Text | Nothing)))
regex_parse_to_vectors pattern =
    input->
        matches = pattern.match_all input
        case pattern.group_count of
            1 -> matches.map match-> [match.text]
            _ -> matches.map match-> match.groups . drop 1

## PRIVATE
   Generate column names for the output columns from a regex match.
   If the regex has no explicit groups, it uses the original column name
   unchanged; otherwise, it uses the group name if it exists, or the original
   column name with a number.
regex_to_column_names : Regex -> Text -> Vector Text
regex_to_column_names pattern original_column_name =
    case pattern.group_count of
        1 ->
            [original_column_name]
        _ ->
            group_nums_to_names = pattern.group_nums_to_names

            unnamed_group_numbers = 1.up_to pattern.group_count . filter i-> group_nums_to_names.contains_key i . not
            group_number_to_column_name_suffix = Map.from_vector <| unnamed_group_numbers.zip (0.up_to unnamed_group_numbers.length)

            Vector.new (pattern.group_count-1) i->
                # explicit groups start at 1
                case group_nums_to_names.get (i+1) of
                    Nothing ->
                        suffix = group_number_to_column_name_suffix.at (i+1)
                        original_column_name + " " + (suffix+1).to_text
                    name : Text ->
                        name

## PRIVATE
   Wrap a function so that it returns [] if passed Nothing.
handle_nothing : (Any -> Any) -> (Any -> Any)
handle_nothing function = x-> case x of
    _ : Nothing -> []
    _ -> function x
