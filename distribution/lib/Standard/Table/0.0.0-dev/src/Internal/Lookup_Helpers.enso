from Standard.Base import all
import Standard.Base.Data.Vector.No_Wrap
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

import project.Data.Type.Storage
import project.Data.Type.Value_Type.Value_Type
import project.Data.Type.Value_Type_Helpers
from project.Errors import Floating_Point_Equality, Missing_Input_Columns, No_Common_Type, No_Output_Columns, Unexpected_Extra_Columns

polyglot java import org.enso.table.data.table.join.lookup.LookupColumnDescription

## PRIVATE
type Lookup_Column
    ## PRIVATE
       A key column used to correlate rows between the two tables.
    Key_Column base_column lookup_column

    ## PRIVATE
       A column from the base table that is kept as-is.
    Keep_Column base_column

    ## PRIVATE
       A column that is present in both tables.
       If the row is matched with a row from the lookup table, the value from
       the lookup table is used; otherwise the value from the base table is kept.
    Replace_Column base_column lookup_column (common_type : Value_Type)

    ## PRIVATE
       A new column added from the lookup table.
       If the row has no match, it will be `Nothing`.
    Add_Column lookup_column

    ## PRIVATE
    is_key : Boolean
    is_key self = case self of
        Lookup_Column.Key_Column _ _ -> True
        _ -> False

## PRIVATE
   Checks if `key_columns` are present in both tables and returns settings
   indicating which columns will be updated and which will be added.

   It also reports any errors or warnings related to selecting these columns.
prepare_columns_for_lookup base_table lookup_table key_columns_selector add_new_columns allow_unmatched_rows on_problems =
    key_columns = base_table.select_columns key_columns_selector . column_names . catch No_Output_Columns _->
        Error.throw (Illegal_Argument.Error "At least one key column must be provided for `merge`.")
    lookup_table_key_columns = lookup_table.select_columns key_columns . catch Missing_Input_Columns error->
        Error.throw (Missing_Input_Columns.Error error.criteria "the lookup table")

    problems_to_add = Vector.new_builder
    key_columns.if_not_error <| lookup_table_key_columns.if_not_error <|
        key_set = Set.from_vector key_columns
        my_updated_columns = base_table.columns.map on_problems=No_Wrap base_column->
            base_column_name = base_column.name
            is_key = key_set.contains base_column_name
            case is_key of
                True ->
                    lookup_column = lookup_table_key_columns.at base_column_name
                    is_float_equality = base_column.value_type.is_floating_point || lookup_column.value_type.is_floating_point
                    if is_float_equality then
                        problems_to_add.append (Floating_Point_Equality.Error base_column_name)
                    Lookup_Column.Key_Column base_column lookup_column
                False ->
                    lookup_column = lookup_table.get base_column_name
                    case lookup_column of
                        Nothing -> Lookup_Column.Keep_Column base_column
                        _ -> merge_columns base_column lookup_column allow_unmatched_rows

        my_column_set = Set.from_vector base_table.column_names
        extra_columns = lookup_table.columns.filter col->
            is_new = my_column_set.contains col.name . not
            is_new
        to_add = case add_new_columns of
            True -> extra_columns.map Lookup_Column.Add_Column
            False ->
                if extra_columns.not_empty then
                    problems_to_add.append (Unexpected_Extra_Columns.Warning (extra_columns.map .name))
                []

        on_problems.attach_problems_before problems_to_add.to_vector <|
            my_updated_columns+to_add

## PRIVATE
merge_columns base_column lookup_column allow_unmatched_rows =
    case allow_unmatched_rows of
        True ->
            types = [base_column.value_type, lookup_column.value_type]
            common_type = Value_Type_Helpers.find_common_type types strict=True
            case common_type of
                Nothing ->
                    Error.throw (No_Common_Type.Error types related_column_name=base_column.name)
                _ ->
                    Lookup_Column.Replace_Column base_column lookup_column common_type

        ## If unmatched rows are not allowed, we are essentially replacing the old column with the
           new one - not keeping any of the old values, so we can just forget about the old column.
           We do not need to reconcile types.
        False ->
            Lookup_Column.Add_Column lookup_column

## PRIVATE
make_java_lookup_column_description lookup_column = case lookup_column of
    Lookup_Column.Key_Column base_column _ ->
        LookupColumnDescription.KeepOriginal.new base_column.java_column
    Lookup_Column.Keep_Column base_column ->
        LookupColumnDescription.KeepOriginal.new base_column.java_column
    Lookup_Column.Replace_Column base_column lookup_column common_type ->
        storage_type = Storage.from_value_type common_type Problem_Behavior.Ignore
        LookupColumnDescription.MergeColumns.new base_column.java_column lookup_column.java_column storage_type
    Lookup_Column.Add_Column lookup_column ->
        LookupColumnDescription.AddNew.new lookup_column.java_column
