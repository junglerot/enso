from Standard.Base import all
import Standard.Base.Runtime.Ref.Ref

import project.Internal.Vector_Builder.Vector_Builder

from project.Errors import Missing_Input_Columns, Column_Indexes_Out_Of_Range, Duplicate_Output_Column_Names, Invalid_Output_Column_Names, Invalid_Aggregate_Column

## PRIVATE
type Problem_Builder
    ## PRIVATE
    Value types_to_always_throw oob_indices missing_input_columns other

    ## PRIVATE
    report_oob_indices self indices =
        append_to_ref self.oob_indices indices

    ## PRIVATE
    report_missing_input_columns self columns =
        append_to_ref self.missing_input_columns columns

    ## PRIVATE
    report_unique_name_strategy self unique_name_strategy =
        if unique_name_strategy.invalid_names.not_empty then
            self.report_other_warning (Invalid_Output_Column_Names.Error unique_name_strategy.invalid_names)
        if unique_name_strategy.renames.not_empty then
            self.report_other_warning (Duplicate_Output_Column_Names.Error unique_name_strategy.renames)

    ## PRIVATE
    report_other_warning self warning =
        self.other.append warning

    ## PRIVATE
       Returns a vector containing all reported problems, aggregated.
    build_problemset : Vector
    build_problemset self =
        problems = Vector.new_builder
        build_vector_and_append ref problem_creator =
            vec = ref.get . build
            if vec.not_empty then
                problems.append (problem_creator vec)

        build_vector_and_append self.missing_input_columns Missing_Input_Columns.Error
        build_vector_and_append self.oob_indices Column_Indexes_Out_Of_Range.Error
        self.other.to_vector.each problems.append

        problems.to_vector

    ## PRIVATE
       Attaches gathered warnings to the result.
       Any errors from the `result` take precedence over the ones owned by this
       builder.
    attach_problems_after : Problem_Behavior -> Any -> Any
    attach_problems_after self problem_behavior result =
        case result of
            _ -> case self.get_problemset_throwing_distinguished_errors of
                problems ->
                    problem_behavior.attach_problems_after result problems

    ## PRIVATE
       Attaches gathered warnings to the result of the provided computation.
       If in `Report_Error` mode and there are any problems gathered, the first
       one will be returned as error without even running the computation.
    attach_problems_before : Problem_Behavior -> Any -> Any
    attach_problems_before self problem_behavior ~computation =
        case self.get_problemset_throwing_distinguished_errors of
            problems ->
                problem_behavior.attach_problems_before problems computation

    ## PRIVATE
       Returns the generated problem set if no errors force throwing or throws
       the first error that is meant to be thrown regardless of problem behavior.
    get_problemset_throwing_distinguished_errors : Vector
    get_problemset_throwing_distinguished_errors self =
        problems = self.build_problemset
        distinguished_problem = problems.find if_missing=Nothing problem->
            self.types_to_always_throw.any tpe->
                problem.is_a tpe
        case distinguished_problem of
            Nothing -> problems
            problem -> Error.throw problem

    ## PRIVATE
       Creates a new helper object for aggregating problems to report.

       Arguments:
       - types_to_always_throw: Problems matching these types will be raised as
         an error by the `attach_` methods regardless of the `Problem_Behavior`
         used. By default, an empty vector.
       - error_on_missing_columns: If set to `True`, `Missing_Input_Columns` and
         `Column_Indexes_Out_Of_Range` will be raised as errors by the `attach_`
         methods regardless of the `Problem_Behavior` used. Defaults to `False`.
         Setting this to `True` is essentially a shorthand for adding these two
         problem types to `types_to_always_throw`.
    new : Vector -> Boolean -> Problem_Builder
    new types_to_always_throw=[] error_on_missing_columns=False =
        additional_types_to_throw = if error_on_missing_columns then [Missing_Input_Columns, Column_Indexes_Out_Of_Range, Invalid_Aggregate_Column] else []
        Problem_Builder.Value types_to_always_throw+additional_types_to_throw (Ref.new Vector_Builder.empty) (Ref.new Vector_Builder.empty) other=Vector.new_builder

## PRIVATE
   Appends a `Vector` to a `Vector_Builder` stored in a `Ref`.
append_to_ref : Ref Vector_Builder -> Vector -> Nothing
append_to_ref ref vector =
    appended = (ref.get) ++ vector
    ref . put appended
