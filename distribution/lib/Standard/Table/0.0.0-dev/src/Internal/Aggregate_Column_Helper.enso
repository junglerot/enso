from Standard.Base import all hiding First, Last

from Standard.Table.Data.Column import Column
from Standard.Table.Data.Aggregate_Column import all
from Standard.Table.Data.Column_Selector import Column_Selector, By_Name, By_Index, By_Column
import Standard.Table.Internal.Problem_Builder
import Standard.Table.Internal.Unique_Name_Strategy
import Standard.Table.Internal.Table_Helpers

import Standard.Table.Data.Sort_Column_Selector
import Standard.Table.Data.Sort_Column

import Standard.Base.Data.Ordering.Comparator

from Standard.Table.Errors import Missing_Input_Columns, Column_Indexes_Out_Of_Range, No_Output_Columns, Duplicate_Output_Column_Names, Invalid_Output_Column_Names, Invalid_Aggregation, Floating_Point_Grouping, Unquoted_Delimiter, Additional_Warnings

polyglot java import org.enso.table.aggregations.Aggregator
polyglot java import org.enso.table.aggregations.Concatenate as ConcatenateAggregator
polyglot java import org.enso.table.aggregations.Count as CountAggregator
polyglot java import org.enso.table.aggregations.CountDistinct as CountDistinctAggregator
polyglot java import org.enso.table.aggregations.CountEmpty as CountEmptyAggregator
polyglot java import org.enso.table.aggregations.CountNothing as CountNothingAggregator
polyglot java import org.enso.table.aggregations.First as FirstAggregator
polyglot java import org.enso.table.aggregations.GroupBy as GroupByAggregator
polyglot java import org.enso.table.aggregations.Last as LastAggregator
polyglot java import org.enso.table.aggregations.Mean as MeanAggregator
polyglot java import org.enso.table.aggregations.MinOrMax as MinOrMaxAggregator
polyglot java import org.enso.table.aggregations.Mode as ModeAggregator
polyglot java import org.enso.table.aggregations.Percentile as PercentileAggregator
polyglot java import org.enso.table.aggregations.ShortestOrLongest as ShortestOrLongestAggregator
polyglot java import org.enso.table.aggregations.StandardDeviation as StandardDeviationAggregator
polyglot java import org.enso.table.aggregations.Sum as SumAggregator

polyglot java import org.enso.table.data.table.problems.InvalidAggregation
polyglot java import org.enso.table.data.table.problems.FloatingPointGrouping
polyglot java import org.enso.table.data.table.problems.UnquotedDelimiter

## Result type for aggregate_columns validation
   - key_columns: Vector of Columns from the table to group by
   - valid_columns: Table structure to build as pairs of unique column name and Aggregate_Column
   - problems: Set of any problems when validating the input
type Validated_Aggregate_Columns (key_columns:[Column]) (valid_columns:[Pair Text Aggregate_Column]) (problems:[Any])

## PRIVATE
   Prepares an aggregation input for further processing:
   - resolves the column descriptors, reporting any issues,
   - ensures that the output names are unique,
   - finds the key columns.
prepare_aggregate_columns : [Aggregate_Column] -> Table -> Problem_Behavior -> Resolved_Aggregate_Columns
prepare_aggregate_columns aggregates table =
    problem_builder = Problem_Builder.new

    # Validate and resolve the columns
    valid_resolved_aggregate_columns = aggregates.map (resolve_aggregate table problem_builder) . filter x-> x.is_nothing.not

    # Grouping Key
    is_a_key c = case c of
        Aggregate_Column.Group_By _ _ -> True
        _ -> False
    key_columns = valid_resolved_aggregate_columns.filter is_a_key . map .column
    unique_key_columns = key_columns.distinct (on = .name)

    # Resolve Names
    unique = Unique_Name_Strategy.new
    ## First pass ensures the custom names specified by the user are unique.
       The second pass resolves the default names, ensuring that they do not
       clash with the user-specified names (ensuring that user-specified names
       take precedence).
    pass_1 = valid_resolved_aggregate_columns.map c->(if c.new_name.is_nothing then Nothing else unique.make_unique c.new_name)
    renamed_columns = pass_1.map_with_index i->name->
        agg = valid_resolved_aggregate_columns.at i
        new_name = name.if_nothing (unique.make_unique (default_aggregate_column_name agg))
        Pair new_name agg

    # Build Problems Output
    if renamed_columns.is_empty then
        problem_builder.report_other_warning No_Output_Columns
    if unique.invalid_names.not_empty then
        problem_builder.report_other_warning (Invalid_Output_Column_Names unique.invalid_names)
    if unique.renames.not_empty then
        problem_builder.report_other_warning (Duplicate_Output_Column_Names unique.renames)

    Validated_Aggregate_Columns unique_key_columns renamed_columns problem_builder.build_problemset

## PRIVATE
   Defines the default name of an `Aggregate_Column`.

   To be used when `new_name` is `Nothing`.

   Assumes that the `Aggregate_Column` is resolved. You may need to transform it
   with `resolve_aggregate` first.
default_aggregate_column_name aggregate_column =
    case aggregate_column of
        Group_By c _ -> c.name
        Count _ -> "Count"
        Count_Distinct columns _ _ ->
            "Count Distinct " + (columns.map .name . join " ")
        Percentile p c _ -> ((p*100).floor.to_text + "%-ile ") + c.name
        _ ->
            prefix = Meta.get_simple_type_name aggregate_column . replace "_" " "
            prefix + " " + aggregate_column.column.name

## PRIVATE
   Returns a copy of this aggregate where all column descriptors (names,
   indices or column references potentially from a different table) are
   replaced with column references from the provided table.

   Sort_Column_Selectors are resolved to Sort_Column_Select.By_Column with the
   matched columns coming from the provided table.

   This preprocess step is required by some helper function, to avoid having
   to pass the table reference and resolve the column descriptors all the
   time.

   If some columns cannot be resolved, `Nothing` is returned. Any issues are
   reported to the `Problem_Builder`.
resolve_aggregate : Table -> Problem_Builder -> Aggregate_Column -> Aggregate_Column | Nothing
resolve_aggregate table problem_builder aggregate_column =
    table_columns = table.columns

    resolve : (Integer|Text|Column) -> Column ! Internal_Missing_Column_Error
    resolve c =
        res = Table_Helpers.resolve_column_helper table_columns c problem_builder
        res.if_nothing (Error.throw Internal_Missing_Column_Error)

    resolve_selector_to_vector : Column_Selector -> [Column] ! Internal_Missing_Column_Error
    resolve_selector_to_vector selector =
        resolved = Table_Helpers.select_columns_helper table_columns selector reorder=True problem_builder
        if resolved.is_empty then Error.throw Internal_Missing_Column_Error else resolved

    resolve_order_by selector = case selector of
        Nothing -> Nothing
        _ ->
            columns_for_ordering = Table_Helpers.prepare_order_by table_columns selector problem_builder
            sort_columns = columns_for_ordering.map c->
                Sort_Column.Column c.column c.associated_selector.direction
            Sort_Column_Selector.By_Column sort_columns

    result = case aggregate_column of
        Group_By c new_name -> Group_By (resolve c) new_name
        Count new_name -> Count new_name
        Count_Distinct c new_name ignore_nothing ->
            new_c = case c of
                ## TODO once we have sum type pattern matching this could be replaced with a single branch
                By_Name _ _ -> resolve_selector_to_vector c
                By_Index _ -> resolve_selector_to_vector c
                By_Column _ -> resolve_selector_to_vector c
                _ -> [resolve c]
            Count_Distinct new_c new_name ignore_nothing
        Count_Not_Nothing c new_name -> Count_Not_Nothing (resolve c) new_name
        Count_Nothing c new_name -> Count_Nothing (resolve c) new_name
        Count_Not_Empty c new_name -> Count_Not_Empty (resolve c) new_name
        Count_Empty c new_name ->  Count_Empty (resolve c) new_name
        Sum c new_name ->  Sum (resolve c) new_name
        Average c new_name -> Average (resolve c) new_name
        Median c new_name -> Median (resolve c) new_name
        Percentile p c new_name -> Percentile p (resolve c) new_name
        Mode c new_name -> Mode (resolve c) new_name
        Standard_Deviation c new_name population -> Standard_Deviation (resolve c) new_name population
        Concatenate c new_name separator prefix suffix quote_char -> Concatenate (resolve c) new_name separator prefix suffix quote_char
        First c new_name ignore_nothing order_by -> First (resolve c) new_name ignore_nothing (resolve_order_by order_by)
        Last c new_name ignore_nothing order_by -> Last (resolve c) new_name ignore_nothing (resolve_order_by order_by)
        Maximum c new_name -> Maximum (resolve c) new_name
        Minimum c new_name -> Minimum (resolve c) new_name
        Shortest c new_name -> Shortest (resolve c) new_name
        Longest c new_name -> Longest (resolve c) new_name

    ## Downgrade the `Internal_Missing_Column_Error` error into a `Nothing`
       value, keeping any other dataflow errors intact.
    result.catch Internal_Missing_Column_Error (_->Nothing)

## PRIVATE
   A marker for missing columns during resolution.
type Internal_Missing_Column_Error

## PRIVATE
   Creates a Java Aggregator for the Aggregate_Column
java_aggregator : Aggregate_Column->Aggregator
java_aggregator name column =
    case column of
        Group_By c _ -> GroupByAggregator.new name c.java_column
        Count _ -> CountAggregator.new name
        Count_Distinct columns _ ignore_nothing ->
            resolved = columns.map .java_column
            CountDistinctAggregator.new name resolved.to_array ignore_nothing Comparator.new
        Count_Not_Nothing c _ -> CountNothingAggregator.new name c.java_column False
        Count_Nothing c _ -> CountNothingAggregator.new name c.java_column True
        Count_Not_Empty c _ -> CountEmptyAggregator.new name c.java_column False
        Count_Empty c _ -> CountEmptyAggregator.new name c.java_column True
        Sum c _ -> SumAggregator.new name c.java_column
        Average c _ -> MeanAggregator.new name c.java_column
        Standard_Deviation c _ p -> StandardDeviationAggregator.new name c.java_column p
        Median c _ -> PercentileAggregator.new name c.java_column 0.5
        Percentile p c _ -> PercentileAggregator.new name c.java_column p
        Mode c _ -> ModeAggregator.new name c.java_column
        First c _ ignore_nothing ordering ->
            if ordering.is_nothing then FirstAggregator.new name c.java_column ignore_nothing else
                order_columns = ordering.columns.map c->c.column.java_column
                order_directions = ordering.columns.map c->c.direction.to_sign
                FirstAggregator.new name c.java_column ignore_nothing order_columns.to_array order_directions.to_array Comparator.new
        Last c _ ignore_nothing ordering ->
            if ordering.is_nothing then LastAggregator.new name c.java_column ignore_nothing else
                order_columns = ordering.columns.map c->c.column.java_column
                order_direction = ordering.columns.map c->c.direction.to_sign
                LastAggregator.new name c.java_column ignore_nothing order_columns.to_array order_direction.to_array Comparator.new
        Maximum c _ -> MinOrMaxAggregator.new name c.java_column 1 Comparator.new
        Minimum c _ -> MinOrMaxAggregator.new name c.java_column -1 Comparator.new
        Shortest c _ -> ShortestOrLongestAggregator.new name c.java_column -1
        Longest c _ -> ShortestOrLongestAggregator.new name c.java_column 1
        Concatenate c _ join prefix suffix quote -> ConcatenateAggregator.new name c.java_column join prefix suffix quote
        _ -> Error.throw (Invalid_Aggregation name -1 "Unsupported aggregation")

## PRIVATE
   Convert Java aggregated problems to Enso Vector of equivalents
parse_aggregated_problems : Any->Vector
parse_aggregated_problems problems =
    if problems.is_nothing then [] else
        problems_array = problems.getProblems
        parsed = Vector.new problems_array.length i->
            p = problems_array.at i
            if Java.is_instance p InvalidAggregation then Invalid_Aggregation p.getColumnName (Vector.Vector p.getRows) p.getMessage else
                if Java.is_instance p FloatingPointGrouping then Floating_Point_Grouping p.getColumnName (Vector.Vector p.getRows) else
                    if Java.is_instance p UnquotedDelimiter then Unquoted_Delimiter p.getColumnName (Vector.Vector p.getRows) else
                        Invalid_Aggregation Nothing -1 "Unknown Error"

        if problems.getCount == problems_array.length then parsed else
            parsed + [Additional_Warnings (problems.getCount - problems_array.length)]
