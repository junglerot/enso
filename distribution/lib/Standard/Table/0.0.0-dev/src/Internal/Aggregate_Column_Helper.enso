from Standard.Base import all hiding First, Last
from Standard.Base.Runtime import assert

import project.Data.Aggregate_Column.Aggregate_Column
import project.Data.Column.Column
import project.Data.Sort_Column.Sort_Column
import project.Data.Table.Table
import project.Data.Type.Value_Type.Value_Type
import project.Internal.Column_Naming_Helper.Column_Naming_Helper
import project.Internal.Problem_Builder.Problem_Builder
import project.Internal.Table_Helpers
from project.Data.Aggregate_Column.Aggregate_Column import all
from project.Errors import Duplicate_Output_Column_Names, Invalid_Aggregation, Invalid_Column_Names, No_Output_Columns

polyglot java import org.enso.table.aggregations.Aggregator
polyglot java import org.enso.table.aggregations.Concatenate as ConcatenateAggregator
polyglot java import org.enso.table.aggregations.Count as CountAggregator
polyglot java import org.enso.table.aggregations.CountDistinct as CountDistinctAggregator
polyglot java import org.enso.table.aggregations.CountEmpty as CountEmptyAggregator
polyglot java import org.enso.table.aggregations.CountNothing as CountNothingAggregator
polyglot java import org.enso.table.aggregations.First as FirstAggregator
polyglot java import org.enso.table.aggregations.GroupBy as GroupByAggregator
polyglot java import org.enso.table.aggregations.Last as LastAggregator
polyglot java import org.enso.table.aggregations.Mean as MeanAggregator
polyglot java import org.enso.table.aggregations.MinOrMax as MinOrMaxAggregator
polyglot java import org.enso.table.aggregations.Mode as ModeAggregator
polyglot java import org.enso.table.aggregations.Percentile as PercentileAggregator
polyglot java import org.enso.table.aggregations.ShortestOrLongest as ShortestOrLongestAggregator
polyglot java import org.enso.table.aggregations.StandardDeviation as StandardDeviationAggregator
polyglot java import org.enso.table.aggregations.Sum as SumAggregator

## Result type for aggregate_columns validation
   - key_columns: Vector of Columns from the table to group by
   - valid_columns: Table structure to build as pairs of unique column name and Aggregate_Column
   - problems: Set of any problems when validating the input
type Validated_Aggregate_Columns
    ## PRIVATE
    Value (key_columns:(Vector Column)) (valid_columns:(Vector (Pair Text Aggregate_Column))) (problems:(Vector Any))

## PRIVATE
   Prepares an aggregation input for further processing:
   - resolves the column descriptors, reporting any issues,
   - ensures that the output names are unique,
   - finds the key columns.
prepare_aggregate_columns : Column_Naming_Helper -> Vector Aggregate_Column -> Table -> Boolean -> Validated_Aggregate_Columns
prepare_aggregate_columns naming_helper aggregates table error_on_missing_columns =
    is_a_key c = case c of
        Aggregate_Column.Group_By _ _ -> True
        _ -> False

    keys = aggregates.filter is_a_key
    # Key resolution always errors on missing, regardless of any settings.
    keys_problem_builder = Problem_Builder.new error_on_missing_columns=True
    resolved_keys = keys.map (resolve_aggregate table keys_problem_builder)

    ## Since `keys_problem_builder` has `error_on_missing_columns` set to `True`,
       any missing columns will be reported as errors. Therefore, we can assume
       that all the columns were present.
    keys_problem_builder.attach_problems_before Problem_Behavior.Report_Error <|
        assert (resolved_keys.contains Nothing . not)
        problem_builder = Problem_Builder.new error_on_missing_columns=error_on_missing_columns
        valid_resolved_aggregate_columns = aggregates.map (resolve_aggregate table problem_builder) . filter x-> x.is_nothing.not

        # Grouping Key
        key_columns = resolved_keys.map .column
        unique_key_columns = key_columns.distinct (on = .name)

        # Resolve Names
        unique = naming_helper.create_unique_name_strategy
        ## First pass ensures the custom names specified by the user are unique.
           The second pass resolves the default names, ensuring that they do not
           clash with the user-specified names (ensuring that user-specified names
           take precedence).
        pass_1 = valid_resolved_aggregate_columns.map c-> if c.new_name == "" then "" else
            # Verify if the user-provided name is valid and if not, throw an error.
            naming_helper.ensure_name_is_valid c.new_name <|
                unique.make_unique c.new_name
        renamed_columns = pass_1.map_with_index i->name->
            agg = valid_resolved_aggregate_columns.at i
            new_name = if name != "" then name else unique.make_unique (default_aggregate_column_name agg)
            Pair.new new_name agg

        # Build Problems Output
        case renamed_columns.is_empty of
            True ->
                ## First, we try to raise any warnings that may have caused the
                   lack of columns, promoted to errors.
                problem_builder.attach_problems_before Problem_Behavior.Report_Error <|
                    ## If none were found, we raise a generic error (this may
                       happen primarily when an empty list is provided to the
                       aggregate method).
                    Error.throw No_Output_Columns
            False ->
                problem_builder.report_unique_name_strategy unique
                Validated_Aggregate_Columns.Value unique_key_columns renamed_columns problem_builder.get_problemset_throwing_distinguished_errors

## PRIVATE
   Defines the default name of an `Aggregate_Column`.

   To be used when `new_name` is `Nothing`.

   Assumes that the `Aggregate_Column` is resolved. You may need to transform it
   with `resolve_aggregate` first.
default_aggregate_column_name aggregate_column include_column=True =
    case aggregate_column of
        Group_By c _ -> c.name
        Count _ -> "Count"
        Count_Distinct columns _ _ ->
            "Count Distinct " + (columns.map .name . join " ")
        Percentile p c _ -> ((p*100).floor.to_text + "%-ile ") + (if include_column then c.name else "")
        _ ->
            prefix = Meta.get_simple_type_name aggregate_column . replace "_" " "
            c = aggregate_column.column
            prefix + (if include_column then " " + c.name else "")

## PRIVATE
   Utility function to check if all aggregates are operating on the same source column.
all_same_column : Vector Aggregate_Column -> Boolean
all_same_column aggregates =
    is_not_count c = case c of
        Count _ -> False
        Count_Distinct _ _ _ -> False
        _ -> True
    without_count = aggregates.filter is_not_count

    if without_count.length < 2 then True else
        column = without_count.first.column.name
        without_count.all c->(c.column.name == column)

## PRIVATE
   Returns a copy of this aggregate where all column descriptors (names,
   indices or column references potentially from a different table) are
   replaced with column references from the provided table.

   It also verifies that the columns have the right types.

   `Sort_Column`s are replaced with column references of matched columns coming
   from the provided table.

   This preprocess step is required by some helper function, to avoid having
   to pass the table reference and resolve the column descriptors all the
   time.

   If some columns cannot be resolved, `Nothing` is returned. Any issues are
   reported to the `Problem_Builder`.
resolve_aggregate : Table -> Problem_Builder -> Aggregate_Column -> Aggregate_Column | Nothing
resolve_aggregate table problem_builder aggregate_column =
    table_columns = table.columns
    columns_helper = table.columns_helper

    resolve : (Integer|Text) -> Column ! Internal_Missing_Column_Error
    resolve c =
        res = columns_helper.resolve_column_or_expression c problem_builder
        res.if_nothing (Error.throw Internal_Missing_Column_Error)

    resolve_selector_to_vector : Text | Integer | Vector (Integer | Text) -> Vector Column ! Internal_Missing_Column_Error
    resolve_selector_to_vector selector =
        resolved = columns_helper.select_columns_helper selector Case_Sensitivity.Default True problem_builder
        if resolved.is_empty then Error.throw Internal_Missing_Column_Error else resolved

    resolve_order_by selector = case selector of
        Nothing -> Nothing
        _ ->
            columns_for_ordering = Table_Helpers.prepare_order_by table_columns selector problem_builder
            sort_columns = columns_for_ordering.map c->
                Internal_Order_By_Column_Reference.Value c.column c.associated_selector.direction
            sort_columns

    resolve_numeric c =
        internal_column = resolve c
        col = columns_helper.make_column internal_column
        Value_Type.expect_numeric col <|
            internal_column

    resolve_text c =
        internal_column = resolve c
        col = columns_helper.make_column internal_column
        Value_Type.expect_text col <|
            internal_column

    result = case aggregate_column of
        Group_By c new_name -> Group_By (resolve c) new_name
        Count new_name -> Count new_name
        Count_Distinct c new_name ignore_nothing ->
            new_c = resolve_selector_to_vector c
            Count_Distinct new_c new_name ignore_nothing
        Count_Not_Nothing c new_name -> Count_Not_Nothing (resolve c) new_name
        Count_Nothing c new_name -> Count_Nothing (resolve c) new_name
        Count_Not_Empty c new_name -> Count_Not_Empty (resolve_text c) new_name
        Count_Empty c new_name ->  Count_Empty (resolve_text c) new_name
        Sum c new_name -> Sum (resolve_numeric c) new_name
        Average c new_name -> Average (resolve_numeric c) new_name
        Median c new_name -> Median (resolve_numeric c) new_name
        Percentile p c new_name -> Percentile p (resolve_numeric c) new_name
        Mode c new_name -> Mode (resolve c) new_name
        Standard_Deviation c new_name population -> Standard_Deviation (resolve_numeric c) new_name population
        Concatenate c new_name separator prefix suffix quote_char -> Concatenate (resolve_text c) new_name separator prefix suffix quote_char
        First c new_name ignore_nothing order_by -> First (resolve c) new_name ignore_nothing (resolve_order_by order_by)
        Last c new_name ignore_nothing order_by -> Last (resolve c) new_name ignore_nothing (resolve_order_by order_by)
        Maximum c new_name -> Maximum (resolve c) new_name
        Minimum c new_name -> Minimum (resolve c) new_name
        Shortest c new_name -> Shortest (resolve_text c) new_name
        Longest c new_name -> Longest (resolve_text c) new_name

    ## Downgrade the `Internal_Missing_Column_Error` error into a `Nothing`
       value, keeping any other dataflow errors intact.
    result.catch Internal_Missing_Column_Error (_->Nothing)

## PRIVATE
type Internal_Order_By_Column_Reference
    ## PRIVATE
    Value column direction

## PRIVATE
   A marker for missing columns during resolution.
type Internal_Missing_Column_Error

## PRIVATE
   Creates a Java Aggregator for the Aggregate_Column
java_aggregator : Text -> Aggregate_Column -> Aggregator
java_aggregator name column =
    case column of
        Group_By c _ -> GroupByAggregator.new name c.java_column
        Count _ -> CountAggregator.new name
        Count_Distinct columns _ ignore_nothing ->
            resolved = columns.map .java_column
            CountDistinctAggregator.new name resolved ignore_nothing
        Count_Not_Nothing c _ -> CountNothingAggregator.new name c.java_column False
        Count_Nothing c _ -> CountNothingAggregator.new name c.java_column True
        Count_Not_Empty c _ -> CountEmptyAggregator.new name c.java_column False
        Count_Empty c _ -> CountEmptyAggregator.new name c.java_column True
        Sum c _ -> SumAggregator.new name c.java_column
        Average c _ -> MeanAggregator.new name c.java_column
        Standard_Deviation c _ p -> StandardDeviationAggregator.new name c.java_column p
        Median c _ -> PercentileAggregator.new name c.java_column 0.5
        Percentile p c _ -> PercentileAggregator.new name c.java_column p
        Mode c _ -> ModeAggregator.new name c.java_column
        First c _ ignore_nothing ordering ->
            if ordering.is_nothing then FirstAggregator.new name c.java_column ignore_nothing else
                order_columns = ordering.map c->c.column.java_column
                order_directions = ordering.map c->c.direction.to_sign
                FirstAggregator.new name c.java_column ignore_nothing order_columns order_directions
        Last c _ ignore_nothing ordering ->
            if ordering.is_nothing then LastAggregator.new name c.java_column ignore_nothing else
                order_columns = ordering.map c->c.column.java_column
                order_direction = ordering.map c->c.direction.to_sign
                LastAggregator.new name c.java_column ignore_nothing order_columns order_direction
        Maximum c _ -> MinOrMaxAggregator.new name c.java_column MinOrMaxAggregator.MAX
        Minimum c _ -> MinOrMaxAggregator.new name c.java_column MinOrMaxAggregator.MIN
        Shortest c _ -> ShortestOrLongestAggregator.new name c.java_column ShortestOrLongestAggregator.SHORTEST
        Longest c _ -> ShortestOrLongestAggregator.new name c.java_column ShortestOrLongestAggregator.LONGEST
        Concatenate c _ join prefix suffix quote -> ConcatenateAggregator.new name c.java_column join prefix suffix quote
        _ -> Error.throw (Invalid_Aggregation.Error name -1 "Unsupported aggregation")
