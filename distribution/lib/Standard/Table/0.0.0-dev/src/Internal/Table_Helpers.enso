from Standard.Base import all
import Standard.Base.Data.Text.Matching
import Standard.Base.Data.Ordering.Vector_Lexicographic_Order
from Standard.Base.Data.Text.Text_Ordering import Text_Ordering
from Standard.Base.Error.Problem_Behavior import Report_Warning

import Standard.Table.Data.Position
from Standard.Table.Errors import Missing_Input_Columns_Data, No_Output_Columns, Too_Many_Column_Names_Provided_Data, Duplicate_Output_Column_Names_Data, Invalid_Output_Column_Names_Data, No_Input_Columns_Selected
from Standard.Table.Data.Column_Selector import Column_Selector, By_Name, By_Index, By_Column
import Standard.Table.Data.Column_Name_Mapping
import Standard.Table.Internal.Unique_Name_Strategy
import Standard.Table.Internal.Problem_Builder
import Standard.Table.Data.Sort_Column_Selector
import Standard.Table.Data.Sort_Column

polyglot java import java.util.HashSet

## PRIVATE
   A helper function encapsulating shared code for `select_columns`
   implementations of various Table variants. See the documentation for the
   Table type for details.

   It takes a list of columns and returns the selected columns. It is the
   responsibility of each implementation to reconstruct a proper table from the
   resulting list of columns.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - selector: Column selection criteria.
   - reorder: Specifies whether to reorder the matched columns according to the
     order of the selection criteria.
     If `False`, the matched entries are returned in the same order as in the
     input.
     If `True`, the matched entries are returned in the order of the criteria
     matching them. If a single object has been matched by multiple criteria, it
     is placed in the group belonging to the first matching criterion on the
     list. If a single criterion's group has more than one element, their
     relative order is the same as in the input.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
select_columns : Vector -> Column_Selector -> Boolean -> Problem_Behavior -> Vector
select_columns internal_columns selector reorder on_problems =
    problem_builder = Problem_Builder.new
    result = select_columns_helper internal_columns selector reorder problem_builder
    if result.is_empty then
        problem_builder.report_other_warning No_Output_Columns
    problem_builder.attach_problems_after on_problems result

## PRIVATE
   A helper function encapsulating shared code for `remove_columns`
   implementations of various Table variants. See the documentation for the
   Table type for details.

   It takes a list of columns and returns the columns which should be kept. It
   is the responsibility of each implementation to reconstruct a proper table
   from the resulting list of columns.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - selector: Column selection criteria.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
remove_columns : Vector -> Column_Selector -> Problem_Behavior -> Vector
remove_columns internal_columns selector on_problems =
    problem_builder = Problem_Builder.new
    selection = select_columns_helper internal_columns selector reorder=False problem_builder
    selected_names = Map.from_vector (selection.map column-> [column.name, True])
    result = internal_columns.filter column->
        should_be_removed = selected_names.get_or_else column.name False
        should_be_removed.not
    if result.is_empty then
        problem_builder.report_other_warning No_Output_Columns
    problem_builder.attach_problems_after on_problems result

## PRIVATE
   A helper function encapsulating shared code for `reorder_columns`
   implementations of various Table variants. See the documentation for the
   Table type for details.

   It takes a list of columns and returns the columns which should be kept. It
   is the responsibility of each implementation to reconstruct a proper table
   from the resulting list of columns.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - selector: A selector specifying which columns should be moved and the order
     in which they should appear in the result.
   - position: Specifies how to place the selected columns in relation to the
     columns which were not matched by the `selector` (if any).
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
reorder_columns : Vector -> Column_Selector -> Position.Position -> Problem_Behavior -> Vector
reorder_columns internal_columns selector position on_problems =
    problem_builder = Problem_Builder.new
    selection = select_columns_helper internal_columns selector reorder=True problem_builder
    problem_builder.attach_problems_before on_problems <|
        selected_names = Map.from_vector (selection.map column-> [column.name, True])
        other_columns = internal_columns.filter column->
            is_selected = selected_names.get_or_else column.name False
            is_selected.not
        result = case position of
            Position.Before_Other_Columns -> selection + other_columns
            Position.After_Other_Columns -> other_columns + selection
        result

## PRIVATE
   A helper function encapsulating shared code for `rename_columns`
   implementations of various Table variants. See the documentation for the
   Table type for details.

   It takes a list of columns and a mapping, and returns the complete new set
   of column names which should be applied to the table. It is the
   responsibility of each implementation to reconstruct a proper table from the
   resulting list of names.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - mapping: A selector specifying which columns should be moved and the order
     in which they should appear in the result.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
rename_columns : Vector -> Column_Name_Mapping -> Problem_Behavior -> Map
rename_columns internal_columns mapping on_problems =
    unique = Unique_Name_Strategy.new
    col_count = internal_columns.length
    problem_builder = Problem_Builder.new

    name_mapper vec ms =
        good_names = validate_unique vec (problem_callback = v-> problem_builder.report_duplicate_column_selectors (v.map c->(c.at 0))) (on = x-> (x.at 0))
        matched = HashSet.new

        mapper = name->
            index = 0.up_to good_names.length . find i->(ms.match_single_criterion name ((good_names.at i).at 0))
            case index of
                Nothing -> Nothing
                _ ->
                    matched.add index
                    new_name = case ms of
                        Regex_Matcher_Data _ _ _ _ _ ->
                            pattern = ms.compile ((good_names.at index).at 0)
                            pattern.replace name ((good_names.at index).at 1)
                        Text_Matcher_Data _ -> (good_names.at index).at 1
                    unique.make_unique new_name

        new_names = 0.up_to col_count . map i->(mapper (internal_columns.at i).name)
        unused = good_names.filter_with_index i->_->(matched.contains i).not . map e->(e.at 0)
        problem_builder.report_missing_input_columns unused
        new_names

    mapped = case mapping of
        Column_Name_Mapping.By_Column vec -> name_mapper (vec.map r-> [r.at 0 . name, r.at 1]) (Text_Matcher_Data case_sensitive=True)
        Column_Name_Mapping.By_Name map ms -> name_mapper map.to_vector ms
        Column_Name_Mapping.By_Index map ->
            good_indices = validate_indices col_count map.keys problem_builder

            index_map = Map.from_vector <| good_indices.map p->[p.at 0, map.get (p.at 1)]

            new_names = 0.up_to col_count . map i->
                target = index_map.get_or_else i Nothing
                if target.is_nothing then Nothing else unique.make_unique target

            new_names
        Column_Name_Mapping.By_Position vec ->
            good_names = case vec.length > col_count of
                True ->
                    problem_builder.report_other_warning (Too_Many_Column_Names_Provided_Data (vec.drop (First col_count)))
                    vec.take (First col_count)
                False -> vec

            new_names = 0.up_to col_count . map i->if i>=good_names.length then Nothing else
                unique.make_unique (good_names.at i)
            new_names

    processed = mapped.map_with_index i->n->
        n.if_nothing (unique.make_unique (internal_columns.at i).name)

    if unique.invalid_names.not_empty then
        problem_builder.report_other_warning (Invalid_Output_Column_Names_Data unique.invalid_names)
    if unique.renames.not_empty then
        problem_builder.report_other_warning (Duplicate_Output_Column_Names_Data unique.renames)

    problem_builder.attach_problems_before on_problems processed

## PRIVATE
   A helper function encapsulating shared code for `sort_columns`
   implementations of various Table variants. See the documentation for the
   Table type for details.

   It takes a list of columns and returns the columns in the new order. It is
   the responsibility of each implementation to reconstruct a proper table from
   the resulting list of columns.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - direction: Whether sorting should be in ascending or descending order.
   - text_ordering: The sort methodology to use.
sort_columns : Vector -> Sort_Direction -> Text_Ordering -> Vector
sort_columns internal_columns direction text_ordering =
    case_sensitive = text_ordering.case_sensitive.if_nothing True
    mapper = case case_sensitive of
        True -> _.name
        Case_Insensitive_Data locale ->
            col -> col.name.to_case_insensitive_key locale=locale
    comparator = case text_ordering.sort_digits_as_numbers of
        True -> Natural_Order.compare
        False -> .compare_to
    internal_columns.sort on=mapper by=comparator order=direction

## PRIVATE
   A helper function which selects columns from the table based on the provided
   selection criteria.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - selector: Column selection criteria.
   - reorder: Specifies whether to reorder the matched columns according to the
     order of the selection criteria.
     If `False`, the matched entries are returned in the same order as in the
     input.
     If `True`, the matched entries are returned in the order of the criteria
     matching them. If a single object has been matched by multiple criteria, it
     is placed in the group belonging to the first matching criterion on the
     list. If a single criterion's group has more than one element, their
     relative order is the same as in the input.
   - problem_builder: Encapsulates the aggregation of encountered problems.
select_columns_helper : Vector -> Column_Selector -> Boolean -> Problem_Builder -> Vector
select_columns_helper internal_columns selector reorder problem_builder = case selector of
    By_Name names matcher ->
        valid_names = validate_unique names problem_builder.report_duplicate_column_selectors
        Matching.match_criteria_callback matcher internal_columns valid_names reorder=reorder name_mapper=(_.name) problem_callback=problem_builder.report_missing_input_columns
    By_Index indices ->
        good_indices = validate_indices internal_columns.length indices problem_builder . map .first
        case reorder of
            True ->
                select_indices_reordering internal_columns good_indices
            False ->
                select_indices_preserving_order internal_columns good_indices
    By_Column columns ->
        column_names = columns.map .name
        new_selector = By_Name column_names (Text_Matcher_Data case_sensitive=True)
        select_columns_helper internal_columns new_selector reorder=reorder problem_builder=problem_builder

## PRIVATE
   A helper function which selects a single column from the table. It is aligned with the
   `select_columns_helper`.
resolve_column_helper : Vector a -> (Integer | Text | Column) -> Problem_Builder -> a | Nothing
resolve_column_helper internal_columns selector problem_builder = case selector of
    Text ->
        matched_columns = Matching.match_criteria_callback (Text_Matcher_Data case_sensitive=True) internal_columns [selector] reorder=True name_mapper=(_.name) problem_callback=problem_builder.report_missing_input_columns
        if matched_columns.length == 1 then matched_columns.first else
            if matched_columns.length == 0 then Nothing else
                Panic.throw (Illegal_State_Error_Data "A single exact match should never match more than one column. Perhaps the table breaks the invariant of unique column names?")
    Integer -> case is_index_valid internal_columns.length selector of
        True -> internal_columns.at selector
        False ->
            problem_builder.report_oob_indices [selector]
            Nothing
    ## A wildcard to match any backend's column.
    _ ->
        resolve_column_helper internal_columns selector.name problem_builder=problem_builder

## PRIVATE
   Converts the generic `No_Matches_Found` error to a more specific
   `Missing_Input_Columns`. Any other errors are returned as-is.
promote_no_matches_to_missing_columns error = case error of
    Matching.No_Matches_Found_Data criteria -> Maybe.Some <| Missing_Input_Columns_Data criteria
    _ -> Nothing

## PRIVATE
   Selects element from the vector based on the given indices.

   The elements are returned in the same order as their provided indices.
select_indices_reordering vector indices =
    indices.map vector.at

## PRIVATE
   Selects element from the vector based on the given indices.

   The elements are returned in the same order as they appeared in the original
   vector.
select_indices_preserving_order vector indices =
    indices_to_keep = Map.from_vector (indices.map i-> [i, True])
    vector.filter_with_index ix-> _->
        indices_to_keep.get_or_else ix False

## PRIVATE
   Returns the actual position in the array that the index points to.

   It resolves negative indices to regular indices.

   If the negative index is sufficiently large, a negative result can still be
   returned. This function does not ensure that the resulting indices are within
   bounds.
resolve_index : Integer -> Integer -> Integer
resolve_index length ix =
    if ix < 0 then length+ix else ix

## PRIVATE
   Checks if the given index is in the valid range for the provided vector.
is_index_valid : Integer -> Integer -> Boolean
is_index_valid length ix =
    actual_ix = resolve_index length ix
    actual_ix>=0 && actual_ix<length

## PRIVATE
   Validates a Vector of indices returning `good_indices` and reporting any
   encountered problems.

   Arguments:
   - length:
   - indices:
   - problem_builder:
   - on: a mapping from a possibly complex index selector into an integer index
     associated with it. Used if the selector contains additional metadata. The
     default one is an identity mapping for when the selector is just an
     integer.
validate_indices : Integer -> Vector -> Problem_Builder -> (Any -> Integer) -> Vector
validate_indices length indices problem_builder on=(x->x) =
    partitioned_indices = indices.partition (is_index_valid length << on)
    inbound_indices = partitioned_indices.first
    oob_indices = partitioned_indices.second
    problem_builder.report_oob_indices (oob_indices.map on)

    uniques = validate_unique inbound_indices problem_builder.report_duplicate_column_selectors on=on

    resolver = ix->(resolve_index length (on ix))
    alias_uniques = validate_unique uniques problem_builder.report_input_indices_already_matched on=resolver
    good_indices = alias_uniques.map i->[resolver i, i]
    good_indices

## PRIVATE
   Splits a vector into elements which are distinct and the duplicates.
   Duplicates are wrapped as an error
validate_unique : Vector -> (Vector -> Vector) -> (Any -> Any) -> Vector
validate_unique vector problem_callback on=(x->x) =
    acc = vector.fold [Map.empty, Vector.new_builder, Vector.new_builder] acc-> item->
        existing = acc.at 0
        key = on item
        already_present = existing.get_or_else key False
        case already_present of
            True -> [existing, acc.at 1, acc.at 2 . append item]
            False -> [existing.insert key True, acc.at 1 . append item, acc.at 2]

    duplicates = acc.at 2 . to_vector
    if duplicates.not_empty then problem_callback duplicates

    acc.at 1 . to_vector

# TODO Dubious constructor export
from project.Internal.Table_Helpers.Column_Transform_Element import all
from project.Internal.Table_Helpers.Column_Transform_Element export all

## PRIVATE
   A helper type used by transform helpers.
type Column_Transform_Element
    Column_Transform_Element_Data column associated_selector

## PRIVATE
prepare_order_by : Vector -> Problem_Builder -> Vector Column_Transform_Element
prepare_order_by internal_columns column_selectors problem_builder =
    selected_elements = case column_selectors of
        Sort_Column_Selector.By_Name name_selectors matcher ->
            unified_name_selectors = name_selectors.map selector-> case selector of
                Text -> Sort_Column.Name selector
                Sort_Column.Name _ _ -> selector
            select_columns_by_name internal_columns unified_name_selectors matcher problem_builder name_extractor=(_.name)
        Sort_Column_Selector.By_Index index_selectors ->
            unified_index_selectors = index_selectors.map selector-> case selector of
                Integer -> Sort_Column.Index selector
                Sort_Column.Index _ _ -> selector
            select_columns_by_index internal_columns unified_index_selectors problem_builder index_extractor=(_.index)
        Sort_Column_Selector.By_Column column_selectors ->
            unified_column_selectors = column_selectors.map selector-> case selector of
                Sort_Column.Column _ _ -> selector
                ## We cannot match by type here, as there is no common `Column`
                   type - the type is different for In-Memory and Database
                   tables, and we do not have interfaces yet.
                column_reference -> Sort_Column.Column column_reference
            select_columns_by_column_reference internal_columns unified_column_selectors problem_builder column_extractor=(_.column)
    if selected_elements.is_empty then
        problem_builder.report_other_warning No_Input_Columns_Selected
    selected_elements

## PRIVATE
   A helper function which can be used by methods that transform a subset of
   columns based on some selection criteria while keeping the unselected columns
   unaffected and not changing the ordering of the columns.

   It returns `internal_columns` transformed in the following way: each entry
   becomes a `Column_Transform_Element` which contains the original internal
   column and the chosen associated selector (which may contain some additional
   metadata needed to perform the transformation) or `Nothing` if the column was
   not selected for transformation.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - name_selectors: A vector of selectors which contain a column name and
     optionally some metadata.
   - matcher: Specifies the strategy of matching names.
   - problem_builder: Encapsulates the aggregation of encountered problems.
   - name_extractor: A function which extracts the column name from the selector.
transform_columns_by_name : Vector -> Vector -> Text_Matcher -> Problem_Builder -> (Any -> Text) -> Vector
transform_columns_by_name internal_columns name_selectors matcher problem_builder name_extractor =
    match_matrix = Matching.make_match_matrix matcher objects=internal_columns criteria=name_selectors object_name_mapper=(_.name) criterion_mapper=name_extractor
    problem_builder.report_missing_input_columns match_matrix.unmatched_criteria
    internal_columns.map_with_index i-> column->
        matching_selectors = match_matrix.criteria_matching_object i
        associated_selector = if matching_selectors.is_empty then Nothing else
            if matching_selectors.length > 1 then
                problem_builder.report_column_matched_by_multiple_selectors column.name matching_selectors
            matching_selectors.first
        Column_Transform_Element column associated_selector

## PRIVATE
   A helper function which can be used by methods that transform a subset of
   columns based on some selection criteria while keeping the unselected columns
   unaffected and not changing the ordering of the columns.

   It returns `internal_columns` transformed in the following way: each entry
   becomes a `Column_Transform_Element` which contains the original internal
   column and the chosen associated selector (which may contain some additional
   metadata needed to perform the transformation) or `Nothing` if the column was
   not selected for transformation.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - index_selectors: A vector of selectors which contain a column index and
     optionally some metadata.
   - problem_builder: Encapsulates the aggregation of encountered problems.
transform_columns_by_index : Vector -> Vector -> Problem_Builder -> (Any -> Integer) -> Vector
transform_columns_by_index internal_columns index_selectors problem_builder index_extractor =
    good_indices = validate_indices internal_columns.length index_selectors problem_builder index_extractor
    selectors_map = Map.from_vector good_indices
    internal_columns.map_with_index i-> column->
        associated_selector = selectors_map.get_or_else i Nothing
        Column_Transform_Element_Data column associated_selector

## PRIVATE
   A helper function which can be used by methods that transform a subset of
   columns based on some selection criteria while keeping the unselected columns
   unaffected and not changing the ordering of the columns.

   It returns `internal_columns` transformed in the following way: each entry
   becomes a `Column_Transform_Element` which contains the original internal
   column and the chosen associated selector (which may contain some additional
   metadata needed to perform the transformation) or `Nothing` if the column was
   not selected for transformation.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - column_selectors: A vector of column selectors which contain a column whose
     name should be used as a reference to select the corresponding column in
     the given table. The selectors may also optionally contain some metadata.
   - problem_builder: Encapsulates the aggregation of encountered problems.
transform_columns_by_column_reference : Vector -> Vector -> Problem_Builder -> (Any -> Integer) -> Vector
transform_columns_by_column_reference internal_columns column_selectors problem_builder column_extractor =
    name_extractor = selector->
        column = column_extractor selector
        column.name
    transform_columns_by_name internal_columns column_selectors (Text_Matcher_Data case_sensitive=True) problem_builder name_extractor

## PRIVATE
   A helper function which can be used by methods that select a subset of
   columns and need to keep some metadata coming from the selector associated
   with each column.

   The returned columns are in the same order as the original selectors that
   matched them. A single selector may match multiple columns - in such case
   these columns are all placed in the place belonging to that selector and they
   keep their relative order from the table. If a column is matched by multiple
   selectors a warning is raised and it only appears once in the result - in the
   place associated with the first selector that matched it.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - name_selectors: A vector of selectors which contain a column name and
     optionally some metadata.
   - matcher: Specifies the strategy of matching names.
   - problem_builder: Encapsulates the aggregation of encountered problems.
   - name_extractor: A function which extracts the column name from the selector.
select_columns_by_name : Vector -> Vector -> Text_Matcher -> Problem_Builder -> (Any -> Text) -> Vector
select_columns_by_name internal_columns name_selectors matcher problem_builder name_extractor =
    match_matrix = Matching.make_match_matrix matcher objects=internal_columns criteria=name_selectors object_name_mapper=(_.name) criterion_mapper=name_extractor
    problem_builder.report_missing_input_columns match_matrix.unmatched_criteria
    results = Vector.new_builder
    internal_columns.each_with_index i-> column->
        matching_selector_indices = match_matrix.criteria_indices_matching_object i
        if matching_selector_indices.not_empty then
            if matching_selector_indices.length > 1 then
                matching_selectors = matching_selector_indices.map name_selectors.at
                problem_builder.report_column_matched_by_multiple_selectors column.name matching_selectors
            associated_selector_index = matching_selector_indices.first
            associated_selector = name_selectors.at associated_selector_index
            element = Column_Transform_Element_Data column associated_selector
            results.append (Pair_Data element [associated_selector_index, i])
    # We sort the results by the associated selector index, breaking ties by the column index.
    sorted = results.to_vector.sort on=(_.second) by=Vector_Lexicographic_Order.compare
    sorted.map .first

## PRIVATE
   A helper function which can be used by methods that select a subset of
   columns and need to keep some metadata coming from the selector associated
   with each column.

   The returned columns are in the same order as the original selectors that
   matched them. A single selector may match multiple columns - in such case
   these columns are all placed in the place belonging to that selector and they
   keep their relative order from the table. If a column is matched by multiple
   selectors a warning is raised and it only appears once in the result - in the
   place associated with the first selector that matched it.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - index_selectors: A vector of selectors which contain a column index and
     optionally some metadata.
   - problem_builder: Encapsulates the aggregation of encountered problems.
select_columns_by_index : Vector -> Vector -> Problem_Builder -> (Any -> Integer) -> Vector
select_columns_by_index internal_columns index_selectors problem_builder index_extractor =
    good_selectors = validate_indices internal_columns.length index_selectors problem_builder index_extractor
    good_selectors.map pair->
        Column_Transform_Element_Data (internal_columns.at pair.first) pair.second

## PRIVATE
   A helper function which can be used by methods that select a subset of
   columns and need to keep some metadata coming from the selector associated
   with each column.

   The returned columns are in the same order as the original selectors that
   matched them. A single selector may match multiple columns - in such case
   these columns are all placed in the place belonging to that selector and they
   keep their relative order from the table. If a column is matched by multiple
   selectors a warning is raised and it only appears once in the result - in the
   place associated with the first selector that matched it.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - column_selectors: A vector of column selectors which contain a column whose
     name should be used as a reference to select the corresponding column in
     the given table. The selectors may also optionally contain some metadata.
   - problem_builder: Encapsulates the aggregation of encountered problems.
select_columns_by_column_reference : Vector -> Vector -> Problem_Builder -> (Any -> Integer) -> Vector
select_columns_by_column_reference internal_columns column_selectors problem_builder column_extractor =
    name_extractor = selector->
        column = column_extractor selector
        column.name
    select_columns_by_name internal_columns column_selectors (Text_Matcher_Data case_sensitive=True) problem_builder name_extractor
