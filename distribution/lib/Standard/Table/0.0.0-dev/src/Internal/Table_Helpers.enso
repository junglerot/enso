from Standard.Base import all
import Standard.Base.Data.Text.Matching
import Standard.Base.Data.Ordering.Vector_Lexicographic_Order
import Standard.Base.Error.Illegal_Argument.Illegal_Argument
import Standard.Base.Error.Illegal_State.Illegal_State

import project.Data.Column.Column
import project.Data.Column_Name_Mapping.Column_Name_Mapping
import project.Data.Column_Selector.Column_Selector
import project.Data.Position.Position
import project.Data.Sort_Column.Sort_Column
import project.Data.Table.Table
import project.Data.Value_Type.Value_Type
import project.Internal.Problem_Builder.Problem_Builder
import project.Internal.Unique_Name_Strategy.Unique_Name_Strategy

from project.Data.Aggregate_Column.Aggregate_Column import Minimum, Maximum
from project.Errors import Missing_Input_Columns, No_Output_Columns, Too_Many_Column_Names_Provided, No_Input_Columns_Selected, No_Common_Type, Column_Type_Mismatch, Ambiguous_Column_Rename, Invalid_Aggregate_Column

polyglot java import java.util.HashSet

type Table_Column_Helper
    ## PRIVATE
       Helps managing table columns.

       Arguments:
       - internal_columns: A list of all columns in a table.
       - make_column: A function which takes the internal column and creates a
         fully fledged column from it.
       - table: A reference to the table.
       - materialize: A function which takes a table and materializes it to
         in-memory.
    Value internal_columns make_column table materialize

    ## PRIVATE
       A helper function encapsulating shared code for `select_columns`
       implementations of various Table variants. See the documentation for the
       Table type for details.

       It returns the selected columns. It is the responsibility of each
       implementation to reconstruct a proper table from the
       resulting list of columns.

       Arguments:
       - selector: Column selection criteria or vector of column names.
       - reorder: Specifies whether to reorder the matched columns according to
         the order of the selection criteria.
         If `False`, the matched entries are returned in the same order as in
         the input.
         If `True`, the matched entries are returned in the order of the
         criteria matching them. If a single object has been matched by multiple
         criteria, it is placed in the group belonging to the first matching
         criterion on the list. If a single criterion's group has more than one
         element, their relative order is the same as in the input.
       - error_on_missing_columns: Specifies if missing columns should be raised
         as error regardless of `on_problems`.
       - on_problems: Specifies the behavior when a problem occurs during the
         operation. By default, a warning is issued, but the operation proceeds.
         If set to `Report_Error`, the operation fails with a dataflow error.
         If set to `Ignore`, the operation proceeds without errors or warnings.
    select_columns : Vector | Column_Selector -> Boolean -> Boolean -> Problem_Behavior -> Vector
    select_columns self selector reorder error_on_missing_columns on_problems =
        problem_builder = Problem_Builder.new error_on_missing_columns=error_on_missing_columns
        result = self.select_columns_helper selector reorder problem_builder
        problem_builder.attach_problems_before on_problems <|
            if result.is_empty then Error.throw No_Output_Columns else result

    ## PRIVATE
       A helper function encapsulating shared code for `remove_columns`
       implementations of various Table variants. See the documentation for the
       Table type for details.

       It returns the columns which should be kept. It is the responsibility of
       each implementation to reconstruct a proper table from the resulting list
       of columns.

       Arguments:
       - selector: Column selection criteria or vector of column names.
       - error_on_missing_columns: Specifies if missing columns should be raised
         as error regardless of `on_problems`.
       - on_problems: Specifies the behavior when a problem occurs during the
         operation. By default, a warning is issued, but the operation proceeds.
         If set to `Report_Error`, the operation fails with a dataflow error.
         If set to `Ignore`, the operation proceeds without errors or warnings.
    remove_columns : Vector | Column_Selector -> Boolean -> Problem_Behavior -> Vector
    remove_columns self selector error_on_missing_columns on_problems =
        problem_builder = Problem_Builder.new error_on_missing_columns=error_on_missing_columns
        selection = self.select_columns_helper selector reorder=False problem_builder
        selected_names = Map.from_vector (selection.map column-> [column.name, True])
        result = self.internal_columns.filter column->
            should_be_removed = selected_names.get column.name False
            should_be_removed.not
        if result.is_empty then Error.throw No_Output_Columns else
            problem_builder.attach_problems_after on_problems result

    ## PRIVATE
       A helper function encapsulating shared code for `reorder_columns`
       implementations of various Table variants. See the documentation for the
       Table type for details.

       It returns the columns which should be kept. It is the responsibility of
       each implementation to reconstruct a proper table from the resulting list
       of columns.

       Arguments:
       - selector: A selector specifying which columns should be moved and the
         order in which they should appear in the result.
       - position: Specifies how to place the selected columns in relation to
         the columns which were not matched by the `selector` (if any).
       - error_on_missing_columns: Specifies if missing columns should be raised
         as error regardless of `on_problems`.
       - on_problems: Specifies the behavior when a problem occurs during the
         operation. By default, a warning is issued, but the operation proceeds.
         If set to `Report_Error`, the operation fails with a dataflow error.
         If set to `Ignore`, the operation proceeds without errors or warnings.
    reorder_columns : Vector | Column_Selector -> Position -> Boolean -> Problem_Behavior -> Vector
    reorder_columns self selector position error_on_missing_columns on_problems =
        problem_builder = Problem_Builder.new error_on_missing_columns=error_on_missing_columns
        selection = self.select_columns_helper selector reorder=True problem_builder
        problem_builder.attach_problems_before on_problems <|
            selected_names = Map.from_vector (selection.map column-> [column.name, True])
            other_columns = self.internal_columns.filter column->
                is_selected = selected_names.get column.name False
                is_selected.not
            result = case position of
                Position.Before_Other_Columns -> selection + other_columns
                Position.After_Other_Columns -> other_columns + selection
            result

    ## PRIVATE
       A helper function which selects columns from the table based on the
       provided selection criteria.

       Arguments:
       - selector: Column selection criteria or vector of column names.
       - reorder: Specifies whether to reorder the matched columns according to
         the order of the selection criteria.
         If `False`, the matched entries are returned in the same order as in
         the input.
         If `True`, the matched entries are returned in the order of the
         criteria matching them. If a single object has been matched by multiple
         criteria, it is placed in the group belonging to the first matching
         criterion on the list. If a single criterion's group has more than one
         element, their relative order is the same as in the input.
       - problem_builder: Encapsulates the aggregation of encountered problems.
    select_columns_helper : Text | Vector | Column_Selector -> Boolean -> Problem_Builder -> Vector
    select_columns_helper self selector reorder problem_builder = case selector of
        _ : Text ->
            self.select_columns_helper (Column_Selector.By_Name [selector]) reorder problem_builder
        _ : Vector ->
            self.select_columns_helper (Column_Selector.By_Name selector) reorder problem_builder
        Column_Selector.By_Name names matcher ->
            valid_names = validate_unique names (_->Nothing)
            Matching.match_criteria_callback matcher self.internal_columns valid_names reorder=reorder name_mapper=(_.name) problem_callback=problem_builder.report_missing_input_columns
        Column_Selector.By_Index indices ->
            good_indices = validate_indices self.internal_columns.length indices problem_builder . map .first
            case reorder of
                True ->
                    select_indices_reordering self.internal_columns good_indices
                False ->
                    select_indices_preserving_order self.internal_columns good_indices
        Column_Selector.Blank_Columns when_any treat_nans_as_blank -> if self.internal_columns.is_empty then [] else
            blanks = self.internal_columns.map_with_index ix-> internal_column->
                column = self.make_column internal_column
                blank_indicator = column.is_blank treat_nans_as_blank
                blank_indicator.iif 1 0 . rename "blanks_"+ix.to_text
            ## We cannot just use a custom_column in the aggregate because of
               how the column selector works. We may need to revisit this. For
               now we need to use tricks like that:

               To be backend agnostic, we cannot create a new table with the
               columns above just out of thin air (actually we may want to allow
               this in the future if all columns come from the same context, but
               currently it's not possible). Instead, we add our blank columns
               to the current table and then remove any other columns we are not
               interested in. Note that we do not have to care about potential
               name conflicts, as we are dropping any other columns anyway, and
               adding a new column with a clashing name will not affect any
               other columns computed from the old column with that name.
            table_with_blank_indicators = blanks.fold self.table table-> blanks_col->
                table.set blanks_col
            just_indicators = table_with_blank_indicators.select_columns (blanks.map .name) on_problems=Problem_Behavior.Report_Error
            # Maximum is equivalent to Exists and Minimum is equivalent to Forall.
            col_aggregate = if when_any then Maximum _ else Minimum _
            aggregates = blanks.map blanks_col-> col_aggregate blanks_col.name

            aggregate_result = just_indicators.aggregate aggregates on_problems=Problem_Behavior.Report_Error
            materialized_result = self.materialize <| aggregate_result.catch Any error->
                msg = "Unexpected dataflow error has been thrown in an `select_columns_helper`. This is a bug in the Table library. The unexpected error was: "+error.to_display_text
                Panic.throw (Illegal_State.Error message=msg cause=error)

            counts = materialized_result.rows.first

            ## The `reorder` argument has no meaning for Blank_Columns selector
               - either way all blank columns are selected in the order that
               they are in the Table.
            self.internal_columns.filter_with_index i-> _->
                case counts.at i of
                    ## Nothing is returned if there were no rows, in that case
                       we treat the column as blank by convention, regardless of
                       `when_any`.
                    Nothing -> True
                    1 -> True
                    0 -> False
                    _ -> Panic.throw (Illegal_State.Error "Unexpected result. Perhaps an implementation bug of Column_Selector.Blank_Columns.")

    ## PRIVATE
       A helper function which selects a single column from the table.

       It may allow selection of columns by index, name or computing a derived
       expression.
    resolve_column_or_expression : (Integer | Text | Column) -> Problem_Builder -> Any | Nothing
    resolve_column_or_expression self selector problem_builder = case selector of
        _ : Text ->
            matched_columns = self.internal_columns.filter column->(column.name==selector)
            if matched_columns.length == 1 then matched_columns.first else
                if matched_columns.length != 0 then Panic.throw (Illegal_State.Error "Bug in Table library: A single exact match should never match more than one column. Perhaps the table breaks the invariant of unique column names?") else
                    (self.table.compute selector).catch Any expression_error->
                        invalid_column = Invalid_Aggregate_Column.Error selector expression_error
                        problem_builder.report_other_warning invalid_column
                        Nothing
        _ : Integer -> case is_index_valid self.internal_columns.length selector of
            True -> self.internal_columns.at selector
            False ->
                problem_builder.report_oob_indices [selector]
                Nothing
        ## A wildcard to match any backend's column.
        _ ->
            self.resolve_column_or_expression selector.name problem_builder=problem_builder

## PRIVATE
   A helper function encapsulating shared code for `rename_columns`
   implementations of various Table variants. See the documentation for the
   Table type for details.

   It takes a list of columns and a mapping, and returns the complete new set
   of column names which should be applied to the table. It is the
   responsibility of each implementation to reconstruct a proper table from the
   resulting list of names.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - mapping: A selector specifying which columns should be moved and the order
     in which they should appear in the result.
   - error_on_missing_columns: If set to `True`, missing columns are treated as
     error regardless of `on_problems`.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
rename_columns : Vector -> Column_Name_Mapping -> Boolean -> Problem_Behavior -> Map
rename_columns internal_columns mapping error_on_missing_columns on_problems =
    unique = Unique_Name_Strategy.new
    col_count = internal_columns.length
    problem_builder = Problem_Builder.new error_on_missing_columns=error_on_missing_columns

    ## Computes the new name for a By_Name rename condition.first_new_name

       In case of text matching, that is just the new provided name.
       In case of regex matching, the substitutions are performed.
    make_new_name name matching_criterion new_name matching_strategy = case matching_strategy of
        _ : Regex_Matcher ->
            pattern = matching_strategy.compile matching_criterion
            pattern.replace name new_name
        _ : Text_Matcher -> new_name

    ## Computes a vector of pairs, where each pairs is one of the columns from
       the original table and a list of new names proposed for it.

       The list can be empty if the column remains unchanged. The list may also
       contain multiple entries if multiple matchers have matched the column.
    columns_with_proposed_new_names = case mapping of
        Column_Name_Mapping.By_Name map matching_strategy ->
            name_selectors = map.to_vector
            match_matrix = Matching.make_match_matrix matching_strategy objects=internal_columns criteria=name_selectors object_name_mapper=(.name) criterion_mapper=(.first)
            problem_builder.report_missing_input_columns <|
                match_matrix.unmatched_criteria.map .first
            internal_columns.map_with_index i-> column->
                matching_selectors = match_matrix.criteria_matching_object i
                new_names = matching_selectors.map selector->
                    make_new_name column.name selector.first selector.second matching_strategy
                Pair.new column new_names
        Column_Name_Mapping.By_Index map ->
            index_selectors = map.to_vector
            partitioned_selectors = index_selectors.partition selector->
                is_index_valid col_count selector.first
            inbound_selectors = partitioned_selectors.first
            oob_indices = partitioned_selectors.second . map .first
            problem_builder.report_oob_indices oob_indices

            index_mapping = inbound_selectors.fold Map.empty acc-> selector->
                ix = selector.first
                resolved_ix = resolve_index col_count ix

                matches = acc.get resolved_ix []
                acc.insert resolved_ix matches+[selector]

            internal_columns.map_with_index i-> column->
                matching_selectors = index_mapping.get i []
                new_names = matching_selectors.map selector->
                    selector.second
                Pair.new column new_names
        Column_Name_Mapping.By_Position vec ->
            good_names = case vec.length > col_count of
                True ->
                    problem_builder.report_other_warning (Too_Many_Column_Names_Provided.Error (vec.drop (First col_count)))
                    vec.take (First col_count)
                False -> vec

            new_names = good_names.map (name-> [name]) . pad col_count []
            internal_columns.zip new_names Pair.new

    ## Resolves actual new names for renamed columns.

       If a column received ambiguous new names, an error is raised.
       If a column is not renamed, `Not_Renamed` is given as its new name.
       (We do not use Nothing, to be able to handle the case where the new name
       is set to `Nothing`.)
    columns_with_new_names = columns_with_proposed_new_names.map p->
        column = p.first
        new_names = p.second
        if new_names.is_empty then Pair.new column Not_Renamed else
            first_new_name = new_names.first
            names_unambiguous = new_names.all (== first_new_name)
            if names_unambiguous then Pair.new column first_new_name else
                Error.throw (Ambiguous_Column_Rename.Error column.name new_names)

    ## Renamed names take precedence, so we first deduplicate those.

       This will replace the renamed columns with their effective names, while
       keeping the unaffected columns as original pairs, so that they are marked
       for processing in the next step.
    after_renames = columns_with_new_names.map p->
        new_name = p.second
        case new_name of
            Not_Renamed -> p
            _ -> unique.make_unique new_name

    ## Then we ensure that the names of not-renamed columns are also unique and
       return the effective column names for each column.
    new_column_names = after_renames.map x-> case x of
        Pair.Value unchanged_column Not_Renamed ->
            unique.make_unique unchanged_column.name
        renamed_column_name : Text -> renamed_column_name

    problem_builder.report_unique_name_strategy unique
    problem_builder.attach_problems_before on_problems new_column_names

## PRIVATE
   An internal marker type for `rename_columns`.
type Not_Renamed

## PRIVATE
   A helper function encapsulating shared code for `sort_columns`
   implementations of various Table variants. See the documentation for the
   Table type for details.

   It takes a list of columns and returns the columns in the new order. It is
   the responsibility of each implementation to reconstruct a proper table from
   the resulting list of columns.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - order: Whether sorting should be in ascending or descending order.
   - text_ordering: The sort methodology to use.
sort_columns : Vector -> Sort_Direction -> Text_Ordering -> Vector
sort_columns internal_columns order text_ordering =
    case_sensitivity = text_ordering.case_sensitivity.if_nothing Case_Sensitivity.Sensitive
    mapper = case case_sensitivity of
        Case_Sensitivity.Default -> _.name
        Case_Sensitivity.Sensitive -> _.name
        Case_Sensitivity.Insensitive locale ->
            col -> col.name.to_case_insensitive_key locale=locale
    comparator = case text_ordering.sort_digits_as_numbers of
        True -> Natural_Order.compare
        False -> .compare_to
    internal_columns.sort order=order on=mapper by=comparator

## PRIVATE
   Converts the generic `No_Matches_Found` error to a more specific
   `Missing_Input_Columns`. Any other errors are returned as-is.
promote_no_matches_to_missing_columns error = case error of
    Matching.No_Matches_Found.Error criteria -> Maybe.Some <| Missing_Input_Columns.Error criteria
    _ -> Nothing

## PRIVATE
   Selects element from the vector based on the given indices.

   The elements are returned in the same order as their provided indices.
select_indices_reordering vector indices =
    indices.map vector.at

## PRIVATE
   Selects element from the vector based on the given indices.

   The elements are returned in the same order as they appeared in the original
   vector.
select_indices_preserving_order vector indices =
    indices_to_keep = Map.from_vector (indices.map i-> [i, True])
    vector.filter_with_index ix-> _->
        indices_to_keep.get ix False

## PRIVATE
   Returns the actual position in the array that the index points to.

   It resolves negative indices to regular indices.

   If the negative index is sufficiently large, a negative result can still be
   returned. This function does not ensure that the resulting indices are within
   bounds.
resolve_index : Integer -> Integer -> Integer
resolve_index length ix =
    if ix < 0 then length+ix else ix

## PRIVATE
   Checks if the given index is in the valid range for the provided vector.
is_index_valid : Integer -> Integer -> Boolean
is_index_valid length ix =
    actual_ix = resolve_index length ix
    actual_ix>=0 && actual_ix<length

## PRIVATE
   Validates a Vector of indices returning `good_indices` and reporting any
   encountered problems.

   Arguments:
   - length:
   - indices:
   - problem_builder:
   - on: a mapping from a possibly complex index selector into an integer index
     associated with it. Used if the selector contains additional metadata. The
     default one is an identity mapping for when the selector is just an
     integer.
validate_indices : Integer -> Vector -> Problem_Builder -> (Any -> Integer) -> Vector
validate_indices length indices problem_builder on=(x->x) =
    partitioned_indices = indices.partition (is_index_valid length << on)
    inbound_indices = partitioned_indices.first
    oob_indices = partitioned_indices.second
    problem_builder.report_oob_indices (oob_indices.map on)

    uniques = validate_unique inbound_indices (_->Nothing) on=on

    resolver = ix->(resolve_index length (on ix))
    alias_uniques = validate_unique uniques (_->Nothing) on=resolver
    good_indices = alias_uniques.map i->[resolver i, i]
    good_indices

## PRIVATE
   Splits a vector into elements which are distinct and the duplicates.
   Duplicates are wrapped as an error
validate_unique : Vector -> (Vector -> Vector) -> (Any -> Any) -> Vector
validate_unique vector problem_callback on=(x->x) =
    acc = vector.fold [Map.empty, Vector.new_builder, Vector.new_builder] acc-> item->
        existing = acc.at 0
        key = on item
        already_present = existing.get key False
        case already_present of
            True -> [existing, acc.at 1, acc.at 2 . append item]
            False -> [existing.insert key True, acc.at 1 . append item, acc.at 2]

    duplicates = acc.at 2 . to_vector
    if duplicates.not_empty then problem_callback duplicates

    acc.at 1 . to_vector

## PRIVATE
   A helper type used by transform helpers.
type Column_Transform_Element
    Value column associated_selector

## PRIVATE
prepare_order_by : Vector -> Text | Sort_Column | Vector (Text | Sort_Column) -> Problem_Builder -> Vector Column_Transform_Element
prepare_order_by internal_columns column_selectors problem_builder =
    resolve_selector selector = case selector of
        name : Text -> resolve_selector (Sort_Column.Name name)
        ix : Integer -> resolve_selector (Sort_Column.Index ix)
        Sort_Column.Name name direction ->
            resolve_selector (Sort_Column.Select_By_Name name direction Case_Sensitivity.Sensitive use_regex=False)
        Sort_Column.Index ix _ ->
            actual_index = if ix < 0 then internal_columns.length+ix else ix
            case (actual_index >= 0) && (actual_index < internal_columns.length) of
                True -> [Column_Transform_Element.Value (internal_columns.at actual_index) selector]
                False ->
                    problem_builder.report_oob_indices [ix]
                    []
        Sort_Column.Select_By_Name name _ case_sensitivity use_regex ->
            matcher = case use_regex of
                True -> Regex_Matcher.Value case_sensitivity=case_sensitivity
                False -> case case_sensitivity of
                    Case_Sensitivity.Default -> Text_Matcher.Case_Sensitive
                    Case_Sensitivity.Sensitive -> Text_Matcher.Case_Sensitive
                    Case_Sensitivity.Insensitive locale ->
                        Text_Matcher.Case_Insensitive locale=locale
            matches = internal_columns.filter c->
                matcher.match_single_criterion c.name name
            if matches.is_empty then
                problem_builder.report_missing_input_columns [name]
            matches.map c->
                Column_Transform_Element.Value c selector
    selectors_vec = case column_selectors of
        _ : Vector -> column_selectors
        _ -> [column_selectors]
    selected_elements = selectors_vec.flat_map resolve_selector
    if selected_elements.is_empty then
        problem_builder.report_other_warning No_Input_Columns_Selected
    selected_elements

## PRIVATE
   A helper function which can be used by methods that select a subset of
   columns and need to keep some metadata coming from the selector associated
   with each column.

   The returned columns are in the same order as the original selectors that
   matched them. A single selector may match multiple columns - in such case
   these columns are all placed in the place belonging to that selector and they
   keep their relative order from the table. If a column is matched by multiple
   selectors, it only appears once in the result - in the place associated with
   the first selector that matched it. Currently, the function does not warn
   about such duplicated matches.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - name_selectors: A vector of selectors which contain a column name and
     optionally some metadata.
   - matcher: Specifies the strategy of matching names.
   - problem_builder: Encapsulates the aggregation of encountered problems.
   - name_extractor: A function which extracts the column name from the selector.
select_columns_by_name : Vector -> Vector -> Text_Matcher -> Problem_Builder -> (Any -> Text) -> Boolean -> Vector
select_columns_by_name internal_columns name_selectors matcher problem_builder name_extractor =
    case Matching.make_match_matrix matcher objects=internal_columns criteria=name_selectors object_name_mapper=(_.name) criterion_mapper=name_extractor of
        ## We do the pattern match to ensure that any dataflow errors in
           `match_matrix` are correctly propagated. Without it, due to the
           imperative Vector Builder and `each` method, the dataflow errors
           would get swallowed.
        match_matrix ->
            problem_builder.report_missing_input_columns match_matrix.unmatched_criteria
            results = Vector.new_builder
            internal_columns.each_with_index i-> column->
                matching_selector_indices = match_matrix.criteria_indices_matching_object i
                if matching_selector_indices.not_empty then
                    associated_selector_index = matching_selector_indices.first
                    associated_selector = name_selectors.at associated_selector_index
                    element = Column_Transform_Element.Value column associated_selector
                    results.append (Pair.new element [associated_selector_index, i])
            # We sort the results by the associated selector index, breaking ties by the column index.
            sorted = results.to_vector.sort on=(_.second) by=Vector_Lexicographic_Order.compare
            sorted.map .first

## PRIVATE
   A helper function which can be used by methods that select a subset of
   columns and need to keep some metadata coming from the selector associated
   with each column.

   The returned columns are in the same order as the original selectors that
   matched them. A single selector may match multiple columns - in such case
   these columns are all placed in the place belonging to that selector and they
   keep their relative order from the table. If a column is matched by multiple
   selectors a warning is raised and it only appears once in the result - in the
   place associated with the first selector that matched it.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - index_selectors: A vector of selectors which contain a column index and
     optionally some metadata.
   - problem_builder: Encapsulates the aggregation of encountered problems.
select_columns_by_index : Vector -> Vector -> Problem_Builder -> (Any -> Integer) -> Vector
select_columns_by_index internal_columns index_selectors problem_builder index_extractor =
    good_selectors = validate_indices internal_columns.length index_selectors problem_builder index_extractor
    good_selectors.map pair->
        Column_Transform_Element.Value (internal_columns.at pair.first) pair.second

## PRIVATE
   A helper function which can be used by methods that select a subset of
   columns and need to keep some metadata coming from the selector associated
   with each column.

   The returned columns are in the same order as the original selectors that
   matched them. A single selector may match multiple columns - in such case
   these columns are all placed in the place belonging to that selector and they
   keep their relative order from the table. If a column is matched by multiple
   selectors a warning is raised and it only appears once in the result - in the
   place associated with the first selector that matched it.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - column_selectors: A vector of column selectors which contain a column whose
     name should be used as a reference to select the corresponding column in
     the given table. The selectors may also optionally contain some metadata.
   - problem_builder: Encapsulates the aggregation of encountered problems.
select_columns_by_column_reference : Vector -> Vector -> Problem_Builder -> (Any -> Integer) -> Vector
select_columns_by_column_reference internal_columns column_selectors problem_builder column_extractor =
    name_extractor = selector->
        column = column_extractor selector
        column.name
    select_columns_by_name internal_columns column_selectors Text_Matcher.Case_Sensitive problem_builder name_extractor

## PRIVATE
   A helper method gathering the common logic for constructing expressions that
   can filter out blank rows.
filter_blank_rows : Table -> Boolean -> Boolean -> Table
filter_blank_rows table when_any treat_nans_as_blank =
    cols = table.columns
    case cols.not_empty of
        True ->
            merge = if when_any then (||) else (&&)
            missing_mask = cols.map (_.is_blank treat_nans_as_blank) . reduce merge
            non_missing_mask = missing_mask.not
            table.filter non_missing_mask
        False -> table

## PRIVATE
   Checks if the given object implements a Table interface.

   Currently, it relies on a hack - it checks if the object has a method
   `is_table` and if it returns `True`.
is_table obj =
    known_types = ["Standard.Table.Data.Table.Table", "Standard.Database.Data.Table.Table"]
    known_types.contains (Meta.get_qualified_type_name obj)

## PRIVATE
   A helper method that resolves what should be the result type of a particular
   column set based on the union settings.
unify_result_type_for_union column_set all_tables allow_type_widening problem_builder =
    columns = column_set.resolve_columns all_tables
    case allow_type_widening of
        True ->
            types = columns.filter Filter_Condition.Not_Nothing . map .value_type
            common_type = Value_Type.find_common_type types strict=True
            if common_type.is_nothing then
                problem_builder.report_other_warning (No_Common_Type.Error column_set.name)
            common_type
        False ->
            first_column = columns.find (c-> c.is_nothing.not)
            first_type = first_column.value_type
            if first_type == Value_Type.Mixed then Value_Type.Mixed else
                first_wrong_column = columns.find if_missing=Nothing col->
                    col.is_nothing.not && col.value_type != first_type
                if first_wrong_column.is_nothing then first_type else
                    got_type = first_wrong_column.value_type
                    problem_builder.report_other_warning (Column_Type_Mismatch.Error column_set.name first_type got_type)
                    Nothing
