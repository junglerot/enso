from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State

import project.Data.Column.Column
import project.Data.Column_Selector.Column_Selector
import project.Data.Position.Position
import project.Data.Sort_Column.Sort_Column
import project.Data.Table.Table
import project.Data.Type.Value_Type.Value_Type
import project.Data.Type.Value_Type_Helpers
import project.Internal.Problem_Builder.Problem_Builder
import project.Internal.Unique_Name_Strategy.Unique_Name_Strategy

from project.Data.Aggregate_Column.Aggregate_Column import Minimum, Maximum
from project.Errors import Missing_Input_Columns, No_Output_Columns, Too_Many_Column_Names_Provided, No_Input_Columns_Selected, No_Common_Type, Column_Type_Mismatch, Ambiguous_Column_Rename, Invalid_Aggregate_Column

polyglot java import java.util.HashSet

type Table_Column_Helper
    ## PRIVATE
       Helps managing table columns.

       Arguments:
       - internal_columns: A list of all columns in a table.
       - make_column: A function which takes the internal column and creates a
         fully fledged column from it.
       - table: A reference to the table.
       - materialize: A function which takes a table and materializes it to
         in-memory.
    Value internal_columns make_column table materialize

    ## PRIVATE
       A helper function encapsulating shared code for `select_columns`
       implementations of various Table variants. See the documentation for the
       Table type for details.

       It returns the selected columns. It is the responsibility of each
       implementation to reconstruct a proper table from the
       resulting list of columns.

       Arguments:
       - selectors: Single instance or a Vector of names, indexes or
         `Column_Selector`s.
       - reorder: Specifies whether to reorder the matched columns according to
         the order of the selection criteria.
         If `False`, the matched entries are returned in the same order as in
         the input.
         If `True`, the matched entries are returned in the order of the
         criteria matching them. If a single object has been matched by multiple
         criteria, it is placed in the group belonging to the first matching
         criterion on the list. If a single criterion's group has more than one
         element, their relative order is the same as in the input.
       - error_on_missing_columns: Specifies if missing columns should be raised
         as error regardless of `on_problems`.
       - on_problems: Specifies the behavior when a problem occurs during the
         operation. By default, a warning is issued, but the operation proceeds.
         If set to `Report_Error`, the operation fails with a dataflow error.
         If set to `Ignore`, the operation proceeds without errors or warnings.
    select_columns : Text | Integer | Column_Selector | Vector (Integer | Text | Column_Selector) -> Boolean -> Boolean -> Problem_Behavior -> Vector
    select_columns self selectors reorder error_on_missing_columns on_problems =
        problem_builder = Problem_Builder.new error_on_missing_columns=error_on_missing_columns
        result = self.select_columns_helper selectors reorder problem_builder
        problem_builder.attach_problems_before on_problems <|
            if result.is_empty then Error.throw No_Output_Columns else result

    ## PRIVATE
       Works like `select_columns` but will not throw `No_Output_Columns` error
       and will return proper columns instead of internal columns.
       Useful, when selecting a subset of columns to transform.
    resolve_columns : Text | Integer | Column_Selector | Vector (Integer | Text | Column_Selector) -> Boolean -> Problem_Behavior -> Boolean -> Vector
    resolve_columns self selectors error_on_missing_columns on_problems reorder=False =
        problem_builder = Problem_Builder.new error_on_missing_columns=error_on_missing_columns
        result = self.select_columns_helper selectors reorder problem_builder
        problem_builder.attach_problems_before on_problems <|
            result.map self.make_column

    ## PRIVATE
       A helper function encapsulating shared code for `remove_columns`
       implementations of various Table variants. See the documentation for the
       Table type for details.

       It returns the columns which should be kept. It is the responsibility of
       each implementation to reconstruct a proper table from the resulting list
       of columns.

       Arguments:
       - selectors: Single instance or a Vector of names, indexes or
         `Column_Selector`s.
       - error_on_missing_columns: Specifies if missing columns should be raised
         as error regardless of `on_problems`.
       - on_problems: Specifies the behavior when a problem occurs during the
         operation. By default, a warning is issued, but the operation proceeds.
         If set to `Report_Error`, the operation fails with a dataflow error.
         If set to `Ignore`, the operation proceeds without errors or warnings.
    remove_columns : Text | Integer | Column_Selector | Vector (Integer | Text | Column_Selector) -> Boolean -> Problem_Behavior -> Vector
    remove_columns self selectors error_on_missing_columns on_problems =
        problem_builder = Problem_Builder.new error_on_missing_columns=error_on_missing_columns
        selection = self.select_columns_helper selectors reorder=False problem_builder
        selected_names = Map.from_vector (selection.map column-> [column.name, True])
        result = self.internal_columns.filter column->
            should_be_removed = selected_names.get column.name False
            should_be_removed.not
        if result.is_empty then Error.throw No_Output_Columns else
            problem_builder.attach_problems_after on_problems result

    ## PRIVATE
       A helper function encapsulating shared code for `reorder_columns`
       implementations of various Table variants. See the documentation for the
       Table type for details.

       It returns the columns which should be kept. It is the responsibility of
       each implementation to reconstruct a proper table from the resulting list
       of columns.

       Arguments:
       - selectors: Single instance or a Vector of names, indexes or
         `Column_Selector`s.
       - position: Specifies how to place the selected columns in relation to
         the columns which were not matched by the `selector` (if any).
       - error_on_missing_columns: Specifies if missing columns should be raised
         as error regardless of `on_problems`.
       - on_problems: Specifies the behavior when a problem occurs during the
         operation. By default, a warning is issued, but the operation proceeds.
         If set to `Report_Error`, the operation fails with a dataflow error.
         If set to `Ignore`, the operation proceeds without errors or warnings.
    reorder_columns : Text | Integer | Column_Selector | Vector (Integer | Text | Column_Selector) -> Position -> Boolean -> Problem_Behavior -> Vector
    reorder_columns self selectors position error_on_missing_columns on_problems =
        problem_builder = Problem_Builder.new error_on_missing_columns=error_on_missing_columns
        selection = self.select_columns_helper selectors reorder=True problem_builder
        problem_builder.attach_problems_before on_problems <|
            selected_names = Map.from_vector (selection.map column-> [column.name, True])
            other_columns = self.internal_columns.filter column->
                is_selected = selected_names.get column.name False
                is_selected.not
            result = case position of
                Position.Before_Other_Columns -> selection + other_columns
                Position.After_Other_Columns -> other_columns + selection
            result

    ## PRIVATE
       A helper function which selects columns from the table based on the
       provided selection criteria.

       Arguments:
       - selectors: Single instance or a Vector of names, indexes or
         `Column_Selector`s.
       - reorder: Specifies whether to reorder the matched columns according to
         the order of the selection criteria.
         If `False`, the matched entries are returned in the same order as in
         the input.
         If `True`, the matched entries are returned in the order of the
         criteria matching them. If a single object has been matched by multiple
         criteria, it is placed in the group belonging to the first matching
         criterion on the list. If a single criterion's group has more than one
         element, their relative order is the same as in the input.
       - problem_builder: Encapsulates the aggregation of encountered problems.
    select_columns_helper : Text | Integer | Column_Selector | Vector (Integer | Text | Column_Selector) -> Boolean -> Problem_Builder -> Vector
    select_columns_helper self selectors reorder problem_builder =
        resolve_selector selector = case selector of
            name : Text -> resolve_selector (Column_Selector.By_Name name Case_Sensitivity.Sensitive False)
            ix : Integer -> if is_index_valid self.internal_columns.length ix then [self.internal_columns.at ix] else
                problem_builder.report_oob_indices [ix]
                []
            Column_Selector.By_Name name case_sensitivity use_regex ->
                matches = match_columns name case_sensitivity use_regex self.internal_columns
                if matches.is_empty then problem_builder.report_missing_input_columns [name]
                matches
            Column_Selector.Blank_Columns when_any treat_nans_as_blank ->
                get_blank_columns when_any treat_nans_as_blank self.internal_columns self.make_column self.table self.materialize

        vector = case selectors of
            _ : Vector -> selectors
            _ -> [selectors]
        selected_columns = vector.map resolve_selector . flatten
        if reorder then selected_columns.distinct on=_.name else
            map = Map.from_vector (selected_columns.map column-> [column.name, True]) allow_duplicates=True
            self.internal_columns.filter column-> map.contains_key column.name

    ## PRIVATE
       A helper function which selects a single column from the table.

       It may allow selection of columns by index, name or computing a derived
       expression.
    resolve_column_or_expression : (Integer | Text) -> Problem_Builder -> Any | Nothing
    resolve_column_or_expression self selector problem_builder = case selector of
        _ : Text ->
            matched_columns = self.internal_columns.filter column->(column.name==selector)
            if matched_columns.length == 1 then matched_columns.first else
                if matched_columns.length != 0 then Panic.throw (Illegal_State.Error "Bug in Table library: A single exact match should never match more than one column. Perhaps the table breaks the invariant of unique column names?") else
                    (self.table.evaluate_expression selector).catch Any expression_error->
                        invalid_column = Invalid_Aggregate_Column.Error selector expression_error
                        problem_builder.report_other_warning invalid_column
                        Nothing
        _ : Integer -> case is_index_valid self.internal_columns.length selector of
            True -> self.internal_columns.at selector
            False ->
                problem_builder.report_oob_indices [selector]
                Nothing

## PRIVATE
   A helper function encapsulating shared code for `rename_columns`
   implementations of various Table variants. See the documentation for the
   Table type for details.

   It takes a list of columns and a mapping, and returns the complete new set
   of column names which should be applied to the table. It is the
   responsibility of each implementation to reconstruct a proper table from the
   resulting list of names.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - mapping: A selector specifying which columns should be moved and the order
     in which they should appear in the result.
   - error_on_missing_columns: If set to `True`, missing columns are treated as
     error regardless of `on_problems`.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
rename_columns : Vector -> Map (Text | Integer | Column_Selector) Text | Vector Text -> Boolean -> Problem_Behavior -> Map Text Text
rename_columns internal_columns mapping error_on_missing_columns on_problems =
    ## Convert Vector of Pairs to Map
    is_vec_pairs = mapping.is_a Vector && mapping.length > 0 && (mapping.first.is_a Text . not)
    case is_vec_pairs of
        True ->
            ## Attempt to treat as Map
            map = Map.from_vector mapping
            if map.is_error then Error.throw (Illegal_Argument.Error "A mapping Vector must be either a list of names or a list of pairs (old name to new name).") else
                rename_columns internal_columns map error_on_missing_columns on_problems
        False ->
            unique = Unique_Name_Strategy.new
            problem_builder = Problem_Builder.new error_on_missing_columns=error_on_missing_columns

            ## Computes a vector of pairs, where each pairs is one of the columns from
               the original table and a new name proposed for it.

               The list can be empty if the column remains unchanged.
               The list may also contain duplicate input columns.
            columns_with_new_names = case mapping of
                vec : Vector ->
                    col_count = internal_columns.length
                    good_names = if vec.length <= col_count then vec else
                        problem_builder.report_other_warning (Too_Many_Column_Names_Provided.Error (vec.drop (First col_count)))
                        vec.take (First col_count)
                    internal_columns.take good_names.length . zip good_names
                _ : Map ->
                    resolve_rename selector replacement = case selector of
                        name : Text -> resolve_rename (Column_Selector.By_Name name Case_Sensitivity.Sensitive False) replacement
                        ix : Integer -> if is_index_valid internal_columns.length ix then [Pair.new (internal_columns.at ix) replacement] else
                            problem_builder.report_oob_indices [ix]
                            []
                        Column_Selector.By_Name name case_sensitivity use_regex ->
                            matches = match_columns name case_sensitivity use_regex internal_columns
                            case matches.is_empty of
                                True ->
                                    problem_builder.report_missing_input_columns [name]
                                    []
                                False ->
                                    if use_regex.not then matches.map c-> Pair.new c replacement else
                                        pattern = Regex.compile name case_insensitive=case_sensitivity.is_case_insensitive_in_memory
                                        matches.map c-> Pair.new c (pattern.replace c.name replacement)
                        Column_Selector.Blank_Columns _ _ ->
                            Error.throw (Illegal_Argument.Error "Cannot use `Blank_Columns` to rename.")
                    builder = mapping.to_vector.fold Vector.new_builder builder-> pair-> builder.append_vector_range (resolve_rename pair.first pair.second)
                    builder.to_vector

            ## Resolves actual new names for renamed columns.
               If a column received ambiguous new names, an error is raised.
            name_map = columns_with_new_names.fold Map.empty current-> pair->
                old_name = pair.first.name
                case current.contains_key old_name of
                    False -> current.insert old_name pair.second
                    True -> if current.get old_name == pair.second then current else
                        new_names = columns_with_new_names.filter p->p.first.name==old_name . map p-> p.second
                        Error.throw (Ambiguous_Column_Rename.Error old_name new_names)

            ## Renamed names take precedence, so we first deduplicate those.
            resolved_name_map = name_map.map unique.make_unique

            ## Then we ensure that the names of not-renamed columns are also unique and
               return the effective column names for each column.
            not_renamed = internal_columns.filter c-> resolved_name_map.contains_key c.name . not
            new_column_names = not_renamed.fold resolved_name_map current-> column->
                new_name = unique.make_unique column.name
                current.insert column.name new_name

            ## Attach any problems
            problem_builder.report_unique_name_strategy unique
            problem_builder.attach_problems_before on_problems new_column_names

## PRIVATE
   An internal marker type for `rename_columns`.
type Not_Renamed

## PRIVATE
   A helper function encapsulating shared code for `sort_columns`
   implementations of various Table variants. See the documentation for the
   Table type for details.

   It takes a list of columns and returns the columns in the new order. It is
   the responsibility of each implementation to reconstruct a proper table from
   the resulting list of columns.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - order: Whether sorting should be in ascending or descending order.
   - text_ordering: The sort methodology to use.
sort_columns : Vector -> Sort_Direction -> Text_Ordering -> Vector
sort_columns internal_columns order text_ordering =
    case_sensitivity = text_ordering.case_sensitivity.if_nothing Case_Sensitivity.Sensitive
    mapper = case case_sensitivity of
        Case_Sensitivity.Default -> _.name
        Case_Sensitivity.Sensitive -> _.name
        Case_Sensitivity.Insensitive locale ->
            col -> col.name.to_case_insensitive_key locale=locale
    comparator = case text_ordering.sort_digits_as_numbers of
        True -> Natural_Order.compare
        False -> Ordering.compare
    internal_columns.sort order=order on=mapper by=comparator

## PRIVATE
   Selects element from the vector based on the given indices.

   The elements are returned in the same order as their provided indices.
select_indices_reordering vector indices =
    indices.map vector.at

## PRIVATE
   Selects element from the vector based on the given indices.

   The elements are returned in the same order as they appeared in the original
   vector.
select_indices_preserving_order vector indices =
    indices_to_keep = Map.from_vector (indices.map i-> [i, True])
    vector.filter_with_index ix-> _->
        indices_to_keep.get ix False

## PRIVATE
   Checks if the given index is in the valid range for the provided vector.
is_index_valid : Integer -> Integer -> Boolean
is_index_valid length ix =
    (ix >= -length) && (ix<length)

## PRIVATE
   A helper method to match columns by name
match_columns : Text -> Case_Sensitivity -> Boolean -> Vector -> Vector
match_columns name case_sensitivity use_regex columns =
    match = case_sensitivity.create_match_function use_regex
    columns.filter c-> match c.name name

## PRIVATE
   A helper type used by transform helpers.
type Column_Transform_Element
    Value column associated_selector

## PRIVATE
   Resolves the `Sort_Column` selectors and ensures that at least one column was
   selected.
prepare_order_by : Vector -> Text | Sort_Column | Vector (Text | Sort_Column) -> Problem_Builder -> Vector Column_Transform_Element
prepare_order_by internal_columns column_selectors problem_builder =
    selected_elements = resolve_order_by internal_columns column_selectors problem_builder
    if selected_elements.is_empty then
        problem_builder.report_other_warning No_Input_Columns_Selected
    selected_elements

## PRIVATE
   Resolves the `Sort_Column` selectors and returns a list of elements
   containing the original selector and the selected column.
resolve_order_by : Vector -> Text | Sort_Column | Vector (Text | Sort_Column) -> Problem_Builder -> Vector Column_Transform_Element
resolve_order_by internal_columns column_selectors problem_builder =
    resolve_selector selector = case selector of
        name : Text -> resolve_selector (Sort_Column.Name name)
        ix : Integer -> resolve_selector (Sort_Column.Index ix)
        Sort_Column.Name name direction ->
            resolve_selector (Sort_Column.Select_By_Name name direction Case_Sensitivity.Sensitive use_regex=False)
        Sort_Column.Index ix _ ->
            if is_index_valid internal_columns.length ix then [Column_Transform_Element.Value (internal_columns.at ix) selector] else
                problem_builder.report_oob_indices [ix]
                []
        Sort_Column.Select_By_Name name _ case_sensitivity use_regex ->
            matches = match_columns name case_sensitivity use_regex internal_columns
            if matches.is_empty then problem_builder.report_missing_input_columns [name]
            matches.map c-> Column_Transform_Element.Value c selector
    selectors_vec = case column_selectors of
        _ : Vector -> column_selectors
        _ -> [column_selectors]
    selectors_vec.flat_map resolve_selector

## PRIVATE
   A helper method gathering the common logic for constructing expressions that
   can filter out blank rows.
filter_blank_rows : Table -> Boolean -> Boolean -> Table
filter_blank_rows table when_any treat_nans_as_blank =
    cols = table.columns
    case cols.not_empty of
        True ->
            merge = if when_any then (||) else (&&)
            missing_mask = cols.map (_.is_blank treat_nans_as_blank) . reduce merge
            non_missing_mask = missing_mask.not
            table.filter non_missing_mask
        False -> table

## PRIVATE
   Checks if the given object implements a Table interface.

   Currently, it relies on a hack - it checks if the object has a method
   `is_table` and if it returns `True`.
is_table obj =
    known_types = ["Standard.Table.Data.Table.Table", "Standard.Database.Data.Table.Table"]
    known_types.contains (Meta.get_qualified_type_name obj)

## PRIVATE
   Checks if the given object implements a Table interface.

   Currently, it relies on a hack - it checks if the object has a method
   `is_table` and if it returns `True`.
is_column obj =
    known_types = ["Standard.Table.Data.Column.Column", "Standard.Database.Data.Column.Column"]
    known_types.contains (Meta.get_qualified_type_name obj)

## PRIVATE
   A helper method that resolves what should be the result type of a particular
   column set based on the union settings.
unify_result_type_for_union column_set all_tables allow_type_widening problem_builder =
    columns = column_set.resolve_columns all_tables
    case allow_type_widening of
        True ->
            types = columns.filter Filter_Condition.Not_Nothing . map .value_type
            common_type = Value_Type_Helpers.find_common_type types strict=True
            if common_type.is_nothing then
                problem_builder.report_other_warning (No_Common_Type.Error types related_column_name=column_set.name)
            common_type
        False ->
            is_not_nothing c = case c of
                Nothing -> False
                _ -> True
            first_column = columns.find is_not_nothing
            first_type = first_column.value_type
            if first_type == Value_Type.Mixed then Value_Type.Mixed else
                first_wrong_column = columns.find if_missing=Nothing col->
                    is_not_nothing col && col.value_type != first_type
                case first_wrong_column of
                    Nothing -> first_type
                    _ ->
                        got_type = first_wrong_column.value_type
                        problem_builder.report_other_warning (Column_Type_Mismatch.Error column_set.name first_type got_type)
                        Nothing

## PRIVATE
   A helper method that gets the columns from the provided table that are
   complete blank or have some blanks.
get_blank_columns when_any treat_nans_as_blank internal_columns make_column table materialize =
    blanks = internal_columns.map_with_index ix-> internal_column->
        column = make_column internal_column
        blank_indicator = column.is_blank treat_nans_as_blank
        blank_indicator.iif 1 0 . rename "blanks_"+ix.to_text

    ## We cannot just use a custom_column in the aggregate because of
       how the column selector works. We may need to revisit this. For
       now we need to use tricks like that:

       To be backend agnostic, we cannot create a new table with the
       columns above. Instead, we add our blank columns to the table
       and then remove any other columns we. We do not have to deal
       with name conflicts, as adding a new column with a clashing
       name does not affect the old column or derived columns.
    table_with_blank_indicators = blanks.fold table table-> blanks_col-> table.set blanks_col
    just_indicators = table_with_blank_indicators.select_columns (blanks.map .name) on_problems=Problem_Behavior.Report_Error

    # Maximum is equivalent to Exists and Minimum is equivalent to Forall.
    col_aggregate = if when_any then Maximum _ else Minimum _
    aggregates = blanks.map blanks_col-> col_aggregate blanks_col.name

    aggregate_result = just_indicators.aggregate aggregates on_problems=Problem_Behavior.Report_Error
    materialized_result = materialize <| aggregate_result.catch Any error->
        msg = "Unexpected dataflow error has been thrown in an `select_columns_helper`. This is a bug in the Table library. The unexpected error was: "+error.to_display_text
        Panic.throw (Illegal_State.Error message=msg cause=error)

    counts = materialized_result.rows.first
    internal_columns.filter_with_index i-> _->
        case counts.at i of
            ## No rows in input, so treating as blank by convention.
            Nothing -> True
            1 -> True
            0 -> False
            unexpected ->
                Panic.throw (Illegal_State.Error "Unexpected result: "+unexpected.to_display_text+". Perhaps an implementation bug of Column_Selector.Blank_Columns.")
