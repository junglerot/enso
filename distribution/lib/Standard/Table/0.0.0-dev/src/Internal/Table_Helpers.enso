from Standard.Base import all

import Standard.Base.Warning
import Standard.Base.Data.Text.Matching
from Standard.Table.Data.Column_Selector as Column_Selector_Module import Column_Selector, By_Name, By_Index, By_Column
from Standard.Base.Data.Text.Text_Ordering as Text_Ordering_Module import Text_Ordering
from Standard.Base.Error.Problem_Behavior as Problem_Behavior_Module import Problem_Behavior, Report_Warning
import Standard.Table.Data.Position
from Standard.Table.Error as Error_Module import Missing_Input_Columns, Column_Indexes_Out_Of_Range, No_Output_Columns, Duplicate_Column_Selectors, Input_Indices_Already_Matched, Too_Many_Column_Names_Provided, Duplicate_Output_Column_Names, Invalid_Output_Column_Names
import Standard.Table.Data.Column_Mapping
import Standard.Table.Internal.Unique_Name_Strategy
import Standard.Table.Internal.Problem_Builder
import Standard.Base.Data.Ordering.Natural_Order

polyglot java import java.util.HashSet

## PRIVATE
   A helper function encapsulating shared code for `select_columns`
   implementations of various Table variants. See the documentation for the
   Table type for details.

   It takes a list of columns and returns the selected columns. It is the
   responsibility of each implementation to reconstruct a proper table from the
   resulting list of columns.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - selector: Column selection criteria.
   - reorder: Specifies whether to reorder the matched columns according to the
     order of the selection criteria.
     If `False`, the matched entries are returned in the same order as in the
     input.
     If `True`, the matched entries are returned in the order of the criteria
     matching them. If a single object has been matched by multiple criteria, it
     is placed in the group belonging to the first matching criterion on the
     list. If a single criterion's group has more than one element, their
     relative order is the same as in the input.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
select_columns : Vector -> Column_Selector -> Boolean -> Problem_Behavior -> Vector
select_columns internal_columns selector reorder on_problems =
    problem_builder = Problem_Builder.new
    result = here.select_columns_helper internal_columns selector reorder problem_builder
    if result.is_empty then
        problem_builder.report_other_warning No_Output_Columns
    problem_builder.attach_problems_after on_problems result

## PRIVATE
   A helper function encapsulating shared code for `remove_columns`
   implementations of various Table variants. See the documentation for the
   Table type for details.

   It takes a list of columns and returns the columns which should be kept. It
   is the responsibility of each implementation to reconstruct a proper table
   from the resulting list of columns.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - selector: Column selection criteria.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
remove_columns : Vector -> Column_Selector -> Problem_Behavior -> Vector
remove_columns internal_columns selector on_problems =
    problem_builder = Problem_Builder.new
    selection = here.select_columns_helper internal_columns selector reorder=False problem_builder
    selected_names = Map.from_vector (selection.map column-> [column.name, True])
    result = internal_columns.filter column->
        should_be_removed = selected_names.get_or_else column.name False
        should_be_removed.not
    if result.is_empty then
        problem_builder.report_other_warning No_Output_Columns
    problem_builder.attach_problems_after on_problems result

## PRIVATE
   A helper function encapsulating shared code for `reorder_columns`
   implementations of various Table variants. See the documentation for the
   Table type for details.

   It takes a list of columns and returns the columns which should be kept. It
   is the responsibility of each implementation to reconstruct a proper table
   from the resulting list of columns.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - selector: A selector specifying which columns should be moved and the order
     in which they should appear in the result.
   - position: Specifies how to place the selected columns in relation to the
     columns which were not matched by the `selector` (if any).
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
reorder_columns : Vector -> Column_Selector -> Position.Position -> Problem_Behavior -> Vector
reorder_columns internal_columns selector position on_problems =
    problem_builder = Problem_Builder.new
    selection = here.select_columns_helper internal_columns selector reorder=True problem_builder
    problem_builder.attach_problems_before on_problems <|
        selected_names = Map.from_vector (selection.map column-> [column.name, True])
        other_columns = internal_columns.filter column->
            is_selected = selected_names.get_or_else column.name False
            is_selected.not
        result = case position of
            Position.Before_Other_Columns -> selection + other_columns
            Position.After_Other_Columns -> other_columns + selection
        result

## PRIVATE
   A helper function encapsulating shared code for `rename_columns`
   implementations of various Table variants. See the documentation for the
   Table type for details.

   It takes a list of columns and a mapping, and returns the complete new set
   of column names which should be applied to the table. It is the
   responsibility of each implementation to reconstruct a proper table from the
   resulting list of names.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - mapping: A selector specifying which columns should be moved and the order
     in which they should appear in the result.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
rename_columns : Vector -> Column_Mapping -> Problem_Behavior -> Map
rename_columns internal_columns mapping on_problems =
    unique = Unique_Name_Strategy.new
    col_count = internal_columns.length
    problem_builder = Problem_Builder.new

    name_mapper vec ms =
        good_names = here.validate_unique vec (problem_callback = v-> problem_builder.report_duplicate_column_selectors (v.map c->(c.at 0))) (on = x-> (x.at 0))
        matched = HashSet.new

        mapper = name->
            index = 0.up_to good_names.length . find i->(ms.match_single_criterion name ((good_names.at i).at 0))
            case index of
                Nothing -> Nothing
                _ ->
                    matched.add index
                    new_name = case ms of
                        Regex_Matcher _ _ _ _ _ ->
                            pattern = ms.compile ((good_names.at index).at 0)
                            pattern.replace name ((good_names.at index).at 1)
                        Text_Matcher _ -> (good_names.at index).at 1
                    unique.make_unique new_name

        new_names = 0.up_to col_count . map i->(mapper (internal_columns.at i).name)
        unused = good_names.filter_with_index i->_->(matched.contains i).not . map e->(e.at 0)
        problem_builder.report_missing_input_columns unused
        new_names

    mapped = case mapping of
        Column_Mapping.By_Column vec -> name_mapper (vec.map r-> [r.at 0 . name, r.at 1]) (Text_Matcher case_sensitive=True)
        Column_Mapping.By_Name map ms -> name_mapper map.to_vector ms
        Column_Mapping.By_Index map ->
            good_indices = here.validate_indices col_count map.keys problem_builder

            index_map = Map.from_vector <| good_indices.map p->[p.at 0, map.get (p.at 1)]

            new_names = 0.up_to col_count . map i->
                target = index_map.get_or_else i Nothing
                if target.is_nothing then Nothing else unique.make_unique target

            new_names
        Column_Mapping.By_Position vec ->
            good_names = case vec.length > col_count of
                True ->
                    problem_builder.report_other_warning (Too_Many_Column_Names_Provided (vec.drop_start col_count))
                    vec.take_start col_count
                False -> vec

            new_names = 0.up_to col_count . map i->if i>=good_names.length then Nothing else
                unique.make_unique (good_names.at i)
            new_names

    processed = mapped.map_with_index i->n->
        n.if_nothing (unique.make_unique (internal_columns.at i).name)

    if unique.invalid_names.not_empty then
        problem_builder.report_other_warning (Invalid_Output_Column_Names unique.invalid_names.to_vector)
    if unique.renames.not_empty then
        problem_builder.report_other_warning (Duplicate_Output_Column_Names unique.renames.to_vector)

    problem_builder.attach_problems_before on_problems processed

## PRIVATE
   A helper function encapsulating shared code for `sort_columns`
   implementations of various Table variants. See the documentation for the
   Table type for details.

   It takes a list of columns and returns the columns in the new order. It is
   the responsibility of each implementation to reconstruct a proper table from
   the resulting list of columns.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - direction: Whether sorting should be in ascending or descending order.
   - text_ordering: The sort methodology to use.
sort_columns : Vector -> Sort_Direction -> Text_Ordering -> Vector
sort_columns internal_columns direction text_ordering =
    mapper = case text_ordering.case_sensitive of
        True -> _.name
        Case_Insensitive locale ->
            col -> col.name.to_case_insensitive_key locale=locale
    comparator = case text_ordering.sort_digits_as_numbers of
        True -> Natural_Order.compare
        False -> .compare_to
    internal_columns.sort on=mapper by=comparator order=direction

## PRIVATE
   A helper function which selects columns from the table based on the provided
   selection criteria.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - selector: Column selection criteria.
   - reorder: Specifies whether to reorder the matched columns according to the
     order of the selection criteria.
     If `False`, the matched entries are returned in the same order as in the
     input.
     If `True`, the matched entries are returned in the order of the criteria
     matching them. If a single object has been matched by multiple criteria, it
     is placed in the group belonging to the first matching criterion on the
     list. If a single criterion's group has more than one element, their
     relative order is the same as in the input.
   - problem_builder: Encapsulates the aggregation of encountered problems.
select_columns_helper : Vector -> Column_Selector -> Boolean -> Problem_Builder -> Vector
select_columns_helper internal_columns selector reorder problem_builder = case selector of
    By_Name names matcher ->
        valid_names = here.validate_unique names problem_builder.report_duplicate_column_selectors
        Matching.match_criteria_callback matcher internal_columns valid_names reorder=reorder name_mapper=(_.name) problem_callback=problem_builder.report_missing_input_columns
    By_Index indices ->
        good_indices = here.validate_indices internal_columns.length indices problem_builder . map .first
        case reorder of
            True ->
                here.select_indices_reordering internal_columns good_indices
            False ->
                here.select_indices_preserving_order internal_columns good_indices
    By_Column columns ->
        column_names = columns.map .name
        new_selector = By_Name column_names (Text_Matcher case_sensitive=True)
        here.select_columns_helper internal_columns new_selector reorder=reorder problem_builder=problem_builder

## PRIVATE
   A helper function which selects a single column from the table. It is aligned with the
   `select_columns_helper`.
resolve_column_helper : Vector a -> (Integer | Text | Column) -> Problem_Builder -> a | Nothing
resolve_column_helper internal_columns selector problem_builder = case selector of
    Text ->
        matched_columns = Matching.match_criteria_callback (Text_Matcher case_sensitive=True) internal_columns [selector] reorder=True name_mapper=(_.name) problem_callback=problem_builder.report_missing_input_columns
        if matched_columns.length == 1 then matched_columns.first else
            if matched_columns.length == 0 then Nothing else
                Panic.throw (Illegal_State_Error "A single exact match should never match more than one column. Perhaps the table breaks the invariant of unique column names?")
    Integer -> case here.is_index_valid internal_columns.length selector of
        True -> internal_columns.at selector
        False ->
            problem_builder.report_oob_indices [selector]
            Nothing
    ## A wildcard to match any backend's column.
    _ ->
        here.resolve_column_helper internal_columns selector.name problem_builder=problem_builder

## PRIVATE
   Converts the generic `No_Matches_Found` error to a more specific
   `Missing_Input_Columns`. Any other errors are returned as-is.
promote_no_matches_to_missing_columns error = case error of
    Matching.No_Matches_Found criteria -> Maybe.Some <| Missing_Input_Columns criteria
    _ -> Nothing

## PRIVATE
   Selects element from the vector based on the given indices.

   The elements are returned in the same order as their provided indices.
select_indices_reordering vector indices =
    indices.map vector.at

## PRIVATE
   Selects element from the vector based on the given indices.

   The elements are returned in the same order as they appeared in the original
   vector.
select_indices_preserving_order vector indices =
    indices_to_keep = Map.from_vector (indices.map i-> [i, True])
    vector.filter_with_index ix-> _->
        indices_to_keep.get_or_else ix False

## PRIVATE
   Returns the actual position in the array that the index points to.

   It resolves negative indices to regular indices.

   If the negative index is sufficiently large, a negative result can still be
   returned. This function does not ensure that the resulting indices are within
   bounds.
resolve_index : Integer->Integer->Integer
resolve_index length ix =
    if ix < 0 then length+ix else ix

## PRIVATE
   Checks if the given index is in the valid range for the provided vector.
is_index_valid : Integer->Integer->Boolean
is_index_valid length ix =
    actual_ix = here.resolve_index length ix
    actual_ix>=0 && actual_ix<length

## PRIVATE
   Validates a Vector of indices returning a pair of `good_indices` and `problems`
validate_indices : Integer -> Vector -> Problem_Builder -> Vector
validate_indices length indices problem_builder =
    partitioned_indices = indices.partition (here.is_index_valid length)
    inbound_indices = partitioned_indices.first
    oob_indices = partitioned_indices.second
    problem_builder.report_oob_indices oob_indices

    uniques = here.validate_unique inbound_indices problem_builder.report_duplicate_column_selectors

    resolver = ix->(here.resolve_index length ix)
    alias_uniques = here.validate_unique uniques problem_builder.report_input_indices_already_matched on=resolver
    good_indices = alias_uniques.map i->[resolver i, i]
    good_indices

## PRIVATE
   Splits a vector into elements which are distinct and the duplicates.
   Duplicates are wrapped as an error
validate_unique : Vector -> (Vector -> Vector) -> (Any -> Any) -> Vector
validate_unique vector problem_callback on=(x->x) =
    acc = vector.fold [Map.empty, Vector.new_builder, Vector.new_builder] acc-> item->
        existing = acc.at 0
        key = on item
        already_present = existing.get_or_else key False
        case already_present of
            True -> [existing, acc.at 1, acc.at 2 . append item]
            False -> [existing.insert key True, acc.at 1 . append item, acc.at 2]

    duplicates = acc.at 2 . to_vector
    if duplicates.not_empty then problem_callback duplicates

    acc.at 1 . to_vector
