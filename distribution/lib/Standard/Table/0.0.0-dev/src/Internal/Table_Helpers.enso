from Standard.Base import all

import Standard.Base.Error.Warnings
import Standard.Table.Data.Matching
from Standard.Table.Data.Column_Selector as Column_Selector_Module import Column_Selector, By_Name, By_Index, By_Column
from Standard.Table.Data.Sort_Method as Sort_Method_Module import Sort_Method
from Standard.Base.Error.Problem_Behavior as Problem_Behavior_Module import Problem_Behavior, Report_Warning
import Standard.Table.Data.Position
from Standard.Table.Error as Error_Module import Missing_Input_Columns, Column_Indexes_Out_Of_Range, No_Output_Columns, Duplicate_Column_Selectors, Input_Indices_Already_Matched
import Standard.Base.Data.Ordering.Natural_Order

## PRIVATE
   A helper function encapsulating shared code for `select_columns`
   implementations of various Table variants. See the documentation for the
   Table type for details.

   It takes a list of columns and returns the selected columns. It is the
   responsibility of each implementation to reconstruct a proper table from the
   resulting list of columns.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - selector: Column selection criteria.
   - reorder: Specifies whether to reorder the matched columns according to the
     order of the selection criteria.
     If `False`, the matched entries are returned in the same order as in the
     input.
     If `True`, the matched entries are returned in the order of the criteria
     matching them. If a single object has been matched by multiple criteria, it
     is placed in the group belonging to the first matching criterion on the
     list. If a single criterion's group has more than one element, their
     relative order is the same as in the input.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
   - warnings: A Warning_System instance specifying how to handle warnings. This
     is a temporary workaround to allow for testing the warning mechanism. Once
     the proper warning system is implemented, this argument will become
     obsolete and will be removed. No user code should use this argument, as it
     will be removed in the future.
select_columns : Vector -> Column_Selector -> Boolean -> Problem_Behavior -> Warnings.Warning_System -> Vector
select_columns internal_columns selector reorder on_problems warnings =
    result = here.select_columns_helper internal_columns selector reorder on_problems warnings
    problems = if result.is_empty then [No_Output_Columns] else []
    on_problems.attach_problems_after result problems warnings

## PRIVATE
   A helper function encapsulating shared code for `remove_columns`
   implementations of various Table variants. See the documentation for the
   Table type for details.

   It takes a list of columns and returns the columns which should be kept. It
   is the responsibility of each implementation to reconstruct a proper table
   from the resulting list of columns.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - selector: Column selection criteria.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
   - warnings: A Warning_System instance specifying how to handle warnings. This
     is a temporary workaround to allow for testing the warning mechanism. Once
     the proper warning system is implemented, this argument will become
     obsolete and will be removed. No user code should use this argument, as it
     will be removed in the future.
remove_columns : Vector -> Column_Selector -> Problem_Behavior -> Warnings.Warning_System -> Vector
remove_columns internal_columns selector on_problems warnings =
    selection = here.select_columns_helper internal_columns selector reorder=False on_problems warnings
    selected_names = Map.from_vector (selection.map column-> [column.name, True])
    result = internal_columns.filter column->
        should_be_removed = selected_names.get_or_else column.name False
        should_be_removed.not
    issues = if result.is_empty then [No_Output_Columns] else []
    on_problems.attach_problems_after result issues warnings

## PRIVATE
   A helper function encapsulating shared code for `reorder_columns`
   implementations of various Table variants. See the documentation for the
   Table type for details.

   It takes a list of columns and returns the columns which should be kept. It
   is the responsibility of each implementation to reconstruct a proper table
   from the resulting list of columns.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - selector: A selector specifying which columns should be moved and the order
     in which they should appear in the result.
   - position: Specifies how to place the selected columns in relation to the
     columns which were not matched by the `selector` (if any).
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
   - warnings: A Warning_System instance specifying how to handle warnings. This
     is a temporary workaround to allow for testing the warning mechanism. Once
     the proper warning system is implemented, this argument will become
     obsolete and will be removed. No user code should use this argument, as it
     will be removed in the future.
reorder_columns : Vector -> Column_Selector -> Position.Position -> Problem_Behavior -> Warnings.Warning_System -> Vector
reorder_columns internal_columns selector position on_problems warnings =
    selection = here.select_columns_helper internal_columns selector reorder=True on_problems warnings
    selected_names = Map.from_vector (selection.map column-> [column.name, True])
    other_columns = internal_columns.filter column->
        is_selected = selected_names.get_or_else column.name False
        is_selected.not
    result = case position of
        Position.Before_Other_Columns -> selection + other_columns
        Position.After_Other_Columns -> other_columns + selection
    result

## PRIVATE
   A helper function encapsulating shared code for `sort_columns`
   implementations of various Table variants. See the documentation for the
   Table type for details.

   It takes a list of columns and returns the columns in the new order. It is
   the responsibility of each implementation to reconstruct a proper table from
   the resulting list of columns.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - sort_method: The sort methodology to use.
sort_columns : Vector -> Sort_Method -> Vector
sort_columns internal_columns sort_method =
    mapper = case sort_method.case_sensitive of
        True -> _.name
        Matching.Case_Insensitive ->
            col -> col.name.to_lower_case
    comparator = case sort_method.natural_order of
        True -> Natural_Order.compare
        False -> _.compare_to _
    internal_columns.sort on=mapper by=comparator order=sort_method.order

## PRIVATE
   A helper function which selects columns from the table based on the provided
   selection criteria.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - selector: Column selection criteria.
   - reorder: Specifies whether to reorder the matched columns according to the
     order of the selection criteria.
     If `False`, the matched entries are returned in the same order as in the
     input.
     If `True`, the matched entries are returned in the order of the criteria
     matching them. If a single object has been matched by multiple criteria, it
     is placed in the group belonging to the first matching criterion on the
     list. If a single criterion's group has more than one element, their
     relative order is the same as in the input.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
   - warnings: A Warning_System instance specifying how to handle warnings. This
     is a temporary workaround to allow for testing the warning mechanism. Once
     the proper warning system is implemented, this argument will become
     obsolete and will be removed. No user code should use this argument, as it
     will be removed in the future.
select_columns_helper : Vector -> Column_Selector -> Boolean -> Problem_Behavior -> Warnings.Warning_System -> Vector
select_columns_helper internal_columns selector reorder on_problems warnings = case selector of
    By_Name names matching_strategy ->
        split_result = here.split_to_distinct_and_duplicates names
        distinct_names = split_result.first
        duplicate_names = split_result.second
        problems = if duplicate_names.is_empty then [] else
            [Duplicate_Column_Selectors duplicate_names]
        on_problems.attach_problems_before problems warnings <|
            Warnings.map_warnings_and_errors here.promote_no_matches_to_missing_columns warnings warnings->
                Matching.match_criteria internal_columns distinct_names reorder=reorder name_mapper=(_.name) matching_strategy=matching_strategy on_problems=on_problems warnings=warnings
    By_Index indices ->
        partitioned_indices = indices.partition (here.is_index_valid internal_columns)
        inbound_indices = partitioned_indices.first
        oob_indices = partitioned_indices.second

        split_result = here.split_to_distinct_and_duplicates inbound_indices
        duplicate_indices = split_result.second
        distinct_indices = split_result.first

        resolved_indices = distinct_indices.map ix-> Pair ix (here.resolve_index internal_columns ix)
        alias_split_result = here.split_to_distinct_and_duplicates resolved_indices .second
        aliasing_indices = alias_split_result.second.map .first
        good_indices = alias_split_result.first.map .second

        oob_problems = if oob_indices.is_empty then [] else
            [Column_Indexes_Out_Of_Range oob_indices]
        duplicate_problems = if duplicate_indices.is_empty then [] else
            [Duplicate_Column_Selectors duplicate_indices]
        aliasing_problems = if aliasing_indices.is_empty then [] else
            [Input_Indices_Already_Matched aliasing_indices]
        problems = oob_problems + duplicate_problems + aliasing_problems

        on_problems.attach_problems_before problems warnings <| case reorder of
            True ->
                here.select_indices_reordering internal_columns good_indices
            False ->
                here.select_indices_preserving_order internal_columns good_indices
    By_Column columns ->
        column_names = columns.map .name
        new_selector = By_Name column_names (Matching.Exact case_sensitivity=True)
        here.select_columns internal_columns new_selector reorder=reorder on_problems=on_problems warnings=warnings

## PRIVATE
   Converts the generic `No_Matches_Found` error to a more specific
   `Missing_Input_Columns`. Any other errors are returned as-is.
promote_no_matches_to_missing_columns error = case error of
    Matching.No_Matches_Found criteria -> Missing_Input_Columns criteria
    _ ->
        error

## PRIVATE
   Selects element from the vector based on the given indices.

   The elements are returned in the same order as their provided indices.
select_indices_reordering vector indices =
    indices.map vector.at

## PRIVATE
   Selects element from the vector based on the given indices.

   The elements are returned in the same order as they appeared in the original
   vector.
select_indices_preserving_order vector indices =
    indices_to_keep = Map.from_vector (indices.map i-> [i, True])
    vector.filter_with_index ix-> _->
        indices_to_keep.get_or_else ix False

## PRIVATE
   Returns the actual position in the array that the index points to.

   It resolves negative indices to regular indices.

   If the negative index is sufficiently large, a negative result can still be
   returned. This function does not ensure that the resulting indices are within
   bounds.
resolve_index vector ix =
    if ix < 0 then vector.length+ix else ix

## PRIVATE
   Checks if the given index is in the valid range for the provided vector.
is_index_valid vector ix =
    actual_ix = here.resolve_index vector ix
    actual_ix>=0 && actual_ix<vector.length

type Repeated_Acc distinct_builder duplicate_builder existing

## PRIVATE
   Splits a vector into elements which are distinct and the duplicates.
split_to_distinct_and_duplicates : (Any -> Any) -> Vector -> Pair Vector Vector
split_to_distinct_and_duplicates vector (on = x->x) =
    acc = vector.fold (Repeated_Acc Vector.new_builder Vector.new_builder Map.empty) acc-> item->
        key = on item
        already_present = acc.existing.get_or_else key False
        case already_present of
            True ->
                Repeated_Acc acc.distinct_builder (acc.duplicate_builder.append item) acc.existing
            False ->
                Repeated_Acc (acc.distinct_builder.append item) acc.duplicate_builder (acc.existing.insert key True)
    Pair acc.distinct_builder.to_vector acc.duplicate_builder.to_vector
