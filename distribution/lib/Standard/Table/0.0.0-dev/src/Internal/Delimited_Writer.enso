from Standard.Base import all
import Standard.Base.Errors.File_Error.File_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.System.File.Output_Stream

import project.Data.Table.Table
import project.Data.Data_Formatter.Data_Formatter
import project.Data.Match_Columns.Match_Columns
import project.Delimited.Delimited_Format.Delimited_Format
import project.Delimited.Quote_Style.Quote_Style
import project.Internal.Delimited_Reader
import project.Internal.Delimited_Reader.Detected_Headers
import project.Internal.Java_Problems

from project.Errors import Column_Count_Mismatch, Column_Name_Mismatch

polyglot java import org.enso.table.write.DelimitedWriter
polyglot java import org.enso.table.write.WriteQuoteBehavior
polyglot java import org.enso.table.formatting.TextFormatter
polyglot java import org.enso.table.util.ColumnMapper
polyglot java import java.io.PrintWriter
polyglot java import java.io.StringWriter
polyglot java import java.io.IOException
polyglot java import java.io.Writer

## PRIVATE
   Writes a delimited file according to the provided format.

   Arguments:
   - table: The table to serialize.
   - format: The specification of the delimited file format.
   - file: The file to write to.
   - on_existing_file: Specifies how to proceed if the file already exists.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
write_file : Table -> Delimited_Format -> File -> Existing_File_Behavior -> Match_Columns -> Problem_Behavior -> Any
write_file table format file on_existing_file match_columns on_problems =
    case on_existing_file of
        Existing_File_Behavior.Append ->
            append_to_file table format file match_columns on_problems
        _ ->
            on_existing_file.write file stream->
                write_to_stream table format stream on_problems related_file=file

## PRIVATE
   Handles appending to an existing file, ensuring that the columns are matched
   against the ones already in the file.

   If the file does not exist or is empty, it acts like a regular overwrite.
append_to_file : Table -> Delimited_Format -> File -> Match_Columns -> Problem_Behavior -> Any
append_to_file table format file match_columns on_problems =
    Column_Name_Mismatch.handle_java_exception <| Column_Count_Mismatch.handle_java_exception <| Panic.recover Illegal_Argument <|
        inferring_format = format.with_line_endings Infer
        metadata = Delimited_Reader.detect_metadata file inferring_format
        preexisting_headers = metadata.headers
        effective_line_separator = case format.line_endings of
            Infer -> metadata.line_separator.if_nothing default_line_separator_for_writing.to_text
            other_ending_style ->
                selected_separator = other_ending_style.to_text
                existing_separator = metadata.line_separator
                if existing_separator.is_nothing.not && (selected_separator != existing_separator) then
                    Panic.throw <| Illegal_Argument.Error <|
                        # Ensure that these are properly escaped once `to_text` meaning is changed.
                        "The explicitly provided line endings (" + selected_separator.pretty + ") do not match the line endings in the file (" + existing_separator.pretty + ")."
                other_ending_style.to_text

        reordered_java_table = case preexisting_headers of
            Nothing -> table.java_table
            Detected_Headers.Existing column_names -> case match_columns of
                Match_Columns.By_Name ->
                    ColumnMapper.mapColumnsByName table.java_table column_names.to_array
                Match_Columns.By_Position ->
                    column_count = column_names.length
                    ColumnMapper.mapColumnsByPosition table.java_table column_count
            Detected_Headers.None column_count -> case match_columns of
                Match_Columns.By_Name ->
                    Error.throw (Illegal_Argument.Error "Cannot append by name when headers are not present in the existing data.")
                Match_Columns.By_Position ->
                    ColumnMapper.mapColumnsByPosition table.java_table column_count
        reordered_table = Table.Value reordered_java_table
        writing_new_file = preexisting_headers == Nothing
        amended_format = case writing_new_file && (should_write_headers format.headers) of
            True -> format.with_headers
            False -> format.without_headers
        needs_leading_newline =
            metadata.has_any_content && metadata.ends_with_newline.not
        Existing_File_Behavior.Append.write file stream->
            write_to_stream reordered_table amended_format stream on_problems related_file=file separator_override=effective_line_separator needs_leading_newline=needs_leading_newline

## PRIVATE
   Returns a Text value representing the table in the delimited format.
write_text : Table -> Delimited_Format -> Text
write_text table format =
    java_writer = StringWriter.new
    write_to_writer table format java_writer . if_not_error <|
        java_writer.toString

## PRIVATE
   Writes to an output stream according to the provided format.

   Arguments:
   - table: The table to serialize.
   - format: The specification of the delimited file format.
   - stream: An `Output_Stream` used as the data destination.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
   - related_file: The file related to the provided `java_stream`, if available,
     or `Nothing`. It is used for more detailed error reporting.
   - separator_override: An optional override for the line separator to use
     instead of the one from `format`.
write_to_stream : Table -> Delimited_Format -> Output_Stream -> Problem_Behavior -> File | Nothing -> Text | Nothing -> Boolean -> Any
write_to_stream table format stream on_problems related_file=Nothing separator_override=Nothing needs_leading_newline=False =
    handle_io_exception ~action = Panic.catch IOException action caught_panic->
        File_Error.wrap_io_exception related_file caught_panic.payload

    handle_io_exception <|
        stream.with_stream_encoder format.encoding on_problems reporting_stream_encoder->
            write_to_writer table format reporting_stream_encoder separator_override=separator_override needs_leading_newline=needs_leading_newline

## PRIVATE
   Writes data to the provided `Writer` according to the provided format.

   The `encoding` parameter is ignored, instead the provided writer should
   handle any necessary encoding.

   Arguments:
   - table: The table to serialize.
   - format: The specification of the delimited file format.
   - java_writer: A Java `Writer` to which characters will be written.
   - separator_override: An optional override for the line separator to use
     instead of the one from `format`.
write_to_writer : Table -> Delimited_Format -> Writer -> Text | Nothing -> Boolean -> Nothing
write_to_writer table format java_writer separator_override=Nothing needs_leading_newline=False =
    column_formatters = Panic.recover Illegal_Argument <| case format.value_formatter of
        Nothing -> table.columns.map column->
            if column.value_type.is_text then TextFormatter.new else
                Panic.throw (Illegal_Argument.Error "If the expected file format does not specify a valid `Data_Formatter`, only Text columns are allowed.")
        value_formatter -> table.columns.map column->
            value_type = column.value_type
            value_formatter.make_formatter_for_column_type value_type
    quote_behavior = case format.quote_style of
        Quote_Style.No_Quotes -> WriteQuoteBehavior.NEVER
        Quote_Style.With_Quotes always _ _ ->
            if always then WriteQuoteBehavior.ALWAYS else WriteQuoteBehavior.NECESSARY
    quote_characters = case format.quote_style of
        Quote_Style.No_Quotes -> Pair.new Nothing Nothing
        Quote_Style.With_Quotes _ quote quote_escape -> Pair.new quote quote_escape
    write_headers = should_write_headers format.headers
    newline = separator_override.if_nothing <|
        case format.line_endings of
            Infer -> default_line_separator_for_writing.to_text
            endings -> endings.to_text
    if needs_leading_newline then
        java_writer.write newline
    writer = DelimitedWriter.new java_writer column_formatters.to_array format.delimiter newline quote_characters.first quote_characters.second format.comment_character quote_behavior write_headers
    writer.write table.java_table
    warnings = Java_Problems.parse_aggregated_problems writer.getReportedWarnings
    Problem_Behavior.Report_Warning.attach_problems_after Nothing warnings

## PRIVATE
should_write_headers headers = case headers of
    True -> True
    Infer -> True
    False -> False

## PRIVATE
   The default line separator used for newly written delimited files, if no
   specific separator has been set.
default_line_separator_for_writing = Line_Ending_Style.Unix
