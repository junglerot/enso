from Standard.Base import all
import Standard.Base.Error.File_Error.File_Error
import Standard.Base.Error.Illegal_Argument.Illegal_Argument
import Standard.Base.System.File.Input_Stream

import project.Data.Table.Table
import project.Data.Data_Formatter.Data_Formatter
import project.Delimited.Delimited_Format.Delimited_Format
import project.Delimited.Quote_Style.Quote_Style

from project.Errors import Duplicate_Output_Column_Names, Invalid_Output_Column_Names, Invalid_Row, Mismatched_Quote, Parser_Error, Additional_Invalid_Rows

polyglot java import org.enso.base.encoding.NewlineDetector
polyglot java import org.enso.table.read.DelimitedReader
polyglot java import org.enso.table.read.ParsingFailedException
polyglot java import org.enso.table.parsing.problems.InvalidRow
polyglot java import org.enso.table.parsing.problems.MismatchedQuote
polyglot java import org.enso.table.parsing.problems.AdditionalInvalidRows
polyglot java import org.enso.table.util.problems.DuplicateNames
polyglot java import org.enso.table.util.problems.InvalidNames
polyglot java import java.io.IOException
polyglot java import com.univocity.parsers.common.TextParsingException
polyglot java import java.io.InputStream
polyglot java import java.io.Reader
polyglot java import java.io.StringReader

polyglot java import org.enso.table.parsing.IdentityParser
polyglot java import org.enso.table.parsing.TypeInferringParser
polyglot java import org.enso.table.read.QuoteStrippingParser

## Reads a delimited file according to the provided format.

   Arguments:
   - format: The specification of the delimited file format.
   - file: The file to read.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
read_file : Delimited_Format -> File -> Problem_Behavior -> Any
read_file format file on_problems =
    ## We use the default `max_columns` setting. If we want to be able to
       read files with unlimited column limits (risking OutOfMemory
       exceptions), we can catch the exception indicating the limit has been
       reached and restart parsing with an increased limit.
    file.with_input_stream [File_Access.Read] stream->
        read_stream format stream on_problems related_file=file

read_text : Text -> Delimited_Format -> Problem_Behavior -> Table
read_text text format on_problems =
    java_reader = StringReader.new text
    read_from_reader format java_reader on_problems

## PRIVATE
   Reads an input stream according to the provided format.

   Arguments:
   - format: The specification of the delimited file format.
   - stream: An `Input_Stream` to be used as the data source.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
   - max_columns: Specifies the limit of columns to read. The limit is set to
     avoid `OutOfMemory` errors on malformed files. It must be a positive
     integer.
   - related_file: The file related to the provided `java_stream`, if available,
     or `Nothing`. It is used for more detailed error reporting.
read_stream : Delimited_Format -> Input_Stream -> Problem_Behavior -> Integer -> File | Nothing -> Any
read_stream format stream on_problems max_columns=default_max_columns related_file=Nothing =
    handle_io_exception related_file <|
        stream.with_stream_decoder format.encoding on_problems reporting_stream_decoder->
            read_from_reader format reporting_stream_decoder on_problems max_columns

## PRIVATE
   Reads data from the provided `Reader` according to the provided format.

   The `encoding` parameter is ignored, instead the provided reader should
   handle any necessary decoding.

   Arguments:
   - format: The specification of the delimited file format.
   - java_reader: A Java `Reader` used as the source of decoded characters.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
   - max_columns: Specifies the limit of columns to read. The limit is set to
     avoid `OutOfMemory` errors on malformed files. It must be a positive
     integer.
read_from_reader : Delimited_Format -> Reader -> Problem_Behavior -> Integer -> Any
read_from_reader format java_reader on_problems max_columns=4096 =
    Illegal_Argument.handle_java_exception <| handle_parsing_failure <| handle_parsing_exception <|
        reader = prepare_reader java_reader format max_columns on_problems
        result_with_problems = reader.read
        parsing_problems = Vector.from_polyglot_array (result_with_problems.problems) . map translate_reader_problem
        on_problems.attach_problems_after (Table.Value result_with_problems.value) parsing_problems

## PRIVATE
prepare_reader java_reader format max_columns on_problems newline_override=Nothing =
    java_headers = case format.headers of
        True -> DelimitedReader.HeaderBehavior.USE_FIRST_ROW_AS_HEADERS
        Infer -> DelimitedReader.HeaderBehavior.INFER
        False -> DelimitedReader.HeaderBehavior.GENERATE_HEADERS
    row_limit = case format.row_limit of
        Nothing -> -1
        _ : Integer -> format.row_limit
        _ ->
            Error.throw (Illegal_Argument.Error "`row_limit` should be Integer or Nothing.")
    warnings_as_errors = on_problems == Problem_Behavior.Report_Error
    quote_characters = case format.quote_style of
        Quote_Style.No_Quotes -> Pair.new Nothing Nothing
        Quote_Style.With_Quotes _ quote quote_escape -> Pair.new quote quote_escape
    base_parser = case format.quote_style of
        Quote_Style.No_Quotes -> IdentityParser.new
        Quote_Style.With_Quotes _ quote _ ->
            QuoteStrippingParser.new quote
    value_parser = if format.value_formatter.is_nothing then base_parser else
        wrapped = format.value_formatter.wrap_base_parser base_parser
        TypeInferringParser.new format.value_formatter.get_specific_type_parsers.to_array wrapped
    cell_type_guesser = if format.headers != Infer then Nothing else
        formatter = format.value_formatter.if_nothing Data_Formatter.Value
        TypeInferringParser.new formatter.get_specific_type_parsers.to_array IdentityParser.new
    newline = newline_override.if_nothing <| case format.line_endings of
        Infer -> Nothing
        endings -> endings.to_text
    DelimitedReader.new java_reader format.delimiter quote_characters.first quote_characters.second java_headers format.skip_rows row_limit max_columns value_parser cell_type_guesser format.keep_invalid_rows newline format.comment_character warnings_as_errors

translate_reader_problem problem =
    invalid_row = [InvalidRow, (java_problem-> Invalid_Row.Error java_problem.source_row java_problem.table_index (Vector.from_polyglot_array java_problem.row))]
    additional_invalid_rows = [AdditionalInvalidRows, (java_problem-> Additional_Invalid_Rows.Error java_problem.count)]
    mismatched_quote = [MismatchedQuote, (_-> Mismatched_Quote)]
    duplicate_names = [DuplicateNames, (java_problem-> Duplicate_Output_Column_Names.Error (Vector.from_polyglot_array java_problem.duplicatedNames))]
    invalid_names = [InvalidNames, (java_problem-> Invalid_Output_Column_Names.Error (Vector.from_polyglot_array java_problem.invalidNames))]

    translations = [invalid_row, additional_invalid_rows, mismatched_quote, duplicate_names, invalid_names]
    found = translations.find t-> Java.is_instance problem t.first
    if found.is_error then problem else
        found.second problem

## PRIVATE
   An internal type representing columns deduced from an existing file.
type Detected_Headers
    ## Represents the headers found in the file.
    Existing (column_names : Vector Text)

    ## Indicates that the file exists but no headers have been found, so only positional column matching is possible.
    None (column_count : Integer)

type Detected_File_Metadata
    ## PRIVATE
       An internal type representing metadata describing the format of a specific
       Delimited file.

       Arguments:
       - headers: headers present in the file.
       - line_separator: line separator detected from file contents, if any.
       - ends_with_newline: specifies if the last line ends with a line
         separator that is consistent with the detected one.
       - has_any_content: specifies if the file contains any content.
    Value (headers : Detected_Headers) (line_separator : Text|Nothing) (ends_with_newline : Boolean) (has_any_content : Boolean)

## PRIVATE
   Reads the beginning of the file to detect the existing headers and column
   count.
detect_metadata : File -> Delimited_Format -> Detected_File_Metadata
detect_metadata file format =
    on_problems = Problem_Behavior.Ignore
    result = handle_io_exception file <| Illegal_Argument.handle_java_exception <| handle_parsing_failure <| handle_parsing_exception <|
        trailing_line_separator = newline_at_eof file format.encoding
        has_trailing_line_separator = trailing_line_separator.is_nothing.not
        file.with_input_stream [File_Access.Read] stream->
            stream.with_stream_decoder format.encoding on_problems java_reader->
                ## We don't need to close this one, as closing the parent stream
                   will suffice.
                newline_detecting_reader = NewlineDetector.new java_reader
                ## We use the default `max_columns` setting. If we want to be able to
                   read files with unlimited column limits (risking OutOfMemory
                   exceptions), we can catch the exception indicating the limit has been
                   reached and restart parsing with an increased limit.
                reader = prepare_reader newline_detecting_reader format max_columns=default_max_columns on_problems newline_override=trailing_line_separator
                defined_columns = reader.getDefinedColumnNames
                headers = case defined_columns of
                    Nothing ->
                        column_count = reader.getColumnCount
                        if column_count == 0 then Nothing else
                            Detected_Headers.None column_count
                    _ -> Detected_Headers.Existing (Vector.from_polyglot_array defined_columns)
                line_separator_from_parser = reader.getEffectiveLineSeparator
                has_seen_newline = newline_detecting_reader.newlineEncountered
                ## If the parser has seen a newline, we can trust that it
                   detected the newline correctly. However if it has not, we
                   cannot trust it as it tends to just fall back to the system
                   default which is wrong. Thus we return the trailing line
                   separator (which may be `Nothing`).
                effective_line_separator = case has_seen_newline of
                    True -> line_separator_from_parser
                    False -> trailing_line_separator
                has_any_content = reader.getVisitedCharactersCount > 0
                Detected_File_Metadata.Value headers effective_line_separator has_trailing_line_separator has_any_content
    result.catch File_Error.Not_Found (_->(Detected_File_Metadata.Value Nothing Nothing False False))

## PRIVATE
   Checks if the file has a newline at the end.

   Returns the newline sequence if found, `Nothing` otherwise.
newline_at_eof : File -> Encoding -> Text|Nothing
newline_at_eof file encoding =
    newlines = ['\r\n', '\n', '\r']
    newline_bytes = newlines.map (x-> x.bytes encoding Report_Error)
    most_bytes = newline_bytes.map .length . compute Statistic.Maximum
    file_last_bytes = file.read_last_bytes most_bytes
    result = newlines.zip newline_bytes . find pair->
        bytes = pair.second
        bytes == (file_last_bytes.take (Last bytes.length))
    result.first . catch Nothing

## PRIVATE
handle_parsing_failure =
    translate_parsing_failure caught_panic =
        Error.throw (translate_reader_problem caught_panic.payload.cause.problem)
    Panic.catch ParsingFailedException handler=translate_parsing_failure

## PRIVATE
handle_parsing_exception =
    translate_parsing_exception caught_panic =
        cause = caught_panic.payload.cause.getCause
        if Java.is_instance cause IOException then Panic.throw cause else
            Error.throw (Parser_Error.Error caught_panic.payload)
    Panic.catch TextParsingException handler=translate_parsing_exception

## PRIVATE
handle_io_exception related_file ~action = Panic.catch_java IOException action java_exception->
    Error.throw (File_Error.wrap_io_exception related_file java_exception)

## PRIVATE
default_max_columns = 4096
