from Standard.Base import all
import Standard.Base.Network.HTTP.Response.Response

import project.Data.Table.Table
import project.Data.Data_Formatter.Data_Formatter
import project.Data.Match_Columns.Match_Columns
import project.Delimited.Quote_Style.Quote_Style
import project.Internal.Delimited_Reader
import project.Internal.Delimited_Writer

## Read delimited files such as CSVs into a Table.
type Delimited_Format
    ## Read delimited files such as CSVs into a Table.

       When reading this format, the following problems may occur:
       - If a row does not match the first row's column count, the function
         raises an `Invalid_Row`.
       - If an empty file is passed, an `Empty_File_Error` is thrown.
       - If a quote is opened and never closed, a `File_Error.Corrupted_Format`
         error is raised.

       Arguments:
       - delimiter: The delimiter character to split the file into columns. An
         `Illegal_Argument` error is returned if this is an empty string.
       - encoding: The encoding to use when reading the file.
       - skip_rows: The number of rows to skip from the top of the file.
       - row_limit: The maximum number of rows to read from the file. This count
         does not include the header row (if applicable).
       - quote_style: Specifies the style of quotes used for reading and
         writing.
       - headers: If set to `True`, the first row is used as column names. If
         set to `False`, the column names are generated by adding increasing
         numeric suffixes to the base name `Column` (i.e. `Column_1`,
         `Column_2` etc.). If set to `Infer`, the process tries to infer if
         headers are present on the first row. If the column names are not
         unique, numeric suffixes will be appended to disambiguate them.
       - value_formatter: Formatter to parse text values into numbers, dates,
         times, etc. If `Nothing` values are left as Text.
       - keep_invalid_rows: Specifies whether rows that contain less or more
         columns than expected should be kept (setting the missing columns to
         `Nothing` or dropping the excess columns) or dropped.
       - line_endings: Sets the line ending style to use. Defaults to `Infer` -
         when reading a file or appending to an existing file, the line endings
         are detected from file contents; when writing a new file in `Infer`
         mode the `Unix` line endings are used.
       - comment_character: Sets the character which indicates the start of a
         comment within a delimited file. Any line that begins with the comment
         character is skipped. The comment character is treated as any other
         character if it anywhere else than at the beginning of the line. This
         option is only applicable for read mode and does not affect writing. It
         defaults to `Nothing` which means that comments are disabled.
    Delimited (delimiter:Text=',') (encoding:Encoding=Encoding.utf_8) (skip_rows:Integer=0) (row_limit:Integer|Nothing=Nothing) (quote_style:Quote_Style=Quote_Style.With_Quotes) (headers:Boolean|Infer=Infer) (value_formatter:Data_Formatter|Nothing=Data_Formatter.Value) (keep_invalid_rows:Boolean=True) (line_endings:Line_Ending_Style=Infer) (comment_character:Text|Nothing=Nothing)

    ## PRIVATE
       ADVANCED
       If the File_Format supports reading from the file, return a configured instance.
    for_file_read : File -> Delimited_Format | Nothing
    for_file_read file =
        case file.extension of
            ".csv" -> Delimited_Format.Delimited ','
            ".tab" -> Delimited_Format.Delimited '\t'
            ".tsv" -> Delimited_Format.Delimited '\t'
            _ -> Nothing

    ## PRIVATE
       If this File_Format should be used for writing to that file, return a configured instance.
    for_file_write : File -> Delimited_Format | Nothing
    for_file_write file = Delimited_Format.for_file_read file

    ## PRIVATE
       ADVANCED
       If the File_Format supports reading from the web response, return a configured instance.
    for_web : Text -> URI -> Delimited_Format | Nothing
    for_web content_type _ =
        parts = content_type.split ";" . map .trim

        charset_part = parts.find if_missing=Nothing (x-> x.starts_with "charset=")
        encoding = if charset_part.is_nothing then Encoding.utf_8 else
            parsed = Encoding.from_name (charset_part.drop 8)
            if parsed.is_error then Encoding.utf_8 else parsed

        case parts.first of
            "text/csv" -> Delimited_Format.Delimited ',' encoding
            "text/tab-separated-values" -> Delimited_Format.Delimited '\t' encoding
            _ -> Nothing

    ## PRIVATE
       ADVANCED
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any
    read self file on_problems =
        Delimited_Reader.read_file self file on_problems

    ## PRIVATE
       Implements the `Data.parse` for this `File_Format`
    read_web : Response -> Any
    read_web self response =
        text = Text.from_bytes response.body.bytes self.encoding
        Delimited_Reader.read_text text self Report_Warning

    ## PRIVATE
       ADVANCED
       Implements the `Table.write` for this `File_Format`.
    write_table : File -> Table -> Existing_File_Behavior -> Match_Columns -> Problem_Behavior -> File
    write_table self file table on_existing_file match_columns on_problems =
        r = Delimited_Writer.write_file table self file on_existing_file match_columns on_problems
        r.if_not_error file

    ## PRIVATE
       Clone the instance with some properties overridden.
       Note: This function is internal until such time as Atom cloning with modification is built into Enso.
    clone : Quote_Style -> (Boolean|Infer) -> (Data_Formatter|Nothing) -> Boolean -> (Text|Nothing) -> (Text|Nothing) -> Delimited_Format
    clone self (quote_style=self.quote_style) (headers=self.headers) (value_formatter=self.value_formatter) (keep_invalid_rows=self.keep_invalid_rows) (line_endings=self.line_endings) (comment_character=self.comment_character) =
        Delimited_Format.Delimited self.delimiter self.encoding self.skip_rows self.row_limit quote_style headers value_formatter keep_invalid_rows line_endings comment_character

    ## Create a clone of this with specified quoting settings.
    with_quotes : Text -> Text -> Boolean -> Delimited_Format
    with_quotes self quote='"' quote_escape=quote always_quote=False =
        self.clone quote_style=(Quote_Style.With_Quotes always_quote=always_quote quote=quote quote_escape=quote_escape)

    ## Create a clone of this with specified quoting settings.
    without_quotes : Delimited_Format
    without_quotes self =
        self.clone quote_style=Quote_Style.No_Quotes

    ## Create a clone of this with first row treated as header.
    with_headers : Delimited_Format
    with_headers self = self.clone headers=True

    ## Create a clone of this where the first row is treated as data, not a
       header.
    without_headers : Delimited_Format
    without_headers self = self.clone headers=False

    ## Create a clone of this with value parsing.

       A custom `Data_Formatter` can be provided to customize parser options.
    with_parsing : Data_Formatter -> Delimited_Format
    with_parsing self (value_formatter=Data_Formatter.Value) =
        self.clone value_formatter=value_formatter

    ## Create a clone of this without value parsing.
    without_parsing : Delimited_Format
    without_parsing self =
        self.clone value_formatter=Nothing

    ## Creates a clone of this with a changed line ending style.
    with_line_endings : Line_Ending_Style -> Delimited_Format
    with_line_endings self line_endings=Infer =
        self.clone line_endings=line_endings

    ## Creates a clone of this with comment parsing enabled.
    with_comments : Text -> Delimited_Format
    with_comments self comment_character='#' =
        self.clone comment_character=comment_character

    ## Creates a clone of this with comment parsing disabled.
    without_comments : Delimited_Format
    without_comments self =
        self.clone comment_character=Nothing
