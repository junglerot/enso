from Standard.Base import Any, Problem_Behavior, Nothing, Error, Panic, Meta, File, File_Format, Plain_Text_Format, Bytes
from Standard.Base.Error.Common import Unsupported_File_Type, Unsupported_File_Type_Data, No_Such_Method_Error_Data, Illegal_Argument_Error_Data

import Standard.Table.Delimited.Delimited_Format.Delimited_Format
import Standard.Table.Excel.Excel_Format.Excel_Format

## PRIVATE
   Set of File_Format types for read files.
format_types = [Plain_Text_Format, Bytes, Delimited_Format, Excel_Format]

## PRIVATE
get_format : File -> Any | Nothing
get_format file =
    reader idx =
        if idx >= format_types.length then Nothing else
            format = format_types.at idx . for_file file
            if format.is_nothing.not then format else
                @Tail_Call reader (idx + 1)
    reader 0

type Auto_Detect
    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any ! Unsupported_File_Type
    read self file on_problems =
        reader = get_format file
        if reader == Nothing then Error.throw (Unsupported_File_Type_Data ("No File_Format supports '" + file.extension + "'")) else
            reader.read file on_problems

    ## PRIVATE
       Implements the `Table.write` for this `File_Format`.
    write_table : File -> Table -> Existing_File_Behavior -> Match_Columns -> Problem_Behavior -> Nothing
    write_table self file table on_existing_file match_columns on_problems =
        format = get_format file
        if format == Nothing then Error.throw (Unsupported_File_Type_Data ("No File_Format supports '" + file.extension + "'")) else
            Panic.catch No_Such_Method_Error_Data (format.write_table file table on_existing_file match_columns on_problems) _->
               name = Meta.get_constructor_name (Meta.meta format).constructor
               Error.throw (Illegal_Argument_Error_Data ("Saving a Table as " + name + " is not supported."))
