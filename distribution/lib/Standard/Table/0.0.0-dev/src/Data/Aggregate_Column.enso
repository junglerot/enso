from Standard.Base import all

from Standard.Table.Data.Column as Column_Module import Column
from Standard.Table.Data.Column_Selector as Column_Selector_Module import Column_Selector, By_Name, By_Index, By_Column
import Standard.Table.Internal.Table_Helpers
import Standard.Base.Error.Problem_Behavior

## Defines an Aggregate Column
type Aggregate_Column
    ## Group By
    type Group_By (column:Column|Text|Integer) (new_name:Text|Nothing=Nothing)

    ## Creates a new column with the row count of each group

       Arguments:
       - name: name of new column.
    type Count (new_name:Text|Nothing=Nothing)

    ## Creates a new column with the count of unique items in the selected
       column(s) within each group.

       Arguments:
       - columns: either a single or set of columns (specified by name, index or Column object) to count across.
       - name: name of new column.
       - ignore_nothing: if all values are Nothing won't be included.
    type Count_Distinct (columns:Column|Text|Integer|Column_Selector) (new_name:Text|Nothing=Nothing) (ignore_nothing:Boolean=False)

    ## ALIAS Count_Not_Null

       Creates a new column with the count of not `Nothing` (null) values of the
       specified column within each group.

       Arguments:
       - columns: column (specified by name, index or Column object) to count.
       - name: name of new column.
    type Count_Not_Nothing (column:Column|Text|Integer) (new_name:Text|Nothing=Nothing)

    ## ALIAS Count_Null, Count_Missing

       Creates a new column with the count of `Nothing` (null) values of the
       specified column within each group.

       Arguments:
       - column: column (specified by name, index or Column object) to count.
       - name: name of new column.
    type Count_Nothing (column:Column|Text|Integer) (new_name:Text|Nothing=Nothing)

    ## Creates a new column with the count of not `Nothing` (null) and non-empty
       ("") values of the column within each group.

       Arguments:
       - column: column (specified by name, index or Column object) to count.
       - name: name of new column.
    type Count_Not_Empty (column:Column|Text|Integer) (new_name:Text|Nothing=Nothing)

    ## Creates a new column with the count of `Nothing` (null) or empty ("")
       text values of the column within each group.

       Arguments:
       - column: column (specified by name, index or Column object) to count.
       - name: name of new column.
    type Count_Empty (column:Column|Text|Integer) (new_name:Text|Nothing=Nothing)

    ## Creates a new column with the sum of values (ignoring missing values) of
       the specified column within each group.

       Arguments:
       - column: column (specified by name, index or Column object) to total.
       - name: name of new column.
    type Sum (column:Column|Text|Integer) (new_name:Text|Nothing=Nothing)

    ## Creates a new column with the mean of values (ignoring missing values) of
       the specified column within each group.

       Arguments:
       - column: column (specified by name, index or Column object) to average.
       - name: name of new column.
    type Average (column:Column|Text|Integer) (new_name:Text|Nothing=Nothing)

    ## Creates a new column with the median of values (ignoring missing values)
       of the specified column within each group.

       Arguments:
       - column: column (specified by name, index or Column object) to calculate median on.
       - name: name of new column.
    type Median (column:Column|Text|Integer) (new_name:Text|Nothing=Nothing)

    ## Creates a new column with the median of values (ignoring missing values)
       of the specified column within each group.

       Arguments:
       - percentile: Percentage to compute from 0-1 inclusive.
       - column: column (specified by name, index or Column object) to compute percentile.
       - name: name of new column.
    type Percentile (percentile:Decimal) (column:Column|Text|Integer) (new_name:Text|Nothing=Nothing)

    ## Creates a new column with the mode of values (ignoring missing values)
       of the specified column within each group.

       Arguments:
       - column: column (specified by name, index or Column object) to find the most common value.
       - name: name of new column.
    type Mode (column:Column|Text|Integer) (new_name:Text|Nothing=Nothing)

    ## Creates a new column with the standard deviation of values (ignoring
       missing values) of the column within each group.

       Arguments:
       - column: column (specified by name, index or Column object) to compute standard deviation.
       - name: name of new column.
       - population argument specifies if group is a sample or the population
    type Standard_Deviation (column:Column|Text|Integer) (new_name:Text|Nothing=Nothing) (population:Boolean=False)

    ## Creates a new column with the values concatenated together. `Nothing` values will become an empty string.

       Arguments:
       - column: column (specified by name, index or Column object) to concatenate values.
       - name: name of new column.
       - separator: added between each value.
       - prefix: added at the start of the result.
       - suffix: added at the end of the result.
       - quote_char: character used to quote the values if the value is `Empty`
         or contains the separtor.
    type Concatenate (column:Column|Text|Integer) (new_name:Text|Nothing=Nothing) (separator:Text="") (prefix:Text="") (suffix:Text="") (quote_char:Text="")

    ## Creates a new column with the first value in each group.

       Arguments:
       - column: column (specified by name, index or Column object) to find first group entry.
       - name: name of new column.
       - ignore_nothing: if `True`, then missing values are ignored and first
         not missing value returned.
       - order_by: required for database tables. Specifies how to order the
         results within the group.
    type First (column:Column|Text|Integer) (new_name:Text|Nothing=Nothing) (ignore_nothing:Boolean=True) (order_by:Column_Selector|Nothing=Nothing)

    ## Creates a new column with the last value in each group.

       Arguments:
       - column: column (specified by name, index or Column object) to find last group entry.
       - name: name of new column.
       - ignore_nothing: if `True`, then missing values are ignored and last
         not missing value returned.
       - order_by: required for database tables. Specifies how to order the
         results within the group.
    type Last (column:Column|Text|Integer) (new_name:Text|Nothing=Nothing) (ignore_nothing:Boolean=True) (order_by:Column_Selector|Nothing=Nothing)

    ## Creates a new column with the maximum value in each group.

       Arguments:
       - column: column (specified by name, index or Column object) to find maximum.
       - name: name of new column.
    type Maximum (column:Column|Text|Integer) (new_name:Text|Nothing=Nothing)

    ## Creates a new column with the maximum value in each group.

       Arguments:
       - column: column (specified by name, index or Column object) to find minimum.
       - name: name of new column.
    type Minimum (column:Column|Text|Integer) (new_name:Text|Nothing=Nothing)

    ## Creates a new column with the shortest text in each group.

       Arguments:
       - column: column (specified by name, index or Column object) to find shortest value.
       - name: name of new column.
    type Shortest (column:Column|Text|Integer) (new_name:Text|Nothing=Nothing)

    ## Creates a new column with the longest text in each group.

       Arguments:
       - column: column (specified by name, index or Column object) to find longest value.
       - name: name of new column.
    type Longest (column:Column|Text|Integer) (new_name:Text|Nothing=Nothing)

    ## Gets a column name to use for the aggregate column
    column_name : Table->Text
    column_name table =
        if this.new_name.is_nothing.not then this.new_name else
            get_name c = (this.resolve_column table c).name
            case this of
                Group_By c _ -> get_name c
                Count _ -> "Count"
                Count_Distinct columns _ _ ->
                    as_vector = case columns of
                        Vector.Vector _ -> columns
                        _ -> [columns]
                    "Count Distinct " + (as_vector.map get_name . join " ")
                Percentile p c _ -> ((p*100).floor.to_text + "%-ile ") + get_name c
                _ ->
                    prefix = Meta.get_simple_type_name this . replace "_" " "
                    prefix + " " + get_name this.column

    ## PRIVATE
       Given a column reference resolve to the underlying column
    resolve_column : Table->(Column|Text|Integer)->Column
    resolve_column table column =
        ## TODO this should be able to handle problems too!
        case column of
            Text -> table.at column
            Integer -> table.columns.at column
            ## A wildcard makes this work both with In-Memory and Database table columns.
            _ -> table.at (column.name)

    ## PRIVATE
       Returns a copy of this aggregate where all column descriptors (names,
       indices or column references potentially from a different table) are
       replaced with column references from the provided table.

       This preprocess step is required by some helper function, to avoid having
       to pass the table reference and resolve the column descriptors all the
       time.

       If some columns cannot be resolved, a dataflow error will be returned.
       Higher-level methods can then handle this error by turning it into a
       warning and ignoring the column.
    resolve_columns : Table -> Aggregate_Column
    resolve_columns table =
        resolve : (Integer|Text|Column) -> Column
        resolve c = this.resolve_column table c
        resolve_selector_to_vector : Column_Selector -> [Column]
        resolve_selector_to_vector selector =
            Table_Helpers.select_columns_helper table.columns selector reorder=False on_problems=Problem_Behavior.Report_Error
        resolve_selector_or_nothing selector = case selector of
            Nothing -> Nothing
            _ -> resolve_selector_to_vector selector
        case this of
            Group_By c new_name -> Group_By (resolve c) new_name
            Count new_name -> Count new_name
            Count_Distinct c new_name ignore_nothing ->
                new_c = case c of
                    ## TODO once we have sum type pattern matching this could be replaced with a single branch
                    By_Name _ _ -> resolve_selector_to_vector c
                    By_Index _ -> resolve_selector_to_vector c
                    By_Column _ -> resolve_selector_to_vector c
                    ## TODO this is a temporary fix, remove it
                    Vector.Vector _ -> c.map resolve
                    _ -> [resolve c]
                Count_Distinct new_c new_name ignore_nothing
            Count_Not_Nothing c new_name -> Count_Not_Nothing (resolve c) new_name
            Count_Nothing c new_name -> Count_Nothing (resolve c) new_name
            Count_Not_Empty c new_name -> Count_Not_Empty (resolve c) new_name
            Count_Empty c new_name ->  Count_Empty (resolve c) new_name
            Sum c new_name ->  Sum (resolve c) new_name
            Average c new_name -> Average (resolve c) new_name
            Median c new_name -> Median (resolve c) new_name
            Percentile p c new_name -> Percentile p (resolve c) new_name
            Mode c new_name -> Mode (resolve c) new_name
            Standard_Deviation c new_name population -> Standard_Deviation (resolve c) new_name population
            Concatenate c new_name separator prefix suffix quote_char -> Concatenate (resolve c) new_name separator prefix suffix quote_char
            First c new_name ignore_nothing order_by -> First (resolve c) new_name ignore_nothing (resolve_selector_or_nothing order_by)
            Last c new_name ignore_nothing order_by -> Last (resolve c) new_name ignore_nothing (resolve_selector_or_nothing order_by)
            Maximum c new_name -> Maximum (resolve c) new_name
            Minimum c new_name -> Minimum (resolve c) new_name
            Shortest c new_name -> Shortest (resolve c) new_name
            Longest c new_name -> Longest (resolve c) new_name


## Occurs when cannot aggregate a column
type Invalid_Aggregation_Method (column : Text) (message : Text)

Invalid_Aggregation_Method.to_display_text : Text
Invalid_Aggregation_Method.to_display_text =
    "The aggregate column "+this.column+" resulted in an error: "+this.message
