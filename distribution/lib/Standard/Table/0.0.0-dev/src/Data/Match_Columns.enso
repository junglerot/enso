from Standard.Base import all
import Standard.Base.Runtime.State

import project.Data.Report_Unmatched.Report_Unmatched
from project.Errors import Column_Count_Mismatch, No_Output_Columns, Unmatched_Columns

## Specifies a column matching strategy.
type Match_Columns
    ## Columns are matched by Name.
    By_Name

    ## Columns are matched by Position.

       Note: column names are not compared.
    By_Position

## PRIVATE
   A helper that encapsulates the common backend-agnostic logic of matching
   columns in `Table.union`.

   It matches columns according to the provided matching settings and returns a
   list of column sets to be merged.

   Each column set consists of a name of the resulting column and a list of
   indices for columns in corresponding tables that will be merged to form this
   result column. The first column index corresponds to the first table in the
   input and so on. If no column corresponding to a given column set was matched
   in a particular table, its entry will be contain `Nothing` instead.

   The column sets are returned in the order in which the corresponding result
   columns should appear in the resulting table.

   The method assumes at least one table is provided in its input.
match_columns tables matching_mode keep_unmatched_columns problem_builder = case matching_mode of
    Match_Columns.By_Name -> case keep_unmatched_columns of
        False ->
            column_counts = find_column_counts tables
            # This will only include columns that were present in all tables.
            common_column_names = tables.first.column_names.filter name->
                column_counts.at name == tables.length
            if common_column_names.is_empty then Error.throw (No_Output_Columns.Error "Unmatched columns are set to be dropped, but no common column names were found.") else
                common_column_names.map name->
                    column_indices = tables.map table->
                        table.column_names.index_of name
                    Column_Set.Value name column_indices
        _ ->
            output_column_names = distinct_columns_in_appearance_order tables
            if keep_unmatched_columns == Report_Unmatched then
                column_counts = find_column_counts tables
                all_tables_count = tables.length
                ## We iterate over output column names to get deterministic
                  order of unmatched columns.
                unmatched_column_names = output_column_names.filter name->
                    column_counts.get name 0 < all_tables_count
                if unmatched_column_names.not_empty then
                    problem_builder.report_other_warning (Unmatched_Columns.Error unmatched_column_names)
            output_column_names.map name->
                column_indices = tables.map table->
                    table.columns.index_of col-> col.name==name
                Column_Set.Value name column_indices
    Match_Columns.By_Position ->
        column_counts = tables.map table-> table.columns.length
        minmax = column_counts.compute_bulk [Statistic.Minimum, Statistic.Maximum]
        columns_to_take = if keep_unmatched_columns == False then minmax.first else minmax.second
        if (minmax.first != minmax.second) && (keep_unmatched_columns == Report_Unmatched) then
            problem_builder.report_other_warning (Column_Count_Mismatch.Error minmax.second minmax.first)
        name_source = if keep_unmatched_columns == False then tables.first else
            tables.find table-> table.columns.length == columns_to_take
        column_sets = Vector.new columns_to_take i->
            name = name_source.at i . name
            column_ids = tables.map table->
                column_count = table.columns.length
                if i >= column_count then Nothing else i
            Column_Set.Value name column_ids
        column_sets

type Column_Set
    ## PRIVATE
    Value (name : Text) (column_indices : Vector Integer)

    ## PRIVATE
    resolve_columns self all_tables = self.column_indices.zip all_tables i-> parent_table->
        case i of
            Nothing -> Nothing
            _ : Integer -> parent_table.at i

## PRIVATE
   Returns a map indicating in how many tables did a column with a given name appear.
find_column_counts tables =
    tables.fold Map.empty current->table->
        table.columns.fold current counts-> column->
            name=column.name
            new_count = counts.get name 0 + 1
            counts.insert name new_count

## PRIVATE
   Returns a list of distinct column names, in the order of first appearance,
   starting from the first table.
distinct_columns_in_appearance_order tables =
    names_builder = Vector.new_builder
    tables.fold Map.empty current-> table->
        table.columns.fold current seen_names-> column->
            name = column.name
            if seen_names.contains_key name then seen_names else
                names_builder.append name
                seen_names.insert name True
    names_builder.to_vector
