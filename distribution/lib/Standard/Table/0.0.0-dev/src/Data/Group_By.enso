from Standard.Base import all
import Standard.Base.Data.Ordering.Vector_Lexicographic_Order

## Create a key structure for grouping operations
key : Vector -> Group_By_Key
key values =
    mapper c = Comparable_Value c
    Group_By_Key <| values.map mapper

## PRIVATE
   Represents a comparable vector of element which is used as key for grouping.
type Group_By_Key
    type Group_By_Key values

    ## See if two keys are equal
    == : Group_By_Key->Boolean
    == that = this.values == that.values

    ## Compares two keys
    compare_to : Group_By_Key->Ordering
    compare_to that =
        Vector_Lexicographic_Order.compare this.values that.values

## PRIVATE
   Temporary workaround allowing Nothing to be in a Group_By
type Comparable_Value
    type Comparable_Value value

    == : Comparable_Nothing->Boolean
    == that = (this.compare_to that) == Ordering.Equal

    compare_to : Any->Ordering
    compare_to that =
        value = case that of
            Comparable_Value v -> v
            _ -> that

        case this.value of
            Nothing -> if value.is_nothing then Ordering.Equal else Ordering.Less
            _ -> if value.is_nothing then Ordering.Greater else this.value.compare_to value

    is_nothing : Boolean
    is_nothing = this.value.is_nothing
