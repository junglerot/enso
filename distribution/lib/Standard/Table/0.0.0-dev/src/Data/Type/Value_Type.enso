from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

import project.Data.Type.Value_Type_Helpers
from project.Errors import Invalid_Value_Type

## Type to represent the different sizes of integer or float storage.
type Bits
    ## 16-bit (2 byte) value
    Bits_16

    ## 32-bit (4 byte) value
    Bits_32

    ## 64-bit (8 byte) value
    Bits_64

    ## PRIVATE
    to_bits : Integer
    to_bits self = case self of
        Bits.Bits_16 -> 16
        Bits.Bits_32 -> 32
        Bits.Bits_64 -> 64

    ## PRIVATE
    from_bits : Integer -> Bits
    from_bits bits = case bits of
        16 -> Bits.Bits_16
        32 -> Bits.Bits_32
        64 -> Bits.Bits_64
        _ : Integer -> Error.throw (Illegal_Argument.Error "Invalid number of bits for a float or integer type.")

    ## PRIVATE
       Provides the text representation of the bit-size.
    to_text : Text
    to_text self = self.to_bits.to_text + " bits"

## PRIVATE
type Bits_Comparator
    ## PRIVATE
    compare : Bits -> Bits -> Ordering
    compare x y = Comparable.from x.to_bits . compare x.to_bits y.to_bits

    ## PRIVATE
    hash : Bits -> Integer
    hash x = Comparable.from x.to_bits . hash x.to_bits

Comparable.from (_:Bits) = Bits_Comparator

## Represents the different possible types of values within Table columns.

   The types are tailored to correspond to RDBMS types, but they are also used
   with our in-memory backend.
type Value_Type
    ## Boolean or Bit value: 0 or 1.

       ANSI SQL: BIT / BOOLEAN
    Boolean

    ## Integer value: 0 to 255

       ANSI SQL: TINYINT
    Byte

    ## Integer value:

       16-bit: -32,768 to 32,767
       32-bit: -2,147,483,648 to -2,147,483,648
       64-bit: -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
       ANSI SQL: SMALLINT (16-bit), INT (32-bit), BIGINT (64-bit)

       Arguments:
       - size: the amount of bits used to store the values.
    Integer size:Bits=Bits.Bits_64

    ## Floating point value.

       ANSI SQL: REAL, FLOAT, DOUBLE

       Arguments:
       - size: the amount of bits used to store the values.
    Float size:Bits=Bits.Bits_64

    ## Arbitrary precision numerical value with a scale and precision.

       ANSI SQL: NUMERIC, DECIMAL

       Arguments:
       - precision: the total number of digits in the number.
       - scale: the number of digits after the decimal point.
    Decimal precision:(Integer|Nothing)=Nothing scale:(Integer|Nothing)=Nothing

    ## Character string.

       ANSI SQL: CHAR, VARCHAR, TEXT, LONGVARCHAR, NCHAR, NVARCHAR, TEXT, CLOB, NCLOB

       Arguments:
       - size: the maximum number of characters that can be stored in the
         column.
       - variable_length: whether the size is a maximum or a fixed length.
    Char size:(Integer|Nothing)=Nothing variable_length:Boolean=True

    ## Date

       ANSI SQL: DATE
    Date

    ## Date and Time

       ANSI SQL: TIMESTAMP / DateTime

       Arguments:
       - with_timezone: whether the values contain the timezone.
    Date_Time with_timezone:Boolean=True

    ## Time of day

       ANSI SQL: TIME, TIME WITHOUT TIME ZONE
    Time

    ## Binary data.

       ANSI SQL: BINARY, VARBINARY, LONGVARBINARY, BLOB

       Arguments:
       - size: the maximum number of bytes that can be stored in the
         column.
       - variable_length: whether the size is a maximum or a fixed length.
    Binary size:(Integer|Nothing)=Nothing variable_length:Boolean=False

    ## Unsupported SQL type.

       Fallback provided to allow describing types that are not supported by
       Enso at this time.
    Unsupported_Data_Type type_name:(Text|Nothing)=Nothing (underlying_type:Any|Nothing=Nothing)

    ## A mix of values can be stored in the Column.

       In-Memory and SQLite tables support this.
    Mixed

    ## Checks if the `Value_Type` represents a boolean type.
    is_boolean : Boolean
    is_boolean self = case self of
        Value_Type.Boolean -> True
        _ -> False

    ## Checks if the `Value_Type` represents a floating-point number type.
    is_floating_point : Boolean
    is_floating_point self = case self of
        Value_Type.Float _ -> True
        _ -> False

    ## Checks if the `Value_Type` represents a text type.
    is_text : Boolean
    is_text self = case self of
        Value_Type.Char _ _ -> True
        _ -> False

    ## Checks if the `Value_Type` represents any numeric type - integer, byte,
       floating point or decimal.
    is_numeric : Boolean
    is_numeric self = case self of
        Value_Type.Integer _   -> True
        Value_Type.Float _     -> True
        Value_Type.Byte        -> True
        Value_Type.Decimal _ _ -> True
        _ -> False

    ## Checks if the `Value_Type` represents an integer type.
    is_integer : Boolean
    is_integer self = case self of
        Value_Type.Integer _ -> True
        _ -> False

    ## Checks if the `Value_Type` represents a type that holds a date.

       It will return true for both `Date` and `Date_Time` types.
    has_date : Boolean
    has_date self = case self of
        Value_Type.Date -> True
        Value_Type.Date_Time _ -> True
        _ -> False

    ## PRIVATE
       Specifies if values of the given type can be compared for ordering.
    has_ordering : Boolean
    has_ordering self = case self of
        Value_Type.Integer _   -> True
        Value_Type.Float _     -> True
        Value_Type.Decimal _ _ -> True
        Value_Type.Byte        -> True
        Value_Type.Char _ _    -> True
        Value_Type.Boolean     -> True
        Value_Type.Date        -> True
        Value_Type.Date_Time _ -> True
        Value_Type.Time        -> True
        ## Not all mixed types are ordered, but some can, so we allow ordering
           for mixed columns.
        Value_Type.Mixed -> True
        _ -> False

    ## PRIVATE
       Checks if this type can be widened to the provided type.

       The widening is permitted if the target type is in a way 'larger' than
       the source type, so that there is no loss of information. In practice,
       there are cases where widening can still lose information - notably
       integers can be widened into floats and big enough integers may not be
       able to be exactly represented in floats.
    can_be_widened_to : Value_Type -> Boolean
    can_be_widened_to self target_type = if (self == target_type) || (target_type == Value_Type.Mixed) then True else case self of
        Value_Type.Integer self_bits -> case target_type of
            Value_Type.Integer target_bits -> target_bits >= self_bits
            Value_Type.Float _ -> True
            Value_Type.Decimal _ _ -> True
            _ -> False
        Value_Type.Byte -> case target_type of
            Value_Type.Integer _ -> True
            Value_Type.Float _ -> True
            Value_Type.Decimal _ _ -> True
            _ -> False
        Value_Type.Boolean -> case target_type of
            Value_Type.Byte -> True
            Value_Type.Integer _ -> True
            Value_Type.Float _ -> True
            Value_Type.Decimal _ _ -> True
            _ -> False
        Value_Type.Float self_bits -> case target_type of
            Value_Type.Float target_bits -> target_bits >= self_bits
            Value_Type.Decimal _ _ -> True
            _ -> False
        Value_Type.Char self_size self_variable_length -> case target_type of
            Value_Type.Char target_size target_variable_length ->
                fits_variability = if target_variable_length then True else self_variable_length == target_variable_length
                fits_variability && (target_size >= self_size)
            _ -> False
        Value_Type.Binary self_size self_variable_length -> case target_type of
            Value_Type.Binary target_size target_variable_length ->
                fits_variability = if target_variable_length then True else self_variable_length == target_variable_length
                fits_variability && (target_size >= self_size)
            _ -> False
        _ -> False

    ## PRIVATE
       Specifies if values of the given type can be compared for ordering.
    are_comparable : Value_Type -> Value_Type -> Boolean
    are_comparable type_1 type_2 =
        find_bucket typ = typ.if_not_error <|
            buckets = [["Integer", "Byte", "Float", "Decimal"], ["Char"], ["Date"], ["Date_Time"], ["Time"], ["Boolean"], ["Mixed"]]
            ctor_name = Meta.meta typ . constructor . name
            buckets.index_of bucket->
                bucket.contains ctor_name

        bucket_1 = find_bucket type_1
        bucket_2 = find_bucket type_2
        if bucket_1.is_nothing || bucket_2.is_nothing then False else
            if (type_1 == Value_Type.Mixed) || (type_2 == Value_Type.Mixed) then True else
                bucket_1 == bucket_2


    ## PRIVATE
       Checks that both arguments can be compared for ordering and runs the
       following action or reports an error.
    expect_comparable : Any -> Any -> Any -> Any ! Invalid_Value_Type
    expect_comparable arg1 arg2 ~action =
        type_1 = Value_Type_Helpers.find_argument_type arg1
        type_2 = Value_Type_Helpers.find_argument_type arg2
        if type_1.has_ordering.not then Error.throw (Invalid_Value_Type.Not_Ordered type_1) else
            if type_2.is_nothing.not && type_2.has_ordering.not then Error.throw (Invalid_Value_Type.Not_Ordered type_2) else
                if type_2.is_nothing.not && (Value_Type.are_comparable type_1 type_2 . not) then Error.throw (Invalid_Value_Type.Incomparable type_1 type_2) else
                    action

    ## PRIVATE
       ADVANCED
       Checks if the provided argument (which may be a value or a Column) is of
       a text type and runs the following action or reports a type error.
    expect_text : Any -> Any -> Any ! Invalid_Value_Type
    expect_text argument ~action =
        expect_type argument .is_text "Char" action

    ## PRIVATE
       ADVANCED
       Checks if the provided argument (which may be a value or a Column) is of
       a text type and runs the following action or reports a type error.
    expect_boolean : Any -> Any -> Any ! Invalid_Value_Type
    expect_boolean argument ~action =
        expect_type argument .is_boolean Value_Type.Boolean action

    ## PRIVATE
       ADVANCED
       Checks if the provided argument (which may be a value or a Column) is of
       a numeric type and runs the following action or reports a type error.
    expect_numeric : Any -> Any -> Any ! Invalid_Value_Type
    expect_numeric argument ~action =
        expect_type argument .is_numeric "a numeric" action

    ## PRIVATE
       ADVANCED
       Checks if the provided argument (which may be a value or a Column) is of
       a floating point type and runs the following action or reports a type
       error.
    expect_floating_point : Any -> Any -> Any ! Invalid_Value_Type
    expect_floating_point argument ~action =
        expect_type argument .is_floating_point "Float" action

    ## PRIVATE
       ADVANCED
       Checks if the provided argument (which may be a value or a Column) is has
       type `Date` or `Date_Time`.
    expect_has_date : Any -> Any -> Any ! Invalid_Value_Type
    expect_has_date argument ~action =
        expect_type argument .has_date "Date or Date_Time" action

    ## PRIVATE
       Provides a text representation of the `Value_Type` meant for
       displaying to the user.
    to_display_text : Text
    to_display_text self = case self of
        Value_Type.Boolean -> "Boolean"
        Value_Type.Byte -> "Byte"
        Value_Type.Integer size -> "Integer (" + size.to_text + ")"
        Value_Type.Float size -> "Float (" + size.to_text + ")"
        Value_Type.Decimal precision scale -> "Decimal (precision=" + precision.to_text + ", scale=" + scale.to_text + ")"
        Value_Type.Char size variable_length -> "Char (max_size=" + size.to_text + ", variable_length=" + variable_length.to_text + ")"
        Value_Type.Date -> "Date"
        Value_Type.Date_Time with_timezone -> "Date_Time (with_timezone=" + with_timezone.to_text + ")"
        Value_Type.Time -> "Time"
        Value_Type.Binary size variable_length -> "Binary (max_size=" + size.to_text + " bytes, variable_length=" + variable_length.to_text + ")"
        Value_Type.Unsupported_Data_Type type_name _ -> case type_name of
            Nothing  -> "Unsupported_Data_Type"
            _ : Text -> "Unsupported_Data_Type (" + type_name + ")"
        Value_Type.Mixed -> "Mixed"

    ## PRIVATE
       Provides a JS object representation for use in visualizations.
    to_js_object : JS_Object
    to_js_object self =
        constructor_name = Meta.meta self . constructor . name
        additional_fields = case self of
            Value_Type.Integer size ->
                [["bits", size.to_bits]]
            Value_Type.Float size ->
                [["bits", size.to_bits]]
            Value_Type.Decimal precision scale ->
                [["precision", precision], ["scale", scale]]
            Value_Type.Char size variable_length ->
                [["size", size], ["variable_length", variable_length]]
            Value_Type.Binary size variable_length ->
                [["size", size], ["variable_length", variable_length]]
            Value_Type.Unsupported_Data_Type type_name _ ->
                [["type_name", type_name]]
            _ -> []
        JS_Object.from_pairs <|
            [["type", "Value_Type"], ["constructor", constructor_name]] + additional_fields

## The type representing inferring the column type automatically based on values
   present in the column.

   The most specific type which is valid for all values in a column is chosen:
   - if all values are integers, `Integer` is chosen,
   - if all values are decimals or integers, `Decimal` is chosen,
   - if the values are all the same time type (a date, a time or a date-time),
     the corresponding type is chosen, `Date`, `Time_Of_Day` or `Date_Time`,
     respectively,
   - if all values are booleans, `Boolean` is chosen,
   - otherwise, `Text` is chosen as a fallback and the column is kept as-is
     without parsing.
type Auto

## PRIVATE
   A helper for generating the `Value_Type.expect_` checks.
expect_type : Any -> (Value_Type -> Boolean) -> Text|Value_Type -> Any -> Any ! Invalid_Value_Type
expect_type value predicate type_kind ~action = case value of
    # Special handling for `Nothing`. Likely, can be removed with #6281.
    Nothing -> action
    _ ->
        typ = Value_Type_Helpers.find_argument_type value
        if predicate typ then action else
            Value_Type_Helpers.raise_unexpected_type type_kind value
