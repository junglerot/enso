from Standard.Base import all
import Standard.Base.Errors.Common.Index_Out_Of_Bounds
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State

import Standard.Table.Data.Type.Value_Type.Value_Type
import Standard.Table.Data.Type.Value_Type.Bits
from Standard.Table.Errors import Inexact_Type_Coercion

polyglot java import org.enso.table.data.column.builder.object.Builder
polyglot java import org.enso.table.data.column.storage.type.StorageType
polyglot java import org.enso.table.data.column.storage.type.IntegerType
polyglot java import org.enso.table.data.column.storage.type.FloatType
polyglot java import org.enso.table.data.column.storage.type.BooleanType
polyglot java import org.enso.table.data.column.storage.type.TextType
polyglot java import org.enso.table.data.column.storage.type.DateType
polyglot java import org.enso.table.data.column.storage.type.DateTimeType
polyglot java import org.enso.table.data.column.storage.type.TimeOfDayType
polyglot java import org.enso.table.data.column.storage.type.AnyObjectType

## PRIVATE
   Gets the value type represented by this Java Storage.
to_value_type : StorageType -> Value_Type
to_value_type storage_type = case storage_type of
    i : IntegerType -> case i.bits.toInteger of
        8 -> Value_Type.Byte
        b -> Value_Type.Integer (Bits.from_bits b)
    f : FloatType ->
        bits = Bits.from_bits f.bits.toInteger
        Value_Type.Float bits
    _ : BooleanType -> Value_Type.Boolean
    s : TextType ->
        variable = s.fixedLength.not
        size = if s.maxLength < 0 then Nothing else s.maxLength
        Value_Type.Char size variable
    _ : DateType -> Value_Type.Date
    _ : DateTimeType -> Value_Type.Date_Time with_timezone=True
    _ : TimeOfDayType -> Value_Type.Time
    _ : AnyObjectType -> Value_Type.Mixed

## PRIVATE
closest_storage_type value_type = case value_type of
    # TODO we will want builders and storages with bounds checking, but for now we approximate
    Value_Type.Byte -> IntegerType.INT_64
    Value_Type.Integer _ -> IntegerType.INT_64
    Value_Type.Float _ -> FloatType.FLOAT_64
    Value_Type.Boolean -> BooleanType.INSTANCE
    Value_Type.Char _ _ -> TextType.VARIABLE_LENGTH
    Value_Type.Date -> DateType.INSTANCE
    # We currently will not support storing dates without timezones in in-memory mode.
    Value_Type.Date_Time _ -> DateTimeType.INSTANCE
    Value_Type.Time -> TimeOfDayType.INSTANCE
    Value_Type.Mixed -> AnyObjectType.INSTANCE
    _ -> Error.throw (Illegal_Argument.Error "Columns of type "+value_type.to_display_text+" are currently not supported in the in-memory backend.")

## PRIVATE
   Converts a value type to an in-memory storage type, possibly approximating it
   to the closest supported type.
from_value_type : Value_Type -> Problem_Behavior -> StorageType
from_value_type value_type on_problems =
    approximate_storage = closest_storage_type value_type
    approximated_value_type = to_value_type approximate_storage
    problems = if approximated_value_type == value_type then [] else
        [Inexact_Type_Coercion.Warning value_type approximated_value_type]
    on_problems.attach_problems_before problems approximate_storage

## PRIVATE
   A strict variant of `from_value_type` that expects that we can represent the
   provided value type exactly.
from_value_type_strict : Value_Type -> StorageType ! Illegal_State
from_value_type_strict value_type =
    value_type.if_not_error <|
        result = from_value_type value_type Problem_Behavior.Report_Error
        result.catch Inexact_Type_Coercion cause->
            Panic.throw (Illegal_State.Error "No exact representation for the provided value has been found: "+cause.to_display_text+" This is a bug in the Table library.")

## PRIVATE
   Creates a column storage builder for the given storage type.
make_builder : StorageType -> Integer -> Builder
make_builder storage initial_size=64 =
    Builder.getForType storage initial_size
