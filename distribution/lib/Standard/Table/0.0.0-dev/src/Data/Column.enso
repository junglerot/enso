from Standard.Base import all
import Standard.Base.Data.Ordering.Comparator
import Standard.Base.Data.Index_Sub_Range

import project.Data.Table.Table
import project.Data.Storage.Storage
import project.Data.Value_Type.Value_Type
from project.Data.Table import print_table

from project.Errors import No_Index_Set_Error

polyglot java import org.enso.table.data.table.Column as Java_Column
polyglot java import org.enso.table.operations.OrderBuilder

from project.Data.Column.Column import Column_Data

type Column
    ## Creates a new column given a name and a vector of elements.

       Arguments:
       - name: The name of the column to create.
       - items: The elements to contain in the column.

       > Example
         Create a new column called "My Column" from a vector of numbers.

             from Standard.Table import Column

             example_from_vector =
                 Column.from_vector "My Column" [1, 2, 3, 4, 5]
    from_vector : Text -> Vector -> Column
    from_vector name items = Column_Data (Java_Column.fromItems name items.to_array)

    ## PRIVATE

       A representation of a column in a Table.

       Arguments:
       - java_column: The internal representation of the column.
    Column_Data java_column

    ## Returns a text containing an ASCII-art table displaying this data.

       Arguments:
       - show_rows: the number of initial rows that should be displayed.
       - format_terminal: whether ANSI-terminal formatting should be used

       > Example
         Convert a column to a pretty-printed text representation.

             import Standard.Examples

             example_display = Examples.integer_column.display
    display : Integer -> Boolean -> Text
    display self show_rows=10 format_terminal=False =
        java_col = self.java_column
        index = java_col.getIndex
        col_name = java_col.getName
        storage = java_col.getStorage
        num_rows = java_col.getSize
        display_rows = Math.min num_rows show_rows
        items = Vector.new display_rows num->
            row = if storage.isNa num then "Nothing" else
                get_item_string storage num
            [index.ilocString num, row]
        table = print_table [index.getName, col_name] items 1 format_terminal
        if num_rows - display_rows <= 0 then table else
            missing = '\n\u2026 and ' + (num_rows - display_rows).to_text + ' hidden rows.'
            table + missing

    ## TEXT_ONLY

       Prints an ASCII-art table with this data to the standard output.

       Arguments:
       - show_rows: the number of initial rows that should be displayed.

       > Example
         Convert a column to a pretty-printed text representation and print it
         to the console.

             import Standard.Examples

             example_display = Examples.integer_column.print
    print : Integer -> Nothing
    print self show_rows=10 =
        IO.println (self.display show_rows format_terminal=True)
        IO.println ''

    ## Element-wise equality comparison.

       Arguments:
       - other: The value to compare `self` against. If `other` is a column, the
         comparison is performed pairwise between corresponding elements of
         `self` and `other`.

       Returns a column with results of comparing this column's elements against
       `other`.

       > Example
         Compare two columns for pairwise equality.

             import Standard.Examples

             example_eq = Examples.integer_column == Examples.decimal_column

       > Example
         Compare a column with a number.

             import Standard.Examples

             example_eq = Examples.integer_column == 1
    == : Column | Any -> Column
    == self other =
        run_vectorized_binary_op self "==" (==) other

    ## Element-wise non-equality comparison.

       Arguments:
       - other: The value to compare `self` against. If `other` is a column, the
         comparison is performed pairwise between corresponding elements of
         `self` and `other`.

       Returns a column with results of comparing this column's elements against
       `other`.

       > Example
         Compare two columns for pairwise inequality.

             import Standard.Examples

             example_neq = Examples.integer_column != Examples.decimal_column

       > Example
         Compare a column with a number.

             import Standard.Examples

             example_neq = Examples.integer_column != 1
    != : Column | Any -> Column
    != self other = (self == other).not

    ## Element-wise order comparison.

       Arguments:
       - other: The value to compare `self` against. If `other` is a column, the
         comparison is performed pairwise between corresponding elements of
         `self` and `other`.

       Returns a column with results of comparing this column's elements against
       `other`.

       > Example
         Compare two columns for pairwise greater-than-or-equal.

             import Standard.Examples

             example_geq = Examples.integer_column >= Examples.decimal_column

       > Example
         Compare a column with a number.

             import Standard.Examples

             example_geq = Examples.integer_column >= 1
    >= : Column | Any -> Column
    >= self other =
        run_vectorized_binary_op self ">=" (>=) other

    ## Element-wise order comparison.

       Arguments:
       - other: The value to compare `self` against. If `other` is a column, the
         comparison is performed pairwise between corresponding elements of
         `self` and `other`.

       Returns a column with results of comparing this column's elements against
       `other`.

       > Example
         Compare two columns for pairwise less-than-or-equal.

             import Standard.Examples

             example_leq = Examples.integer_column <= Examples.decimal_column

       > Example
         Compare a column with a number.

             import Standard.Examples

             example_leq = Examples.integer_column <= 1
    <= : Column | Any -> Column
    <= self other =
        run_vectorized_binary_op self "<=" (<=) other

    ## Element-wise order comparison.

       Arguments:
       - other: The value to compare `self` against. If `other` is a column, the
         comparison is performed pairwise between corresponding elements of
         `self` and `other`.

       Returns a column with results of comparing this column's elements against
       `other`.

       > Example
         Compare two columns for pairwise greater-than.

             import Standard.Examples

             example_gt = Examples.integer_column > Examples.decimal_column

       > Example
         Compare a column with a number.

             import Standard.Examples

             example_gt = Examples.integer_column > 1
    > : Column | Any -> Column
    > self other =
        run_vectorized_binary_op self ">" (>) other

    ## Element-wise order comparison.

       Arguments:
       - other: The value to compare `self` against. If `other` is a column, the
         comparison is performed pairwise between corresponding elements of
         `self` and `other`.

       Returns a column with results of comparing this column's elements against
       `other`.

       > Example
         Compare two columns for pairwise less-than.

             import Standard.Examples

             example_lt = Examples.integer_column < Examples.decimal_column

       > Example
         Compare a column with a number.

             import Standard.Examples

             example_lt = Examples.integer_column < 1
    < : Column | Any -> Column
    < self other = run_vectorized_binary_op self "<" (<) other

    ## Element-wise inclusive bounds check.

       Arguments:
       - lower: The lower bound to compare elements of `self` against. If
         `lower` is a column, the comparison is performed pairwise between
         corresponding elements of `self` and `lower`.
       - upper: The upper bound to compare elements of `self` against. If
         `upper` is a column, the comparison is performed pairwise between
         corresponding elements of `self` and `upper`.

       Returns a column with boolean values indicating whether values of this
       column fit between the lower and upper bounds (both ends inclusive).
    between : (Column | Any) -> (Column | Any) -> Column
    between self lower upper = (self >= lower) && (self <= upper)

    ## ALIAS Add Columns

       Element-wise addition.

       Arguments:
       - other: The value to add to `self`. If `other` is a column, the addition
         is performed pairwise between corresponding elements of `self` and
         `other`.

       Returns a column with results of adding `other` from each element of
       `self`.

       > Example
         Add two columns to each other.

             import Standard.Examples

             example_plus = Examples.decimal_column + Examples.integer_column

       > Example
         Add a single value to each item in a column.

             import Standard.Examples

             example_plus = Examples.integer_column + 10
    + : Column | Any -> Column
    + self other = run_vectorized_binary_op self '+' (+) other

    ## ALIAS Subtract Columns

       Element-wise subtraction.

       Arguments:
       - other: The value to subtract from `self`. If `other` is a column, the
         subtraction is performed pairwise between corresponding elements of
         `self` and `other`.

       Returns a column with results of subtracting `other` from each element of
       `self`.

       > Example
         Subtract one column from another.

             import Standard.Examples

             example_minus = Examples.decimal_column - Examples.integer_column

       > Example
         Subtract a single value from each item in a column.

             import Standard.Examples

             example_minus = Examples.integer_column - 10
    - : Column | Any -> Column
    - self other = run_vectorized_binary_op self '-' (-) other

    ## ALIAS Multiply Columns

       Element-wise multiplication.

       Arguments:
       - other: The value to multiply `self` by. If `other` is a column, the
         multiplication is performed pairwise between corresponding elements of
         `self` and `other`.

       Returns a column containing the result of multiplying each element of
       `self` by `other`.

       > Example
         Multiply the elements of two columns together.

             import Standard.Examples

             example_mul = Examples.decimal_column * Examples.integer_column

       > Example
         Multiply each value in a column by a single value.

             import Standard.Examples

             example_mul = Examples.integer_column * 10
    * : Column | Any -> Column
    * self other = run_vectorized_binary_op self '*' (*) other

    ## ALIAS Divide Columns

       Element-wise division.

       Arguments:
       - other: The value to divide `self` by. If `other` is a column, the
         division is performed pairwise between corresponding elements of `self`
         and `other`.

       Returns a column containing the result of dividing each element of `self`
       by `other`.

       > Example
         Divide the elements of one column by the elements of another.

             import Standard.Examples

             example_div = Examples.decimal_column / Examples.integer_column

       > Example
         Multiply each value in a column by a single value.

             import Standard.Examples

             example_div = Examples.integer_column / 10
    / : Column | Any -> Column
    / self other = run_vectorized_binary_op self '/' (/) other

    ## Element-wise modulus.

       Arguments:
       - other: The value to modulo `self` against. If `other` is a column, the
         modulus is performed pairwise between corresponding elements of `self`
         and `other`.

       Returns a column with results of modulus this column's elements against
       `other`.

       > Example
         Modulus of two columns against each other.

             import Standard.Examples

             example_mod = Examples.integer_column % Examples.decimal_column

       > Example
         Modulus of a column with a number.

             import Standard.Examples

             example_mod = Examples.integer_column % 3
    % : Column | Any -> Column
    % self other = run_vectorized_binary_op self '%' (%) other

    ## ALIAS Power Columns

       Element-wise raising to the power.

       Arguments:
       - other: The exponent to raise `self` by. If `other` is a column, the
         power operation is performed pairwise between corresponding elements
         of `self` and `other`.

       Returns a column containing the result of raising each element of `self`
       by `other`.

       > Example
         Squares the elements of one column.

             import Standard.Examples

             example_div = Examples.decimal_column ^ 2

       > Example
         Raises each value in a column by the value in another column.

             import Standard.Examples

             example_div = Examples.decimal_column ^ Examples.integer_column
    ^ : Column | Any -> Column
    ^ self other = run_vectorized_binary_op self '^' (^) other

    ## ALIAS AND Columns

       Element-wise boolean conjunction.

       Arguments:
       - other: The value to compute the conjunction of `self` with. If `other`
         is a column, the conjunction is performed pairwise between
         corresponding elements of `self` and `other`.

       Returns a column containing the result of performing boolean `and` on
       each element of `self` and `other`.

       > Example
         Compute the pairwise logical conjunction to two columns.

             import Standard.Examples

             example_and = Examples.bool_column_1 && Examples.bool_column_2

       > Example
         Compute the logical conjunction of each value in a column with a single
         value.

             import Standard.Examples

             example_and = Examples.bool_column_1 && True
    && : Column | Any -> Column
    && self other =
        run_vectorized_binary_op self "&&" (&&) other

    ## ALIAS OR Columns

       Element-wise boolean disjunction.

       Arguments:
       - other: The value to compute the disjunction of `self` with. If `other`
         is a column, the disjunction is performed pairwise between
         corresponding elements of `self` and `other`.

       Returns a column containing the result of performing the boolean `or` on
       each element of `self` and `other`.

       > Example
         Compute the pairwise logical disjunction to two columns.

             import Standard.Examples

             example_or = Examples.bool_column_1 || Examples.bool_column_2

       > Example
         Compute the logical disjunction of each value in a column with a single
         value.

             import Standard.Examples

             example_or = Examples.bool_column_1 || True
    || : Column | Any -> Column
    || self other =
        run_vectorized_binary_op self "||" (||) other

    ## ALIAS NOT

       Boolean negation of each element in self column.

       > Example
         Negate the elements of a column.

             import Standard.Examples

             example_not = Examples.bool_column_1.not
    not : Column
    not self = run_vectorized_unary_op self "not" .not

    ## ALIAS IF

       Replaces `True` values with `when_true` and `False` with `when_false`.
       Only meant for use with boolean columns.

       Arguments:
       - when_true: value or column when `self` is `True`.
       - when_false: value or column when `self` is `False`.

       > Example
         If the value in a column is `True`, replace it with `1`, otherwise `0`.

             import Standard.Examples

             example_if = Examples.bool_column_1.iif 1 0
    iif : Any -> Any -> Column
    iif self when_true when_false = case self.storage_type of
        Storage.Boolean ->
            s = self.java_column.getStorage
            ix = self.java_column.getIndex

            true_val = case when_true of
                _ : Column -> when_true.java_column.getStorage
                _ -> when_true

            false_val = case when_false of
                _ : Column -> when_false.java_column.getStorage
                _ -> when_false

            rs = s.iif true_val false_val
            Column.Column_Data (Java_Column.new "Result" ix rs)
        _ -> Error.throw (Illegal_Argument_Error "`iif` can only be used with boolean columns.")

    ## Returns a column of first non-`Nothing` value on each row of `self` and
       `values` list.

       Arguments:
       - values: list of columns or values to coalesce with `self`.

       > Example
         Get the first non-`Nothing` value in two columns.

             import Standard.Examples

             example_coalesce = Examples.decimal_column.coalesce Examples.integer_column
    coalesce : (Any | Vector Any) -> Column
    coalesce self values =
        fallback a b = a.if_nothing b
        run_vectorized_many_op self "coalesce" fallback values

    ## Returns a column of minimum on each row of `self` and `values` list.

       Arguments:
       - values: list of columns or values to minimum with `self`.

       > Example
         Get the minimum value in two columns.

             import Standard.Examples

             example_min = Examples.decimal_column.min Examples.integer_column
    min : (Any | Vector Any) -> Column
    min self values =
        fallback a b = if a.is_nothing then b else
            if b.is_nothing then a else
                if b < a then b else a
        run_vectorized_many_op self "minimum" fallback values

    ## Returns a column of maximum on each row of `self` and `values` list.

       Arguments:
       - values: list of columns or values to maximum with `self`.

       > Example
         Get the maximum value in two columns.

             import Standard.Examples

             example_max = Examples.decimal_column.max Examples.integer_column
    max : (Any | Vector Any) -> Column
    max self values =
        fallback a b = if a.is_nothing then b else
            if b.is_nothing then a else
                if b > a then b else a
        run_vectorized_many_op self "maximum" fallback values

    ## Returns a column of booleans, with `True` items at the positions where
       this column contains a `Nothing`.

       > Example
         Check a column for missing values.

             import Standard.Examples

             example_is_missing = Examples.decimal_column.is_missing
    is_missing : Column
    is_missing self = run_vectorized_unary_op self "is_missing" (== Nothing) on_missing=True

    ## UNSTABLE
       Returns a column of booleans, with `True` items at the positions where
       this column contains a NaN. This is only applicable to double columns.
    is_nan : Column
    is_nan self =
        is_object_nan x = case x of
            _ : Decimal -> x.is_nan
            _ -> False
        run_vectorized_unary_op self "is_nan" is_object_nan on_missing=False

    ## PRIVATE
       Returns a column of booleans, with `True` items at the positions where
       this column contains an empty string or `Nothing`.
    is_empty : Column
    is_empty self = run_vectorized_unary_op self "is_empty" Filter_Condition.Is_Empty.to_predicate on_missing=True

    ## Returns a column of booleans, with `True` items at the positions where
       this column does not contain a `Nothing`.

       > Example
         Check a column for present values.

             import Standard.Examples

             example_is_present = Examples.decimal_column.is_present
    is_present : Column
    is_present self = self.is_missing.not

    ## PRIVATE
       Returns a column of booleans with `True` at the positions where this
       column contains a blank value.

       Arguments:
       - treat_nans_as_blank: If `True`, then `Number.nan` is considered as
         blank.

       ? Blank values
         Blank values are `Nothing`, `""` and depending on setting `Number.nan`.
    is_blank : Boolean -> Boolean -> Column
    is_blank self treat_nans_as_blank=False =
        case self.storage_type of
            Storage.Text -> self.is_empty
            Storage.Decimal -> if treat_nans_as_blank then self.is_missing || self.is_nan else self.is_missing
            Storage.Any -> if treat_nans_as_blank then self.is_empty || self.is_nan else self.is_empty
            _ -> self.is_missing

    ## ALIAS Fill Missing

       Returns a new column where missing values have been replaced with the
       provided default.

       Arguments:
       - default: The value to replace missing values with. If this argument
         is a column, the value from `default` at the corresponding position
         will be used.

       > Example
         Fill missing values in a column with the value 20.5.

             import Standard.Examples

             example_fill_missing = Examples.decimal_column.fill_missing 20.5
    fill_missing : Column | Any -> Column
    fill_missing self default =
        storage = self.java_column.getStorage
        index = self.java_column.getIndex
        name = self.java_column.getName
        new_st = case default of
            Column_Data java_col ->
                other_storage = java_col.getStorage
                storage.fillMissingFrom other_storage
            _ ->
                storage.fillMissing default
        col = Java_Column.new name index new_st
        Column_Data col

    ## Checks for each element of the column if it starts with `other`.

       Arguments:
       - other: The value to compare `self` with. If `other` is a column, the
         operation is performed pairwise between corresponding elements of
         `self` and `other`.

       > Example
         Check the elements of a column for starting with the elements of
         another column.

             import Standard.Examples

             example_starts_with =
                Examples.text_column_1.starts_with Examples.text_column_2

       > Example
         Check the elements of a column for starting with a value.

             import Standard.Examples

             example_starts_with = Examples.text_column_1.starts_with "hell"
    starts_with : Column | Text -> Column
    starts_with self other =
        run_vectorized_binary_op self "starts_with" (a -> b -> a.starts_with b) other

    ## Checks for each element of the column if it ends with `other`.

       Arguments:
       - other: The value to compare `self` with. If `other` is a column, the
         operation is performed pairwise between corresponding elements of
         `self` and `other`.

       > Example
         Check the elements of a column for ending with the elements of another
         column.

             import Standard.Examples

             example_ends_with =
                Examples.text_column_1.ends_with Examples.text_column_2

       > Example
         Check the elements of a column for ending with a value.

             import Standard.Examples

             example_ends_with = Examples.text_column_1.ends_with "hell"
    ends_with : Column | Text -> Column
    ends_with self other =
        run_vectorized_binary_op self "ends_with" (a -> b -> a.ends_with b) other

    ## Checks for each element of the column if it contains `other`.

       Arguments:
       - other: The value to compare `self` with. If `other` is a column, the
         operation is performed pairwise between corresponding elements of
         `self` and `other`.

       > Example
         Check the elements of a column for containing the elements of another
         column.

             import Standard.Examples

             example_contains =
                 Examples.text_column_1.contains Examples.text_column_2

       > Example
         Check the elements of a column for containing a value.

             import Standard.Examples

             example_contains = Examples.text_column_1.contains "hell"
    contains : Column | Text -> Column
    contains self other =
        run_vectorized_binary_op self "contains" (a -> b -> a.contains b) other

    ## Checks for each element of the column if it matches an SQL-like pattern.

       Arguments:
       - pattern: The pattern to match `self` against. If it is a column, the
         operation is performed pairwise between corresponding elements of
         `self` and that column. The pattern is an SQL-like pattern, where
         `%` matches any sequence of characters and `_` matches any single
         character.

       > Example
         Check if elements of a column start with 'F' and end with a dot.

             import Standard.Examples

             example_contains = Examples.text_column_1.like "F%."
    like : Column | Text -> Column
    like self pattern =
        run_vectorized_binary_op self "like" (_ -> _ -> Error.throw (Illegal_State_Error "The `Like` operation should only be used on Text columns.")) pattern

    ## Checks for each element of the column if it is contained within the
       provided vector or column.

       Arguments:
       - vector: A vector of elements or another column. The resulting column
         will contain true at the positions where the corresponding element of
         `self` is contained in `vector`.

       > Example
         Check if elements of a column are contained in a provided vector.

             import Standard.Examples

             example_contains = Examples.text_column_1.is_in [1, 2, 5]
    is_in : Column | Vector -> Column
    is_in self vector =
        op_name = "is_in"
        result_name = "Result"
        case self.java_column.getStorage.isOpVectorized op_name of
            True ->
                fallback_fn _ _ =
                    Panic.throw (Illegal_State_Error_Data "Impossible: This is a bug in the Standard.Table library.")
                true_vector = case vector of
                    _ : Array -> Vector.from_polyglot_array vector
                    _ : Vector.Vector -> vector
                    column : Column -> column.to_vector
                run_vectorized_binary_op self op_name fallback_fn true_vector skip_nulls=False new_name=result_name
            False ->
                ## We have custom code for the non-vectorized case, because
                   usually a vectorized binary op will apply the fallback
                   function element-wise if the other argument is a Column. But
                   for `Is_In` we want each element of `self` to be checked
                   against the whole other column, instead of just the
                   corresponding row - so we need to go around a bit.
                true_vector = case vector of
                    _ : Array -> Vector.from_polyglot_array vector
                    _ : Vector.Vector -> vector
                    ## This does no copying, as `Column.to_vector` just returns
                       a view of the storage.
                    column : Column -> column.to_vector
                new_vector = self.to_vector.map (Filter_Condition.Is_In true_vector).to_predicate
                Column.from_vector result_name new_vector

    ## ALIAS Transform Column

       Applies `function` to each item in this column and returns the column
       of results.

       Arguments:
       - function: The function to apply to each element of `self` column.
       - on_missing: The value to return for missing cells. Ideally it should be
         replaced with a `skip_nulls` parameter like elsewhere, but currently
         that is not possible due to a bug:
         https://github.com/oracle/graal/issues/4741

       > Example
         Multiply each element of the column by itself.

             import Standard.Examples

             example_map = Examples.integer_column.map (x -> x * x)
    map : (Any -> Any) -> Column
    map self function on_missing=Nothing =
        storage = self.java_column.getStorage
        index = self.java_column.getIndex
        new_st = storage.map Nothing function on_missing
        col = Java_Column.new "Result" index new_st
        Column_Data col

    ## ALIAS Transform Columns

       Applies `function` to consecutive pairs of elements of `self` and `that`
       and returns a column of results.

       Arguments:
       - that: The column to zip with `self`.
       - function: A binary function that is applied to corresponding pairs of
         elements of `self` and `that` to produce a value.
       - skip_missing: controls whether missing values should be passed to the
         `function`. The default value of `True` will skip the rows for which
         the value in either column is missing and automatically append
         `Nothing` to the result table. If set to `False`, every pair of values
         is passed to `function`.

       > Example
         Zip two columns together as pairs.

             import Standard.Examples

             example_zip =
                Examples.integer_column.zip Examples.text_column_1 [_, _]
    zip : Column -> (Any -> Any -> Any) -> Boolean -> Column
    zip self that function skip_missing=True =
        s1 = self.java_column.getStorage
        ix = self.java_column.getIndex
        s2 = that.java_column.getStorage
        rs = s1.zip Nothing function s2 skip_missing
        Column_Data (Java_Column.new "Result" ix rs)

    ## ALIAS Rename Column

       Returns a new column, containing the same elements as `self`, but with
       the given name.

       Arguments:
       - name: The new name for the column.

       > Example
         Rename a column.

             import Standard.Examples

             example_rename = Examples.integer_column.rename "My Numbers"
    rename : Text -> Column
    rename self name = Column_Data (self.java_column.rename name)

    ## Returns the name of this column.

       > Example
         Get the name of a column.

             import Standard.Examples

             example_name = Examples.text_column_2.name
    name : Text
    name self = self.java_column.getName

    ## Returns the length of this column.

       > Example
         Get the length of a column.

             import Standard.Examples

             example_length = Examples.text_column_2.length
    length : Integer
    length self = self.java_column . getSize

    ## Returns the number of missing items in this column.

       > Example
         Count the number of missing values in a column.

             import Standard.Examples

             example_count_missing = Examples.text_column_2.count_missing
    count_missing : Integer
    count_missing self = self.java_column.getStorage.countMissing

    ## Returns the number of non-null items in this column.

       > Example
         Count the number of not missing values in a column.

             import Standard.Examples

             example_count = Examples.text_column_2.count
    count : Integer
    count self = self.length - self.count_missing

    ## Returns the index of this column, as a column (indexed by itself).

       Throws `No_Index_Set_Error` if there is no index set.

       > Example
         Get the index from a column.

             import Standard.Examples

             example_index = Examples.decimal_column.index
    index : Column ! No_Index_Set_Error
    index self = case self.java_column.getIndex.toColumn of
        Nothing -> Error.throw No_Index_Set_Error
        i -> Column_Data i

    ## Sets the index of this column, using the provided column.

       Arguments:
       - index: The column to use as the index to this column.

       > Example
         Index the decimal column by the integer column.

             import Standard.Examples

             example_set_index =
                Examples.decimal_column.set_index Examples.integer_column
    set_index : Column -> Column
    set_index self index = Column_Data (self.java_column.setIndex index.java_column)

    ## Returns the value contained in this column at the given index.

       Arguments:
       - index: The index in the column from which to get the value.

       If the value is an NA then this method returns nothing. If the index is
       not an index in the column it returns an `Index_Out_Of_Bounds_Error`.

       > Example
         Get the first element from a column.

             import Standard.Examples

             example_at = Examples.integer_column.at 0
    at : Integer -> (Any | Nothing) ! Index_Out_Of_Bounds_Error
    at self index =
        valid_index = (index >= 0) && (index < self.length)
        if valid_index.not then Error.throw (Index_Out_Of_Bounds_Error_Data index self.length) else
            storage = self.java_column.getStorage
            if storage.isNa index then Nothing else
                storage.getItem index

    ## UNSTABLE

       Returns a column containing rows of this column.

       Arguments:
       - max_rows: specifies a maximum amount of rows to fetch; if not set, all
         available rows are fetched.
    read : (Nothing | Integer) -> Column
    read self max_rows=Nothing =
        if max_rows.is_nothing then self else self.slice 0 max_rows

    ## Returns a vector containing all the elements in this column.

       > Example
         Get the elements of a column as a vector.

             import Standard.Examples

             example_to_vector = Examples.integer_column.to_vector
    to_vector : Vector
    to_vector self = Vector.from_polyglot_array self.java_column.getStorage.toList

    ## Returns the underlying storage type of this column.

       > Example
         Get the storage type of a column.

             import Standard.Examples

             example_storage_type = Examples.integer_column.storage_type
    storage_type : Storage
    storage_type self =
        tp = self.java_column.getStorage.getType
        Storage.types.at tp . catch Index_Out_Of_Bounds_Error _->
            Panic.throw (Illegal_State_Error "Unknown storage type: "+tp.to_text)

    ## UNSTABLE TODO this is a prototype that will be revisited later on
    value_type : Value_Type
    value_type self = case self.storage_type of
        Storage.Text -> Value_Type.Char
        Storage.Integer -> Value_Type.Integer
        Storage.Decimal -> Value_Type.Float
        Storage.Boolean -> Value_Type.Boolean
        Storage.Date -> Value_Type.Date
        Storage.Time_Of_Day -> Value_Type.Time
        Storage.Date_Time -> Value_Type.Date_Time
        Storage.Any -> Value_Type.Mixed

    ## UNSTABLE

       Converts this column to JSON.

       > Example
         Get a JSON representation of the column.

             import Standard.Examples

             example_to_json = Examples.integer_column.to_json
    to_json : Json
    to_json self =
        col = self.java_column
        name = col.getName
        storage = col.getStorage
        json_factory = case self.storage_type of
            Storage.Text -> Json.String
            Storage.Integer -> Json.Number
            Storage.Decimal -> Json.Number
            Storage.Boolean -> Json.Boolean
            _ -> .to_json
        storage_json = Json.Array (storage_to_json storage json_factory)
        fields = Map.singleton "name" (Json.String name) . insert "data" storage_json
        Json.Object fields

    ## Efficiently joins two tables based on either the index or the specified
       key column.

       Arguments:
       - other: the table being the right operand of this join operation.
       - on: the column of `self` that should be used as the join key. If this
         argument is not provided, the index of `self` will be used.
       - drop_unmatched: whether the rows of `self` without corresponding
         matches in `other` should be dropped from the result.
       - left_suffix: a suffix that should be added to the columns of `self`
         when there's a name conflict with a column of `other`.
       - right_suffix: a suffix that should be added to the columns of `other`
         when there's a name conflict with a column of `self`.

       The resulting table contains rows of `self` extended with rows of
       `other` with matching indexes. If the index values in `other` are not
       unique, the corresponding rows of `self` will be duplicated in the
       result.

       > Example
         Join two columns on their indices.

             import Standard.Examples

             example_join = Examples.integer_column.join Examples.bool_column_1
    join : Table | Column -> Text | Nothing -> Boolean -> Text -> Text -> Table
    join self other on=Nothing drop_unmatched=False left_suffix='_left' right_suffix='_right' =
        self.to_table.join other on drop_unmatched left_suffix right_suffix

    ## Converts this column into a single-column table.

       > Example
         Convert a column to a table.

             import Standard.Examples

             example_to_table = Examples.integer_column.to_table
    to_table : Table
    to_table self = Table.Table_Data self.java_column.toTable

    ## UNSTABLE
       ADVANCED

       Shows a JSON serialization of a truncated version of this column, for the
       benefit of visualization in the IDE.
    to_default_visualization_data : Text
    to_default_visualization_data self =
        size = ['length', self.length]
        name = ['name', self.name]
        max_data = 100
        data = ['data', self.to_vector.take (First max_data)]
        Json.from_pairs [size, name, data] . to_text

    ## UNSTABLE

       Sorts the column according to the specified rules.

       Arguments:
       - order: specifies the default sort order for this operation.
       - missing_last: specifies the default placement of missing values when
         compared to non-missing ones. Note that this argument is independent
         from `order`, i.e. missing values will always be sorted according to
         this rule, ignoring the ascending / descending setting.
       - comparator: function taking two items in this column and returning
         an ordering. If specified, it is used instead of the natural
         (`.compare_to`) ordering.

       > Example
         Sorting a column in ascending order.

             import Standard.Examples

             example_sort = Examples.integer_column.sort

       > Example
         Sorting a column in descending order, placing missing values at the
         top of the resulting column.

             import Standard.Examples

             example_sort =
                 Examples.integer_column.sort order=Sort_Direction.Descending missing_last=False

       > Example
         Sorting `column` in ascending order, using a custom comparator
         function.

             import Standard.Examples

             example_sort =
                 my_comparator a b = a.abs.compare_to b.abs
                 Examples.decimal_column.sort comparator=my_comparator
    sort : Sort_Direction -> Boolean -> (Any -> Any -> Ordering) | Nothing -> Column
    sort self order=Sort_Direction.Ascending missing_last=True comparator=Nothing =
        order_bool = case order of
            Sort_Direction.Ascending -> True
            Sort_Direction.Descending -> False
        java_cmp = Comparator.new comparator
        rule = OrderBuilder.OrderRule.new self.java_column java_cmp order_bool missing_last
        mask = OrderBuilder.buildOrderMask [rule].to_array
        new_col = self.java_column.applyMask mask
        Column_Data new_col

    ## Creates a new Column with the specified range of rows from the input
       Column.

       Arguments:
       - range: The selection of rows from the table to return.
    take : (Index_Sub_Range | Range | Integer) -> Column
    take self range=(First 1) =
        Index_Sub_Range.take_helper self.length self.at self.slice (slice_ranges self) range

    ## Creates a new Column from the input with the specified range of rows
       removed.

       Arguments:
       - range: The selection of rows from the table to remove.
    drop : (Index_Sub_Range | Range | Integer) -> Column
    drop self range=(First 1) =
        Index_Sub_Range.drop_helper self.length self.at self.slice (slice_ranges self) range

    ## PRIVATE
       Returns a column with a continuous sub-range of rows taken.
    slice : Integer -> Integer -> Column
    slice self start end =
        length = self.length
        offset = Math.max (Math.min start length) 0
        limit = Math.max (Math.min (end - offset) (length - offset)) 0
        Column_Data (self.java_column.slice offset limit)

    ## UNSTABLE

       Returns the first element in the column, if it exists.

       If the column is empty, this method will return a dataflow error
       containing an `Empty_Error`.

       > Example
         Get the first element of a column.

             import Standard.Examples

             example_first = Examples.integer_column.first
    first : Any ! Empty_Error
    first self = self.at 0 . catch Index_Out_Of_Bounds_Error_Data (_ -> Error.throw Empty_Error)

    ## UNSTABLE

       Returns the last element in the column, if it exists.

       If the column is empty, this method will return a dataflow error
       containing an `Empty_Error`.

       > Example
         Get the last element of a column.

             import Standard.Examples

             example_last = Examples.integer_column.last
    last : Any ! Empty_Error
    last self = self.at (self.length - 1) . catch Index_Out_Of_Bounds_Error_Data (_ -> Error.throw Empty_Error)

    ## UNSTABLE

       Returns a column containing the values of `self` column with their order
       reversed.

       > Example
         Reverse the values of a column to produce a new column.

             import Standard.Examples

             example_reverse = Examples.integer_column.reverse
    reverse : Column
    reverse self =
        mask = OrderBuilder.buildReversedMask self.length
        Column_Data <| self.java_column.applyMask mask

    ## UNSTABLE

       Returns a column of numbers, in which every entry denotes how many times
       the value at the given position occured before.

       > Example
         Count duplicate occurences of values in a column.

             import Standard.Examples

             example_duplicate_count = Examples.integer_column.duplicate_count
    duplicate_count : Column
    duplicate_count self = Column_Data self.java_column.duplicateCount

    ## PRIVATE
       Helper for the expression to tell it which functions needs a Vector.
    var_args_functions : Vector
    var_args_functions = ['is_in', 'coalesce', 'min', 'max']

## UNSTABLE

   An error for when the column contains no elements.
type Empty_Error
    ## PRIVATE

       Pretty prints the empty column error.
    to_display_text : Text
    to_display_text self = "The column is empty."

## PRIVATE

   Folds the vectorized operation over the provided column and values. When more
   than one value to is provided, the result is folded with subsequent values.

   Arguments:
   - column: The column to execute the operation over.
   - name: The name of the vectorized operation.
   - fallback_fn: A function used if the vectorized operation isn't available.
   - operands: The vector of operands to apply to the function after `column`.
   - skip_nulls: Specifies if nulls should be skipped. If set to `True`, a null
     value results in null without passing it to the function. If set to
     `False`, the null values are passed as any other value and can have custom
     handling logic.
   - new_name: The name of the column created as the result of this operation.
run_vectorized_many_op : Column -> Text -> (Any -> Any -> Any) -> Vector -> Boolean -> Text -> Column
run_vectorized_many_op column name fallback_fn operands skip_nulls=False new_name=(name + "_" + column.name) =
    case operands of
        _ : Vector.Vector ->
            folded = operands.fold column.java_column.getStorage current-> operand->
                case operand of
                    _ : Column -> current.zip name fallback_fn operand.java_column.getStorage skip_nulls
                    _ -> current.bimap name fallback_fn operand skip_nulls
            Column.Column_Data (Java_Column.new new_name column.java_column.getIndex folded)
        _ : Array -> run_vectorized_many_op column name fallback_fn (Vector.from_polyglot_array operands) skip_nulls new_name
        _ -> run_vectorized_many_op column name fallback_fn [operands] skip_nulls new_name

## PRIVATE

   Executes a vectorized binary operation over the provided column.

   Arguments:
   - column: The column to execute the operation over.
   - name: The name of the vectorized operation.
   - fallback_fn: A function used if the vectorized operation isn't available.
   - operand: The operand to apply to the function after `column`.
   - skip_nulls: Specifies if nulls should be skipped. If set to `True`, a null
     value results in null without passing it to the function. If set to
     `False`, the null values are passed as any other value and can have custom
     handling logic.
   - new_name: The name of the column created as the result of this operation.
run_vectorized_binary_op : Column -> Text -> (Any -> Any -> Any) -> Any -> Boolean -> Text -> Column
run_vectorized_binary_op column name fallback_fn operand skip_nulls=True new_name="Result" = case operand of
    Column.Column_Data col2 ->
        s1 = column.java_column.getStorage
        ix = column.java_column.getIndex
        s2 = col2.getStorage
        rs = s1.zip name fallback_fn s2 skip_nulls
        Column.Column_Data (Java_Column.new new_name ix rs)
    _ ->
        s1 = column.java_column.getStorage
        ix = column.java_column.getIndex
        rs = s1.bimap name fallback_fn operand skip_nulls
        Column.Column_Data (Java_Column.new new_name ix rs)

## PRIVATE

   Executes a vectorized unary operation over the provided column.

   Arguments:
   - column: The column to execute the operation over.
   - name: The name of the vectorized operation.
   - fallback_fn: A function used if the vectorized operation isn't available.
   - on_missing: The value to return for missing cells. Ideally it should be
     replaced with a `skip_nulls` parameter like elsewhere, but currently that
     is not possible due to a bug: https://github.com/oracle/graal/issues/4741
run_vectorized_unary_op : Column -> Text -> (Any -> Any) -> Any -> Column
run_vectorized_unary_op column name fallback_fn on_missing=Nothing =
    s = column.java_column.getStorage
    ix = column.java_column.getIndex
    rs = s.map name fallback_fn on_missing
    Column.Column_Data (Java_Column.new "Result" ix rs)

## PRIVATE

   A helper function for converting a column storage to JSON.

   Arguments:
   - storage: The storage to convert to JSON.
   - factory: The factory function for converting the storage.
storage_to_json : Storage -> (Any -> Json) -> Json
storage_to_json storage factory =
    Vector.new storage.size ix->
        if storage.isNa ix then Json.Null else
            factory (storage.getItem ix)

## PRIVATE

   Gets a textual representation of the item at position `ix` in `column`.

   Arguments:
   - column: The column to get the item from.
   - ix: The index in the column from which to get the item.
get_item_string : Column -> Integer -> Text
get_item_string column ix =
    item = column.getItem ix
    ## TODO This special handling of `Text` is because `"a".to_text` evaluates
       to "'a'" and not just "a". The code can be simplified once the following
       task is implemented:
       https://www.pivotaltracker.com/story/show/181499256
    case item of
        _ : Text -> item
        _ -> item.to_text

## PRIVATE
   A helper to create a new table consisting of slices of the original table.
slice_ranges column ranges =
    normalized = Index_Sub_Range.normalize_ranges ranges
    Column_Data (column.java_column.slice normalized.to_array)
