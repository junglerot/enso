from Standard.Base import all
from project.Data.Column_Format import all

import Standard.Base.Data.Array_Proxy.Array_Proxy
import Standard.Base.Errors.Common.Index_Out_Of_Bounds
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State

import Standard.Base.Data.Index_Sub_Range as Index_Sub_Range_Module

import project.Data.Data_Formatter.Data_Formatter
import project.Data.Type.Enso_Types
import project.Data.Type.Storage
import project.Data.Type.Value_Type_Helpers
import project.Data.Table.Table
import project.Internal.Java_Problems
import project.Internal.Naming_Helpers.Naming_Helpers
import project.Internal.Parse_Values_Helper
import project.Internal.Widget_Helpers
import project.Data.Type.Value_Type_Helpers

from project.Data.Table import print_table
from project.Data.Type.Value_Type import Value_Type, Auto
from project.Errors import No_Index_Set_Error, Floating_Point_Equality, Invalid_Value_Type, Inexact_Type_Coercion
from project.Internal.Java_Exports import make_string_builder

polyglot java import org.enso.table.data.column.operation.map.MapOperationProblemBuilder
polyglot java import org.enso.table.data.column.storage.Storage as Java_Storage
polyglot java import org.enso.table.data.table.Column as Java_Column
polyglot java import org.enso.table.operations.OrderBuilder

type Column
    ## Creates a new column given a name and a vector of elements.

       Arguments:
       - name: The name of the column to create.
       - items: The elements to contain in the column.

       > Example
         Create a new column called "My Column" from a vector of numbers.

             from Standard.Table import Column

             example_from_vector =
                 Column.from_vector "My Column" [1, 2, 3, 4, 5]
    from_vector : Text -> Vector -> Column
    from_vector name items =
        Illegal_Argument.handle_java_exception <|
            Column.Value (Java_Column.fromItems name items.to_array)

    ## PRIVATE
       Creates a new column given a name and an internal Java storage.
    from_storage : Text -> Java_Storage -> Column
    from_storage name storage =
        Illegal_Argument.handle_java_exception <|
            Column.Value (Java_Column.new name storage)

    ## PRIVATE
       ADVANCED
       Creates a new column given a name and a vector of elements repeated over and over.

       Arguments:
       - name: The name of the column to create.
       - items: The elements to contain in the column.
       - repeats: The number of times to repeat the vector.
    from_vector_repeated : Text -> Vector -> Integer -> Column
    from_vector_repeated name items repeats =
        Illegal_Argument.handle_java_exception <|
            Column.Value (Java_Column.fromRepeatedItems name items.to_array repeats)

    ## PRIVATE

       A representation of a column in a Table.

       Arguments:
       - java_column: The internal representation of the column.
    Value java_column

    ## PRIVATE
       ADVANCED
       Returns a text containing an ASCII-art table displaying this data.

       Arguments:
       - show_rows: the number of initial rows that should be displayed.
       - format_terminal: whether ANSI-terminal formatting should be used

       > Example
         Convert a column to a pretty-printed text representation.

             import Standard.Examples

             example_display = Examples.integer_column.display
    display : Integer -> Boolean -> Text
    display self show_rows=10 format_terminal=False =
        java_col = self.java_column
        index = java_col.getIndex
        col_name = normalize_string_for_display java_col.getName
        storage = java_col.getStorage
        num_rows = java_col.getSize
        display_rows = Math.min num_rows show_rows
        items = Vector.new display_rows num->
            row = if storage.isNa num then "Nothing" else
                get_item_string storage num
            [index.ilocString num, row]
        table = print_table [index.getName, col_name] items 1 format_terminal
        if num_rows - display_rows <= 0 then table else
            missing = '\n\u2026 and ' + (num_rows - display_rows).to_text + ' hidden rows.'
            table + missing

    ## PRIVATE
       ADVANCED
       TEXT_ONLY

       Prints an ASCII-art table with this data to the standard output.

       Arguments:
       - show_rows: the number of initial rows that should be displayed.

       > Example
         Convert a column to a pretty-printed text representation and print it
         to the console.

             import Standard.Examples

             example_display = Examples.integer_column.print
    print : Integer -> Nothing
    print self show_rows=10 =
        IO.println (self.display show_rows format_terminal=True)
        IO.println ''

    ## Element-wise equality comparison.

       Arguments:
       - other: The value to compare `self` against. If `other` is a column, the
         comparison is performed pairwise between corresponding elements of
         `self` and `other`.

       Returns a column with results of comparing this column's elements against
       `other`.

       ! Warnings

         - If this operation results in comparing floating-point values for
           equality which is not recommended, a `Floating_Point_Equality`
           warning is attached to the result.

       > Example
         Compare two columns for pairwise equality.

             import Standard.Examples

             example_eq = Examples.integer_column == Examples.decimal_column

       > Example
         Compare a column with a number.

             import Standard.Examples

             example_eq = Examples.integer_column == 1
    == : Column | Any -> Column
    == self other =
        new_name = Naming_Helpers.binary_operation_name "==" self other
        fallback problem_builder a b = case b of
            _ : Decimal ->
                problem_builder.reportFloatingPointEquality -1
                a == b
            _ -> a == b
        run_vectorized_binary_op_with_problem_handling self '==' fallback other expected_result_type=Value_Type.Boolean new_name

    ## Element-wise case-insensitive text equality comparison.

       Arguments:
       - other: The value to compare `self` against. If `other` is a column, the
         comparison is performed pairwise between corresponding elements of
         `self` and `other`.

       Returns a column with results of comparing this column's elements against
       `other`.
    equals_ignore_case : Column | Any -> Locale -> Column
    equals_ignore_case self other locale=Locale.default =
        ## TODO currently this always runs the fallback which is slow due to the
           cost of Java-to-Enso calls. We want to have a vectorized
           implementation, but we need to extend the architecture to allow
           passing the locale to it.
           See: https://github.com/enso-org/enso/issues/5250
        fallback x y =
            x.equals_ignore_case y locale=locale
        Value_Type.expect_text self <|
            Value_Type.expect_text other <|
                new_name = Naming_Helpers.function_name "equals_ignore_case" [self, other]
                run_vectorized_binary_op self "equals_ignore_case" fallback other expected_result_type=Value_Type.Boolean new_name

    ## Element-wise non-equality comparison.

       Arguments:
       - other: The value to compare `self` against. If `other` is a column, the
         comparison is performed pairwise between corresponding elements of
         `self` and `other`.

       Returns a column with results of comparing this column's elements against
       `other`.

       ! Warnings

         - If this operation results in comparing floating-point values for
           equality which is not recommended, a `Floating_Point_Equality`
           warning is attached to the result.

       > Example
         Compare two columns for pairwise inequality.

             import Standard.Examples

             example_neq = Examples.integer_column != Examples.decimal_column

       > Example
         Compare a column with a number.

             import Standard.Examples

             example_neq = Examples.integer_column != 1
    != : Column | Any -> Column
    != self other =
        new_name = Naming_Helpers.binary_operation_name "!=" self other
        (self == other).not . rename new_name

    ## Element-wise order comparison.

       Arguments:
       - other: The value to compare `self` against. If `other` is a column, the
         comparison is performed pairwise between corresponding elements of
         `self` and `other`.

       Returns a column with results of comparing this column's elements against
       `other`.

       > Example
         Compare two columns for pairwise greater-than-or-equal.

             import Standard.Examples

             example_geq = Examples.integer_column >= Examples.decimal_column

       > Example
         Compare a column with a number.

             import Standard.Examples

             example_geq = Examples.integer_column >= 1
    >= : Column | Any -> Column
    >= self other = Value_Type.expect_comparable self other <|
        run_vectorized_binary_op self ">=" (>=) other expected_result_type=Value_Type.Boolean

    ## Element-wise order comparison.

       Arguments:
       - other: The value to compare `self` against. If `other` is a column, the
         comparison is performed pairwise between corresponding elements of
         `self` and `other`.

       Returns a column with results of comparing this column's elements against
       `other`.

       > Example
         Compare two columns for pairwise less-than-or-equal.

             import Standard.Examples

             example_leq = Examples.integer_column <= Examples.decimal_column

       > Example
         Compare a column with a number.

             import Standard.Examples

             example_leq = Examples.integer_column <= 1
    <= : Column | Any -> Column
    <= self other = Value_Type.expect_comparable self other <|
        run_vectorized_binary_op self "<=" (<=) other expected_result_type=Value_Type.Boolean

    ## Element-wise order comparison.

       Arguments:
       - other: The value to compare `self` against. If `other` is a column, the
         comparison is performed pairwise between corresponding elements of
         `self` and `other`.

       Returns a column with results of comparing this column's elements against
       `other`.

       > Example
         Compare two columns for pairwise greater-than.

             import Standard.Examples

             example_gt = Examples.integer_column > Examples.decimal_column

       > Example
         Compare a column with a number.

             import Standard.Examples

             example_gt = Examples.integer_column > 1
    > : Column | Any -> Column
    > self other = Value_Type.expect_comparable self other <|
        run_vectorized_binary_op self ">" (>) other expected_result_type=Value_Type.Boolean

    ## Element-wise order comparison.

       Arguments:
       - other: The value to compare `self` against. If `other` is a column, the
         comparison is performed pairwise between corresponding elements of
         `self` and `other`.

       Returns a column with results of comparing this column's elements against
       `other`.

       > Example
         Compare two columns for pairwise less-than.

             import Standard.Examples

             example_lt = Examples.integer_column < Examples.decimal_column

       > Example
         Compare a column with a number.

             import Standard.Examples

             example_lt = Examples.integer_column < 1
    < : Column | Any -> Column
    < self other = Value_Type.expect_comparable self other <|
        run_vectorized_binary_op self "<" (<) other expected_result_type=Value_Type.Boolean

    ## Element-wise inclusive bounds check.

       Arguments:
       - lower: The lower bound to compare elements of `self` against. If
         `lower` is a column, the comparison is performed pairwise between
         corresponding elements of `self` and `lower`.
       - upper: The upper bound to compare elements of `self` against. If
         `upper` is a column, the comparison is performed pairwise between
         corresponding elements of `self` and `upper`.

       Returns a column with boolean values indicating whether values of this
       column fit between the lower and upper bounds (both ends inclusive).
    between : (Column | Any) -> (Column | Any) -> Column
    between self lower upper =
        Value_Type.expect_comparable self lower <|
            Value_Type.expect_comparable self upper <|
                new_name = Naming_Helpers.to_expression_text self + " between " + Naming_Helpers.to_expression_text lower + " and " + Naming_Helpers.to_expression_text upper
                result = (self >= lower) && (self <= upper)
                result.rename new_name

    ## ALIAS Add Columns

       Element-wise addition.

       Arguments:
       - other: The value to add to `self`. If `other` is a column, the addition
         is performed pairwise between corresponding elements of `self` and
         `other`.

       Returns a column with results of adding `other` from each element of
       `self`.

       > Example
         Add two columns to each other.

             import Standard.Examples

             example_plus = Examples.decimal_column + Examples.integer_column

       > Example
         Add a single value to each item in a column.

             import Standard.Examples

             example_plus = Examples.integer_column + 10
    + : Column | Any -> Column
    + self other =
        Value_Type_Helpers.resolve_addition_kind self other . if_not_error <|
            run_vectorized_binary_op self '+' fallback_fn=Nothing other

    ## ALIAS Subtract Columns

       Element-wise subtraction.

       Arguments:
       - other: The value to subtract from `self`. If `other` is a column, the
         subtraction is performed pairwise between corresponding elements of
         `self` and `other`.

       Returns a column with results of subtracting `other` from each element of
       `self`.

       > Example
         Subtract one column from another.

             import Standard.Examples

             example_minus = Examples.decimal_column - Examples.integer_column

       > Example
         Subtract a single value from each item in a column.

             import Standard.Examples

             example_minus = Examples.integer_column - 10
    - : Column | Any -> Column
    - self other =
        Value_Type_Helpers.check_binary_numeric_op self other <|
            run_vectorized_binary_op self '-' fallback_fn=Nothing other

    ## ALIAS Multiply Columns

       Element-wise multiplication.

       Arguments:
       - other: The value to multiply `self` by. If `other` is a column, the
         multiplication is performed pairwise between corresponding elements of
         `self` and `other`.

       Returns a column containing the result of multiplying each element of
       `self` by `other`.

       > Example
         Multiply the elements of two columns together.

             import Standard.Examples

             example_mul = Examples.decimal_column * Examples.integer_column

       > Example
         Multiply each value in a column by a single value.

             import Standard.Examples

             example_mul = Examples.integer_column * 10
    * : Column | Any -> Column
    * self other =
        Value_Type_Helpers.check_binary_numeric_op self other <|
            run_vectorized_binary_op self '*' fallback_fn=Nothing other

    ## ALIAS Divide Columns

       Element-wise division.

       Arguments:
       - other: The value to divide `self` by. If `other` is a column, the
         division is performed pairwise between corresponding elements of `self`
         and `other`.

       Returns a column containing the result of dividing each element of `self`
       by `other`.

       ! Warnings

         - If division by zero occurs, an `Arithmetic_Error` warning is attached
           to the result.

       > Example
         Divide the elements of one column by the elements of another.

             import Standard.Examples

             example_div = Examples.decimal_column / Examples.integer_column

       > Example
         Multiply each value in a column by a single value.

             import Standard.Examples

             example_div = Examples.integer_column / 10
    / : Column | Any -> Column
    / self other =
        Value_Type_Helpers.check_binary_numeric_op self other <|
            new_name = Naming_Helpers.binary_operation_name "/" self other
            run_vectorized_binary_op_with_problem_handling self "/" fallback_fn=Nothing other new_name

    ## Element-wise modulus.

       Arguments:
       - other: The value to modulo `self` against. If `other` is a column, the
         modulus is performed pairwise between corresponding elements of `self`
         and `other`.

       Returns a column with results of modulus this column's elements against
       `other`.

       ! Warnings

         - If division by zero occurs, an `Arithmetic_Error` warning is attached
           to the result.

       > Example
         Modulus of two columns against each other.

             import Standard.Examples

             example_mod = Examples.integer_column % Examples.decimal_column

       > Example
         Modulus of a column with a number.

             import Standard.Examples

             example_mod = Examples.integer_column % 3
    % : Column | Any -> Column
    % self other =
        Value_Type_Helpers.check_binary_numeric_op self other <|
            new_name = Naming_Helpers.binary_operation_name "%" self other
            run_vectorized_binary_op_with_problem_handling self "%" fallback_fn=Nothing other new_name

    ## ALIAS Power Columns

       Element-wise raising to the power.

       Arguments:
       - other: The exponent to raise `self` by. If `other` is a column, the
         power operation is performed pairwise between corresponding elements
         of `self` and `other`.

       Returns a column containing the result of raising each element of `self`
       by `other`.

       > Example
         Squares the elements of one column.

             import Standard.Examples

             example_div = Examples.decimal_column ^ 2

       > Example
         Raises each value in a column by the value in another column.

             import Standard.Examples

             example_div = Examples.decimal_column ^ Examples.integer_column
    ^ : Column | Any -> Column
    ^ self other =
        Value_Type_Helpers.check_binary_numeric_op self other <|
            run_vectorized_binary_op self '^' fallback_fn=Nothing other

    ## ALIAS AND Columns

       Element-wise boolean conjunction.

       Arguments:
       - other: The value to compute the conjunction of `self` with. If `other`
         is a column, the conjunction is performed pairwise between
         corresponding elements of `self` and `other`.

       Returns a column containing the result of performing boolean `and` on
       each element of `self` and `other`.

       > Example
         Compute the pairwise logical conjunction to two columns.

             import Standard.Examples

             example_and = Examples.bool_column_1 && Examples.bool_column_2

       > Example
         Compute the logical conjunction of each value in a column with a single
         value.

             import Standard.Examples

             example_and = Examples.bool_column_1 && True
    && : Column | Any -> Column
    && self other =
        Value_Type_Helpers.check_binary_boolean_op self other <|
            run_vectorized_binary_op self "&&" fallback_fn=Nothing other

    ## ALIAS OR Columns

       Element-wise boolean disjunction.

       Arguments:
       - other: The value to compute the disjunction of `self` with. If `other`
         is a column, the disjunction is performed pairwise between
         corresponding elements of `self` and `other`.

       Returns a column containing the result of performing the boolean `or` on
       each element of `self` and `other`.

       > Example
         Compute the pairwise logical disjunction to two columns.

             import Standard.Examples

             example_or = Examples.bool_column_1 || Examples.bool_column_2

       > Example
         Compute the logical disjunction of each value in a column with a single
         value.

             import Standard.Examples

             example_or = Examples.bool_column_1 || True
    || : Column | Any -> Column
    || self other =
        Value_Type_Helpers.check_binary_boolean_op self other <|
           run_vectorized_binary_op self "||" fallback_fn=Nothing other

    ## ALIAS NOT

       Boolean negation of each element in self column.

       > Example
         Negate the elements of a column.

             import Standard.Examples

             example_not = Examples.bool_column_1.not
    not : Column
    not self =
        Value_Type.expect_boolean self <|
            new_name = "not " + Naming_Helpers.to_expression_text self
            run_vectorized_unary_op self "not" fallback_fn=Nothing new_name

    ## ALIAS IF

       Replaces `True` values with `when_true` and `False` with `when_false`.
       Only meant for use with boolean columns.

       Arguments:
       - when_true: value or column when `self` is `True`.
       - when_false: value or column when `self` is `False`.

       > Example
         If the value in a column is `True`, replace it with `1`, otherwise `0`.

             import Standard.Examples

             example_if = Examples.bool_column_1.iif 1 0
    iif : Any -> Any -> Column
    iif self when_true when_false =
        Value_Type.expect_boolean self <|
            common_type = Value_Type_Helpers.find_common_type_for_arguments [when_true, when_false] . if_nothing Value_Type.Mixed
            storage_type = Storage.from_value_type_strict common_type
            storage_type.if_not_error <|
                new_name = "if " + Naming_Helpers.to_expression_text self + " then " + Naming_Helpers.to_expression_text when_true + " else " + Naming_Helpers.to_expression_text when_false
                s = self.java_column.getStorage

                true_val = case when_true of
                    _ : Column -> when_true.java_column.getStorage
                    _ -> when_true

                false_val = case when_false of
                    _ : Column -> when_false.java_column.getStorage
                    _ -> when_false

                rs = s.iif true_val false_val storage_type
                Column.Value (Java_Column.new new_name rs)

    ## Returns a column of first non-`Nothing` value on each row of `self` and
       `values` list.

       Arguments:
       - values: list of columns or values to coalesce with `self`.

       > Example
         Get the first non-`Nothing` value in two columns.

             import Standard.Examples

             example_coalesce = Examples.decimal_column.coalesce Examples.integer_column
    coalesce : (Any | Vector Any) -> Column
    coalesce self values =
        fallback a b = a.if_nothing b
        run_vectorized_many_op self "coalesce" fallback values

    ## Returns a column of minimum on each row of `self` and `values`.

       Arguments:
       - values: list of columns or values to minimum with `self`, or a single
         column or value.

       > Example
         Get the minimum value in two columns.

             import Standard.Examples

             example_min = Examples.decimal_column.min Examples.integer_column
    min : (Any | Vector Any) -> Column
    min self values =
        fallback a b = if a.is_nothing then b else
            if b.is_nothing then a else
                if b < a then b else a
        Value_Type_Helpers.check_multi_argument_comparable_op self values <|
            run_vectorized_many_op self "min" fallback values

    ## Returns a column of maximum on each row of `self` and `values`.

       Arguments:
       - values: list of columns or values to maximum with `self`, or a single
         column or value.

       > Example
         Get the maximum value in two columns.

             import Standard.Examples

             example_max = Examples.decimal_column.max Examples.integer_column
    max : (Any | Vector Any) -> Column
    max self values =
        fallback a b = if a.is_nothing then b else
            if b.is_nothing then a else
                if b > a then b else a
        Value_Type_Helpers.check_multi_argument_comparable_op self values <|
            run_vectorized_many_op self "max" fallback values

    ## Returns a column of booleans, with `True` items at the positions where
       this column contains a `Nothing`.

       > Example
         Check a column for missing values.

             import Standard.Examples

             example_is_nothing = Examples.decimal_column.is_nothing
    is_nothing : Column
    is_nothing self =
        new_name = Naming_Helpers.to_expression_text self + " is null"
        run_vectorized_unary_op self "is_nothing" (== Nothing) expected_result_type=Value_Type.Boolean new_name on_missing=True

    ## UNSTABLE
       Returns a column of booleans, with `True` items at the positions where
       this column contains a NaN. This is only applicable to double columns.
    is_nan : Column
    is_nan self =
        Value_Type.expect_floating_point self <|
            self.internal_is_nan on_missing=Nothing

    ## PRIVATE
    internal_is_nan : Column
    internal_is_nan self on_missing =
        new_name = Naming_Helpers.function_name "is_nan" [self]
        fallback x = case x of
            _ : Decimal -> x.is_nan
            _           -> False
        run_vectorized_unary_op self "is_nan" fallback expected_result_type=Value_Type.Boolean new_name on_missing=on_missing

    ## PRIVATE
       Returns a column of booleans, with `True` items at the positions where
       this column contains an empty string or `Nothing`.
    is_empty : Column
    is_empty self = Value_Type.expect_text self <|
        self.internal_is_empty

    ## PRIVATE
    internal_is_empty : Column
    internal_is_empty self =
        new_name = Naming_Helpers.to_expression_text self + " is empty"
        run_vectorized_unary_op self "is_empty" Filter_Condition.Is_Empty.to_predicate expected_result_type=Value_Type.Boolean new_name on_missing=True

    ## Returns a column of booleans, with `True` items at the positions where
       this column does not contain a `Nothing`.

       > Example
         Check a column for present values.

             import Standard.Examples

             example_is_present = Examples.decimal_column.is_present
    is_present : Column
    is_present self =
        new_name = Naming_Helpers.function_name "is_present" [self]
        self.is_nothing.not.rename new_name

    ## PRIVATE
       Returns a column of booleans with `True` at the positions where this
       column contains a blank value.

       Arguments:
       - treat_nans_as_blank: If `True`, then `Number.nan` is considered as
         blank.

       ? Blank values
         Blank values are `Nothing`, `""` and depending on setting `Number.nan`.
    is_blank : Boolean -> Column
    is_blank self treat_nans_as_blank=False =
        new_name = Naming_Helpers.function_name "is_blank" [self]
        result = case self.value_type of
            Value_Type.Char _ _ -> self.is_empty
            Value_Type.Float _ ->
                if treat_nans_as_blank then self.is_nothing || (self.internal_is_nan on_missing=False) else self.is_nothing
            Value_Type.Mixed ->
                self.internal_is_empty || (if treat_nans_as_blank then self.is_nothing || (self.internal_is_nan on_missing=False) else self.is_nothing)
            _ -> self.is_nothing
        result.rename new_name

    ## ALIAS Fill Missing

       Returns a new column where missing values have been replaced with the
       provided default.

       Arguments:
       - default: The value to replace missing values with. If this argument
         is a column, the value from `default` at the corresponding position
         will be used.

       > Example
         Fill missing values in a column with the value 20.5.

             import Standard.Examples

             example_fill_missing = Examples.decimal_column.fill_nothing 20.5
    fill_nothing : Column | Any -> Column
    fill_nothing self default =
        common_type = Value_Type_Helpers.find_common_type_for_arguments [self, default]
        common_type.if_not_error <|
            new_name = Naming_Helpers.function_name "fill_nothing" [self, default]
            storage = self.java_column.getStorage
            storage_type = Storage.from_value_type_strict common_type
            new_st = case default of
                Column.Value java_col ->
                    other_storage = java_col.getStorage
                    storage.fillMissingFrom other_storage storage_type
                _ ->
                    storage.fillMissing default
            col = Java_Column.new new_name new_st
            Column.Value col

    ## ALIAS Fill Empty

       Returns a new column where empty Text values have been replaced with the
       provided default.

       Arguments:
       - default: The value to replace missing values with. If this argument
         is a column, the value from `default` at the corresponding position
         will be used.
    fill_empty : Column | Any -> Column
    fill_empty self default =
        Value_Type.expect_text self <|
            Value_Type.expect_text default <|
                new_name = Naming_Helpers.function_name "fill_empty" [self, default]
                result = self.is_empty.iif default self
                result.rename new_name

    ## Checks for each element of the column if it starts with `other`.

       Arguments:
       - other: The value to compare `self` with. If `other` is a column, the
         operation is performed pairwise between corresponding elements of
         `self` and `other`.
       - case_sensitivity: Specifies if the text values should be compared case
         sensitively.

       > Example
         Check the elements of a column for starting with the elements of
         another column.

             import Standard.Examples

             example_starts_with =
                Examples.text_column_1.starts_with Examples.text_column_2

       > Example
         Check the elements of a column for starting with a value.

             import Standard.Examples

             example_starts_with = Examples.text_column_1.starts_with "hell"

       > Example
         Check the elements of a column for starting with a value comparing case insensitively.

             import Standard.Examples

             example_starts_with = Examples.text_column_1.starts_with "hell" Case_Sensitivity.Insensitive
    starts_with : Column | Text -> Case_Sensitivity -> Column
    starts_with self other case_sensitivity=Case_Sensitivity.Default =
        new_name = Naming_Helpers.function_name "starts_with" [self, other]
        run_vectorized_binary_case_text_op self Java_Storage.Maps.STARTS_WITH other case_sensitivity (a -> b -> a.starts_with b case_sensitivity) new_name

    ## Checks for each element of the column if it ends with `other`.

       Arguments:
       - other: The value to compare `self` with. If `other` is a column, the
         operation is performed pairwise between corresponding elements of
         `self` and `other`.
       - case_sensitivity: Specifies if the text values should be compared case
         sensitively.

       > Example
         Check the elements of a column for ending with the elements of another
         column.

             import Standard.Examples

             example_ends_with =
                Examples.text_column_1.ends_with Examples.text_column_2

       > Example
         Check the elements of a column for ending with a value.

             import Standard.Examples

             example_ends_with = Examples.text_column_1.ends_with "hell"
    ends_with : Column | Text -> Case_Sensitivity -> Column
    ends_with self other case_sensitivity=Case_Sensitivity.Default =
        new_name = Naming_Helpers.function_name "ends_with" [self, other]
        run_vectorized_binary_case_text_op self Java_Storage.Maps.ENDS_WITH other case_sensitivity (a -> b -> a.ends_with b case_sensitivity) new_name

    ## Checks for each element of the column if it contains `other`.

       Arguments:
       - other: The value to compare `self` with. If `other` is a column, the
         operation is performed pairwise between corresponding elements of
         `self` and `other`.
       - case_sensitivity: Specifies if the text values should be compared case
         sensitively.

       > Example
         Check the elements of a column for containing the elements of another
         column.

             import Standard.Examples

             example_contains =
                 Examples.text_column_1.contains Examples.text_column_2

       > Example
         Check the elements of a column for containing a value.

             import Standard.Examples

             example_contains = Examples.text_column_1.contains "hell"
    contains : Column | Text -> Case_Sensitivity -> Column
    contains self other case_sensitivity=Case_Sensitivity.Default =
        new_name = Naming_Helpers.function_name "contains" [self, other]
        run_vectorized_binary_case_text_op self Java_Storage.Maps.CONTAINS other case_sensitivity (a -> b -> a.contains b case_sensitivity) new_name

    ## Checks for each element of the column if it matches an SQL-like pattern.

       Arguments:
       - pattern: The pattern to match `self` against. If it is a column, the
         operation is performed pairwise between corresponding elements of
         `self` and that column. The pattern is an SQL-like pattern, where
         `%` matches any sequence of characters and `_` matches any single
         character.

       > Example
         Check if elements of a column start with 'F' and end with a dot.

             import Standard.Examples

             example_contains = Examples.text_column_1.like "F%."
    like : Column | Text -> Column
    like self pattern =
        Value_Type.expect_text self <|
            Value_Type.expect_text pattern <|
                run_vectorized_binary_op self "like" (_ -> _ -> Error.throw (Illegal_State.Error "The `like` operation should only be used on text columns.")) pattern expected_result_type=Value_Type.Boolean

    ## This function removes the specified characters, by default any
       whitespace, from the start, the end, or both ends of the input.

       Arguments:
       - where: The location of where to trim the input. By default, this
         function trims both ends of the input.
       - what: A `Text` (or text `Column`) containing characters that should be
         removed. By default, all whitespace is removed.
    trim : Location -> Column | Text -> Column
    trim self where=Location.Both what='' = Value_Type.expect_text self <|
        new_name = Naming_Helpers.function_name "trim" [self]

        trim_get = wrap_text_argument_as_value_provider what

        trim_get.if_not_error <|
            trim_fn t w = if w.is_empty then t.trim where else
                t.trim where w

            self_vec = self.to_vector
            mapped = self_vec.map_with_index i->t-> trim_fn t (trim_get i)
            Column.from_vector new_name mapped

    ## Replaces the first, or all occurrences of `term` with `new_text` in each
       row. If `term` is empty, the function returns the table unchanged.

       This method follows the exact replacement semantics of the
       `Text.replace` method.

       Arguments:
       - term: The term to find.
       - replacement: The text to replace matches with.
       - case_sensitivity: Specifies if the text values should be compared case
         sensitively.
       - only_first: If True, only replace the first match.
       - use_regex: If true, the term is used as a regular expression.

       > Example
         Replace dashes with underscores.

             column.replace "-" "_"

       > Example
         Remove leading and trailing spaces from cells.

             column.replace "^\s*(.*?)\s*$" "$1" use_regex=True

       > Example
         Replace texts in quotes with parentheses.

             column.replace '"(.*?)"' '($1)' use_regex=True
    replace : Text | Column -> Text | Column -> Case_Sensitivity -> Boolean -> Boolean -> Column
    replace self term="" new_text="" case_sensitivity=Case_Sensitivity.Sensitive only_first=False use_regex=False =
        Value_Type.expect_text self <|
            term_fn = wrap_text_argument_as_value_provider term
            new_text_fn = wrap_text_argument_as_value_provider new_text

            term_fn.if_not_error <| new_text_fn.if_not_error <|
                new_name = Naming_Helpers.function_name "replace" [self, term, new_text]

                do_replace index input =
                    term = term_fn index
                    if term.is_nothing || term.is_empty then input else
                        replace = new_text_fn index
                        input.replace term replace case_sensitivity only_first use_regex

                self_vec = self.to_vector
                mapped = self_vec.map_with_index do_replace
                Column.from_vector new_name mapped

    ## Gets the year as a number from the date stored in the column.

       Applies only to columns that hold the `Date` or `Date_Time` types.
       Returns a column of `Integer` type.
    year : Column ! Invalid_Value_Type
    year self = Value_Type.expect_has_date self <|
        simple_unary_op self "year"

    ## Gets the month as a number (1-12) from the date stored in the column.

       Applies only to columns that hold the `Date` or `Date_Time` types.
       Returns a column of `Integer` type.
    month : Column ! Invalid_Value_Type
    month self = Value_Type.expect_has_date self <|
        simple_unary_op self "month"

    ## Gets the day of the month as a number (1-31) from the date stored in the
       column.

       Applies only to columns that hold the `Date` or `Date_Time` types.
       Returns a column of `Integer` type.
    day : Column ! Invalid_Value_Type
    day self = Value_Type.expect_has_date self <|
        simple_unary_op self "day"

    ## Checks for each element of the column if it is contained within the
       provided vector or column.

       Arguments:
       - vector: A vector of elements or another column. The resulting column
         will contain true at the positions where the corresponding element of
         `self` is contained in `vector`.

       > Example
         Check if elements of a column are contained in a provided vector.

             import Standard.Examples

             example_contains = Examples.text_column_1.is_in [1, 2, 5]
    is_in : Column | Vector -> Column
    is_in self vector =
        op_name = "is_in"
        result_name = Naming_Helpers.to_expression_text self + " " + "in " + Naming_Helpers.to_expression_text vector
        case self.java_column.getStorage.isOpVectorized op_name of
            True ->
                fallback_fn _ _ =
                    Panic.throw (Illegal_State.Error "Impossible: This is a bug in the Standard.Table library.")
                true_vector = case vector of
                    _ : Vector -> vector
                    _ : Array -> Vector.from_polyglot_array vector
                    column : Column -> column.to_vector
                run_vectorized_binary_op self op_name fallback_fn true_vector expected_result_type=Value_Type.Boolean skip_nulls=False new_name=result_name
            False ->
                ## We have custom code for the non-vectorized case, because
                   usually a vectorized binary op will apply the fallback
                   function element-wise if the other argument is a Column. But
                   for `Is_In` we want each element of `self` to be checked
                   against the whole other column, instead of just the
                   corresponding row - so we need to go around a bit.
                true_vector = case vector of
                    _ : Vector -> vector
                    _ : Array -> Vector.from_polyglot_array vector
                    ## This does no copying, as `Column.to_vector` just returns
                       a view of the storage.
                    column : Column -> column.to_vector
                new_vector = self.to_vector.map (Filter_Condition.Is_In true_vector).to_predicate
                Column.from_vector result_name new_vector

    ## Parses a text column into values

       Arguments:
       - type: The type to parse the column to. Defaults to `Auto` meaning that
         the type will be inferred from the data.
       - format: The formatting settings to use when parsing the column.
         For `Date`, `Time_Of_Day` and `Date_Time`, a Java date time style
         can be used. For `Boolean`, it should be two values that represent true
         and false, separated by a `|`. Alternatively, a `Data_Formatter` can be
         passed to provide complete customisation of the formatting.
       - on_problems: Specifies how to handle if a problem occurs, raising as a
         warning by default.

       ! Error Conditions

         - If the column is not a text column, an `Invalid_Value_Type` error is
           raised.
         - If some values in the column did not match the expected datatype
           format, an `Invalid_Format` problem is reported. The problematic
           cells are replaced with `Nothing`.

       ? Number Formats

         If parsing a column to a number, by default, the parser will attempt
         to find the most appropriate format for the column. This is done by
         finding the format that parses the longest set without an issue from
         the first record.

         It will try the following separators in British, German, French and
         Swiss order.

         - Thousand separators must be followed by groups of 3 numbers.
         - Scientific notation is only allowed on decimals and must be on a
           value between -10 and 10. The notation is an `E` followed by an
           integer and must be enabled on the `Data_Formatter`,

         The following formats are supported:
         - Sign (+/-) followed by Number (e.g. +1,234.56)
         - Using brackets to indicate a negative number (e.g. (1,234.56))
         - Currency symbols (if not in Auto mode) can be placed before or after
           the sign and number.
         - If using brackets, the currency symbol must be placed after the
           opening bracket.

       > Example
         Parse dates in a column in the format `yyyy-MM-dd` (the default format).

             import Standard.Examples

             example_contains = Examples.text_column_1.parse Date

       > Example
         Parse dates in a column in the format `dd/MM/yyyy`

             import Standard.Examples

             example_contains = Examples.text_column_1.parse Date 'dd/MM/yyyy'

       > Example
         Parse a Yes/No column into a boolean column.

             import Standard.Examples

             example_contains = Examples.text_column_1.parse Boolean 'Yes|No'
    @type Widget_Helpers.parse_type_selector
    parse : Value_Type | Auto -> Text | Data_Formatter -> Problem_Behavior -> Column
    parse self type=Auto format=Data_Formatter.Value on_problems=Report_Warning =
        Value_Type.expect_text self <|
            formatter = case format of
                _ : Text ->
                    Data_Formatter.Value.with_format type format
                _ : Data_Formatter -> format
                _ -> Error.throw (Illegal_Argument.Error "Invalid format type. Expected Text or Data_Formatter.")

            parser = formatter.make_value_type_parser type
            storage = self.java_column.getStorage
            new_storage_and_problems = parser.parseColumn self.name storage

            new_storage = new_storage_and_problems.value
            problems = Vector.from_polyglot_array new_storage_and_problems.problems . map (Parse_Values_Helper.translate_parsing_problem type)

            output = Column.Value (Java_Column.new self.name new_storage)
            on_problems.attach_problems_after output problems

    ## Format a `Column` using a format string (or `Column` of format strings).

       Arguments:
       - format: The type-dependent format string to use to format the values.
         If `format` is `""` or `Nothing`, .to_text is used to format the value.
       - locale: The locale in which the format should be interpreted.

       ! Error Conditions

         - If the format is incorrectly formed, or if some values in the column
           did not match the expected datatype format, an `Illegal_Argument`
           error is thrown.

       ? Supported Types
         - `Value_Type.Date`
         - `Value_Type.Date_Time`
         - `Value_Type.Time`
         - `Value_Type.Integer`
         - `Value_Type.Float`
         - `Value_Type.Boolean`

       ? `Value_Type.Date`, `Value_Type.Date_Time`, `Value_Type.Time` format strings

         A custom pattern string consists of one or more custom date and time
         format specifiers. For example, "d MMM yyyy" will format "2011-12-03"
         as "3 Dec 2011". See https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/time/format/DateTimeFormatter.html
         for a complete format specification.

         Note that the format string can specify decimal point and digit
         separators, but these characters are interpreted in the context of the
         Locale used. The format string specifies their location, but the Locale
         has the final decision about which characters are used.

       ? `Value_Type.Integer`, `Value_Type.Float` format strings

         Numeric format strings are specified by the Java DecimalFormat class.
         See https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html
         for a complete format specification.

       ? `Value_Type.Boolean` format strings

         Format strings for `Boolean` consist of two values that represent true
         and false, separated by a `|`.

       > Example
         Format a `Column` of `Dates` in the format `"yyyyMMdd"`.

             input = Column.from_vector "values" [Date.new 2020 12 21, Date.new 2023 4 25]
             input.format "yyyyMMdd"
             # ==> ["20201221", "20230425"]

       > Example
         Format `Column` of `Dates`, using format strings in a second column.

             input = Column.from_vector "values" [Date.new 2020 12 21, Date.new 2023 4 25]
             formats = Column.from_vector "formats" ["yyyyMMdd", "dd-MM-yyyy"]
             input.format formats
             # ==> ["20201221", "25-04-2023"]

       > Example
         Format a `Column` of `Integers` in the format `"#,##0.00"`.

             input = Column.from_vector "values" [100000000, 2222, 3]
             input.format "#,##0.00"
             # ==> ["100,000,000.00", "2,222.00", "3.00"]

       > Example
         Format a `Column` of `Booleans` in the format `"t|f"`.

             input = Column.from_vector "values" [True, False]
             input.format "t|f"
             # ==> ["t", "f"]

       > Example
         Format a `Column` of numbers, using both decimal point / digit
         separators and a Locale.

             input = Column.from_vector "values" ["100000000", "2222", "3"] . parse numeric_type
             input.format "#,##0.00" locale=(Locale.new "fr")
             # ==> ["100 000 000,00", "2 222,00", "3,00"]
    format : Text | Column -> Locale -> Column ! Illegal_Argument
    format self format=Nothing locale=Locale.default =
        create_formatter = make_value_formatter_for_value_type self.value_type locale

        new_column = case format of
            "" ->
                formatter = .to_text
                map_over_storage self formatter make_string_builder
            Nothing ->
                formatter = .to_text
                map_over_storage self formatter make_string_builder
            _ : Text ->
                formatter = create_formatter
                formatter.if_not_error <|
                    map_over_storage self (formatter format=format) make_string_builder
            format_column : Column -> Value_Type.expect_text format_column <|
                formatter = create_formatter
                formatter.if_not_error <|
                    map_2_over_storage self format_column formatter make_string_builder
            _ -> Error.throw <| Illegal_Argument.Error <| "Unsupported format type: " + format.to_text
        new_column

    ## ALIAS Transform Column

       Applies `function` to each item in this column and returns the column
       of results.

       Arguments:
       - function: The function to apply to each element of `self` column.
       - skip_nothing: If `True`, `Nothing` values will be skipped. Otherwise,
         `Nothing` values will be passed to the `function`.

       > Example
         Multiply each element of the column by itself.

             import Standard.Examples

             example_map = Examples.integer_column.map (x -> x * x)
    map : (Any -> Any) -> Boolean -> Column
    map self function skip_nothing=True =
        new_fn = if skip_nothing then (x-> if x.is_nothing then Nothing else function x) else function
        new_st = self.to_vector.map new_fn
        Column.from_vector self.name new_st

    ## ALIAS Transform Columns

       Applies `function` to consecutive pairs of elements of `self` and `that`
       and returns a column of results.

       Arguments:
       - that: The column to zip with `self`.
       - function: A binary function that is applied to corresponding pairs of
         elements of `self` and `that` to produce a value.
       - skip_nothing: controls whether missing values should be passed to the
         `function`. The default value of `True` will skip the rows for which
         the value in either column is missing and automatically append
         `Nothing` to the result table. If set to `False`, every pair of values
         is passed to `function`.

       > Example
         Zip two columns together as pairs.

             import Standard.Examples

             example_zip =
                Examples.integer_column.zip Examples.text_column_1 [_, _]
    zip : Column -> (Any -> Any -> Any) -> Boolean -> Column
    zip self that function skip_nothing=True =
        new_fn = case skip_nothing of
            True ->
                x -> y ->
                    if x.is_nothing then Nothing else
                        if y.is_nothing then Nothing else
                            function x y
            False -> function
        new_name = Naming_Helpers.binary_operation_name "x" self that
        vec = self.to_vector.zip that.to_vector new_fn
        Column.from_vector new_name vec

    ## Returns a new column, containing the same elements as `self`, but with
       the given name.

       Arguments:
       - name: The new name for the column.

       > Example
         Rename a column.

             import Standard.Examples

             example_rename = Examples.integer_column.rename "My Numbers"
    rename : Text -> Column ! Illegal_Argument
    rename self name = Illegal_Argument.handle_java_exception <|
        Column.Value (self.java_column.rename name)

    ## Returns the name of this column.

       > Example
         Get the name of a column.

             import Standard.Examples

             example_name = Examples.text_column_2.name
    name : Text
    name self = self.java_column.getName

    ## Returns the length of this column.

       > Example
         Get the length of a column.

             import Standard.Examples

             example_length = Examples.text_column_2.length
    length : Integer
    length self = self.java_column . getSize

    ## Returns the number of missing items in this column.

       > Example
         Count the number of missing values in a column.

             import Standard.Examples

             example_count_nothing = Examples.text_column_2.count_nothing
    count_nothing : Integer
    count_nothing self = self.java_column.getStorage.countMissing

    ## Returns the number of non-null items in this column.

       > Example
         Count the number of not missing values in a column.

             import Standard.Examples

             example_count = Examples.text_column_2.count
    count : Integer
    count self = self.length - self.count_nothing

    ## Returns the value contained in this column at the given index.

       Arguments:
       - index: The index in the column from which to get the value.

       If the value is an NA then this method returns nothing. If the index is
       not an index in the column it returns an `Index_Out_Of_Bounds`.

       > Example
         Get the first element from a column.

             import Standard.Examples

             example_at = Examples.integer_column.at 0
    at : Integer -> (Any | Nothing) ! Index_Out_Of_Bounds
    at self index =
        valid_index = (index >= 0) && (index < self.length)
        if valid_index.not then Error.throw (Index_Out_Of_Bounds.Error index self.length) else
            storage = self.java_column.getStorage
            if storage.isNa index then Nothing else
                storage.getItem index

    ## UNSTABLE

       Returns a column containing rows of this column.

       Arguments:
       - max_rows: specifies a maximum amount of rows to fetch; if not set, all
         available rows are fetched.
    read : (Nothing | Integer) -> Column
    read self max_rows=Nothing =
        if max_rows.is_nothing then self else self.slice 0 max_rows

    ## Returns a vector containing all the elements in this column.

       > Example
         Get the elements of a column as a vector.

             import Standard.Examples

             example_to_vector = Examples.integer_column.to_vector
    to_vector : Vector
    to_vector self = Vector.from_polyglot_array self.java_column.getStorage.toList

    ## Returns the `Value_Type` associated with that column.

       The value type determines what type of values the column is storing and
       what operations are permitted.
    value_type : Value_Type
    value_type self =
        storage_type = self.java_column.getStorage.getType
        Storage.to_value_type storage_type

    ## PRIVATE
       Converts this column to JS_Object representation.

       > Example
         Get a JavaScript representation of the column.

             import Standard.Examples

             example_to_json = Examples.integer_column.to_js_object
    to_js_object : JS_Object
    to_js_object self =
        name = self.java_column.getName
        storage = self.java_column.getStorage
        storage_proxy = Array_Proxy.new storage.size i-> storage.getItem i
        storage_json = Vector.from_polyglot_array storage_proxy
        JS_Object.from_pairs [["name", name], ["data", storage_json]]

    ## Converts this column into a single-column table.

       > Example
         Convert a column to a table.

             import Standard.Examples

             example_to_table = Examples.integer_column.to_table
    to_table : Table
    to_table self = Table.Value self.java_column.toTable

    ## Returns a Table describing this column's contents.

       The table behaves like `Table.info` - it lists the column name, the count
       of non-null items and the value type.
    info : Table
    info self = self.to_table.info

    ## UNSTABLE

       Sorts the column according to the specified rules.

       Arguments:
       - order: specifies the default sort order for this operation.
       - missing_last: specifies the default placement of missing values when
         compared to non-missing ones. Note that this argument is independent
         from `order`, i.e. missing values will always be sorted according to
         this rule, ignoring the ascending / descending setting.
       - by: function taking two items in this column and returning an
         ordering. If specified, it is used instead of the natural
         ordering of the values.

       > Example
         Sorting a column in ascending order.

             import Standard.Examples

             example_sort = Examples.integer_column.sort

       > Example
         Sorting a column in descending order, placing missing values at the
         top of the resulting column.

             import Standard.Examples

             example_sort =
                 Examples.integer_column.sort Sort_Direction.Descending missing_last=False

       > Example
         Sorting `column` in ascending order, using a custom comparison
         function.

             import Standard.Examples

             example_sort =
                 my_compare a b = Ordering.compare a.abs b.abs
                 Examples.decimal_column.sort by=my_compare
    sort : Sort_Direction -> Boolean -> (Any -> Any -> Ordering) | Nothing -> Column
    sort self order=Sort_Direction.Ascending missing_last=True by=Nothing = case by of
        Nothing ->
            order_bool = case order of
                Sort_Direction.Ascending -> True
                Sort_Direction.Descending -> False
            rule = OrderBuilder.OrderRule.new self.java_column order_bool missing_last
            mask = OrderBuilder.buildOrderMask [rule].to_array
            new_col = self.java_column.applyMask mask
            Column.Value new_col
        _ ->
            wrapped a b = case a of
                Nothing -> if b.is_nothing then Ordering.Equal else if missing_last then Ordering.Greater else Ordering.Less
                _ -> case b of
                    Nothing -> if missing_last then Ordering.Less else Ordering.Greater
                    _ -> by a b
            sorted = self.to_vector.sort order by=wrapped
            Column.from_vector self.name sorted

    ## Creates a new Column with the specified range of rows from the input
       Column.

       Arguments:
       - range: The selection of rows from the table to return.
    take : (Index_Sub_Range | Range | Integer) -> Column
    take self range=(First 1) =
        Index_Sub_Range_Module.take_helper self.length self.at self.slice (slice_ranges self) range

    ## Creates a new Column from the input with the specified range of rows
       removed.

       Arguments:
       - range: The selection of rows from the table to remove.
    drop : (Index_Sub_Range | Range | Integer) -> Column
    drop self range=(First 1) =
        Index_Sub_Range_Module.drop_helper self.length self.at self.slice (slice_ranges self) range

    ## PRIVATE
       Returns a column with a continuous sub-range of rows taken.
    slice : Integer -> Integer -> Column
    slice self start end =
        length = self.length
        offset = Math.max (Math.min start length) 0
        limit = Math.max (Math.min (end - offset) (length - offset)) 0
        Column.Value (self.java_column.slice offset limit)

    ## Returns the first element in the column, if it exists.

       If the column is empty, this method will return a dataflow error
       containing an `Index_Out_Of_Bounds`.

       > Example
         Get the first element of a column.

             import Standard.Examples

             example_first = Examples.integer_column.first
    first : Any ! Index_Out_Of_Bounds
    first self = self.at 0

    ## Returns the last element in the column, if it exists.

       If the column is empty, this method will return a dataflow error
       containing an `Index_Out_Of_Bounds`.

       > Example
         Get the last element of a column.

             import Standard.Examples

             example_last = Examples.integer_column.last
    last : Any ! Index_Out_Of_Bounds
    last self = self.at (self.length - 1)

    ## Returns a column containing the values of `self` column with their order
       reversed.

       > Example
         Reverse the values of a column to produce a new column.

             import Standard.Examples

             example_reverse = Examples.integer_column.reverse
    reverse : Column
    reverse self =
        mask = OrderBuilder.buildReversedMask self.length
        Column.Value (self.java_column.applyMask mask)

    ## Returns a column of numbers, in which every entry denotes how many times
       the value at the given position occured before.

       > Example
         Count duplicate occurences of values in a column.

             import Standard.Examples

             example_duplicate_count = Examples.integer_column.duplicate_count
    duplicate_count : Column
    duplicate_count self = Column.Value self.java_column.duplicateCount

    ## PRIVATE
       Provides a simplified text representation for display in the REPL and errors.
    to_text : Text
    to_text self = "(In-Memory Column "+self.name.to_text+")"

    ## PRIVATE
       Helper for the expression to tell it which functions needs a Vector.
    var_args_functions : Vector
    var_args_functions = ['is_in', 'coalesce', 'min', 'max']

## PRIVATE

   Folds the vectorized operation over the provided column and values. When more
   than one value to is provided, the result is folded with subsequent values.

   Arguments:
   - column: The column to execute the operation over.
   - name: The name of the vectorized operation.
   - fallback_fn: A function used if the vectorized operation isn't available.
   - operands: The vector of operands to apply to the function after `column`.
   - new_name: The name of the column created as the result of this operation.
   - skip_nulls: Specifies if nulls should be skipped. If set to `True`, a null
     value results in null without passing it to the function. If set to
     `False`, the null values are passed as any other value and can have custom
     handling logic.
run_vectorized_many_op : Column -> Text -> (Any -> Any -> Any) -> Vector -> Text|Nothing -> Boolean -> Column
run_vectorized_many_op column name fallback_fn operands new_name=Nothing skip_nulls=False =
    effective_operands = Vector.unify_vector_or_element operands
    effective_new_name = new_name.if_nothing <|
        Naming_Helpers.function_name name [column]+effective_operands
    common_type = Value_Type_Helpers.find_common_type_for_arguments effective_operands
    common_type.if_not_error <|
        problem_builder = MapOperationProblemBuilder.new effective_new_name
        storage_type = resolve_storage_type common_type
        folded = effective_operands.fold column.java_column.getStorage current-> operand->
            case operand of
                _ : Column ->
                    current.zip name fallback_fn operand.java_column.getStorage skip_nulls storage_type problem_builder
                _ ->
                    current.bimap name fallback_fn operand skip_nulls storage_type problem_builder
        result = Column.Value (Java_Column.new effective_new_name folded)
        Problem_Behavior.Report_Warning.attach_problems_after result <|
            Java_Problems.parse_aggregated_problems problem_builder.getProblems

## PRIVATE

   Executes a vectorized binary operation over the provided column.

   Arguments:
   - column: The column to execute the operation over.
   - name: The name of the vectorized operation.
   - fallback_fn: A function used if the vectorized operation isn't available.
   - operand: The operand to apply to the function after `column`.
   - expected_result_type: The expected result type of the operation.
   - skip_nulls: Specifies if nulls should be skipped. If set to `True`, a null
     value results in null without passing it to the function. If set to
     `False`, the null values are passed as any other value and can have custom
     handling logic.
   - new_name: The name of the column created as the result of this operation.
run_vectorized_binary_op : Column -> Text -> (Any -> Any -> Any) -> Any -> Value_Type -> Text|Nothing -> Boolean -> Column
run_vectorized_binary_op column name fallback_fn operand expected_result_type=Nothing new_name=Nothing skip_nulls=True =
    effective_new_name = new_name.if_nothing <|
        Naming_Helpers.binary_operation_name name column operand
    problem_builder = MapOperationProblemBuilder.new column.name
    storage_type = resolve_storage_type expected_result_type
    result = case operand of
        Column.Value col2 ->
            s1 = column.java_column.getStorage
            s2 = col2.getStorage
            rs = s1.zip name fallback_fn s2 skip_nulls storage_type problem_builder
            Column.Value (Java_Column.new effective_new_name rs)
        _ ->
            s1 = column.java_column.getStorage
            rs = s1.bimap name fallback_fn operand skip_nulls storage_type problem_builder
            Column.Value (Java_Column.new effective_new_name rs)
    Problem_Behavior.Report_Warning.attach_problems_after result <|
        Java_Problems.parse_aggregated_problems problem_builder.getProblems

## PRIVATE

   Executes a vectorized binary operation over the provided column.

   Arguments:
   - column: The column to execute the operation over.
   - name: The name of the vectorized operation.
   - fallback_fn: A function used if the vectorized operation isn't available.
     It takes a `MapOperationProblemBuilder` as its first argument.
   - operand: The operand to apply to the function after `column`.
   - expected_result_type: The expected result type of the operation.
   - new_name: The name of the column created as the result of this operation.
   - skip_nulls: Specifies if nulls should be skipped. If set to `True`, a null
     value results in null without passing it to the function. If set to
     `False`, the null values are passed as any other value and can have custom
     handling logic.
run_vectorized_binary_op_with_problem_handling column name fallback_fn operand new_name expected_result_type=Nothing skip_nulls=True =
    problem_builder = MapOperationProblemBuilder.new new_name
    applied_fn = case fallback_fn of
        Nothing -> Nothing
        _ -> fallback_fn problem_builder
    storage_type = resolve_storage_type expected_result_type
    result = case operand of
        Column.Value col2 ->
            s1 = column.java_column.getStorage
            s2 = col2.getStorage
            rs = s1.zip name applied_fn s2 skip_nulls storage_type problem_builder
            Column.Value (Java_Column.new new_name rs)
        _ ->
            s1 = column.java_column.getStorage
            rs = s1.bimap name applied_fn operand skip_nulls storage_type problem_builder
            Column.Value (Java_Column.new new_name rs)
    Problem_Behavior.Report_Warning.attach_problems_after result <|
        Java_Problems.parse_aggregated_problems problem_builder.getProblems

## PRIVATE

   Executes a vectorized unary operation over the provided column.

   Arguments:
   - column: The column to execute the operation over.
   - name: The name of the vectorized operation.
   - fallback_fn: A function used if the vectorized operation isn't available.
   - expected_result_type: The expected result type of the operation.
   - new_name: The name of the column created as the result of this operation.
   - on_missing: The value to return for missing cells. Ideally it should be
     replaced with a `skip_nulls` parameter like elsewhere, but currently that
     is not possible due to a bug: https://github.com/oracle/graal/issues/4741
run_vectorized_unary_op : Column -> Text -> (Any -> Any) -> Value_Type -> Text -> Any -> Column
run_vectorized_unary_op column name fallback_fn new_name expected_result_type=Nothing on_missing=Nothing =
    problem_builder = MapOperationProblemBuilder.new column.name
    s = column.java_column.getStorage
    storage_type = resolve_storage_type expected_result_type
    rs = s.map name fallback_fn on_missing storage_type problem_builder
    result = Column.Value (Java_Column.new new_name rs)
    Problem_Behavior.Report_Warning.attach_problems_after result <|
        Java_Problems.parse_aggregated_problems problem_builder.getProblems

## PRIVATE

   Gets a textual representation of the item at position `ix` in `column`.

   Arguments:
   - column: The column to get the item from.
   - ix: The index in the column from which to get the item.
get_item_string : Column -> Integer -> Text
get_item_string column ix =
    item = column.getItem ix
    ## TODO This special handling of `Text` is because `"a".to_text` evaluates
       to "'a'" and not just "a". The code can be simplified once the following
       task is implemented:
       https://www.pivotaltracker.com/story/show/181499256
    case item of
        _ : Text -> normalize_string_for_display item
        _ -> item.pretty

## PRIVATE
   Ensures that the string can be safely displayed in a terminal.

   If the string contains special characters, it will be wrapped in quotes and
   the characters escaped. Otherwise, the string is returned as-is.
normalize_string_for_display string =
    prettified = string.pretty
    just_quoted = "'" + string + "'"
    if prettified == just_quoted then string else prettified

## PRIVATE
   A helper to create a new table consisting of slices of the original table.
slice_ranges column ranges =
    normalized = Index_Sub_Range_Module.normalize_ranges ranges
    Column.Value (column.java_column.slice normalized.to_array)

## PRIVATE
   Creates a storage builder suitable for building a column for the provided
   column type.

   If a value type is not supported, its closest match is selected and
   an `Inexact_Type_Coercion` problem is reported.
make_storage_builder_for_type value_type on_problems initial_size=128 =
    closest_storage_type = Storage.from_value_type value_type on_problems
    Storage.make_builder closest_storage_type initial_size

## PRIVATE
   Helper for case case_sensitivity based text operations
run_vectorized_binary_case_text_op : Column -> Text -> (Text | Column) -> Case_Sensitivity -> (Text -> Text -> Any) -> Text -> Column
run_vectorized_binary_case_text_op left op other case_sensitivity fallback new_name =
    with_checks ~action =
        Value_Type.expect_text left <|
            Value_Type.expect_text other <|
                action
    result_type = Value_Type.Boolean
    with_checks <| case case_sensitivity of
        Case_Sensitivity.Default -> run_vectorized_binary_op left op fallback other result_type new_name
        Case_Sensitivity.Sensitive -> run_vectorized_binary_op left op fallback other result_type new_name
        Case_Sensitivity.Insensitive _ ->
            ## TODO currently this always runs the fallback which is slow due to the
               cost of Java-to-Enso calls. We want to have a vectorized
               implementation, but we need to extend the architecture to allow
               passing the locale to it.
               See: https://www.pivotaltracker.com/n/projects/2539304/stories/184093260
            run_vectorized_binary_op left Nothing fallback other result_type new_name

## PRIVATE
simple_unary_op column op_name =
    new_name = Naming_Helpers.function_name op_name [column]
    run_vectorized_unary_op column op_name (_ -> Error.throw (Illegal_State.Error "Missing vectorized implementation for `"+op_name+"`. This is a bug in the Table library.")) new_name

## PRIVATE
   Converts the value type to a storage type, passing `Nothing` through.

   Sometimes we do not specify the storage type as it should be inferred by the
   vectorized operation, in which case it can be `Nothing`.
resolve_storage_type value_type = case value_type of
    Nothing -> Nothing
    _ -> Storage.from_value_type_strict value_type

## PRIVATE
wrap_text_argument_as_value_provider val =
    Value_Type.expect_text val <| case val of
        text : Text -> (_-> text)
        col : Column ->
            storage = col.java_column.getStorage
            i-> storage.getItemBoxed i
