from Standard.Base import all
import Standard.Base.Data.Java_Json.Jackson_Object

import project.Data.Conversions.Convertible_To_Columns.Convertible_To_Columns

## PRIVATE
   A special type that is used to define what types can be converted to a table
   as a sequence of rows, using `Table.from_objects`.

   It defines a `length` determining how many rows the table will have,
   and a `getter` function providing values for each row.

   To 'register' a type, a conversion `Convertible_To_Rows.from (that:Type)`
   must be defined.
type Convertible_To_Rows
    ## PRIVATE
       Arguments:
       - length: The number of rows in the table.
       - getter: Get the value for a specified row.
       - columns: The names for the columns when object is expanded.
         These will be added to the name of the input column.
    Value length:Integer (getter : Integer->Any) (columns:Vector=["Value"])

    ## PRIVATE
       Return the iterator values as a `Vector`.
    to_vector : Vector Any
    to_vector self = 0.up_to self.length . map self.getter

## PRIVATE
Convertible_To_Rows.from that:Vector = Convertible_To_Rows.Value that.length that.get

## PRIVATE
Convertible_To_Rows.from that:Array = Convertible_To_Rows.Value that.length that.get

## PRIVATE
Convertible_To_Rows.from that:List = Convertible_To_Rows.from that.to_vector

## PRIVATE
Convertible_To_Rows.from that:Range = Convertible_To_Rows.Value that.length that.get

## PRIVATE
Convertible_To_Rows.from that:Pair = Convertible_To_Rows.Value that.length that.get

## PRIVATE
Convertible_To_Rows.from that:Date_Range = Convertible_To_Rows.Value that.length that.get

## PRIVATE
Convertible_To_Rows.from that:Map =
    vals = that.to_vector.map p-> Key_Value.Pair p.first p.second
    Convertible_To_Rows.Value vals.length vals.get ["Key", "Value"]

## PRIVATE
Convertible_To_Rows.from that:JS_Object =
    vals = that.map_with_key k->v-> Key_Value.Pair k v
    Convertible_To_Rows.Value vals.length vals.get ["Key", "Value"]

## PRIVATE
Convertible_To_Rows.from that:Jackson_Object =
    vals = that.map_with_key k->v-> Key_Value.Pair k v
    Convertible_To_Rows.Value vals.length vals.get ["Key", "Value"]

## PRIVATE
Convertible_To_Rows.from (that:Any) =
    Convertible_To_Rows.Value 1 (n-> if n==0 then that else Nothing)

## PRIVATE
type Key_Value
    ## PRIVATE
       Arguments:
       - key: The key of the pair.
       - value: The value of the pair.
    Pair key:Any value:Any

    ## PRIVATE
    at self idx = self.get idx

    ## PRIVATE
       Return the key of the pair.
    get self idx = case idx of
        0 -> self.key
        1 -> self.value
        "Key" -> self.key
        "Value" -> self.value
        _ -> Nothing

    ## PRIVATE
    is_empty self = False

    ## PRIVATE
    length self = 2

## PRIVATE
Convertible_To_Columns.from (that:Key_Value) =
    Convertible_To_Columns.Value ["Key", "Value"] (k-> if k == "Key" then that.key else that.value)