from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Metadata.Display
from Standard.Base.Metadata.Widget import Vector_Editor
from Standard.Base.Widget_Helpers import make_date_format_selector, make_date_time_format_selector, make_time_format_selector

import project.Data.Type.Storage
import project.Internal.Java_Problems
import project.Internal.Parse_Values_Helper
import project.Internal.Widget_Helpers
from project.Data.Type.Value_Type import Auto, Bits, Value_Type

polyglot java import java.lang.Exception as Java_Exception
polyglot java import java.lang.IllegalArgumentException
polyglot java import org.enso.table.formatting.AnyObjectFormatter
polyglot java import org.enso.table.formatting.BooleanFormatter
polyglot java import org.enso.table.formatting.DateFormatter
polyglot java import org.enso.table.formatting.DateTimeFormatter
polyglot java import org.enso.table.formatting.DecimalFormatter
polyglot java import org.enso.table.formatting.IntegerFormatter
polyglot java import org.enso.table.formatting.TextFormatter
polyglot java import org.enso.table.formatting.TimeFormatter
polyglot java import org.enso.table.parsing.BooleanParser
polyglot java import org.enso.table.parsing.DateParser
polyglot java import org.enso.table.parsing.DateTimeParser
polyglot java import org.enso.table.parsing.IdentityParser
polyglot java import org.enso.table.parsing.NumberParser
polyglot java import org.enso.table.parsing.TimeOfDayParser
polyglot java import org.enso.table.parsing.TypeInferringParser
polyglot java import org.enso.table.parsing.WhitespaceStrippingParser

type Data_Formatter
    ## Specifies options for reading text data in a table to more specific types and
       serializing them back.

       For date and time formats, see `Date_Time_Formatter`.

       Arguments:
       - trim_values: Trim whitespace before parsing.
       - allow_leading_zeros: Specifies how to treat numeric values starting
         with leading zeroes when detecting the type of a column automatically.
         If set to `False` (the default), then if found values will be left as
         text. If the type is a number then leading zeroes are accepted
         regardless of this setting.
       - decimal_point: The character used to separate the integer part from the
         fractional part of a number. If `Auto` then the format for numbers will
         be guessed automatically. Can be changed for example to ',' to allow
         for European format.
       - thousand_separator: A separator that can be used to separate groups of
         digits in numbers (must be in groups of 3 digits).
       - allow_exponential_notation: Specifies if exponential notation is
         allowed.
       - datetime_formats: Expected datetime formats.
       - date_formats: Expected date formats.
       - time_formats: Expected time formats.
       - true_values: Values representing True.
       - false_values: Values representing False.
    @datetime_formats (make_vector_widget make_date_time_format_selector)
    @date_formats (make_vector_widget make_date_format_selector)
    @time_formats (make_vector_widget make_time_format_selector)
    Value trim_values:Boolean=True allow_leading_zeros:Boolean=False decimal_point:Text|Auto=Auto thousand_separator:Text='' allow_exponential_notation:Boolean=False datetime_formats:(Vector Date_Time_Formatter)=[Date_Time_Formatter.default_enso_zoned_date_time] date_formats:(Vector Date_Time_Formatter)=[Date_Time_Formatter.iso_date] time_formats:(Vector Text)=[Date_Time_Formatter.iso_time] true_values:(Vector Text)=["True","true","TRUE"] false_values:(Vector Text)=["False","false","FALSE"]

    ## PRIVATE
       ADVANCED
       Parse a Text into a value.

       Arguments:
       - text: Text value to parse.
       - type: The expected Enso type to parse the value into. If set to
         `Auto`, the type will be inferred automatically.
       - on_problems: Specifies the behavior when a problem occurs.
         By default, a warning is issued, but the operation proceeds.
         If set to `Report_Error`, the operation fails with a dataflow error.
         If set to `Ignore`, the operation proceeds without errors or warnings.
    @type Widget_Helpers.parse_type_selector
    parse : Text -> (Value_Type | Auto) -> Problem_Behavior -> Any
    parse self text type=Auto on_problems=Problem_Behavior.Report_Warning =
        parser = self.make_value_type_parser type
        Java_Problems.unpack_value_with_aggregated_problems on_problems problem_mapping=(Parse_Values_Helper.translate_parsing_problem type) <|
            parser.parseIndependentValue text

    ## PRIVATE
       ADVANCED
       Format a value into a Text.

       Arguments:
       - value: Value to format.
    format : Any -> Text
    format self value =
        formatter = self.make_auto_formatter
        formatter.format value

    ## Create a clone of self with specified number formatting options.

       Arguments:
       - decimal_point: The character used to separate the integer part from the fractional part of a number.
       - thousand_separator: A separator that can be used to separate groups of digits in numbers.
       - allow_leading_zeros: Specifies if values starting with leading zeroes should be treated as numbers.
       - allow_exponential_notation: Allow parsing of exponential notation format.
    with_number_formatting : Text -> Text -> Boolean -> Boolean -> Data_Formatter
    with_number_formatting self (decimal_point=self.decimal_point) (thousand_separator=self.thousand_separator) (allow_leading_zeros=self.allow_leading_zeros) (allow_exponential_notation=self.allow_exponential_notation) =
        self.clone decimal_point=decimal_point thousand_separator=thousand_separator allow_leading_zeros=allow_leading_zeros allow_exponential_notation=allow_exponential_notation

    ## Specify values for Date/Time parsing.

       A plain text pattern can be provided and it will be automatically
       converted into a `Date_Time_Formatter` using simple pattern parsing
       rules. See `Date_Time_Formatter` for available options.

       Arguments:
       - datetime_formats: Expected datetime formats.
       - date_formats: Expected date formats.
       - time_formats: Expected time formats.
    @datetime_formats (make_vector_widget make_date_time_format_selector)
    @date_formats (make_vector_widget make_date_format_selector)
    @time_formats (make_vector_widget make_time_format_selector)
    with_datetime_formats : (Vector Date_Time_Formatter | Date_Time_Formatter) -> (Vector Date_Time_Formatter | Date_Time_Formatter) -> (Vector Date_Time_Formatter | Date_Time_Formatter) -> Data_Formatter
    with_datetime_formats self datetime_formats:(Vector | Date_Time_Formatter)=self.datetime_formats date_formats:(Vector | Date_Time_Formatter)=self.date_formats time_formats:(Vector | Date_Time_Formatter)=self.time_formats =
        convert_formats formats =
            vector = case formats of
                v : Vector -> v
                singleton -> [singleton]
            converted = vector.map elem->
                ## Ensure the element is a `Date_Time_Formatter` or is converted to it.
                   We need to convert _each_ element - we cannot perform a 'bulk' conversion like `vector : Vector Date_Time_Formatter` because of erasure.
                checked = elem : Date_Time_Formatter
                # Temporary variable is a workaround for https://github.com/enso-org/enso/issues/7841
                checked
            converted

        datetime_vector = convert_formats datetime_formats
        date_vector = convert_formats date_formats
        time_vector = convert_formats time_formats
        self.clone datetime_formats=datetime_vector date_formats=date_vector time_formats=time_vector

    ## Specify values for Boolean parsing.

       Arguments:
       - true_values: Values representing True.
       - false_values: Values representing False.
    with_boolean_values : Text|(Vector Text) -> Text|(Vector Text) -> Data_Formatter
    with_boolean_values self true_values false_values =
        true_vector = wrap_text_in_vector true_values
        false_vector = wrap_text_in_vector false_values
        self.clone true_values=true_vector false_values=false_vector

    ## Create a clone of self with a changed format string for a particular
       datatype.

       It is mostly a convenience function to easily specify a datatype format.

       Arguments:
       - type: The value type for which to change the format. The format can be
         changed only for `Date_Time`, `Date`, `Time` and `Boolean` value types.
       - format: The new format string to set. For dates, it is the usual date
         format notation, and for booleans it should be two values that
         represent true and false, separated by a `|`.
    with_format : Value_Type | Auto -> (Text | Date_Time_Formatter) -> Data_Formatter
    with_format self type format = case type of
        Value_Type.Date -> self.with_datetime_formats date_formats=[format]
        Value_Type.Time -> self.with_datetime_formats time_formats=[format]
        Value_Type.Date_Time _ ->
            self.with_datetime_formats datetime_formats=[format]
        Value_Type.Boolean ->
            formats = (format : Text).split "|"
            if formats.length != 2 then Error.throw (Illegal_Argument.Error "The `format` for Booleans must be a string with two values separated by `|`, for example: 'Yes|No'.") else
                self.with_boolean_values true_values=[formats.at 0] false_values=[formats.at 1]
        Auto ->
            Error.throw (Illegal_Argument.Error "Cannot specify a `format` with type `Auto`.")
        _ : Value_Type ->
            Error.throw (Illegal_Argument.Error "Cannot specify a `format` for type `"+type.to_text+"`.")

    ## PRIVATE
       Clone the instance with some properties overridden.
    clone : Boolean -> Boolean -> Text -> Text -> Boolean -> Vector Text -> Vector Text -> Vector Text -> Vector Text -> Vector Text -> Data_Formatter
    clone self (trim_values=self.trim_values) (allow_leading_zeros=self.allow_leading_zeros) (decimal_point=self.decimal_point) (thousand_separator=self.thousand_separator) (allow_exponential_notation=self.allow_exponential_notation) (datetime_formats=self.datetime_formats) (date_formats=self.date_formats) (time_formats=self.time_formats) (true_values=self.true_values) (false_values=self.false_values) =
        Data_Formatter.Value trim_values=trim_values allow_leading_zeros=allow_leading_zeros decimal_point=decimal_point thousand_separator=thousand_separator allow_exponential_notation=allow_exponential_notation datetime_formats=datetime_formats date_formats=date_formats time_formats=time_formats true_values=true_values false_values=false_values

    ## PRIVATE
    get_thousand_separator self =
        if self.thousand_separator.is_empty then Nothing else self.thousand_separator

    ## PRIVATE
    wrap_base_parser self base_parser =
        if self.trim_values.not then base_parser else
            WhitespaceStrippingParser.new base_parser

    ## PRIVATE
    make_integer_parser self auto_mode=False target_type=Value_Type.Integer =
        separator = if self.thousand_separator.is_empty then Nothing else self.thousand_separator
        storage_type = Storage.from_value_type_strict target_type
        NumberParser.createIntegerParser storage_type auto_mode.not (auto_mode.not || self.allow_leading_zeros) self.trim_values separator

    ## PRIVATE
    make_decimal_parser self auto_mode=False =
        if self.decimal_point == Auto then NumberParser.createAutoDecimalParser auto_mode.not (auto_mode.not || self.allow_leading_zeros) self.trim_values self.allow_exponential_notation else
            NumberParser.createFixedDecimalParser auto_mode.not (auto_mode.not || self.allow_leading_zeros) self.trim_values self.allow_exponential_notation self.thousand_separator self.decimal_point

    ## PRIVATE
    make_boolean_parser self = self.wrap_base_parser <|
        BooleanParser.new self.true_values self.false_values

    ## PRIVATE
    make_date_parser self = self.wrap_base_parser <|
        Panic.catch Java_Exception handler=(caught_panic-> Error.throw (Illegal_Argument.Error caught_panic.payload.getMessage)) <|
            DateParser.new (self.date_formats.map .get_java_formatter_for_parsing)

    ## PRIVATE
    make_date_time_parser self = self.wrap_base_parser <|
        Panic.catch Java_Exception handler=(caught_panic-> Error.throw (Illegal_Argument.Error caught_panic.payload.getMessage)) <|
            DateTimeParser.new (self.datetime_formats.map .get_java_formatter_for_parsing)

    ## PRIVATE
    make_time_of_day_parser self = self.wrap_base_parser <|
        Panic.catch Java_Exception handler=(caught_panic-> Error.throw (Illegal_Argument.Error caught_panic.payload.getMessage)) <|
            TimeOfDayParser.new (self.time_formats.map .get_java_formatter_for_parsing)

    ## PRIVATE
    make_identity_parser self = self.wrap_base_parser IdentityParser.new

    ## PRIVATE
    make_value_type_parser self value_type = case value_type of
        Value_Type.Integer _ ->
            self.make_integer_parser target_type=value_type
        # TODO once we implement #6109 we can support 32-bit floats
        Value_Type.Float Bits.Bits_64   -> self.make_decimal_parser
        Value_Type.Boolean              -> self.make_boolean_parser
        Value_Type.Date                 -> self.make_date_parser
        Value_Type.Date_Time True       -> self.make_date_time_parser
        Value_Type.Time                 -> self.make_time_of_day_parser
        Auto -> self.make_auto_parser
        _ ->
            Error.throw (Illegal_Argument.Error "Unsupported value type: "+value_type.to_display_text)

    ## PRIVATE
    get_specific_type_parsers self =
        [self.make_integer_parser True, self.make_decimal_parser True, self.make_date_time_parser, self.make_date_parser, self.make_time_of_day_parser, self.make_boolean_parser]

    ## PRIVATE
    make_auto_parser self =
        fallback_parser = self.make_identity_parser
        TypeInferringParser.new self.get_specific_type_parsers fallback_parser

    ## PRIVATE
    make_integer_formatter self =
        IntegerFormatter.new self.get_thousand_separator

    ## PRIVATE
    make_decimal_formatter self =
        decimal_point = if self.decimal_point == Auto then '.'  else self.decimal_point
        DecimalFormatter.new self.get_thousand_separator decimal_point

    ## PRIVATE
    make_date_formatter self =
        if self.date_formats.is_empty then Error.throw (Illegal_Argument.Error "Formatting dates requires at least one entry in the `date_formats` parameter") else
            Panic.catch Java_Exception handler=(caught_panic-> Error.throw (Illegal_Argument.Error caught_panic.payload.getMessage)) <|
                DateFormatter.new self.date_formats.first.underlying

    ## PRIVATE
    make_time_of_day_formatter self =
        if self.time_formats.is_empty then Error.throw (Illegal_Argument.Error "Formatting times requires at least one entry in the `time_formats` parameter") else
            Panic.catch Java_Exception handler=(caught_panic-> Error.throw (Illegal_Argument.Error caught_panic.payload.getMessage)) <|
                TimeFormatter.new self.time_formats.first.underlying

    ## PRIVATE
    make_date_time_formatter self =
        if self.datetime_formats.is_empty then Error.throw (Illegal_Argument.Error "Formatting date-times requires at least one entry in the `datetime_formats` parameter") else
            Panic.catch Java_Exception handler=(caught_panic-> Error.throw (Illegal_Argument.Error caught_panic.payload.getMessage)) <|
                DateTimeFormatter.new self.datetime_formats.first.underlying

    ## PRIVATE
    make_boolean_formatter self =
        if self.true_values.is_empty then Error.throw (Illegal_Argument.Error "Formatting booleans requires at least one entry in the `true_values` parameter") else
            if self.false_values.is_empty then Error.throw (Illegal_Argument.Error "Formatting booleans requires at least one entry in the `false_values` parameter") else
                BooleanFormatter.new self.true_values.first self.false_values.first

    ## PRIVATE
    make_text_formatter self =
        TextFormatter.new

    ## PRIVATE
    get_specific_type_formatters self =
        [self.make_integer_formatter, self.make_decimal_formatter, self.make_boolean_formatter, self.make_date_time_formatter, self.make_date_formatter, self.make_time_of_day_formatter, self.make_text_formatter]

    ## PRIVATE
    make_auto_formatter self =
        # TODO The panic rethrow+recover is a workaround for the vector error propagation bug.
        formatters = Panic.recover Illegal_Argument (self.get_specific_type_formatters.map Panic.rethrow)
        AnyObjectFormatter.new formatters

    ## PRIVATE
    make_formatter_for_column_type self (column_type : Value_Type) = case column_type of
        Value_Type.Char _ _ -> self.make_text_formatter
        Value_Type.Integer _ -> self.make_integer_formatter
        Value_Type.Float _ -> self.make_decimal_formatter
        Value_Type.Boolean -> self.make_boolean_formatter
        Value_Type.Date -> self.make_date_formatter
        Value_Type.Time -> self.make_time_of_day_formatter
        Value_Type.Date_Time _ -> self.make_date_time_formatter
        _ -> self.make_auto_formatter

## PRIVATE
   Utility function to convert single text value to a vector
wrap_text_in_vector v = case v of
    _ : Text -> [v]
    _ -> v

## PRIVATE
make_vector_widget single_choice_widget display=Display.Always =
    Vector_Editor item_editor=single_choice_widget item_default=single_choice_widget.values.first.value display=display
