from Standard.Base import all
import Standard.Base.Metadata.Display
import Standard.Base.Metadata.Widget
from Standard.Base.Metadata.Choice import Option
from Standard.Base.Metadata.Widget import Single_Choice

import project.Data.Column_Ref.Column_Ref
import project.Extensions.Table_Ref.Table_Ref
import project.Internal.Widget_Helpers
from project.Internal.Filter_Condition_Helpers import make_filter_column

## Defines a column operation generally acting on each row producing a new
   column.
type Column_Operation
    ## Add two values/columns.
    Add (input : Column_Ref|Number|Text) (rhs : Column_Ref|Number|Text)

    ## Subtract two values/columns.
    Subtract (input : Column_Ref|Number) (rhs : Column_Ref|Number)

    ## Multiply two values/columns.
    Multiply (input : Column_Ref|Number) (rhs : Column_Ref|Number)

    ## Divide a fixed value or column by another value or column.
    Divide (input : Column_Ref|Number) (rhs : Column_Ref|Number)

    ## Compute the remainder of a fixed value or column divided by another
       value or column.
    Mod (input : Column_Ref|Number) (rhs : Column_Ref|Number)

    ## Raise a fixed value or column to the power of another value or column.
    Power (input : Column_Ref|Number) (rhs : Column_Ref|Number)

    ## Rounds values in the column to the specified precision.
    Round (input : Column_Ref|Number) (precision:Integer = 0) (use_bankers:Boolean = False)

    ## Rounds values in the column up to the nearest integer.
    Ceil (input : Column_Ref|Number)

    ## Rounds values in the column down to the nearest integer.
    Floor (input : Column_Ref|Number)

    ## Truncates the fractional part of values in the column.
       If a Date_Time, returns the Date.
    Truncate (input : Column_Ref|Number|Date_Time)

    ## Returns the minimum value of two columns.
    Min (input : Column_Ref|Any) (rhs : Column_Ref|Any)

    ## Returns the maximum value of two columns.
    Max (input : Column_Ref|Any) (rhs : Column_Ref|Any)

    ## Adds a period to a date/time column.
    Date_Add (input : Column_Ref|Date_Time|Date|Time_Of_Day) (length : Column_Ref|Integer) (period : Date_Period|Time_Period = Date_Period.Day)

    ## Returns part of a date/time column.
    Date_Part (input : Column_Ref|Date_Time|Date|Time_Of_Day) (period : Date_Period|Time_Period)

    ## Returns the difference between two date/time columns.
    Date_Diff (input : Column_Ref|Date_Time|Date|Time_Of_Day) (end : Column_Ref|Date_Time|Date|Time_Of_Day) (period:Date_Period|Time_Period = Date_Period.Day)

    ## Negate a boolean column.
    Not (input : Column_Ref|Boolean)

    ## Boolean AND on two boolean columns.
    And (input : Column_Ref|Boolean) (rhs : Column_Ref|Boolean)

    ## Boolean OR on two boolean columns.
    Or (input : Column_Ref|Boolean) (rhs : Column_Ref|Boolean)

    ## If input meets a condition return true value, otherwise false value.

       The `true_value` and `false_value` can be either a constant or a column.
    If (input : Column_Ref|Any) (condition:Filter_Condition) (true_value:Column_Ref|Any = True) (false_value:Column_Ref|Any = False)

    ## Removes the specified characters, by default any whitespace, from the
       start, the end, or both ends of the input.
    Trim (input : Column_Ref|Text) (where:Location = Location.Both) (what:Text|Column_Ref = "")

    ## PRIVATE
       Interprets the `Column_Operation` as operation on columns of a provided
       table, resolving the column references.
       It creates a new column instance which can be added to the table.
    evaluate : Table_Ref -> Boolean -> Problem_Behavior -> Any
    evaluate self table:Table_Ref use_input_name:Boolean on_problems:Problem_Behavior =
        input_column = table.resolve_as_column self.input
        derived = case self of
            Column_Operation.Add _ rhs      -> input_column + (table.resolve rhs)
            Column_Operation.Subtract _ rhs -> input_column - (table.resolve rhs)
            Column_Operation.Multiply _ rhs -> input_column * (table.resolve rhs)
            Column_Operation.Divide _ rhs   -> input_column / (table.resolve rhs)
            Column_Operation.Mod _ rhs      -> input_column % (table.resolve rhs)
            Column_Operation.Power _ rhs    -> input_column ^ (table.resolve rhs)

            Column_Operation.Round _ precision use_bankers ->
                input_column.round precision use_bankers
            Column_Operation.Ceil _     -> input_column.ceil
            Column_Operation.Floor _    -> input_column.floor
            Column_Operation.Truncate _ -> input_column.truncate

            Column_Operation.Min _ rhs -> input_column.min (table.resolve rhs)
            Column_Operation.Max _ rhs -> input_column.max (table.resolve rhs)

            Column_Operation.Date_Add _ length period ->
                input_column.date_add (table.resolve length) period
            Column_Operation.Date_Part _ period ->
                input_column.date_part period
            Column_Operation.Date_Diff _ end period ->
                input_column.date_diff (table.resolve end) period

            Column_Operation.Not _     -> input_column.not
            Column_Operation.And _ rhs -> input_column && (table.resolve rhs)
            Column_Operation.Or _ rhs  -> input_column || (table.resolve rhs)

            Column_Operation.If _ condition true_value false_value ->
                condition_column =  make_filter_column input_column (table.resolve_condition condition) on_problems
                condition_column.iif (table.resolve true_value) (table.resolve false_value)

            Column_Operation.Trim _ where what ->
                input_column.trim where (table.resolve what)
        if use_input_name then derived.rename input_column.name else derived

    ## PRIVATE
       Create a widget for operation
    default_widget : Table_Ref -> Display -> Widget
    default_widget table:Table_Ref display=Display.Always =
        col_refs = Widget_Helpers.make_column_ref_by_name_selector table
        filter_cond = Widget_Helpers.make_filter_condition_selector table
        builder = Vector.new_builder
        fqn = Meta.get_qualified_type_name Column_Operation
        builder.append (Option "add" fqn+".Add" [["input", col_refs], ["rhs", col_refs]])
        builder.append (Option "subtract" fqn+".Subtract" [["input", col_refs], ["rhs", col_refs]])
        builder.append (Option "multiply" fqn+".Multiply" [["input", col_refs], ["rhs", col_refs]])
        builder.append (Option "divide" fqn+".Divide" [["input", col_refs], ["rhs", col_refs]])
        builder.append (Option "mod" fqn+".Mod" [["input", col_refs], ["rhs", col_refs]])
        builder.append (Option "power" fqn+".Power" [["input", col_refs], ["rhs", col_refs]])
        builder.append (Option "round" fqn+".Round" [["input", col_refs]])
        builder.append (Option "ceil" fqn+".Ceil" [["input", col_refs]])
        builder.append (Option "floor" fqn+".Floor" [["input", col_refs]])
        builder.append (Option "truncate" fqn+".Truncate" [["input", col_refs]])
        builder.append (Option "min" fqn+".Min" [["input", col_refs], ["rhs", col_refs]])
        builder.append (Option "max" fqn+".Max" [["input", col_refs], ["rhs", col_refs]])
        builder.append (Option "date add" fqn+".Date_Add" [["input", col_refs], ["length", col_refs]])
        builder.append (Option "date part" fqn+".Date_Part" [["input", col_refs]])
        builder.append (Option "date diff" fqn+".Date_Diff" [["start", col_refs], ["end", col_refs]])
        builder.append (Option "not" fqn+".Not" [["input", col_refs]])
        builder.append (Option "and" fqn+".And" [["input", col_refs], ["rhs", col_refs]])
        builder.append (Option "or" fqn+".Or" [["input", col_refs], ["rhs", col_refs]])
        builder.append (Option "if" fqn+".If" [["input", col_refs], ["condition", filter_cond], ["true_value", col_refs], ["false_value", col_refs]])
        builder.append (Option "trim" fqn+".Trim" [["input", col_refs], ["what", col_refs]])
        Single_Choice builder.to_vector display=display
