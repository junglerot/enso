from Standard.Base import all

## Specifies a selection of columns from the table on which an operation is
   going to be performed.
type Column_Selector

    ## Selects columns based on their names.

       The `matcher` can be used to specify if the names should be matched
       exactly or should be treated as regular expressions. It also allows to
       specify if the matching should be case-sensitive.
    By_Name (names : Vector Text) (matcher : Matcher = Text_Matcher.Case_Sensitive)

    ## Selects columns by their index.

       The index of the first column in the table is 0. If the provided index is
       negative, it counts from the end of the table (e.g. -1 refers to the last
       column in the table).
    By_Index (indexes : Vector Integer)

    ## Selects columns having exactly the same names as the columns provided in
       the input.

       The input columns do not necessarily have to come from the same table, so
       this approach can be used to match columns with the same names as a set
       of columns of some other table, for example, when preparing for a join.
    By_Column (columns : Vector Column)

    ## ALIAS dropna
       ALIAS drop_missing_columns
       Select columns which are either all blank or contain blank values.

       Arguments:
       - when_any: By default, only columns consisting of all blank cells are
         selected. If set to `True`, columns containing at least one blank value
         will be selected too. If there are no rows, the column is treated as
         blank regardless of this argument.
       - treat_nans_as_blank: If `True`, then `Number.nan` is considered as
         blank.

       ? Blank values
         Blank values are `Nothing`, `""` and depending on setting `Number.nan`.

       > Example
         Remove completely blank columns from a table.

             table.remove_columns Column_Selector.Blank_Columns
    Blank_Columns when_any:Boolean=False treat_nans_as_blank:Boolean=False
