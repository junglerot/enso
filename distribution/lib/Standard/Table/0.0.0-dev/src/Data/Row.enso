from Standard.Base import all
import Standard.Base.Data.Array_Proxy.Array_Proxy

import project.Data.Table.Table
import project.Internal.Widget_Helpers

## Represents a single row of some in-memory Table.
type Row
    ## PRIVATE
    Value (table:Table) (index:Integer)

    ## GROUP Standard.Base.Metadata
       Gets the set of column column_names
    column_names : Vector Text
    column_names self = self.table.column_names

    ## GROUP Standard.Base.Metadata
       Gets the number of columns in the table.
    length : Integer
    length self = self.table.columns.length

    ## GROUP Standard.Base.Selections
       Gets the value of the specified column.

       Arguments:
       - column: The name or index of the column being looked up.
    @column (self -> Widget_Helpers.make_column_name_selector self.table)
    at : (Integer | Text) -> Any
    at self column = self.table.at column . at self.index

    ## Gets the value of the specified column.

       Arguments:
       - column: The name or index of the column being looked up.
       - if_missing: The value to use if the column isn't present.
    @column (self -> Widget_Helpers.make_column_name_selector self.table)
    get : (Integer | Text) -> Any -> Any
    get self column ~if_missing=Nothing =
        table_column = self.table.get column
        case table_column of
            Nothing -> if_missing
            _ -> table_column.at self.index

    ## GROUP Standard.Base.Conversions
       Gets the row as a Vector.
    to_vector : Vector
    to_vector self = Vector.from_polyglot_array (Array_Proxy.from_proxy_object self)

    ## GROUP Standard.Base.Conversions
       Gets the row as a Map.
    to_map : Map
    to_map self =
        pairs = self.table.column_names.map n-> [n, self.get n]
        Map.from_vector pairs

    ## PRIVATE
       Converts this row into a JS_Object.
    to_js_object : JS_Object
    to_js_object self =
        pairs = self.table.column_names.map n-> [n, self.get n]
        JS_Object.from_pairs pairs
