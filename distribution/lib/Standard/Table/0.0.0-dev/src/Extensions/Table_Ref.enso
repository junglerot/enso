from Standard.Base import all
import Standard.Base.Data.Vector.No_Wrap
import Standard.Base.Errors.Common.Index_Out_Of_Bounds
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

import project.Data.Column_Ref.Column_Ref
import project.Data.Expression.Expression_Error
import project.Data.Set_Mode.Set_Mode
import project.Data.Table.Table
from project.Errors import Existing_Column, Missing_Column, No_Such_Column

## PRIVATE
   A helper type allowing to resolve column references in a context of an underlying table.
type Table_Ref
    ## PRIVATE
    Value underlying

    ## PRIVATE
       Get a column.
       Column must implement all the expected calculations.
       This returns a Column, but the type is not known statically because it
       may be an in-memory or Database column.
    at : Text | Integer -> Any ! No_Such_Column | Index_Out_Of_Bounds
    at self selector=0 = self.underlying.at selector

    ## PRIVATE
       Resolve a Column_Ref to a Column, keeping any other values as-is.
    resolve : Any -> Any ! No_Such_Column | Index_Out_Of_Bounds
    resolve self value = case value of
        Column_Ref.Name name -> self.at name
        Column_Ref.Index index -> self.at index
        _ -> value

    ## PRIVATE
       Resolve a Column_Ref to a Column, converting any other values into
       a constant column.
    resolve_as_column : Any -> Any ! No_Such_Column | Index_Out_Of_Bounds
    resolve_as_column self value = case value of
        Column_Ref.Name name -> self.at name
        Column_Ref.Index index -> self.at index
        _ -> self.underlying.make_constant_column value

    ## PRIVATE
       Transforms a condition, changing any Column_Ref instances into Column instances resolved in this table.
    resolve_condition : Filter_Condition -> Filter_Condition
    resolve_condition self condition = case condition of
        Filter_Condition.Equal value -> Filter_Condition.Equal (self.resolve value)
        Filter_Condition.Not_Equal value -> Filter_Condition.Not_Equal (self.resolve value)
        Filter_Condition.Less value -> Filter_Condition.Less (self.resolve value)
        Filter_Condition.Equal_Or_Less value -> Filter_Condition.Equal_Or_Less (self.resolve value)
        Filter_Condition.Greater value -> Filter_Condition.Greater (self.resolve value)
        Filter_Condition.Equal_Or_Greater value -> Filter_Condition.Equal_Or_Greater (self.resolve value)
        Filter_Condition.Between lower upper -> Filter_Condition.Between (self.resolve lower) (self.resolve upper)
        Filter_Condition.Starts_With prefix case_sensitivity -> Filter_Condition.Starts_With (self.resolve prefix) case_sensitivity
        Filter_Condition.Ends_With prefix case_sensitivity -> Filter_Condition.Ends_With (self.resolve prefix) case_sensitivity
        Filter_Condition.Contains prefix case_sensitivity -> Filter_Condition.Contains (self.resolve prefix) case_sensitivity
        Filter_Condition.Not_Contains prefix case_sensitivity -> Filter_Condition.Not_Contains (self.resolve prefix) case_sensitivity
        Filter_Condition.Like pattern -> Filter_Condition.Like (self.resolve pattern)
        Filter_Condition.Not_Like pattern -> Filter_Condition.Not_Like (self.resolve pattern)
        Filter_Condition.Is_In values -> Filter_Condition.Is_In (check_is_in_values "Is_In" values)
        Filter_Condition.Not_In values -> Filter_Condition.Not_In (check_is_in_values "Not_In" values)
        _ -> condition

    ## PRIVATE
       Set a column.
    set : Any -> Text -> Set_Mode -> Problem_Behavior -> Table_Ref ! Existing_Column | Missing_Column | No_Such_Column | Expression_Error
    set self column new_name:Text set_mode:Set_Mode=Set_Mode.Add_Or_Update on_problems:Problem_Behavior=Report_Warning =
        new_underlying = self.underlying.set column new_name set_mode=set_mode on_problems=on_problems
        Table_Ref.from new_underlying

    ## PRIVATE
       Gets a list of column names
    column_names : Vector Text
    column_names self = self.underlying.column_names

## PRIVATE
Table_Ref.from (that:Table) = Table_Ref.Value that

## PRIVATE
check_is_in_values : Text -> Vector -> Vector ! Illegal_Argument
check_is_in_values operation_name values =
    check_value v = case v of
        _ : Column_Ref ->
            message = "Column_Ref is not allowed in "+operation_name+" to avoid unexpected behavior. As opposed to other operations, which operate on a row-by-row basis when passed a column, "+operation_name+" looks at the whole contents of the passed collection - thus usually expecting a Vector. If you want to filter the elements checking if they are present _anywhere_ in a passed column, you can pass a column by first getting it from the table using the `at` operator."
            Error.throw (Illegal_Argument.Error message)
        _ -> v
    case values of
        _ : Vector -> values.map on_problems=No_Wrap.Value check_value
        _ : Array -> values.map on_problems=No_Wrap.Value check_value
        _ -> check_value values
