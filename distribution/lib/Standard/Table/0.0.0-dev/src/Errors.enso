from Standard.Base import all

polyglot java import org.enso.table.error.ColumnCountMismatchException
polyglot java import org.enso.table.error.ColumnNameMismatchException

## One or more columns not found in the input table.
   Can occur when using By_Name or By_Column.
type Missing_Input_Columns
    Missing_Input_Columns_Data (criteria : [Text])

    ## PRIVATE

       Convert a missing input error to a human-readable form.
    to_display_text : Text
    to_display_text self =
        "The criteria "+self.criteria.to_text+" did not match any columns."

## One or more column indexes were invalid on the input table.
   Can occur when using By_Index.
type Column_Indexes_Out_Of_Range
    Column_Indexes_Out_Of_Range_Data (indexes : [Integer])

    ## PRIVATE

       Convert a column indexes out of bounds error to a human-readable form.
    to_display_text : Text
    to_display_text self = case self.indexes.length == 1 of
        True -> "The index " + (self.indexes.at 0).to_text + " is out of range."
        False -> "The indexes "+self.indexes.short_display_text+" are out of range."

## More names than the column count provided to the function.
   Can occur when using By_Position.
type Too_Many_Column_Names_Provided
    Too_Many_Column_Names_Provided_Data (column_names : [Text])

    ## PRIVATE

       Convert a too many columns error to a human-readable form.
    to_display_text : Text
    to_display_text self =
        "Too many column names provided. " + (self.column_names.at 0).to_text + " unused."

## One or more column names were invalid during a rename operation.
type Invalid_Output_Column_Names
    Invalid_Output_Column_Names_Data (column_names : [Text])

    ## PRIVATE

       Pretty prints the invalid output columns error.
    to_display_text : Text
    to_display_text self = case self.column_names.length == 1 of
        True -> "The name " + (self.column_names.at 0).to_text + " is invalid."
        False -> "The names "+self.column_names.short_display_text+" are invalid."

## One or more column names clashed during a rename operation.
type Duplicate_Output_Column_Names
    Duplicate_Output_Column_Names_Data (column_names : [Text])

    ## PRIVATE

       Pretty prints the duplicate output column names error.
    to_display_text : Text
    to_display_text self = case self.column_names.length == 1 of
        True -> "The name " + (self.column_names.at 0).to_text + " was repeated in the output, so was renamed."
        False -> "The names "+self.column_names.short_display_text+" were repeated in the output, and were renamed."

## No columns in the output result.
type No_Output_Columns

    ## PRIVATE

       Pretty prints the no output columns error.
    to_display_text : Text
    to_display_text self =
        "The result contains no columns."

## Indicates that the provided Column_Selector has duplicate entries.
type Duplicate_Column_Selectors
    Duplicate_Column_Selectors_Data (duplicate_selectors : [(Text | Integer)])

    to_display_text : Text
    to_display_text self =
        "The provided Column_Selector has duplicate entries: "+self.duplicate_selectors.short_display_text+"."

## Indicates that one column has been matched by multiple selectors.

   In case the selectors have differing metadata and the error does not prevent
   the operation from continuing, the first selector on the list is used.
type Column_Matched_By_Multiple_Selectors
    Column_Matched_By_Multiple_Selectors_Data (column_name : Text) (selectors : [Any])

    ## PRIVATE

       Pretty prints the error.
    to_display_text : Text
    to_display_text self =
        'The column "' + self.column_name + '" is matched by multiple selectors: ' + self.selectors.short_display_text + "."

## Indicates that the provided indices matched columns already matched by
   others, so they do not introduce any new columns to the input.

  For example, if the table has only one column, then selecting
  `By_Index [0, -1]` will only yield this single column and
  `Input_Indices_Already_Matched [-1]` will be raised.
type Input_Indices_Already_Matched
    Input_Indices_Already_Matched_Data (indices : [Integer])

    to_display_text : Text
    to_display_text self =
        "The indices "+self.indices.short_display_text+" matched columns which have been matched earlier by other indices, so they did not introduce any new columns into the result."

## Indicates that no input columns were selected for the operation, so the
   operation will cause no effect.
type No_Input_Columns_Selected
    to_display_text : Text
    to_display_text self =
        "No input columns have been selected for the operation."


## Indicates that an aggregation calculation could not be completed.
type Invalid_Aggregation
    Invalid_Aggregation_Data (column:Text) (rows:[Integer]) (message:Text)

    to_display_text : Text
    to_display_text self =
        "The "+self.column+" could not be calculated at "+self.row.to_text+" : "+self.message

## Indicates that a floating point number was used in a grouping.
type Floating_Point_Grouping
    Floating_Point_Grouping_Data (column:Text) (rows:[Integer])

    to_display_text : Text
    to_display_text self =
        "Grouping on floating points is not recommended within "+self.column+" at row "+self.row.to_text+"."

## Indicates that a text value with a delimiter was included in a concatenation without any quote character
type Unquoted_Delimiter
    Unquoted_Delimiter_Data (column:Text) (rows:[Integer])

    to_display_text : Text
    to_display_text self =
        "The "+self.column+" at row "+self.row.to_text+" contains the delimiter and there is no specified quote character."

## Warning when additional warnings occurred.
type Additional_Warnings
    Additional_Warnings_Data (count:Integer)

    to_display_text : Text
    to_display_text self =
        "There were "+self.count.to_text+" additional issues."

## Indicates that when loading a delimited file, a row was encountered which had
   too many or too few columns.

   Only the first 10 rows are reported, any additional ones are aggregated into
   a single instance of `Additional_Invalid_Rows`.
type Invalid_Row
    Invalid_Row_Data (source_file_line_number : Integer) (index : Integer | Nothing) (row : [Text])

## Indicates how many additional `Invalid_Row` warnings have been suppressed.
type Additional_Invalid_Rows
    Additional_Invalid_Rows_Data (count : Integer)

## Indicates that a quote inside of a delimited file cell has been opened but
   never closed.
type Mismatched_Quote

## Indicates an unexpected parser error.
type Parser_Error
    Parser_Error_Data cause

## Indicates that a specified location was not valid.
type Invalid_Location
    Invalid_Location_Data (location:Text)

    to_display_text : Text
    to_display_text self =
        "The location '"+self.location+"' is not valid."

## Indicates that some values did not match the expected datatype format.

   Arguments:
   - column: the column in which the problematic cells appeared, if applicable.
     It may be empty if the value is parsed outside of a context of a column.
   - datatype: The expected datatype.
   - cells: Contents of the cells that did not match the expected datatype
     format.
type Invalid_Format
    Invalid_Format_Data column:(Text|Nothing) (datatype:(Integer|Number|Date|Time|Time_Of_Day|Boolean)) (cells:[Text])

    to_display_text : Text
    to_display_text self =
        self.cells.length+" cells in column "+self.column+" had invalid format for datatype "+self.datatype.to_text+"."

## Indicates that some values contained leading zeros even though these were not allowed.

   Arguments:
   - column: the column in which the problematic cells appeared, if applicable.
     It may be empty if the value is parsed outside of a context of a column.
   - datatype: The expected datatype.
   - cells: Contents of the cells that contained leading zeros.
type Leading_Zeros
    Leading_Zeros_Data column:(Text|Nothing) (datatype:(Integer|Number|Date|Time|Time_Of_Day|Boolean)) (cells:[Text])

## Indicates that multiple `Column_Type_Selector` match the same column.

   If all matching selectors indicate the same type, the warning is reported but
   a parse is attempted anyway. If mixed types are requested, the column is not
   parsed due to ambiguity.
type Duplicate_Type_Selector
    Duplicate_Type_Selector_Data column:Text ambiguous:Boolean

## Indicates that the given file type is not supported by the `Auto` format.
type Unsupported_File_Type
    Unsupported_File_Type_Data filename

    to_display_text : Text
    to_display_text self =
        "The "+self.filename+" has a type that is not supported by the Auto format."

## Indicates that the target range contains existing data and the user did not
   specify to overwrite.
type Existing_Data
    Existing_Data_Data message

    to_display_text : Text
    to_display_text self = self.message

## Indicates that the specified range is not large enough to fit the data.
type Range_Exceeded
    Range_Exceeded_Data message

    to_display_text : Text
    to_display_text self = self.message

## Indicates that the existing table has a different number of columns to the
   new table.
type Column_Count_Mismatch
    Column_Count_Mismatch_Data expected actual

    to_display_text : Text
    to_display_text self =
        "Expected " + self.expected.to_text + " columns, got " + self.actual.to_text + "."

    ## PRIVATE
    handle_java_exception self =
        throw_column_count_mismatch caught_panic =
            cause = caught_panic.payload.cause
            Error.throw (Column_Count_Mismatch_Data cause.getExpected cause.getActual)
        Panic.catch ColumnCountMismatchException handler=throw_column_count_mismatch

## Indicates that the existing table has a different set of column names to the
   new table.
type Column_Name_Mismatch
    Column_Name_Mismatch_Data missing extras message

    to_display_text : Text
    to_display_text self = self.message

    ## PRIVATE
    handle_java_exception =
        throw_column_name_mismatch caught_panic =
            cause = caught_panic.payload.cause
            Error.throw (Column_Name_Mismatch_Data (Vector.from_polyglot_array cause.getMissing) (Vector.from_polyglot_array cause.getExtras) cause.getMessage)
        Panic.catch ColumnNameMismatchException handler=throw_column_name_mismatch

## UNSTABLE

   An error returned when a non-existent column is being looked up.

   Arguments:
   - column_name: The name of the column that doesn't exist.
type No_Such_Column_Error
    No_Such_Column_Error_Data column_name

    ## PRIVATE

       Create a human-readable version of the no such column error.
    to_display_text : Text
    to_display_text self =
        "The column " + self.column_name + " does not exist."

## UNSTABLE

   An error returned when getting an index but no index is set for that table.
type No_Index_Set_Error
    ## PRIVATE

       Create a human-readable version of the no index set error.
    to_display_text : Text
    to_display_text self = "The table does not have an index set."
