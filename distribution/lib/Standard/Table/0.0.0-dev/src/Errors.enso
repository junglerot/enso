from Standard.Base import all
import Standard.Base.Errors.No_Such_Key.No_Such_Key

import Standard.Table.Data.Expression.Expression_Error
import Standard.Table.Data.Type.Value_Type.Value_Type

polyglot java import org.enso.table.error.ColumnCountMismatchException
polyglot java import org.enso.table.error.ColumnNameMismatchException
polyglot java import org.enso.table.error.EmptyFileException
polyglot java import org.enso.table.error.EmptySheetException
polyglot java import org.enso.table.error.InvalidColumnNameException


type Missing_Input_Columns
    ## PRIVATE
       One or more columns not found in the input table.

       Arguments:
       - criteria: the names of the columns, regular expressions or indices that
         did not matches any columns.
       - where: an optional text describing to which object this error is
         related to (for example in join, whether the reported error is for the
         left or right table).
    Error (criteria : [Text | Integer]) (where:Text|Nothing = Nothing)

    ## PRIVATE

       Convert a missing input error to a human-readable form.
    to_display_text : Text
    to_display_text self =
        where = case self.where of
            Nothing -> "."
            location : Text -> " in "+location+"."
        criteria_texts = self.criteria.map c-> case c of
            _ : Integer -> c.to_text+" (index)"
            _ -> c.pretty
        criteria_text = criteria_texts.join ", "
        "The criteria "+criteria_text+" did not match any columns"+where

type Too_Many_Column_Names_Provided
    ## PRIVATE
       More names than the column count provided to the function.
       Can occur when using By_Position.
    Error (column_names : Vector Text)

    ## PRIVATE

       Convert a too many columns error to a human-readable form.
    to_display_text : Text
    to_display_text self =
        "Too many column names provided. " + (self.column_names.at 0).to_text + " are unused."

## One or more column names were invalid.
type Invalid_Column_Names
    ## PRIVATE
       Create an invalid column names error.

       Arguments:
       - column_names: The names of the invalid columns.
       - extra_message: An optional message to append to the error.
    Error (column_names : Vector Text) (extra_message : Text | Nothing = Nothing)

    ## PRIVATE

       Pretty prints the invalid output columns error.
    to_display_text : Text
    to_display_text self =
        suffix = case self.extra_message of
            Nothing -> ""
            message -> " "+message
        case self.column_names.length == 1 of
            True -> "The name " + (self.column_names.at 0).to_display_text.pretty + " is invalid and may be replaced in the resulting table."+suffix
            False -> "The names "+self.column_names.short_display_text+" are invalid and may be replaced in the resulting table."+suffix

    ## PRIVATE
       Handles the Java counterpart `InvalidColumnNameException` and converts it into a dataflow error.
    handle_java_exception ~action =
        Panic.catch InvalidColumnNameException action caught_panic->
            exception = caught_panic.payload
            error = Invalid_Column_Names.Error [exception.name] exception.extraMessage
            Error.throw error

## One or more column names clashed during a rename operation.
type Duplicate_Output_Column_Names
    ## PRIVATE
       Create an duplicate column names error.

       Arguments:
       - column_names: The set of duplicated column names.
    Error (column_names : Vector Text)

    ## PRIVATE

       Pretty prints the duplicate output column names error.
    to_display_text : Text
    to_display_text self = case self.column_names.length == 1 of
        True -> "The name " + (self.column_names.at 0).to_display_text + " was repeated in the output, so it was renamed."
        False -> "The names "+self.column_names.short_display_text+" were repeated in the output, and were renamed."

## No columns in the output result.
type No_Output_Columns
    ## PRIVATE

       Pretty prints the no output columns error.
    to_display_text : Text
    to_display_text self =
        "The result contains no columns."

## Indicates that one column has been matched by multiple selectors, resulting
   in ambiguous new names.
type Ambiguous_Column_Rename
    ## PRIVATE
    Error (column_name : Text) (new_names : Vector Text)

    ## PRIVATE

       Pretty prints the error.
    to_display_text : Text
    to_display_text self =
        'The column "' + self.column_name + '" is matched by multiple selectors, and it is ambiguous which of the following names it should be assigned: ' + self.new_names.short_display_text + "."

## Indicates that no input columns were selected for the operation, so the
   operation will cause no effect.
type No_Input_Columns_Selected
    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        "No input columns have been selected for the operation."

## Indicates that an aggregation calculation could not be completed.
type Invalid_Aggregation
    ## PRIVATE
    Error (column:Text) (rows:(Vector Integer)) (message:Text)

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        "The "+self.column+" could not be calculated at "+self.rows.short_display_text+": "+self.message

## Indicates that some operation relies on equality on floating-point values,
   which is not recommended.
type Floating_Point_Equality
    ## PRIVATE
    Error (location:Text)

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        "Relying on equality of floating-point numbers is not recommended (within "+self.location+")."

## Indicates that a text value with a delimiter was included in a concatenation
   without any quote character
type Unquoted_Delimiter
    ## PRIVATE
    Error (column:Text) (rows:(Vector Integer))

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        "The "+self.column+" at rows "+self.rows.short_display_text+" contains the delimiter and there is no specified quote character."

## Warning when additional warnings occurred.
type Additional_Warnings
    ## PRIVATE
    Error (count:Integer)

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        "There were "+self.count.to_text+" additional issues."

## Indicates that when loading a delimited file, a row was encountered which had
   too many or too few columns.

   Only the first 10 rows are reported, any additional ones are aggregated into
   a single instance of `Additional_Invalid_Rows`.
type Invalid_Row
    ## PRIVATE
    Error (source_file_line_number : Integer) (index : Integer | Nothing) (row : Vector Text) (expected_columns : Integer)

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        table_loc = case self.index of
            Nothing -> ""
            _ -> ", table row "+self.index.to_text
        loc = "(line "+self.source_file_line_number.to_text+table_loc+")"
        got_columns = self.row.length
        count_msg = if got_columns > self.expected_columns then "too many" else "too few"
        "The row " + loc + " had " + count_msg + " columns (expected " + self.expected_columns.to_text + ", got " + got_columns.to_text + ")."


## Indicates how many additional `Invalid_Row` warnings have been suppressed.
type Additional_Invalid_Rows
    ## PRIVATE
    Error (count : Integer)

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        "There were "+self.count.to_text+" additional invalid rows."

## Indicates that a quote inside of a delimited file cell has been opened but
   never closed.
type Mismatched_Quote
    ## PRIVATE
    Error (cell_text : Text)

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        max_length = 50
        short_cell_text = if self.cell_text.length > max_length then self.cell_text.take max_length + "..." else self.cell_text
        "A quote has been opened but never closed inside of a Delimited file, so it cannot be interpreted properly. Inside cell: ["+short_cell_text+"]."

## Indicates an unexpected parser error.
type Parser_Error
    ## PRIVATE
    Error cause

## Indicates that quoting was disabled for a `Delimited` file, but some cells
   contained characters that do need quoting which may cause the output file to
   be corrupted.
type Unquoted_Characters_In_Output
    ## PRIVATE
    Warning (column : Text) (rows : Vector Integer)

    ## PRIVATE
       Pretty print the unquoted characters error.
    to_display_text : Text
    to_display_text self =
        altered_rows = self.rows.map ix->
            if ix == -1 then "the header" else ix
        "The "+self.column+" at rows "+altered_rows.short_display_text+" contains characters that need quoting, but quoting is disabled. The generated file may be corrupted."

    ## PRIVATE
    to_text : Text
    to_text self = "Unquoted_Characters_In_Output.Warning "+self.column.pretty+" "+self.rows.to_text

## Indicates that a specified location was not valid.
type Invalid_Location
    ## PRIVATE
    Error (location : Text | Any)

    ## PRIVATE
       Pretty print the invalid location error.
    to_display_text : Text
    to_display_text self =
        "The location '"+self.location+"' is not valid."

## Indicates that some values did not match the expected datatype format.

   Arguments:
   - column: the column in which the problematic cells appeared, if applicable.
     It may be empty if the value is parsed outside of a context of a column.
   - value_type: The expected value type.
   - cells: Contents of the cells that did not match the expected datatype
     format.
type Invalid_Format
    ## PRIVATE
    Error column:(Text|Nothing) (value_type:Value_Type|Integer|Number|Date|Date_Time|Time_Of_Day|Boolean|Any) (cells:(Vector Text))

    ## PRIVATE
       Pretty print the invalid format error.
    to_display_text : Text
    to_display_text self =
        self.cells.length.to_text+" cells in column "+self.column+" had invalid format for type "+self.value_type.to_text+"."

## Indicates that an empty file was encountered, so no data could be loaded.
type Empty_File_Error
    ## PRIVATE
       Pretty print the empty file error.
    to_display_text : Text
    to_display_text = "It is not allowed to create a Table with no columns, so an empty file could not have been loaded."

    ## PRIVATE
    handle_java_exception =
        Panic.catch EmptyFileException handler=(_ -> Error.throw Empty_File_Error)

## Indicates that an empty sheet was encountered, so no data could be loaded.
type Empty_Sheet_Error
    ## PRIVATE
       Pretty print the empty sheet error.
    to_display_text : Text
    to_display_text = "It is not allowed to create a Table with no columns, so an empty sheet could not have been loaded."

    ## PRIVATE
    handle_java_exception =
        Panic.catch EmptySheetException handler=(_ -> Error.throw Empty_Sheet_Error)

## Indicates that the column was already present in the table.
type Existing_Column
    ## PRIVATE
    Error column_name

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self = "The column '" + self.column_name + "' already exists, but `Set_Mode.Add` was selected."

## Indicates that the column was not present in the table.
type Missing_Column
    ## PRIVATE
    Error column_name

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self = "The column '" + self.column_name + "' was not found, but `Set_Mode.Update` was selected."

## Indicates that the target range contains existing data and the user did not
   specify to overwrite.
type Existing_Data
    ## PRIVATE
    Error message

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self = "Existing data found: " + self.message

## Indicates that the specified range is not large enough to fit the data.
type Range_Exceeded
    ## PRIVATE
    Error message

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self = "Range exceeded: " + self.message

## Indicates that the existing table has a different number of columns to the
   new table.
type Column_Count_Mismatch
    ## PRIVATE
    Error expected actual

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        "Expected " + self.expected.to_text + " columns, got " + self.actual.to_text + "."

    ## PRIVATE
    handle_java_exception =
        throw_column_count_mismatch caught_panic =
            cause = caught_panic.payload
            Error.throw (Column_Count_Mismatch.Error cause.getExpected cause.getActual)
        Panic.catch ColumnCountMismatchException handler=throw_column_count_mismatch

## Indicates that the existing table has a different set of column names to the
   new table.
type Column_Name_Mismatch
    ## PRIVATE
    Error missing extras message

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self = self.message

    ## PRIVATE
    handle_java_exception =
        throw_column_name_mismatch caught_panic =
            cause = caught_panic.payload
            Error.throw (Column_Name_Mismatch.Error (Vector.from_polyglot_array cause.getMissing) (Vector.from_polyglot_array cause.getExtras) cause.getMessage)
        Panic.catch ColumnNameMismatchException handler=throw_column_name_mismatch

## An error returned when a non-existent column is being looked up.

   Arguments:
   - column_name: The name of the column that doesn't exist.
type No_Such_Column
    ## PRIVATE
    Error column_name

    ## PRIVATE

       Create a human-readable version of the no such column error.
    to_display_text : Text
    to_display_text self =
        "The column " + self.column_name + " does not exist."

## An error returned when getting an index but no index is set for that table.
type No_Index_Set_Error
    ## PRIVATE

       Create a human-readable version of the no index set error.
    to_display_text : Text
    to_display_text self = "The table does not have an index set."

type Invalid_Value_Type
    ## PRIVATE
       Indicates that a column with an unexpected value type has been encountered.
    Column (expected:Value_Type|Text) (actual:Value_Type) (related_column:Text)

    ## PRIVATE
       Indicates that a value with an unexpected value type has been encountered.
    Value (expected:Value_Type|Text) (actual:Value_Type) (value:Any)

    ## PRIVATE
       Indicates that a value type does not support comparisons.
    Not_Ordered (actual:Value_Type)

    ## PRIVATE
       Indicates that the two value types cannot be compared with each other.
    Incomparable (type_1:Value_Type) (type_2:Value_Type)

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self = case self of
        Invalid_Value_Type.Column expected actual related_column ->
            "Expected type "+expected.to_display_text+", but got a column ["+related_column+"] of type "+actual.to_display_text+"."
        Invalid_Value_Type.Value expected actual value ->
            "Expected type "+expected.to_display_text+", but got a value "+value.to_display_text+" of type "+actual.to_display_text+"."
        Invalid_Value_Type.Not_Ordered actual ->
            "Type "+actual.to_display_text+" does not support comparisons."
        Invalid_Value_Type.Incomparable type_1 type_2 ->
            "Types "+type_1.to_display_text+" and "+type_2.to_display_text+" cannot be compared to each other."

## An error representing an invalid JSON format for conversion.
type Invalid_JSON_Format
    ## PRIVATE
    Error input message

    ## PRIVATE

       Provides a human-readable representation of the Invalid_JSON_Format.
    to_display_text : Text
    to_display_text self =
        "The input " + self.input.to_text + " had an invalid format due to: " + self.message.to_text + "."

type Column_Type_Mismatch
    ## PRIVATE
       An error indicating a mismatch of column types of merged columns.
    Error (column_name : Text) (expected_type : Text | Value_Type) (got_type : Text | Value_Type)

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        "The column ["+self.column_name+"] expects type "+self.expected_type.to_display_text+" but one of the provided tables had type "+self.got_type.to_display_text+" which is not compatible with it."

type No_Common_Type
    ## PRIVATE
       An error indicating that no common type could be found.

       Arguments:
       - types: The types that were tried to be unified.
       - related_column_name: The name of the resulting column that was being
         unified, if applicable.
    Error (types : Vector Value_Type) (related_column_name : Nothing|Text)

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        types = self.types.map .to_display_text . join ", "
        prefix = "No common type was found for types: "+types
        infix = case self.related_column_name of
            column_name : Text -> " when unifying column ["+column_name+"]."
            _ -> "."
        suffix = " If you want to allow mixed types, please cast one of the columns to `Mixed` beforehand."
        prefix + infix + suffix

type Unmatched_Columns
    ## PRIVATE

       An error indicating that some columns were not present in all of the
       merged tables.
    Error (column_names : Vector Text)

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        "The following columns were not present in some of the provided tables: " + (self.column_names.map (n -> "["+n+"]") . join ", ") + "."

type Cross_Join_Row_Limit_Exceeded
    ## PRIVATE
       Indicates that a `cross_join` has been attempted where the right table
       has more rows than allowed by the limit.
    Error (limit : Integer) (existing_rows : Integer)

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        "The cross join operation exceeded the maximum number of rows allowed. The limit is "+self.limit.to_text+" and the number of rows in the right table was "+self.existing_rows.to_text+". The limit may be turned off by setting the `right_row_limit` option to `Nothing`."

type Row_Count_Mismatch
    ## PRIVATE
       Indicates that the row counts of zipped tables do not match.
    Error (left_rows : Integer) (right_rows : Integer)

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        "The number of rows in the left table ("+self.left_rows.to_text+") does not match the number of rows in the right table ("+self.right_rows.to_text+")."

type Invalid_Aggregate_Column
    ## PRIVATE
       Indicates that a provided name is not found within available columns nor
       represents a valid expression.
    Error (name : Text) (expression_error : Expression_Error | No_Such_Column | Nothing)

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        "The name ["+self.name+"] is not a valid column name nor expression."

type Inexact_Type_Coercion
    ## PRIVATE
       Indicates that the requested `Value_Type` is not available in the given
       backend, so it was replaced by its closest available type.
    Warning (requested_type : Value_Type) (actual_type : Value_Type)

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        "The requested type ["+self.requested_type.to_text+"] is not available in the given backend, so it was replaced by its closest available type ["+self.actual_type.to_text+"]."

    ## PRIVATE

       Create a human-readable version of the error.
    to_text : Text
    to_text self =
        "Inexact_Type_Coercion.Warning (requested_type = " + self.requested_type.to_text + ") (actual_type = " + self.actual_type.to_text + ")"

type Conversion_Failure
    ## Indicates that some values from the column could not be converted to the
       desired type.

       This may occur for example when a number does not fit the range of the
       target type.
    Error (target_type : Value_Type) (related_column : Text|Nothing) (affected_rows_count : Nothing|Integer) (example_values : Vector Any)

    ## Indicates that for some values, their text representation is too long for
       the target text type.
    Text_Too_Long (target_type : Value_Type) (related_column : Text|Nothing) (affected_rows_count : Nothing|Integer) (example_values : Vector Text)

    ## Indicates that some values are out of the range of the target type.
    Out_Of_Range (target_type : Value_Type) (related_column : Text|Nothing) (affected_rows_count : Nothing|Integer) (example_values : Vector Integer)

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        rows_info = case self.affected_rows_count of
            Nothing -> "Some values"
            count -> case self.example_values.is_empty of
                True -> count.to_text+" rows"
                False ->
                    # We first `pretty` to wrap texts in quotes and avoid special characters, but then also `to_display_text` to limit the result length.
                    examples = self.example_values.map (t-> t.pretty.to_display_text) . join ", "
                    remaining_count = count - self.example_values.length
                    additional = if remaining_count <= 0 then "" else
                        cases = if remaining_count == 1 then "case" else "cases"
                        " and "+remaining_count.to_text+" other "+cases
                    "["+examples+additional+"]"
        column_suffix = case self.related_column of
            Nothing -> ""
            column_name -> " when converting the column ["+column_name+"]"

        case self of
            Conversion_Failure.Error _ _ _ _ ->
                rows_info + " could not be converted into the target type "+self.target_type.to_display_text+column_suffix+"."
            Conversion_Failure.Out_Of_Range _ _ _ _ ->
                rows_info + " are out of the range of the target type "+self.target_type.to_display_text+column_suffix+"."
            Conversion_Failure.Text_Too_Long _ _ _ _ ->
                rows_info + " have a text representation that does not fit the target type "+self.target_type.to_display_text+column_suffix+"."

type Loss_Of_Integer_Precision
    ## PRIVATE
       Indicates that an automatic conversion of an integer column to a decimal
       column is losing precision because some of the large integers cannot be
       exactly represented by the `double` type.
    Warning (affected_rows_count : Integer) (example_value : Integer) (example_value_converted : Float)

    ## PRIVATE
       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        self.affected_rows_count.to_text+" rows contained integers that are too large to represent exactly as a floating-point number. Some loss of precision will occur. For example, the number "+self.example_value.to_text+" gets converted to "+self.example_value_converted.to_text+"."

    ## PRIVATE
    to_text : Text
    to_text self =
        "(Loss_Of_Integer_Precision.Warning (affected_rows_count = " + self.affected_rows_count.to_text + ") (example_value = " + self.example_value.to_text + ") (example_value_converted = " + self.example_value_converted.to_text + "))"

type Arithmetic_Overflow
    ## PRIVATE
       Indicates that the result of an arithmetic operation is too large to fit the target type.
    Warning (target_type : Value_Type) (affected_rows_count : Nothing|Integer) (example_operands : Nothing | Vector Any)

    ## PRIVATE
       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        rows_info = case self.affected_rows_count of
            Nothing -> "Some rows"
            count   -> count.to_text+" rows"
        op_info = case self.example_operands of
            Nothing -> ""
            operands ->
                " (e.g. operation " + (operands.map .to_display_text . join " ") + ")"
        rows_info + op_info + " encountered integer overflow - the results do not fit the type "+self.target_type.to_display_text+". These values have ben replaced with `Nothing`."

    ## PRIVATE
    to_text : Text
    to_text self =
        "(Arithmetic_Overflow.Warning (target_type = " + self.target_type.to_text + ") (affected_rows_count = " + self.affected_rows_count.to_text + ") (example_operands = " + self.example_operands.to_display_text + "))"

type Invalid_Value_For_Type
    ## PRIVATE
       Indicates that a column construction/transformation failed because the
       provided value is not valid for the requested column type.
    Error (value : Any) (value_type : Value_Type)

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        "The value ["+self.value.to_text+"] is not valid for the column type ["+self.value_type.to_text+"]."

type Column_Count_Exceeded
    ## PRIVATE
       Indicates that an operation generating new columns produced more columns
       than allowed by the limit.
    Error (limit : Integer) (column_count : Integer)

    ## PRIVATE

       Create a human-readable version of the error.
    to_display_text : Text
    to_display_text self =
        "The operation produced more columns than the specified limit. The limit is "+self.limit.to_text+" and the number of new columns was "+self.column_count.to_text+"."

type Name_Too_Long
    ## PRIVATE
       Indicates that a table/column name is too long for the given backend.
    Error (entity_kind : Text) (name : Text) (extra_message : Text)

    ## PRIVATE
       Pretty print the column name too long error.
    to_display_text : Text
    to_display_text self =
        "The " + self.entity_kind + " name [" + self.name.to_display_text + "] is too long for the given backend." + self.extra_message

type Truncated_Column_Names
    ## PRIVATE
       Indicates that some column names were truncated to fit the maximum length
       supported by the backend.
    Warning (names_map : Map Text Text)

    ## PRIVATE
       Get the original column names.
    original_names : Vector Text
    original_names self = self.names_map.keys.to_vector

    ## PRIVATE
       Get the truncated names.
    truncated_names : Vector Text
    truncated_names self = self.names_map.values.to_vector

    ## PRIVATE
    find_truncated_name : Text -> Text ! No_Such_Key
    find_truncated_name self name = self.names_map.get name

    ## PRIVATE
       Pretty print the truncated column names warning.
    to_display_text : Text
    to_display_text self =
        "The column names " + self.original_names.to_display_text + " were truncated to fit the maximum length supported by the backend (" + self.max_length.to_text + ")."

type Clashing_Column_Name
    ## PRIVATE
       Indicates that a provided column name is clashing with another column
       name in the `Table.set` operation.
    Error (provided_name : Text) (clashing_name : Text)

    ## PRIVATE
       Pretty print the clashing column name error.
    to_display_text : Text
    to_display_text self =
        "The column name [" + self.provided_name.to_display_text + "] is clashing with the column name [" + self.clashing_name.to_display_text + "] - they cannot be distinguished because the backend is not case sensitive, so only one of these can exist within a single table. If you wanted to replace the column, use the exact (case sensitive) name of the column to replace."
