from Standard.Base import all
import Standard.Base.Errors.File_Error.File_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State
import Standard.Base.Metadata.Display
import Standard.Base.Runtime.Managed_Resource.Managed_Resource
import Standard.Base.Runtime.Ref.Ref
import Standard.Base.System.Input_Stream.Input_Stream
import Standard.Base.System.File.Advanced.Temporary_File.Temporary_File
from Standard.Base.Data.Filter_Condition import sql_like_to_regex
from Standard.Base.Metadata.Choice import Option
from Standard.Base.Metadata.Widget import Single_Choice

import project.Data.Table.Table
import project.Excel.Excel_Range.Excel_Range
import project.Excel.Excel_Section.Excel_Section
import project.Internal.Excel_Reader
import project.Internal.Java_Problems

polyglot java import java.io.File as Java_File
polyglot java import org.apache.poi.ss.usermodel.Workbook
polyglot java import org.enso.table.read.ExcelReader
polyglot java import org.enso.table.excel.ExcelConnectionPool
polyglot java import org.enso.table.excel.ExcelFileFormat
polyglot java import org.enso.table.excel.ReadOnlyExcelConnection

type Excel_Workbook
    ## PRIVATE
       ADVANCED
       Load a File as a connection to an Excel workbook.

       Arguments:
       - file: The file to load.
       - xls_format: Whether to use the old XLS format (default is XLSX).
       - headers: Whether to use the first row as headers (default is to infer).
    new : File | Text | Temporary_File -> Boolean -> Boolean | Infer -> Excel_Workbook
    new file xls_format=False headers=Infer =
        file_obj = case file of
            tmp : Temporary_File -> tmp
            other -> File.new other
        file_for_errors = if file_obj.is_a Temporary_File then Nothing else file_obj

        continuation raw_file =
            format = if xls_format then ExcelFileFormat.XLS else ExcelFileFormat.XLSX
            File_Error.handle_java_exceptions raw_file <| Excel_Reader.handle_bad_format file_for_errors <| Illegal_State.handle_java_exception <|
                # The `java_file` depends on the liveness of the possible `Temporary_File` but that is ensured by storing the `file_obj` in the resulting workbook instance.
                java_file = Java_File.new raw_file.absolute.normalize.path
                excel_connection_resource = Managed_Resource.register (ExcelConnectionPool.INSTANCE.openReadOnlyConnection java_file format) close_connection
                Excel_Workbook.Value (Ref.new excel_connection_resource) file_obj xls_format headers

        case file_obj of
            tmp : Temporary_File -> tmp.with_file continuation
            f : File -> continuation f

    ## PRIVATE
       ADVANCED
       Load an Input_Stream as a connection to an Excel workbook.

       Arguments:
       - stream: The stream to load.
       - xls_format: Whether to use the old XLS format (default is XLSX).
       - headers: Whether to use the first row as headers (default is to infer).
       - file: Optional file reference.
    from_stream : Input_Stream -> Boolean -> Boolean | Infer -> File | Nothing -> Excel_Workbook
    from_stream stream xls_format=False headers=Infer file=Nothing = Excel_Reader.handle_bad_format file <|
        temp_file = Temporary_File.from_stream_light stream
        Excel_Workbook.new temp_file xls_format headers

    ## PRIVATE
       Creates an Excel_Workbook connection.
    Value (excel_connection_resource_ref : Ref (Managed_Resource ReadOnlyExcelConnection)) (file:(File|Temporary_File|Nothing)) xls_format:Boolean headers:(Boolean|Infer)

    ## Returns the list of databases (or catalogs) for the connection.
    databases : Nothing
    databases self = Nothing

    ## Returns the name of the current database (or catalog).
    database : Text
    database self = case self.file of
        regular_file : File -> regular_file.path
        ## A Temporary_File is still visualized as no path, because the fact that the workbook is stored as a file is
           just an implementation detail - it is coming form a stream so there is no logical file it is associated with.
        _ -> ""

    ## Returns a new Connection with the specified database set as default.

       Arguments:
        - database: The name of the database to connect to.
    @database (Single_Choice display=Display.Always values=[Option 'Nothing'])
    set_database : Text -> Excel_Workbook ! Illegal_Argument
    set_database self database =
        if database == self.database then self else
            file = File.new database
            if file.exists && file.is_directory.not then Excel_Workbook.new file self.xls_format self.headers else
                Error.throw (Illegal_Argument.Error "The specified file ('"+file.path+"') does not exist.")

    ## Returns the list of schemas for the connection within the current database (or catalog).
    schemas : Vector (Text | Nothing)
    schemas self = [Nothing]

    ## Returns the name of the current schema.
    schema : Text | Nothing
    schema self = Nothing

    ## Returns a new Connection with the specified schema set as default.

       Arguments:
        - schema: The name of the schema to connect to.
    @schema (Single_Choice display=Display.Always values=[Option 'Nothing'])
    set_schema : Text | Nothing -> Excel_Workbook ! Illegal_Argument
    set_schema self schema =
        if schema == self.schema then self else
            Error.throw (Illegal_Argument.Error "Changing schema is not supported.")

    ## GROUP Standard.Base.Metadata
       Gets the number of sheets.
    sheet_count : Integer
    sheet_count self = self.with_java_workbook .getNumberOfSheets

    ## GROUP Standard.Base.Metadata
       Gets the names of all the sheets.
    sheet_names : Vector Text
    sheet_names self = self.with_java_workbook java_workbook->
        Vector.from_polyglot_array (ExcelReader.readSheetNames java_workbook)

    ## GROUP Standard.Base.Metadata
       Gets the number of named ranges.
    named_ranges_count : Integer
    named_ranges_count self = self.with_java_workbook .getNumberOfNames

    ## GROUP Standard.Base.Metadata
       Gets the names of all the named ranges.
    named_ranges : Vector Text
    named_ranges self = self.with_java_workbook java_workbook->
        Vector.from_polyglot_array (ExcelReader.readRangeNames java_workbook)

    ## Gets a list of the table types.
    table_types : Vector Text
    table_types self = ['Worksheet', 'Named Range']

    ## GROUP Standard.Base.Metadata
       Returns a materialised Table of all the matching views and tables.

       Arguments:
       - name_like: The table name pattern to search for. Support SQL wildcards (`%`, `_`).
       - database: The database name to search in (default is current database).
       - schema: The schema name to search in (defaults to current schema).
       - types: The table types to search for. The list of values can be obtained using the `table_types` method.
       - all_fields: Return all the fields in the metadata table.
    @types (self-> Single_Choice values=(self.table_types.map t-> Option t t.pretty))
    tables : Text -> Text -> Text -> Vector -> Boolean -> Table
    tables self name_like=Nothing database=self.database schema=self.schema types=Nothing all_fields=False =
        types_vector = case types of
            Nothing -> Nothing
            _ : Vector -> types
            _ -> [types]

        _ = [all_fields]
        rows = if schema != Nothing then [] else
            sheets = if types_vector.is_nothing || types_vector.contains "Worksheet" then self.sheet_names.map s-> [s, 'Worksheet', database, Nothing] else []
            ranges = if types_vector.is_nothing || types_vector.contains "Named Range" then self.named_ranges.map r-> [r, 'Named Range', database, Nothing] else []
            sheets + ranges

        filtered = if name_like == Nothing then rows else
            regex = sql_like_to_regex name_like
            rows.filter r-> regex.matches r.first

        Table.from_rows ['Name', 'Type', 'Database', 'Schema'] filtered

    ## Set up a query returning a Table object, which can be used to work with data within the database or load it into memory.

       Arguments:
       - query: sheet name, range name or address to read from the workbook.
       - alias: optionally specify a friendly alias for the query (unused).
    @query (self-> Single_Choice display=Display.Always values=(self.tables.at "Name" . to_vector . map t-> Option t t.pretty))
    query : Text -> Text -> Table
    query self query alias="" =
        _ = [alias]
        self.read query

    ## ALIAS range, sheet, worksheet
       GROUP Standard.Base.Input
       ICON data_input
       Execute the query and load the results into memory as a Table.

       Arguments:
       - query: sheet name, range name or address to read from the workbook.
       - limit: the maximum number of rows to read.
         If set to `Nothing`, all rows will be returned.
    @query (self-> Single_Choice display=Display.Always values=(self.tables.at "Name" . to_vector . map t-> Option t t.pretty))
    read : Text -> Integer | Nothing -> Table
    read self query (limit : Integer | Nothing = Nothing) =
        java_headers = Excel_Reader.make_java_headers self.headers
        java_table = Java_Problems.with_problem_aggregator Problem_Behavior.Report_Warning java_problem_aggregator->
            self.with_java_workbook java_workbook-> case query of
                _ : Excel_Range -> ExcelReader.readRange java_workbook query.java_range java_headers 0 limit java_problem_aggregator
                _ : Text -> ExcelReader.readRangeByName java_workbook query java_headers 0 limit java_problem_aggregator
        Table.Value java_table

    ## GROUP Standard.Base.Input
       ICON data_input
       Read an Excel_Section from the Workbook

       Arguments:
       - section: the section to read.
    read_section : Excel_Section -> (Excel_Workbook | Table | Vector)
    read_section self section =
        java_headers = Excel_Reader.make_java_headers self.headers
        case section of
            Excel_Section.Workbook -> self
            Excel_Section.Sheet_Names -> self.sheet_names
            Excel_Section.Range_Names -> self.named_ranges
            Excel_Section.Worksheet sheet skip_rows row_limit ->
                names = self.sheet_names
                sheet_name = case sheet of
                    _ : Text -> if names.contains sheet then sheet else Error.throw (Illegal_Argument.Error "Worksheet not found.")
                    _ : Integer ->
                        if (sheet < 1 || sheet >= names.length) then Error.throw (Illegal_Argument.Error "Worksheet index out of range.") else
                            names.at (sheet - 1)
                    _ -> Error.throw (Illegal_Argument.Error "Worksheet must be either Text or an Integer.")
                java_table = Java_Problems.with_problem_aggregator Problem_Behavior.Report_Warning java_problem_aggregator->
                    self.with_java_workbook java_workbook->
                        ExcelReader.readRangeByName java_workbook sheet_name java_headers skip_rows row_limit java_problem_aggregator
                Table.Value java_table
            Excel_Section.Cell_Range address skip_rows row_limit ->
                java_table = Java_Problems.with_problem_aggregator Problem_Behavior.Report_Warning java_problem_aggregator->
                    self.with_java_workbook java_workbook-> case address of
                        _ : Excel_Range -> ExcelReader.readRange java_workbook address.java_range java_headers skip_rows row_limit java_problem_aggregator
                        _ : Text -> ExcelReader.readRangeByName java_workbook address java_headers skip_rows row_limit java_problem_aggregator
                Table.Value java_table

    ## ALIAS get, worksheet
       GROUP Standard.Base.Input
       Reads a worksheet from the workbook.

       Arguments:
       - name: the name of the worksheet to read.
    @name (self-> Single_Choice display=Display.Always values=(self.sheet_names.map t-> Option t t.pretty))
    sheet : Text | Integer -> Table
    sheet self name:(Text | Integer) =
        self.read_section (Excel_Section.Worksheet name 0 Nothing)

    ## ADVANCED
       Closes the workbook, releasing any resources it holds.

       This method may be used to release the underlying workbook file,
       e.g. to be able to delete it.

       After this method is called, this instance is not usable any more - any
       operation on it will throw an `Illegal_State` error.
    close : Nothing
    close self =
        case self.excel_connection_resource_ref.get of
            Nothing -> Nothing
            resource ->
                resource.finalize
                self.excel_connection_resource_ref.put Nothing
        Nothing

    ## Returns a simple text description of the workbook.
    to_text : Text
    to_text self =
        associated_regular_file = case self.file of
            regular_file : File -> " (" + regular_file.name + ")"
            _ -> ""
        "Excel_Workbook"+associated_regular_file

    ## PRIVATE
       Provides a JS object representation for use in visualizations.
    to_js_object : JS_Object
    to_js_object self =
        headers = if self.headers == Infer then "Infer" else self.headers
        additional_fields = case self.file of
            regular_file : File -> [["file", regular_file.path]]
            _ -> []
        JS_Object.from_pairs <|
            [["type", "Excel_Workbook"], ["headers", headers], ["xls_format", self.xls_format]] + additional_fields

    ## PRIVATE
    with_java_workbook : (Workbook -> Any) -> Any ! Illegal_State
    with_java_workbook self f = Illegal_State.handle_java_exception <|
        case self.excel_connection_resource_ref.get of
            Nothing ->
                Error.throw (Illegal_State.Error "The workbook is being used after it was closed.")
            resource -> resource.with connection->
                connection.withWorkbook f

## PRIVATE
close_connection c = c.close
