from Standard.Base import all

import Standard.Table.Data.Table

from Standard.Table.Excel.Excel_Reader import handle_reader, make_java_headers
from Standard.Table.Excel.Section import Worksheet, Cell_Range
import Standard.Table.Excel.Range.Excel_Range

from Standard.Table.Errors import Invalid_Location_Data, Range_Exceeded_Data, Existing_Data_Data, Column_Count_Mismatch, Column_Name_Mismatch
import Standard.Table.Data.Match_Columns.Match_Columns

polyglot java import org.enso.table.read.ExcelReader
polyglot java import org.enso.table.write.ExcelWriter
polyglot java import org.enso.table.write.ExistingDataMode
polyglot java import org.enso.table.error.ExistingDataException
polyglot java import org.enso.table.error.RangeExceededException
polyglot java import org.enso.table.error.InvalidLocationException

polyglot java import java.lang.IllegalStateException

## PRIVATE
make_java_existing_data_mode : Existing_File_Behavior -> Match_Columns -> ExcelWriter.ExistingDataMode
make_java_existing_data_mode on_existing_file match_columns = case on_existing_file of
    Existing_File_Behavior.Error -> ExistingDataMode.ERROR
    Existing_File_Behavior.Overwrite -> ExistingDataMode.REPLACE
    Existing_File_Behavior.Backup -> ExistingDataMode.REPLACE
    Existing_File_Behavior.Append -> case match_columns of
        Match_Columns.By_Name -> ExistingDataMode.APPEND_BY_NAME
        Match_Columns.By_Position -> ExistingDataMode.APPEND_BY_INDEX

## PRIVATE
   Writes a Table to an Excel file.

   Arguments:
write_file : File -> Table -> Existing_File_Behavior -> (Sheet | Cell_Range) -> (Boolean|Infer) -> Match_Columns -> Problem_Behavior -> Boolean
write_file file table on_existing_file section headers match_columns _ xls_format=False =
    workbook = if file.exists.not then ExcelWriter.createWorkbook xls_format else
        handle_reader file stream->(ExcelReader.getWorkbook stream xls_format)

    existing_data_mode = make_java_existing_data_mode on_existing_file match_columns
    java_headers = make_java_headers headers
    ExcelWriter.setEnsoToTextCallbackIfUnset (.to_text)
    result = handle_writer <| case section of
        Worksheet sheet skip_rows row_limit ->
            ExcelWriter.writeTableToSheet workbook sheet existing_data_mode skip_rows table.java_table row_limit java_headers
        Cell_Range address skip_rows row_limit -> case address of
            Excel_Range.Value java_range -> ExcelWriter.writeTableToRange workbook java_range existing_data_mode skip_rows table.java_table row_limit java_headers
            _ : Text -> ExcelWriter.writeTableToRange workbook address existing_data_mode skip_rows table.java_table row_limit java_headers

    if result.is_error then result else
        write_stream stream = stream.with_java_stream java_stream->
            workbook.write java_stream
        case on_existing_file of
            Existing_File_Behavior.Append ->
                ## Special handling - have successfully added the extra sheet/range so now overwrite file with backup.
                Existing_File_Behavior.Backup.write file write_stream
            _ -> on_existing_file.write file write_stream

## PRIVATE
   Handle and map the Java errors when writing an Excel file
handle_writer ~writer =
    bad_location caught_panic = Error.throw (Invalid_Location_Data caught_panic.payload.cause.getCause)
    handle_bad_location = Panic.catch InvalidLocationException handler=bad_location

    throw_range_exceeded caught_panic = Error.throw (Range_Exceeded_Data caught_panic.payload.cause.getMessage)
    handle_range_exceeded = Panic.catch RangeExceededException handler=throw_range_exceeded

    throw_existing_data caught_panic = Error.throw (Existing_Data_Data caught_panic.payload.cause.getMessage)
    handle_existing_data = Panic.catch ExistingDataException handler=throw_existing_data

    ## Should be impossible - occurs if no fallback serializer is provided.
    throw_illegal_state caught_panic = Panic.throw (Illegal_State_Error_Data caught_panic.payload.cause.getMessage)
    handle_illegal_state = Panic.catch IllegalStateException handler=throw_illegal_state

    handle_illegal_state <| Column_Name_Mismatch.handle_java_exception <|
        Column_Count_Mismatch.handle_java_exception <| handle_bad_location <|
            Illegal_Argument_Error.handle_java_exception <| handle_range_exceeded <| handle_existing_data <|
                writer
