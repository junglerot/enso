from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

polyglot java import org.enso.table.excel.ExcelRange as Java_Range

## PRIVATE
   Wrapper for validation of a value prior to execution.
validate : Boolean -> Text -> Any -> Any
validate validation ~error_message ~wrapped =
    if validation then wrapped else Error.throw (Illegal_Argument.Error error_message)

## PRIVATE
excel_2007_column_limit = 16384

## PRIVATE
excel_2007_row_limit = 1048576

type Excel_Range
    ## Specifies a range within an Excel Workbook.
    Value java_range:Java_Range

    ## Gets the name of the sheet.
    sheet_name : Text
    sheet_name self = self.java_range.getSheetName

    ## Gets the index (1-based) of the top row of the range.
       Returns `Nothing` if referring to a complete column.
    top_row : Integer | Nothing
    top_row self = if self.java_range.isWholeColumn then Nothing else
        self.java_range.getTopRow

    ## Gets the index (1-based) of the bottom row of the range.
       Returns `Nothing` if referring to a complete column.
    bottom_row : Integer | Nothing
    bottom_row self = if self.java_range.isWholeColumn then Nothing else
        self.java_range.getBottomRow

    ## Gets the index (1-based) of the left column of the range.
       Returns `Nothing` if referring to a complete row.
    left_column : Integer | Nothing
    left_column self = if self.java_range.isWholeRow then Nothing else
        self.java_range.getLeftColumn

    ## Gets the index (1-based) of the right column of the range.
       Returns `Nothing` if referring to a complete row.
    right_column : Integer | Nothing
    right_column self = if self.java_range.isWholeRow then Nothing else
        self.java_range.getRightColumn

    ## Is the Excel_Range referring to a single cell
    is_single_cell : Boolean
    is_single_cell self = self.java_range.isSingleCell

    ## Gets the address to this in A1 format.
    address : Text
    address self = self.java_range.getAddress

    ## Displays the Excel_Range.
    to_text : Text
    to_text self = "Excel_Range " + self.address

    ## Validates if a column index (1-based) is within the valid range for
       Excel.

       Arguments:
       - column: 1-based index to check.
    is_valid_column : Integer -> Boolean
    is_valid_column column =
        (column > 0) && (column <= excel_2007_column_limit)

    ## Validates if a row index (1-based) is within the valid range for Excel.

       Arguments:
       - row: 1-based index to check.
    is_valid_row : Integer -> Boolean
    is_valid_row row =
        (row > 0) && (row <= excel_2007_row_limit)

    ## Given a column name, parses to the index (1-based) or return index
       unchanged.
    column_index : (Text|Integer) -> Integer
    column_index column = case column of
        _ : Integer -> column
        _ : Text -> Java_Range.parseA1Column column
        _ -> Error.throw (Illegal_Argument.Error "Column must be a Text or Integer")

    ## Creates a Range from an address.
    from_address : Text -> Excel_Range
    from_address address =
        Illegal_Argument.handle_java_exception <|
            Excel_Range.Value (Java_Range.new address)

    ## Create a Range for a single cell.
    for_cell : Text -> (Text|Integer) -> Integer -> Excel_Range
    for_cell sheet column row =
        col_index = Excel_Range.column_index column

        col_valid = validate (Excel_Range.is_valid_column col_index) ("Invalid column for Excel: " + column.to_text + ".")
        row_valid = validate (Excel_Range.is_valid_row row) ("Invalid row for Excel: " + row.to_text + ".")

        col_valid <| row_valid <|
            Excel_Range.Value (Java_Range.new sheet col_index row)

    ## Create an Excel_Range for a range of cells.
    for_range : Text -> (Text|Integer) -> Integer -> (Text|Integer) -> Integer -> Excel_Range
    for_range sheet left top right bottom =
        left_index = Excel_Range.column_index left
        right_index = Excel_Range.column_index right

        left_valid = validate (Excel_Range.is_valid_column left_index) ("Invalid left column for Excel: " + left.to_text + ".")
        right_valid = validate (Excel_Range.is_valid_column right_index) ("Invalid right column for Excel: " + right.to_text + ".")
        top_valid = validate (Excel_Range.is_valid_row top) ("Invalid top row for Excel: " + top.to_text + ".")
        bottom_valid = validate (Excel_Range.is_valid_row bottom) ("Invalid bottom row for Excel: " + bottom.to_text + ".")

        left_valid <| right_valid <| top_valid <| bottom_valid <|
            Excel_Range.Value (Java_Range.new sheet left_index top right_index bottom)

    ## Create an Excel_Range for a set of columns.
    for_columns : Text -> (Text|Integer) -> (Text|Integer) -> Excel_Range
    for_columns sheet left (right=left) =
        left_index = Excel_Range.column_index left
        right_index = Excel_Range.column_index right

        left_valid = validate (Excel_Range.is_valid_column left_index) ("Invalid left column for Excel: " + left.to_text + ".")
        right_valid = validate (Excel_Range.is_valid_column right_index) ("Invalid right column for Excel: " + right.to_text + ".")

        left_valid <| right_valid <|
            Excel_Range.Value (Java_Range.forColumns sheet left_index right_index)

    ## Create an Excel_Range for a set of rows.
    for_rows : Text -> Integer -> Integer -> Excel_Range
    for_rows sheet top (bottom=top) =
        top_valid = validate (Excel_Range.is_valid_row top) ("Invalid top row for Excel: " + top.to_text + ".")
        bottom_valid = validate (Excel_Range.is_valid_row bottom) ("Invalid bottom row for Excel: " + bottom.to_text + ".")

        top_valid <| bottom_valid <|
            Excel_Range.Value (Java_Range.forRows sheet top bottom)
