from Standard.Base import all
from Standard.Base import all
import Standard.Base.System.File_Format

import project.Data.Table.Table
import project.Data.Column.Column
import project.Data.Column_Selector.Column_Selector
import project.Data.Sort_Column.Sort_Column
import project.Data.Sort_Column_Selector.Sort_Column_Selector
import project.Data.Column_Name_Mapping.Column_Name_Mapping
import project.Data.Data_Formatter.Data_Formatter
import project.Data.Match_Columns.Match_Columns
import project.Data.Position.Position
import project.Data.Aggregate_Column.Aggregate_Column

import project.Delimited.Quote_Style.Quote_Style
import project.Delimited.Delimited_Format
import project.Data.Table_Conversions

import project.Excel.Excel_Section
import project.Excel.Excel_Range.Excel_Range
import project.Excel.Excel_Format

export project.Data.Table.Table
export project.Data.Column.Column
export project.Data.Column_Selector.Column_Selector
export project.Data.Sort_Column.Sort_Column
export project.Data.Sort_Column_Selector.Sort_Column_Selector
export project.Data.Column_Name_Mapping.Column_Name_Mapping
export project.Data.Match_Columns.Match_Columns
export project.Data.Position.Position
export project.Data.Aggregate_Column.Aggregate_Column

export project.Delimited.Quote_Style.Quote_Style
from project.Delimited.Delimited_Format export Delimited_Format, Delimited
export project.Data.Table_Conversions

from project.Excel.Excel_Format export Excel_Format, Excel
from project.Excel.Excel_Section export Excel_Section, Sheet_Names, Range_Names, Worksheet, Cell_Range
export project.Excel.Excel_Range.Excel_Range

export project.Data.Data_Formatter.Data_Formatter

from Standard.Geo.Geo_Json import Object_Type

## ALIAS To Table

   Converts a JSON array into a dataframe, by looking up the requested keys
   from each item.

   Arguments:
   - fields: a vector of texts representing the names of fields to look up.

   The function assumes the elements have one of the following structures:
   - a JSON object containing the requested keys. In case an item is not an
     object, or the request key does not exist, the relevant values of the table
     will be set to `Nothing`.
   - a GeoJSON object of type Feature. The format is described in rfc7946.

   ? Implementation Note
     The GeoJson support is only partial.
     - Supported geometry objects are Position and Point. Rows containing
       other geometry objects are not included in the resulting dataframe.
     - Position arrays are truncated to 3 elements: longitude, latitude
       and elevation.
     - Nested properties are not supported and not included in the resulting
       dataframe.

   > Example Converts a JSON array containing key-value pairs into a table for the
     provided headers.

         from Standard.Table import Table
         import Standard.Examples

         example_to_table =
             json = Examples.simple_table_json
             headers = Examples.simple_table_json_headers
             json.to_table headers
Json.Json.to_table : Vector -> Table
Json.Json.to_table self fields=Nothing = case self of
    Json.Array items ->
        rows = items.map item-> case item of
            Json.Object fs ->
                row = if item.get_type == Object_Type.Feature.to_text then item.get_feature_row else fs
                fields.map n-> row.get n . unwrap . catch Any (_ -> Nothing)
            _ -> Vector.fill fields.length Nothing
        cols = fields.map_with_index i-> n->
            [n, rows.map (_.at i)]
        Table.new cols
    Json.Object _ ->
        if self.get_type != Object_Type.Feature_Collection.to_text then Error.throw (Invalid_Format_Error.Invalid_Format_Error_Data self "not being a feature collection") else
            case self.get "features" of
                Json.Array items ->
                    feature_rows = items.map .get_feature_row
                    column_names = case fields of
                        Nothing ->
                            column_names_row = feature_rows.fold Map.empty acc-> row->
                                row.fold_with_key acc a-> k-> _->
                                    a.insert k 0
                            column_names_row.keys
                        _ -> fields
                    rows = feature_rows.map row->
                        column_names.map n-> row.get n . unwrap . catch Any (_ -> Nothing)
                    cols = column_names.map_with_index i-> n->
                        [n, rows.map (_.at i)]
                    Table.new cols

                _ -> Error.throw (Invalid_Format_Error.Invalid_Format_Error_Data self "not having the 'features' key.")

## UNSTABLE

   An error representing an invalid format for conversion.
type Invalid_Format_Error
    Invalid_Format_Error_Data input message

    ## PRIVATE

       Provides a human-readable representation of the Invalid_Format_Error.
    to_display_text : Text
    to_display_text self =
        "The input " + self.input.to_text + " had an invalid format due to: " + self.message.to_text + "."

