from Standard.Base import all
import Standard.Base.Runtime.Ref.Ref

type Bench
    ## Measure the amount of time it takes to execute a given computation.

       Arguments:
       - act: The action to perform.
       - label: A name for the measurement.
       - iter_size: The number of runs per iteration.
       - num_iters: The number of iterations per measurement.

       > Example
         Measure a computation called "foo" with an iteration size of 2 and a number
         of iterations of 1.

             import Standard.Examples
             from Standard.Test import Bench

             example_measure =
                 Bench.measure Examples.get_boolean "foo" iter_size=2 num_iters=1
    measure : Any -> Text -> Integer -> Integer -> Nothing
    measure ~act label iter_size num_iters =
        dry_run = Environment.get "ENSO_BENCHMARK_TEST_DRY_RUN" "False" == "True"
        result = Ref.new 0.0
        single_call = _ ->
            x1 = System.nano_time
            Runtime.no_inline act
            x2 = System.nano_time
            x2 - x1
        iteration = it_size -> it_num ->
            act_it_num = num_iters - it_num
            res = times it_size single_call
            avg = avg_list res
            fmt = (avg / 1000000).format "%.2f"
            result.put (result.get + avg)
            case dry_run of
                False ->
                    IO.println (label + "/iteration:" + act_it_num.to_text + ": " + fmt + "ms")
                True ->
                    IO.println (label + "/dry-run: " + fmt)
        if dry_run then times 1 (iteration 1) else
            times num_iters (iteration iter_size)
            fmt_avg = (result.get / (1000000*num_iters)).format "%.2f"
            IO.println (label + " average: " + fmt_avg + "ms")

## PRIVATE

   Reverses the provided list.

   Arguments:
   - list: The list to reverse.
reverse_list : List -> List
reverse_list list =
    go = list -> acc -> case list of
        List.Cons h t -> @Tail_Call go t (List.Cons h acc)
        List.Nil -> acc
    res = go list List.Nil
    res

## PRIVATE

   Sums the elements of the list.

   Arguments:
   - list: The list of numbers to sum.
sum_list : List -> Number
sum_list list =
    go = list -> acc -> case list of
        List.Cons a b -> @Tail_Call go b (acc + a)
        List.Nil -> acc

    res = go list 0
    res

## PRIVATE

   Calculate the average of the elements of a numeric list.

   Arguments:
   - list: The list of numbers to calculate the average of.
avg_list : List -> Number
avg_list list = sum_list list / len_list list

## PRIVATE

   Calculates the length of the provided list.

   Arguments:
   - list: The list to calculate the length of.
len_list : List -> Integer
len_list list =
    go = list -> acc -> case list of
        List.Cons _ b -> @Tail_Call go b (acc + 1)
        List.Nil -> acc
    res = go list 0
    res

## PRIVATE

   Perform an action a number of times.

   Arguments:
   - act: The action to perform `count` number of times.
times : Integer -> (Integer -> Any) -> List Any
times count act =
    go = results -> number -> if number == 0 then results else
        @Tail_Call go (List.Cons (act number) results) number-1
    res = reverse_list (go List.Nil count)
    res
