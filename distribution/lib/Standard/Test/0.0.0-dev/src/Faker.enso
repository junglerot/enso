from Standard.Base import all

polyglot java import java.util.Random
polyglot java import org.enso.base.Text_Utils

upper_case_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".char_vector
lower_case_letters = "abcdefghijklmnopqrstuvwxyz".char_vector
numbers = "0123456789".char_vector

## Creates a new Faker which can be used for creating test values.

   Arguments:
   - seed: Optional seed value to make the sequence deterministic
new : Integer -> Faker
new (seed = 0) =
    generator = if seed == 0 then Random.new else Random.new seed
    Faker generator

## Object to generate (deterministic) random value for testing
type Faker
    type Faker generator

    ## Creates a random Text based on a template of character sets.

       Arguments:
       - template: Vector of vectors that represent the possible characters for each
         letter, as UTF-16 code units.

       > Examples:
         Creates a fake UK National Insurance number:

                l = "ABCEGHJKLMNOPRSTWXYZ".char_vector
                n = "0123456789".char_vector
                s = "ABCDFMP ".char_vector
                template = [l, l, n, n, n, n, n, s]
                ni_number = Faker.new . string_value template
    string_value : Vector -> Text
    string_value template =
        characters = template.map possible_chars->
            selected_char_ix = self.generator.nextInt possible_chars.length
            possible_chars.at selected_char_ix
        Text.from_char_vector characters

    ## Generates a Text consisting of lower/upper case characters.

       Arguments:
       - length: length of text to generate
       - upper_case: use upper_case letters
    alpha : Integer->Boolean->Text
    alpha length=1 upper_case=False =
        alphabet = if upper_case then upper_case_letters else lower_case_letters
        self.string_value <| 0.up_to length . map _->alphabet

    ## Generates a Text consisting of lower/upper case characters and digits.

       Arguments:
       - length: length of text to generate
       - upper_case: use upper_case letters
    alpha_numeric : Integer->Boolean->Text
    alpha_numeric length=1 upper_case=False =
        alphabet = (if upper_case then upper_case_letters else lower_case_letters) + numbers
        self.string_value <| 0.up_to length . map _->alphabet

    ## Generates a Text for a hexadecimal number

       Arguments:
       - length: length of text to generate
    hexadecimal : Integer->Text
    hexadecimal length=1 =
        alphabet = "0123456789ABCDEF".char_vector
        self.string_value <| 0.up_to length . map _->alphabet

    ## Create a random Boolean value
    boolean : Boolean
    boolean =
        if self.generator.nextDouble < 0.5 then True else False

    ## Create a random Integer value
    integer : Integer->Integer->Integer
    integer minimum=0 maximum=100 =
        minimum + (self.generator.nextInt (maximum - minimum))

    ## Create a random Decimal value
    decimal : Decimal->Decimal->Decimal
    decimal minimum=0.0 maximum=1.0 =
        minimum + self.generator.nextDouble * (maximum - minimum)

    ## Picks an item at Random from a list

       Arguments:
       - items: Vector of items to pick from
       - generator: Random number generator
    vector_item : Vector->Any
    vector_item items =
        items.at (self.generator.nextInt items.length)

    ## Randomly converts some values to Nothing
    make_some_nothing : Any->Decimal->Any
    make_some_nothing value (chance=0.1) =
        if self.generator.nextDouble <= chance then Nothing else value
