from Standard.Base import all
import Standard.Base.Data.Time.Duration
import Standard.Base.Runtime.State
import Standard.Base.System

polyglot java import java.lang.NullPointerException
polyglot java import java.lang.StringBuilder

## Creates a new test group, describing properties of the object
   described by `self`.

   Arguments:
   - specs: An action encapsulating a number of test specs or groups.

   > Example
     Building a basic test suite.

         import Standard.Test

         example_run_main = Test.Suite.run_main <|
             Test.group "Number" <|
                 Test.specify "should define addition" <|
                     2+3 . should_equal 5
                 Test.specify "should define multiplication" <|
                     2*3 . should_equal 6
Suite.run_main : Any -> Nothing
Suite.run_main ~specs =
    config = config_from_env
    r = Suite.run specs config
    code = if r.is_fail then 1 else 0
    System.exit code


## PRIVATE
find_project_root : File -> File
find_project_root path =
    if path.is_nothing then Nothing else
        handler _ = Nothing
        Panic.catch NullPointerException handler=handler <|
            if path.name == "src" then path.parent else
                @Tail_Call find_project_root path.parent


## PRIVATE
find_caller_script : [Stack_Trace_Element] -> File
find_caller_script stack =
    find_main idx =
        if stack.at idx . name == "Suite.type.run_main" then idx else
            @Tail_Call find_main (idx + 1)
    main_index = find_main 0

    find_caller idx =
        source = stack.at idx . source_location
        if source.is_a Source_Location_Data then stack.at idx . source_location . file else
            if (idx + 1 == stack.length) then Nothing else
                @Tail_Call find_caller (idx + 1)

    find_caller (main_index + 1)


## PRIVATE
   Creates an Suite_Config based off environment and caller location
config_from_env : Suite_Config
config_from_env =
    only_group_regexp = Environment.get "TEST_ONLY_GROUP"
    print_only_failures = Environment.get "REPORT_ONLY_FAILED" != Nothing
    junit_folder = Environment.get "ENSO_TEST_JUNIT_DIR"
    results_path = if junit_folder.is_nothing then Nothing else
        caller_script = find_caller_script Runtime.get_stack_trace
        project_root = find_project_root caller_script
        case project_root.is_nothing of
            True ->
                IO.println "Unable to determine root project path. JUnit output disabled."
                Nothing
            False ->
                (File.new junit_folder) / project_root.name / "JUnit.xml"

    Suite_Config_Data only_group_regexp print_only_failures results_path


## Creates a new test group, describing properties of the object
   described by `self`.

   Arguments:
   - specs: An action encapsulating a number of test specs or groups.

   > Example
     Building a basic test suite.

         import Standard.Test

         example_run = Test.Suite.run <|
             Test.group "Number" <|
                 Test.specify "should define addition" <|
                     2+3 . should_equal 5
                 Test.specify "should define multiplication" <|
                     2*3 . should_equal 6
Suite.run : Any -> Suite_Config -> Any
Suite.run ~specs config =
    builder = if config.should_output_junit then StringBuilder.new else Nothing
    wrap_junit_testsuites config builder <|
        State.run Suite (Suite_Data config Nil builder) <|
            specs
            State.get Suite


## Creates a new test group, describing properties of the object
   described by `self`.

   Arguments:
   - name: The name of the test group.
   - behaviors: An action containing a set of specs for the group.
   - pending: A reason for why the test is pending, or `Nothing` when it is not
     pending.

   > Example
     Adding a test group.

         import Standard.Test

         example_group = Test.Suite.run <|
             Test.group "Number" <| Nothing
group : Text -> Any -> (Text | Nothing) -> Nothing
group name ~behaviors pending=Nothing =
    suite = State.get Suite
    config = suite.config
    if config.should_run_group name then
        case pending of
            Nothing ->
                r = State.run Spec (Spec_Data name  Nil) <|
                    behaviors
                    State.get Spec
                r.print_report config suite.builder
                new_suite = Suite_Data suite.config (Cons r suite.specs) suite.builder
                State.put Suite new_suite
            reason ->
                report_pending_group name reason config suite.builder

## Specifies a single behavior, described by `self`.

   Arguments:
   - label: A description of the behavior being tested.
   - behavior: An action that executes tests.
   - pending: A reason for why the test is pending, or `Nothing` when it is not
     pending.

   > Example
     Adding a specification to the test group.

         import Standard.Test

         example_group = Test.Suite.run <|
             Test.group "Number" <|
                 Test.specify "should define addition" <|
                     2+3 . should_equal 5
   > Example
     Adding a pending specification to the test group.

         import Standard.Test

         example_group = Test.Suite.run <|
             Test.group "Number" <|
                 Test.specify "should define addition" pending="Reason" <|
                     2+3 . should_equal 5
specify : Text -> Any -> (Text | Nothing) -> Nothing
specify label ~behavior pending=Nothing =
    pair = case pending of
        Nothing -> Duration.time_execution (run_spec behavior)
        reason -> Pair_Data Duration.zero (Pending reason)
    result = pair.second
    time_taken = pair.first
    spec = State.get Spec
    new_spec = Spec_Data spec.name (Cons (Behavior_Data label result time_taken) spec.behaviors)
    State.put Spec new_spec

## PRIVATE

   Asserts a property about the receiver.

   Arguments:
   - verb: The property (see `Verbs`) being asserted
   - argument: The argument to the verb.
Any.should : (Verbs -> Any -> Any) -> Any -> Assertion
Any.should self verb argument = verb Verbs self argument

## Fail a test with the given message.

   Arguments:
   - message: The message printed when failing the test.

   > Example
     Failing a test manually.

         import Standard.Test

         example_fail = Test.fail "Something went wrong."
fail : Text -> Assertion
fail message details=Nothing =
    failure = Failure message details
    Panic.throw failure

## Expect a function to fail with the provided dataflow error.

   Arguments:
   - matcher: The expected type of dataflow error contained in `self`.
   - frames_to_skip (optional, advanced): used to alter the location which is
     displayed as the source of this error.

   > Example
     Assert that a computation should return an error of a given type.

         import Standard.Examples
         import Standard.Test

         example_should_fail_with =
            Examples.throw_error . should_fail_with Examples.My_Error
Any.should_fail_with : Any -> Integer -> Assertion
Any.should_fail_with self matcher frames_to_skip=0 =
    loc = Meta.get_source_location 1+frames_to_skip
    fail ("Expected an error " + matcher.to_text + " but no error occurred, instead got: " + self.to_text + " (at " + loc + ").")

## Expect a function to fail with the provided dataflow error.

   Arguments:
   - matcher: The expected type of dataflow error contained in `self`.
   - frames_to_skip (optional, advanced): used to alter the location which is
     displayed as the source of this error.

   > Example
     Assert that a computation should return an error of a given type.

         import Standard.Examples
         import Standard.Test

         example_should_fail_with =
            Examples.throw_error . should_fail_with Examples.My_Error
Error.should_fail_with : Any -> Integer -> Assertion
Error.should_fail_with self matcher frames_to_skip=0 =
    caught = self.catch
    if caught.is_a matcher then Nothing else
        loc = Meta.get_source_location 2+frames_to_skip
        fail ("Expected error "+matcher.to_text+", but error " + caught.to_text + " has been returned (at " + loc + ").")

## Expect a function to fail with the provided panic.

   Arguments:
   - action: The action to evaluate that is expected to fail with a panic.
   - matcher: The expected type of the panic thrown by `action`.

   > Example
     Expect that a computation should panic as part of a test.

         import Standard.Examples
         import Standard.Test

         example_expect_panic_with =
             Test.expect_panic_with Examples.throw_panic Examples.My_Error
expect_panic_with : Any -> Any -> Assertion
expect_panic_with ~action matcher =
    res = Panic.recover Any action
    case res of
        _ ->
            loc = Meta.get_source_location 2
            return_suffix = if res.is_nothing then "" else "and returned ["+res.to_text+"]"
            fail ("Expected a " + matcher.to_text + " to be thrown, but the action succeeded " + return_suffix + " (at "+loc+").")
    err = res.catch
    if err.is_a matcher then Nothing else
        fail ("Expected a " + matcher.to_text + ", but " + err.to_text + " was thrown instead.")

## Asserts that `self` value is equal to the expected value.

   Arguments:
   - that: The value to check `self` for equality with.
   - frames_to_skip (optional, advanced): used to alter the location which is
     displayed as the source of this error.

   > Example
     Assert that one value should equal another,

         import Standard.Examples
         import Standard.Test

         example_should_equal = Examples.add_1_to 1 . should_equal 2
Any.should_equal : Any -> Integer -> Assertion
Any.should_equal self that frames_to_skip=0 = case self == that of
    True -> Success
    False ->
        loc = Meta.get_source_location 2+frames_to_skip
        msg = self.to_text + " did not equal " + that.to_text + " (at " + loc + ")."
        fail msg

## Asserts that `self` value is equal to the expected type value.

   Arguments:
   - that: The type to check `self` for equality with.
   - frames_to_skip (optional, advanced): used to alter the location which is
     displayed as the source of this error.

   > Example
     Assert that some type is equal to another.,

         import Standard.Examples
         import Standard.Test

         example_should_equal = Examples.some_tpe . should_equal_tpe Vector.Vector
Any.should_equal_type : Any -> Integer -> Assertion
Any.should_equal_type self that frames_to_skip=0 = case (self.is_same_object_as that) of
    True -> Success
    False ->
        loc = Meta.get_source_location 2+frames_to_skip
        msg = self.to_text + " did not equal type " + that.to_text + " (at " + loc + ")."
        fail msg

## Asserts that `self` value is not equal to the expected value.

   Arguments:
   - that: The value to check `self` for equality with.
   - frames_to_skip (optional, advanced): used to alter the location which is
     displayed as the source of this error.

   > Example
     Assert that one value should equal another,

         import Standard.Examples
         import Standard.Test

         example_should_not_equal = Examples.add_1_to 1 . should_not_equal 2
Any.should_not_equal : Any -> Integer -> Assertion
Any.should_not_equal self that frames_to_skip=0 = case self != that of
    True -> Success
    False ->
        loc = Meta.get_source_location 2+frames_to_skip
        msg = self.to_text + " did equal " + that.to_text + " (at " + loc + ")."
        fail msg

## Asserts that `self` value is not equal to the expected type value.

   Arguments:
   - that: The type to check `self` for equality with.
   - frames_to_skip (optional, advanced): used to alter the location which is
     displayed as the source of this error.

   > Example
     Assert that some type is equal to another.,

         import Standard.Examples
         import Standard.Test

         example_should_not_equal = Examples.some_tpe . should_not_equal_tpe Vector.Vector
Any.should_not_equal_type : Any -> Integer -> Assertion
Any.should_not_equal_type self that frames_to_skip=0 = case (self.is_same_object_as that . not) of
    True -> Success
    False ->
        loc = Meta.get_source_location 2+frames_to_skip
        msg = self.to_text + " did equal type " + that.to_text + " (at " + loc + ")."
        fail msg

## Asserts that `self` value is equal to the expected value.

   Arguments:
   - _: The value to check `self` for equality with.

   > Example
     Assert that one value should equal another,

         import Standard.Examples
         import Standard.Test

         example_should_equal = Examples.add_1_to 1 . should_equal 2
Error.should_equal : Any -> Assertion
Error.should_equal self _ frames_to_skip=0 = fail_match_on_unexpected_error self 1+frames_to_skip

## Asserts that `self` is within `epsilon` from `that`.

   Arguments:
   - that: The value to compare `self` for equality with.
   - epsilon: The epislon for comparing two decimal numbers.
   - frames_to_skip (optional, advanced): used to alter the location which is
     displayed as the source of this error.

   > Example
     Compare two decimal values.

         import Standard.Test

         example_should_equal = 1.1 . should_equal 1.1

   > Example
     Compare two decimal values with an epsilon (tolerance).

         import Standard.Test

         example_should_equal =
            1.00000001 . should_equal 1.00000002 epsilon=0.0001
Number.should_equal : Decimal -> Decimal -> Integer -> Assertion
Number.should_equal self that epsilon=0 frames_to_skip=0 =
    matches = case that of
        _ : Number -> self.equals that epsilon
        _ -> False
    case matches of
        True -> Success
        False ->
            loc = Meta.get_source_location 2+frames_to_skip
            msg = self.to_text + " did not equal " + that.to_text + " (at " + loc + ")."
            fail msg

## Asserts that `self` value is not an error.

   It returns the original value, so that it can be inspected further.

   Arguments:
   - frames_to_skip (optional, advanced): used to alter the location which is
     displayed as the source of this error.

   > Example
     Assert that a given action did not result in errors or warnings.

         "foobar".write (enso_project.data / "f.txt") . should_succeed
Any.should_succeed : Boolean -> Integer -> Any
Any.should_succeed self frames_to_skip=0 =
    _ = frames_to_skip
    self

## Asserts that `self` value is not an error.

   It returns the original value, so that it can be inspected further.

   Arguments:
   - frames_to_skip (optional, advanced): used to alter the location which is
     displayed as the source of this error.

   > Example
     Assert that a given action did not result in errors or warnings.

         "foobar".write (enso_project.data / "f.txt") . should_succeed
Error.should_succeed : Boolean -> Integer -> Any
Error.should_succeed self frames_to_skip=0 =
    fail_match_on_unexpected_error self 1+frames_to_skip

## Checks that the provided action returns without any errors or warnings.

   If you just want to check for errors, usage of the `.should_succeed`
   extension function is preferred.
assert_no_problems value frames_to_skip=0 =
    value.catch Any _->
        fail_match_on_unexpected_error value 2+frames_to_skip
    warnings = Warning.get_all value . map .value
    if warnings.not_empty then
        loc = Meta.get_source_location 2+frames_to_skip
        msg = "The action returned unexpected warnings: " + warnings.to_text + " (at " + loc + ")."
        fail msg

## Asserts that the given `Boolean` is `True`

   > Example
     Assert that a boolean value is true.

         import Standard.Examples
         import Standard.Test

         example_should_be_true = Examples.get_boolean . should_be_true
Boolean.should_be_true : Assertion
Boolean.should_be_true self = case self of
    True -> Success
    False ->
        loc = Meta.get_source_location 2
        Panic.throw (Failure "Expected False to be True (at "+loc+").")

## Asserts that the given `Boolean` is `True`.

   > Example
     Assert that a boolean value is true.

         import Standard.Examples
         import Standard.Test

         example_should_be_true = Examples.get_boolean . should_be_true
Error.should_be_true : Assertion
Error.should_be_true self = fail_match_on_unexpected_error self 1

## Asserts that the given `Boolean` is `False`

   > Example
     Assert that a boolean value is false.

         import Standard.Examples
         import Standard.Test

         example_should_be_false = Examples.get_boolean . should_be_false
Boolean.should_be_false : Assertion
Boolean.should_be_false self = case self of
    True ->
        loc = Meta.get_source_location 2
        Panic.throw (Failure "Expected True to be False (at "+loc+").")
    False -> Success

## Asserts that the given `Boolean` is `False`

   > Example
     Assert that a boolean value is false.

         import Standard.Examples
         import Standard.Test

         example_should_be_false = Examples.get_boolean . should_be_false
Error.should_be_false : Assertion
Error.should_be_false self = fail_match_on_unexpected_error self 1

## Asserts that a value is of a given type.

   Arguments:
   - typ: The type to assert that `self` is a value of.

   > Examples
     Assert that 1 is of type Boolean.

         import Standard.Test

         example_should_be_a = 1.should_be_a Boolean
Any.should_be_a : Any -> Assertion
Any.should_be_a self typ = if self.is_a typ || self==typ then Success else
    loc = Meta.get_source_location 0
    expected_type = Meta.get_qualified_type_name typ
    actual_type = Meta.get_qualified_type_name self
    message = "Expected a value of type " + expected_type + " but got a value of type " + actual_type + " instead (at " + loc + ")."
    Panic.throw <| Failure message

## Asserts that a value is of a given type.

   Arguments:
   - typ: The type to assert that `self` is a value of.

   > Examples
     Assert that 1 is of type Integer.

         import Standard.Test

         example_should_be_an = 1.should_be_an Integer
Any.should_be_an : Any -> Assertion
Any.should_be_an self typ = self.should_be_a typ

## Asserts that `self` value contains the same elements as `that`.

   It only checks that all elements from one collection are also present in the
   other one. Arities of elements are not checked, so the collections can still
   differ in length by containing duplicate elements.

   It will work on any collection which supports the methods
   `each : (Any -> Nothing) -> Any` and `contains : Any -> Boolean`.

   Arguments:
   - that: The collection to compare.
   - frames_to_skip (optional, advanced): used to alter the location which is
     displayed as the source of this error.

   > Example
     Assert that one vector should contain the same elements as another.

         import Standard.Examples
         import Standard.Test

         example_should_equal = [1, 2] . should_contain_the_same_elements_as [2, 1]
Any.should_contain_the_same_elements_as : Any -> Integer -> Assertion
Any.should_contain_the_same_elements_as self that frames_to_skip=0 =
    loc = Meta.get_source_location 1+frames_to_skip
    that.each element->
        if self.contains element . not then
            msg = "The collection (" + self.to_text + ") did not contain "+element.to_text+" (at " + loc + ")."
            fail msg
    self.each element->
        if that.contains element . not then
            msg = "The collection contained an element ("+element.to_text+") which was not expected (at " + loc + ")."
            fail msg

## Asserts that `self` value contains the same elements as `that`.

   It only checks that all elements from one collection are also present in the
   other one. Arities of elements are not checked, so the collections can still
   differ in length by containing duplicate elements.

   It will work on any collection which supports the methods
   `each : (Any -> Nothing) -> Any` and `contains : Any -> Boolean`.

   Arguments:
   - _: The collection to compare.
   - frames_to_skip (optional, advanced): used to alter the location which is
     displayed as the source of this error.

   > Example
     Assert that one vector should contain the same elements as another.

         import Standard.Examples
         import Standard.Test

         example_should_equal = [1, 2] . should_contain_the_same_elements_as [2, 1]
Error.should_contain_the_same_elements_as : Any -> Assertion
Error.should_contain_the_same_elements_as self _ frames_to_skip=0 = fail_match_on_unexpected_error self 1+frames_to_skip


type Verbs
    ## PRIVATE

       Checks if the `subject` starts with `argument`.

       Arguments:
       - subject: The value to check. It must have a `.starts_with` method.
       - argument: The expected prefix.
    start_with : Text -> Text -> Assertion
    start_with self subject argument =
        if subject.starts_with argument then Success else
            fail (subject.to_text + " did not start with " + argument.to_text)

    ## PRIVATE

       Checks if the `subject` is equal to the `argument`.

       Arguments:
       - subject: The value to check for equality against the provided value.
       - argument: The provided value to check the `subject` for equality
         against.
    equal : Any -> Any -> Assertion
    equal self subject argument =
        if subject == argument then Success else
            msg = subject.to_text + " did not equal " + argument.to_text + "."
            fail msg

    ## PRIVATE

       Checks if `subject` is `argument`.

       Arguments:
       - subject: The value to check for equality against the provided value.
       - argument: The provided value to check the `subject` for equality
         against.
    be : Any -> Any -> Assertion
    be self subject argument = self.equal subject argument

    ## PRIVATE

       Checks if `subject` contains `argument`.

       Arguments:
       - subject: The collection type to check if `argument` is contained in it.
         This type must have a `.contains` method.
       - argument: The value to see if it is contained in `subject`.
    contain : Any -> Any -> Assertion
    contain self subject argument =
        if subject.contains argument then Success else
            msg = subject.to_text + " did not contain " + argument.to_text + "."
            fail msg

from project.Main.Suite_Config import all

## PRVATE
type Suite_Config
    Suite_Config_Data only_group_regexp print_only_failures output_path

    should_run_group self name =
        regexp = self.only_group_regexp
        case regexp of
            _ : Text -> name.matches regexp . catch Any (_->True)
            _ -> True

    should_output_junit self =
        self.output_path.is_nothing.not

from project.Main.Suite import all

## PRIVATE

   The top-level entry point for a test suite.

   Arguments:
   - config: Suite_Config controlloing the test run.
   - specs: The specs contained within the test suite.
   - builder: StringBuilder for JUnit output.
type Suite
    Suite_Data config specs builder

from project.Main.Spec import all

## PRIVATE

   A group of behaviors for a test.

   Arguments:
   - name: The name of the spec.
   - behaviors: The results of the behaviors encapsulated in that spec.
type Spec
    Spec_Data name behaviors

from project.Main.Behavior import all

## PRIVATE

   A description of a behaviors in a test.

   Arguments:
   - name: The name of the behavior.
   - result: The result of the behavior.
   - time_taken: The duration that the behaviour took to run.
type Behavior
    Behavior_Data name result time_taken

## PRIVATE

   Checks if the behavior is a failure.
Behavior.is_fail : Boolean
Behavior.is_fail self = self.result.is_fail

## PRIVATE

   Checks if the spec group contains any failures and hence fails itself.
Spec.is_fail : Boolean
Spec.is_fail self = self.behaviors.any .is_fail

## PRIVATE

   Checks if the suite contains any failures, and hence fails itself.
Suite.is_fail : Boolean
Suite.is_fail self = self.specs.any .is_fail

from project.Main.Finished_With_Error import all

## PRIVATE

   An error describing that a test finished with an unexpected error.

   Arguments:
   - err: The payload of the error that triggered this error.
   - stack_trace_text: A textual representation of the stack trace for the
     error.
type Finished_With_Error
    Finished_With_Error_Data err stack_trace_text

from project.Main.Assertion import all
from project.Main.Assertion export all

## PRIVATE
type Assertion

    ## PRIVATE

       Represents a successful behavioral test.
    Success

    ## PRIVATE

       Represents a failing behavioral test.

       Arguments:
       - message: The reason why the test failed.
       - details: Additional context of the error, for example the stack trace.
    Failure message details

    ## PRIVATE

       Represents a pending behavioral test.

       Arguments:
       - reason: Text describing why the test is pending.
    Pending reason

    ## PRIVATE

       Checks if the Assertion is a failure.
    is_fail : Boolean
    is_fail self = case self of
        Success -> False
        Failure _ _ -> True
        Pending _ -> False

## PRIVATE

   Executes a behavior test.

   Arguments:
   - behavior: The behavior to execute.
run_spec : Any -> Assertion
run_spec ~behavior =
    recovery = Panic.recover Any <|
        result = behavior
        result.catch Any err->
            Panic.throw (Finished_With_Error_Data err result.get_stack_trace_text)
        Nothing
    maybeExc = case recovery of
        _ -> Success
    result = maybeExc.catch Any ex->
        case ex of
            Failure _ _ -> ex
            Finished_With_Error_Data err stack_trace_text ->
                Failure ("An unexpected error was returned: " + err.to_text) details=stack_trace_text
            _ -> Failure ("An unexpected panic was thrown: " + ex.to_text) details=maybeExc.get_stack_trace_text
    result

## PRIVATE
   Reports an unexpected dataflow error has occurred.
fail_match_on_unexpected_error : Error -> Integer -> Nothing
fail_match_on_unexpected_error error frames_to_skip =
    payload = error.catch
    loc = Meta.get_source_location 1+frames_to_skip
    msg = "An unexpected dataflow error (" + payload.to_text + ") has been matched (at " + loc + ")."
    fail msg+'\n'+error.get_stack_trace_text


## PRIVATE
   Write the JUnit XML header.
wrap_junit_testsuites : Suite_Config -> (StringBuilder|Nothing) -> Any -> Nothing
wrap_junit_testsuites config builder ~action =
    if config.should_output_junit then
        builder.append '<?xml version="1.0" encoding="UTF-8"?>\n'
        builder.append '<testsuites>\n'

    result = action

    if config.should_output_junit then
        builder.append '</testsuites>\n'
        config.output_path.parent.create_directory
        builder.toString.write config.output_path

    result


## PRIVATE
   Record JUnit PENDING group.
report_pending_group : Text -> Text -> Suite_Config -> (StringBuilder|Nothing) -> Nothing
report_pending_group name reason config builder =
    if config.should_output_junit then
        builder.append ('    <testsuite name="' + (escape_xml name) + '" timestamp="' + (Date_Time.now.format "yyyy-MM-dd'T'HH:mm:ss") + '" time="0">\n')
        builder.append ('        <testcase name="' + (escape_xml name) + '"><skipped message="' + (escape_xml reason) + '" /></testcase>\n')
        builder.append '    </testsuite>\n'

    IO.println ("[PENDING] " + name)
    IO.println ("    Reason: " + reason)


## PRIVATE
   Prints a report on the tests to standard output.
Spec.print_report : Suite_Config -> (StringBuilder|Nothing) -> Nothing
Spec.print_report self config builder =
    total_time = self.behaviors.fold Duration.zero acc-> behavior->
        acc + behavior.time_taken
    if config.should_output_junit then
        builder.append ('    <testsuite name="' + (escape_xml self.name) + '" timestamp="' + (Date_Time.now.format "yyyy-MM-dd'T'HH:mm:ss") + '"')
        builder.append (' tests="' + self.behaviors.length.to_text + '"')
        builder.append (' disabled="' + self.behaviors.filter (x->(x.is_a Pending)) . length . to_text + '"')
        builder.append (' errors="' + self.behaviors.filter (x->(x.is_a Failure)) . length . to_text + '"')
        builder.append (' time="' + (total_time.total_seconds).to_text + '"')
        builder.append ('>\n')

        self.behaviors.reverse.each behavior->
            builder.append ('        <testcase name="' + (escape_xml behavior.name) + '" time="' + ((behavior.time_taken.total_milliseconds / 1000.0).to_text) + '">')
            case behavior.result of
                Success -> Nothing
                Failure msg details ->
                    escaped_message = escape_xml msg . replace '\n' '&#10;'
                    builder.append ('\n            <error message="' + escaped_message + '">\n')
                    if details.is_nothing.not then
                        ## We duplicate the message, because sometimes the
                           attribute is skipped if the node has any content.
                        builder.append (escape_xml msg)
                        builder.append '\n'
                        builder.append (escape_xml details)
                    builder.append '</error>\n'
                Pending msg -> builder.append ('\n            <skipped message="' + (escape_xml msg) + '"/>\n        ')
            builder.append '</testcase>\n'
        builder.append '    </testsuite>\n'

    should_print_behavior = config.print_only_failures.not || self.behaviors.any (b -> b.result.is_a Failure)
    if should_print_behavior then
        IO.println (self.name + ":  [" + total_time.total_milliseconds.to_text + "ms]")
        self.behaviors.reverse.each behavior->
            case behavior.result of
                Success ->
                    if config.print_only_failures.not then
                        IO.println ("    - " + behavior.name + " [" + behavior.time_taken.total_milliseconds.to_text + "ms]")
                Failure msg details ->
                    IO.println ("    - [FAILED] " + behavior.name + " [" + behavior.time_taken.total_milliseconds.to_text + "ms]")
                    IO.println ("        Reason: " + msg)
                    if details.is_nothing.not then
                        IO.println details
                Pending reason ->
                    if config.print_only_failures.not then
                        IO.println ("    - [PENDING] " + behavior.name)
                        IO.println ("        Reason: " + reason)


## PRIVATE
   Escape Text for XML
escape_xml : Text -> Text
escape_xml input =
    input.replace '&' '&amp;' . replace '"' '&quot;' . replace "'" '&apos;' . replace '<' '&lt;' . replace '>' '&gt;'
