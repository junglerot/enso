from Standard.Base import all
import Standard.Base.Runtime.Context

import project.Suite_Config.Suite_Config
import project.Test.Test
import project.Test_Result.Test_Result

polyglot java import java.lang.StringBuilder

## PRIVATE
   Write the JUnit XML header.
wrap_junit_testsuites : Suite_Config -> (StringBuilder|Nothing) -> Any -> Nothing
wrap_junit_testsuites config builder ~action =
    if config.should_output_junit then
        builder.append '<?xml version="1.0" encoding="UTF-8"?>\n'
        builder.append '<testsuites>\n'

    result = action

    if config.should_output_junit then
        builder.append '</testsuites>\n'

        Context.Output.with_enabled <|
            config.output_path.parent.create_directory
            builder.toString.write config.output_path

    result

## PRIVATE
use_ansi_colors : Boolean
use_ansi_colors = Environment.get "ENSO_TEST_ANSI_COLORS" . is_nothing . not

## PRIVATE
failure_message : Text
failure_message =
    fail = 'FAILED'
    if use_ansi_colors then '\u001b[31;1m'+fail+'\u001b[0m' else fail

## PRIVATE
   Prints a report on the tests to standard output.
print_report : Test -> Suite_Config -> (StringBuilder|Nothing) -> Nothing
print_report spec config builder =
    total_time = spec.behaviors.fold Duration.zero acc-> behavior->
        acc + behavior.time_taken
    if config.should_output_junit then
        builder.append ('    <testsuite name="' + (escape_xml spec.name) + '" timestamp="' + (Date_Time.now.format "yyyy-MM-dd'T'HH:mm:ss") + '"')
        builder.append (' tests="' + spec.behaviors.length.to_text + '"')
        builder.append (' disabled="' + spec.behaviors.filter _.is_pending . length . to_text + '"')
        builder.append (' errors="' + spec.behaviors.filter _.is_fail . length . to_text + '"')
        builder.append (' time="' + total_time.total_seconds.to_text + '"')
        builder.append ('>\n')

        spec.behaviors.reverse.each behavior->
            builder.append ('        <testcase name="' + (escape_xml behavior.name) + '" time="' + ((behavior.time_taken.total_milliseconds / 1000.0).to_text) + '">')
            case behavior.result of
                Test_Result.Success -> Nothing
                Test_Result.Failure msg details ->
                    escaped_message = escape_xml msg . replace '\n' '&#10;'
                    builder.append ('\n            <failure message="' + escaped_message + '">\n')
                    # We always print the message again as content - otherwise the GitHub action may fail to parse it.
                    builder.append (escape_xml msg)
                    if details.is_nothing.not then
                        ## If there are additional details, we print them as well.
                        builder.append '\n\n'
                        builder.append (escape_xml details)
                    builder.append '\n            </failure>\n'
                Test_Result.Pending msg -> builder.append ('\n            <skipped message="' + (escape_xml msg) + '"/>\n        ')
            builder.append '        </testcase>\n'
        builder.append '    </testsuite>\n'

    should_print_behavior = config.print_only_failures.not || spec.behaviors.any (b -> b.result.is_fail)
    if should_print_behavior then
        spec_description =
            counts = spec.tests_succeeded.to_text + "/" + spec.tests_executed.to_text
            times = total_time.total_milliseconds.to_text + "ms"
            "[" + counts + ", " + times + "]"
        IO.println (spec.name + ":  " + spec_description)
        spec.behaviors.reverse.each behavior->
            make_behavior_description behavior =
                times = behavior.time_taken.total_milliseconds.to_text + "ms"
                "[" + times + "]"
            case behavior.result of
                Test_Result.Success ->
                    if config.print_only_failures.not then
                        IO.println ("    - " + behavior.name + " " + make_behavior_description behavior)
                Test_Result.Failure msg details ->
                    IO.println ("    - ["+failure_message+"] " + behavior.name + " " + make_behavior_description behavior)
                    IO.println ("        Reason: " + msg)
                    if details.is_nothing.not then
                        IO.println details
                Test_Result.Pending reason ->
                    if config.print_only_failures.not then
                        IO.println ("    - [PENDING] " + behavior.name)
                        IO.println ("        Reason: " + reason)

## PRIVATE
   Record JUnit PENDING group.
report_pending_group : Text -> Text -> Suite_Config -> (StringBuilder|Nothing) -> Nothing
report_pending_group name reason config builder =
    if config.should_output_junit then
        builder.append ('    <testsuite name="' + (escape_xml name) + '" timestamp="' + (Date_Time.now.format "yyyy-MM-dd'T'HH:mm:ss") + '" time="0">\n')
        builder.append ('        <testcase name="' + (escape_xml name) + '"><skipped message="' + (escape_xml reason) + '" /></testcase>\n')
        builder.append '    </testsuite>\n'

    IO.println ("[PENDING] " + name)
    IO.println ("    Reason: " + reason)

## PRIVATE
   Escape Text for XML
escape_xml : Text -> Text
escape_xml input =
    input.replace '&' '&amp;' . replace '"' '&quot;' . replace "'" '&apos;' . replace '<' '&lt;' . replace '>' '&gt;'
