from Standard.Base import all
import Standard.Base.Error.File_Error.File_Error

import project.Read_Flag.Read_Flag
import project.Write_Flag.Write_Flag
import project.Data.Histogram.Histogram
import project.Data.Matrix.Matrix
import project.Data.Matrix_Error.Matrix_Error

polyglot java import java.lang.Exception as JException
polyglot java import org.enso.image.data.Histogram as Java_Histogram
polyglot java import org.enso.image.data.Image as Java_Image
polyglot java import org.enso.image.Codecs as Java_Codecs
polyglot java import org.opencv.core.MatOfInt
polyglot java import org.opencv.core.Mat
polyglot java import org.opencv.core.Scalar

## UNSTABLE
type Image
    ## UNSTABLE

       Create an image from the array of values.

       Arguments:
       - values: the vector of numbers.
       - rows: the number of rows in the resulting image.
       - channels: the number of channels in the resulting image.

       The function expects the array of normalized values to have each value in
       the range of [0.0 .. 1.0].

       > Example
         Create an image from the vector.

             from Standard.Image import Image

             example_from_vector =
                 Image.from_vector [0, 0, 0, 0, 0, 0] rows=2 channels=1
    from_vector : Vector -> Integer -> Integer -> Image
    from_vector values rows=1 channels=1 =
        Image.Value (Java_Image.from_vector values.to_array rows channels)

    ## UNSTABLE

       Read an image from a file.

       The function reads images in RGB format, or RGBA if the
       `Read_Flag.Alpha_Channel` flag is specified.

       Arguments:
       - location: the file to read.
       - flags: the read flags.

       > Example
         Read the image.
             Image.read "image.png"

       > Example
         Read the image with alpha channel.
             Image.read "image.png" Read_Flag.Alpha_Channel

       > Example
         Read the image and convert it to grayscale.
             Image.read "image.png" Read_Flag.Grayscale
    read : (Text | File) -> (Read_Flag | Vector) -> Image ! File_Error
    read location flags=[] =
        path = case location of
            _ : File -> location.path
            _ -> location
        read_flags = case flags of
            _ : Vector ->
                if flags.is_empty then Java_Codecs.READ_FLAG_EMPTY else
                    flags.map .to_integer . reduce (_.bit_or _)
            _ -> flags.to_integer
        Panic.catch JException (Image.Value (Java_Codecs.read path read_flags)) _->
            Error.throw (File_Error.IO_Error (File.new path) 'Failed to read the file')

    ## UNSTABLE

       Write an image to a file.

       Arguments:
       - location: The location to write the image to.
       - flags: A vector of flags that control how the image is written.

       > Example
         Write the image with applying png compression.
             image.write path image

       > Example
         Write the image with applying png compression.
             image.write path image (Write_Flag.PNG_Compression 9)

       > Example
         Write the image with applying several flags.
             image.write path image [Write_Flag.JPEG_Quality 40, Write_Flag.JPEG_Progressive]
    write : (Text | File)  -> (Write_Flag | Vector) -> Nothing ! File_Error
    write self location flags=[] =
        path = case location of
            _ : File -> location.path
            _ -> location
        write_flags = case flags of
            _ : Vector -> flags
            _ -> [flags]
        int_flags = MatOfInt.new (write_flags.flat_map x-> [x.to_integer, x.value]).to_array
        Panic.catch JException (Java_Codecs.write path self.opencv_mat int_flags) _->
            Error.throw (File_Error.IO_Error (File.new path) 'Failed to write to the file')

    ## UNSTABLE

       The image data type.

       Arguments:
       - opencv_mat: The underlying matrix that stores the image data.

       The image is represented with a matrix of rows x columns. Each
       pixel is represented with a vector of 1 to 4 values (channels).
       Pixel values are normalized in a range [0.0 .. 1.0].
    Value opencv_mat

    ## UNSTABLE

       Return the number of image rows.

       > Example
         Get the number of rows from an image.

             import Standard.Examples

             example_rows = Examples.image.rows
    rows : Integer
    rows self = self.opencv_mat.rows

    ## UNSTABLE

       Return the number of image columns.

       > Example
         Get the number of columns from an image.

             import Standard.Examples

             example_cols = Examples.image.columns
    columns : Integer
    columns self = self.opencv_mat.cols

    ## UNSTABLE

       Return the number of image channels.

       > Example
         Get the number of channels from an image.

             import Standard.Examples

             example_channels = Examples.image.channels
    channels : Integer
    channels self = self.opencv_mat.channels

    ## UNSTABLE

       Get the pixel value indexed by row and column.

       Arguments:
       - row: the row index.
       - column: the column index.

       > Example
         Get the value at the specified row and column.

             import Standard.Examples

             example_get = Examples.image.get 10 10
    get : Integer -> Integer -> Vector ! Matrix_Error
    get self row column =
        if (row < 0) || (row >= self.rows) then Error.throw (Matrix_Error.Index_Out_Of_Bounds self.rows self.columns row) else
            if (column < 0) || (column >= self.columns) then Error.throw (Matrix_Error.Index_Out_Of_Bounds self.rows self.columns column) else
                arr = Java_Image.get self.opencv_mat row column
                Vector.from_polyglot_array arr

    ## UNSTABLE

       Calculates the per-element sum of an image and a scalar or a matrix.

       Arguments:
       - value: A value can be a number, a vector of numbers, or a matrix. The
         number value is applied to each pixel's channel of the image. The
         vector value is padded with zeros to match the number of channels and
         then applied to each image's pixel. The matrix value must have the same
         dimensions (rows, columns, and channels) as this image. Otherwise, the
         operation results in a `Dimensions_Not_Equal` error. The matrix is
         applied element-wise, e.g., each matrix element is combined with the
         appropriate pixel (the element with the same row and column) of this
         image.

       The matrix should have the same dimensions as the image.

       > Example
         Add the constant to an image. Operation will add 0.1 to each channel
         of the image.

             import Standard.Examples

             example_plus = Examples.image + 0.1

       > Example
         Add 0.1 to the first channel of the image.

             import Standard.Examples

             example_plus = Examples.image + [0.1]

       > Example
         Add 0.1 to the third channel of the image.

             import Standard.Examples

             example_plus = Examples.image + [0, 0, 0.1]

       > Example
         Add a matrix to the image.

             import Standard.Examples
             from Standard.Image import Matrix

             example_plus =
                 image = Examples.image
                 image + (Matrix.zeros rows=image.rows columns=image.columns channels=image.channels)
    + : (Number | Vector | Matrix) -> Image ! Matrix_Error
    + self value = Panic.recover Any (core_op self.opencv_mat value (Java_Image.add _ _ _)) . catch Any core_op_handler

    ## UNSTABLE

       Calculates the per-element difference between an image and a scalar or a matrix.

       Arguments:
       - value: A value can be a number, a vector of numbers, or a matrix. The
         number value is applied to each pixel's channel of the image. The
         vector value is padded with zeros to match the number of channels and
         then applied to each image's pixel. The matrix value must have the same
         dimensions (rows, columns, and channels) as this image. Otherwise, the
         operation results in a `Dimensions_Not_Equal` error. The matrix is
         applied element-wise, e.g., each matrix element is combined with the
         appropriate pixel (the element with the same row and column) of this
         image.

       The matrix should have the same dimensions as the image.

       > Example
         Add the constant to an image. Operation will subtract 0.1 from each
         channel of the image.

             import Standard.Examples

             example_minus = Examples.image - 0.1

       > Example
         Subtract 0.1 from the first channel of the image.

             import Standard.Examples

             example_minus = Examples.image - [0.1]

       > Example
         Subtract 0.1 from the third channel of the image.

             import Standard.Examples

             example_minus = Examples.image - [0, 0, 0.1]

       > Example
         Subtract a matrix from the image.

             import Standard.Examples
             from Standard.Image import Matrix

             example_minus =
                 image = Examples.image
                 image - (Matrix.zeros rows=image.rows columns=image.columns channels=image.channels)
    - : (Number | Vector | Matrix) -> Image ! Matrix_Error
    - self value = Panic.recover Any (core_op self.opencv_mat value (Java_Image.subtract _ _ _)) . catch Any core_op_handler

    ## UNSTABLE

       Calculates the per-element product of an image and a scalar or a matrix.

       Arguments:
       - value: A value can be a number, a vector of numbers, or a matrix. The
         number value is applied to each pixel's channel of the image. The
         vector value is padded with zeros to match the number of channels and
         then applied to each image's pixel. The matrix value must have the same
         dimensions (rows, columns, and channels) as this image. Otherwise, the
         operation results in a `Dimensions_Not_Equal` error. The matrix is
         applied element-wise, e.g., each matrix element is combined with the
         appropriate pixel (the element with the same row and column) of this
         image.

       The matrix should have the same dimensions as the image.

       > Example
         Multiply each channel of the image by 2.

             import Standard.Examples

             example_mul = Examples.image * 2

       > Example
         Multiply first channel of the image by 2, and second channel by 4.

             import Standard.Examples

             example_mul = Examples.image * [2, 4, 1, 1]

       > Example
         Multiply first channel of the image by 2, and zero the rest of
         the channels.

             import Standard.Examples

             example_mul = image * [2]

       > Example
         Multiply a matrix and the image.

             import Standard.Examples
             from Standard.Image import Matrix

             example_mul =
                 image = Examples.image
                 image * (Matrix.ones rows=image.rows columns=image.columns channels=image.channels)
    * : (Number | Vector | Matrix) -> Image ! Matrix_Error
    * self value = Panic.recover Any (core_op self.opencv_mat value (Java_Image.multiply _ _ _)) . catch Any core_op_handler

    ## UNSTABLE

       Performs per-element division of an image and a scalar or a matrix.

       Arguments:
       - value: A value can be a number, a vector of numbers, or a matrix. The
         number value is applied to each pixel's channel of the image. The
         vector value is padded with zeros to match the number of channels and
         then applied to each image's pixel. The matrix value must have the same
         dimensions (rows, columns, and channels) as this image. Otherwise, the
         operation results in a `Dimensions_Not_Equal` error. The matrix is
         applied element-wise, e.g., each matrix element is combined with the
         appropriate pixel (the element with the same row and column) of this
         image.

       The matrix should have the same dimensions as the image.

       > Example
         Divide each channel of the image by 2.

             import Standard.Examples

             example_div = Examples.image / 2

       > Example
         Divide first channel of the image by 2, and second channel by 4.

             import Standard.Examples

             example_div = Examples.image / [2, 4, 1, 1]

       > Example
         Divide first channel of the image by 2, and zero the rest of
         the channels.

             import Standard.Examples

             example_div = image / [2]

       > Example
         Divide an image by a matrix.

             import Standard.Examples
             from Standard.Image import Matrix

             example_div =
                 image = Examples.image
                 image / (Matrix.ones rows=image.rows columns=image.columns channels=image.channels)
    / : (Number | Vector | Matrix) -> Image ! Matrix_Error
    / self value = Panic.recover Any (core_op self.opencv_mat value (Java_Image.divide _ _ _)) . catch Any core_op_handler

    ## UNSTABLE

       Check the equality of two images.

       Arguments:
       - that: the matrix to compare with.

       ? Implementation Note
         Two images considered equal when they have the same number of rows,
         columns and channels, and have the same pixel values.

         The image represented internally as a byte array, and if two images
         have the same dimensions, equality checks that underlying byte arrays
         are equal as well.

       > Example
         Checking two images for equality.

             import Standard.Examples

             example_eq = Examples.image == Examples.image
    == : Image -> Boolean
    == self that = Java_Image.is_equals self.opencv_mat that.opencv_mat

    ## UNSTABLE

       Convert the image to a vector.

       > Example
         Convert an image to a vector.

             import Standard.Examples

             example_to_vector = Examples.image.to_vector
    to_vector : Vector
    to_vector self =
        arr = Java_Image.to_vector self.opencv_mat
        Vector.from_polyglot_array arr

    ## UNSTABLE

       Convert the image to a JS_Object.

       > Example
         Convert an image to a JavaScript object.

             import Standard.Examples

             example_to_json = Examples.image.to_js_object
    to_js_object : JS_Object
    to_js_object self =
        base64 = Java_Image.to_base64 self.opencv_mat
        JS_Object.from_pairs [["mediaType", "image/png"], ["base64", base64]]

    ## UNSTABLE

       Convert the image to a Matrix.

       > Example
         Convert an image to a matrix.

             import Standard.Examples

             example_to_mat = Examples.image.to_matrix
    to_matrix : Matrix
    to_matrix self = Matrix.from_vector self.to_vector self.rows self.channels

    ## UNSTABLE

       Create a histogram for the specified channel of the image.

       Arguments:
       - channel: the channel number.

       > Example
         Create a histogram.

             import Standard.Examples

             example_histogram = Examples.image.histogram 0
    histogram : Integer -> Histogram
    histogram self channel =
        hist = Java_Histogram.calculate self.opencv_mat channel
        Histogram.Value channel (Vector.from_polyglot_array hist.get_data)

## PRIVATE

   Apply a core matrix operation.

   Arguments:
   - mat: The matrix to operate on.
   - value: The value to apply to the matrix.
   - function: The function with which to apply `value` to `mat`.
core_op : Mat -> Any -> (Mat -> Scalar -> Mat -> Nothing) -> Nothing
core_op mat value function =
    result = Mat.new
    scalar = case value of
        _ : Vector ->
            Scalar.new value.to_array
        Matrix.Value m ->
            if ((m.rows == mat.rows) && (m.cols == mat.cols) && (m.channels == mat.channels)) then m else Panic.throw Matrix_Error.Dimensions_Not_Equal
        _ ->
            Scalar.all value
    function mat scalar result
    Image.Value result

## PRIVATE

   Handles errors in `core_op`.

   Arguments:
   - error: The value to throw as an error.
core_op_handler : Any
core_op_handler error =
    case error of
        Matrix_Error.Dimensions_Not_Equal -> Error.throw error
        _ -> Panic.throw error
