from Standard.Base import all

import project.Data.Image.Image
import project.Data.Matrix_Error.Matrix_Error

polyglot java import org.enso.image.data.Matrix as Java_Matrix
polyglot java import org.opencv.core.Mat
polyglot java import org.opencv.core.Scalar

## UNSTABLE
type Matrix
    ## PRIVATE

       The matrix data type.

       Arguments:
       - opencv_mat: The internal representation of the matrix.

       Each value of the matrix is represented with an array of
       channels. In contrast to an Image data type, Matrix values are
       not normalized.
    Value opencv_mat

    ## UNSTABLE

       Create a matrix with all elements set to zero.

       Arguments:
       - rows: the number of rows in the resulting matrix.
       - columns: the number of columns in the resulting matrix.
       - channels: the number of channels in the resulting matrix.

       > Example
         Create a matrix.

             from Standard.Image import Matrix

             example_zeros = Matrix.zeros rows=2 columns=2
    zeros : Integer -> Integer -> Integer -> Matrix
    zeros rows columns channels=1 =
        Matrix.Value (Java_Matrix.zeros rows columns channels)

    ## UNSTABLE

       Create a matrix with all elements set to one.

       Arguments:
       - rows: the number of rows in the resulting matrix.
       - columns: the number of columns in the resulting matrix.
       - channels: the number of channels in the resulting matrix.

       > Example
         Create a matrix.

             from Standard.Image import Matrix

             example_ones = Matrix.zeros rows=2 columns=2 channels=3
    ones : Integer -> Integer -> Integer -> Matrix
    ones rows columns channels=1 =
        Matrix.Value (Java_Matrix.ones rows columns channels)

    ## UNSTABLE

       Create an identity matrix containing ones on a main diagonal.

       Arguments:
       - rows: the number of rows in the resulting matrix.
       - columns: the number of columns in the resulting matrix.
       - channels: the number of channels in the resulting matrix.

       > Example
         Create a matrix.

             from Standard.Image import Matrix

             example_identity = Matrix.identity rows=2 columns=2 channels=3
    identity : Integer -> Integer -> Integer -> Matrix
    identity rows columns channels=1 =
        Matrix.Value (Java_Matrix.identity rows columns channels)

    ## PRIVATE

       Create a matrix from the provided vector.

       Arguments:
       - values: the vector of numbers.
       - rows: the number of rows in the resulting matrix.
       - channels: the number of channels in the resulting matrix.

       > Example
         Create a matrix.
             from Standard.Image import Matrix

             example_from_vector = Matrix.from_vector [1, 1, 0, 0] rows=2
    from_vector : Vector -> Integer -> Integer -> Matrix
    from_vector values rows=1 channels=1 =
        Matrix.Value (Java_Matrix.from_vector values channels rows)

    ## Return the number of matrix rows.

       > Example
         Get the number of rows in this matrix.

             import Standard.Examples

             example_rows = Examples.matrix.rows
    rows : Integer
    rows self = self.opencv_mat.rows

    ## Return the number of matrix columns.

       > Example
         Get the number of columns in this matrix.

             import Standard.Examples

             example_columns = Examples.matrix.columns
    columns : Integer
    columns self = self.opencv_mat.cols

    ## Return the number of matrix channels.

       > Example
         Get the number of channels in this matrix.

             import Standard.Examples

             example_channels = Examples.matrix.channels
    channels : Integer
    channels self = self.opencv_mat.channels

    ## Get the matrix value at the specified row and column.

       Arguments:
       - row: the row index.
       - column: the column index.

       > Example
         Get the value at the specified row and column.

             import Standard.Examples

             example_get = Examples.matrix.get 0 0
    get : Integer -> Integer -> Vector ! Matrix_Error
    get self row column =
        if (row < 0) || (row >= self.rows) then Error.throw (Matrix_Error.Index_Out_Of_Bounds self.rows self.columns row) else
            if (column < 0) || (column >= self.columns) then Error.throw (Matrix_Error.Index_Out_Of_Bounds self.rows self.columns column) else
                arr = Java_Matrix.get self.opencv_mat row column
                Vector.from_polyglot_array arr

    ## Reshape the matrix specifying new number of rows and channels.

       Arguments:
       - rows: the new number of rows.
       - channels: the new number of channels.

       > Example
         Reshape the matrix to a new shape of 3 rows and 1 column, with 1 channel.

             from Standard.Image import Matrix

             example_reshape = Matrix.from_vector [0, 0, 0] . reshape rows=3 channels=1
    reshape : Integer -> Integer -> Matrix
    reshape self rows channels=Nothing =
        case channels of
            Nothing -> Matrix.Value (self.opencv_mat.reshape self.channels rows)
            _ -> Matrix.Value (self.opencv_mat.reshape channels rows)

    ## Calculates the per-element sum of two matrices or a matrix and a scalar.

       Arguments:
       - value: A value can be a number, a vector of numbers, or a matrix. The
         number value is applied to each values's channel of the matrix. The
         vector value is padded with zeros to match the number of channels and
         then applied to each pixel of this matrix. The matrix value must have
         the same dimensions (rows, columns, and channels) as this
         matrix. Otherwise, the operation results in a `Dimensions_Not_Equal`
         error. The matrix is applied element-wise, e.g., each matrix element is
         combined with the appropriate value (the element with the same row and
         column) of this matrix.

       > Example
         Add 1 to each element of the matrix.

             import Standard.Examples

             example_plus = Examples.matrix + 1

       > Example
         Add 100 to the first channel of the matrix.

             import Standard.Examples

             example_plus = Examples.matrix + [100]

       > Example
         Add two matrices.

             import Standard.Examples

             example_plus = Examples.matrix + Examples.matrix
    + : (Number | Vector | Matrix) -> Matrix ! Matrix_Error
    + self value = Panic.recover Any (core_op self.opencv_mat value (Java_Matrix.add _ _ _)) . catch core_op_handler

    ## Calculates the per-element difference of two matrices or of a matrix and
       a scalar.

       Arguments:
       - value: A value can be a number, a vector of numbers, or a matrix. The
         number value is applied to each values's channel of the matrix. The
         vector value is padded with zeros to match the number of channels and
         then applied to each pixel of this matrix. The matrix value must have
         the same dimensions (rows, columns, and channels) as this
         matrix. Otherwise, the operation results in a `Dimensions_Not_Equal`
         error. The matrix is applied element-wise, e.g., each matrix element is
         combined with the appropriate value (the element with the same row and
         column) of this matrix.

       > Example
         Subtract 1 from each element of the matrix.

             import Standard.Examples

             example_minus = Examples.matrix - 1

       > Example
         Subtract 100 from the second channel of the matrix.

             import Standard.Examples

             example_minus = Examples.matrix - [0, 100, 0, 0]

       > Example
         Subtract two matrices.

             import Standard.Examples

             example_minus = Examples.matrix - Examples.matrix
    - : (Number | Vector | Matrix) -> Matrix ! Matrix_Error
    - self value = Panic.recover Any (core_op self.opencv_mat value (Java_Matrix.subtract _ _ _)) . catch core_op_handler

    ## Calculates the per-element product of two matrices or a matrix and a
       scalar.

       Arguments:
       - value: A value can be a number, a vector of numbers, or a matrix. The
         number value is applied to each values's channel of the matrix. The
         vector value is padded with zeros to match the number of channels and
         then applied to each pixel of this matrix. The matrix value must have
         the same dimensions (rows, columns, and channels) as this
         matrix. Otherwise, the operation results in a `Dimensions_Not_Equal`
         error. The matrix is applied element-wise, e.g., each matrix element is
         combined with the appropriate value (the element with the same row and
         column) of this matrix.

       > Example
         Multiply each channel of the matrix by 2.

             import Standard.Examples

             example_mul = Examples.matrix * 2

       > Example
         Multiply first channel of the matrix by 2, and second channel by 4.

             import Standard.Examples

             example_mul = Examples.matrix * [2, 4, 1, 1]

       > Example
         Multiply first channel of the matrix by 2, and zero the rest of the
         channels.

             import Standard.Examples

             example_mul = Examples.matrix * [2]

       > Example
         Multiply two matrices.
             m * m
    * : (Number | Vector | Matrix) -> Matrix ! Matrix_Error
    * self value = Panic.recover Any (core_op self.opencv_mat value (Java_Matrix.multiply _ _ _)) . catch core_op_handler

    ## Performs per-element division of two matrices or a matrix and a scalar.

       Arguments:
       - value: A value can be a number, a vector of numbers, or a matrix. The
         number value is applied to each values's channel of the matrix. The
         vector value is padded with zeros to match the number of channels and
         then applied to each pixel of this matrix. The matrix value must have
         the same dimensions (rows, columns, and channels) as this
         matrix. Otherwise, the operation results in a `Dimensions_Not_Equal`
         error. The matrix is applied element-wise, e.g., each matrix element is
         combined with the appropriate value (the element with the same row and
         column) of this matrix.

        > Example
          Divide each channel of the matrix by 2.

              import Standard.Examples

              example_div = Examples.matrix / 2

        > Example
          Divide first channel of the matrix by 2, and second channel by 4.

              import Standard.Examples

              example_div = Examples.matrix / [2, 4, 1, 1]

        > Example
          Divide two matrices.

              import Standard.Examples

              example_div = Examples.matrix / Examples.matrix
    / : (Number | Vector | Matrix) -> Matrix ! Matrix_Error
    / self value = Panic.recover Any (core_op self.opencv_mat value (Java_Matrix.divide _ _ _)) . catch core_op_handler

    ## Normalize the matrix into a range of [min_value .. max_value] so that the
       minimum value of the matrix becomes `min_value` and the maximum value of
       the matrix becomes `max_value`.

       Arguments:
       - min_value: the minimum value in the resulting normalized range.
       - max_value: the maximum value in the resulting normalized range.

       > Example
         Normalize a matrix from vector.

             from Standard.Image import Matrix

             example_normalize = Matrix.from_vector [0, 1, 2, 3, 4] . normalize

       > Example
         Normalize a matrix of ones.

             from Standard.Image import Matrix

             example_normalize = Matrix.ones 2 3 . normalize

       > Example
         Normalize an identity matrix.

             from Standard.Image import Matrix

             example_normalize = Matrix.identity 3 3 . normalize
    normalize : Number -> Number -> Matrix
    normalize self min_value=0.0 max_value=1.0 =
        Matrix.Value (Java_Matrix.normalize self.opencv_mat min_value max_value)

    ## Convert this matrix to an image.

       > Example
         Convert a matrix to an image.

             import Standard.Examples

             example_to_image = Examples.matrix.to_image
    to_image : Image
    to_image self = Image (Image.from_vector self.normalize.to_vector self.rows self.channels)

    ## Get the elements of this matrix as a vector.

       > Example
         Convert a matrix to a vector.

             import Standard.Examples

             example_to_vector = Examples.matrix.to_vector
    to_vector : Vector
    to_vector self =
        arr = Java_Matrix.to_vector self.opencv_mat
        Vector.from_polyglot_array arr

    ## PRIVATE
       Convert this matrix to a JS_Object.

       > Example
         Convert a matrix to a JavaScript object.

             import Standard.Examples

             example_to_json = Examples.matrix.to_js_object
    to_js_object : Text
    to_js_object self = self.opencv_mat.to_text

## PRIVATE
   Apply a core matrix operation.

   Arguments:
   - mat: The matrix to operate on.
   - value: The value to apply to the matrix.
   - function: The function with which to apply `value` to `mat`.
core_op : Mat -> Any -> (Mat -> Scalar -> Mat -> Nothing) -> Nothing
core_op mat value function =
    result = Mat.new
    scalar = case value of
        _ : Vector ->
            Scalar.new value
        Matrix.Value m ->
            if ((m.rows == mat.rows) && (m.cols == mat.cols) && (m.channels == mat.channels)) then m else Panic.throw Matrix_Error.Dimensions_Not_Equal
        _ ->
            Scalar.all value
    function mat scalar result
    Matrix.Value result

## PRIVATE
   Handles errors in `core_op`.

   Arguments:
   - error: The value to throw as an error.
core_op_handler error =
    case error of
        Matrix_Error.Dimensions_Not_Equal -> Error.throw error
        _ -> Panic.throw error

## PRIVATE
type Matrix_Comparator
    ## PRIVATE
    compare : Matrix -> Matrix -> Ordering
    compare x y =
        if Java_Matrix.is_equals x.opencv_mat y.opencv_mat then Ordering.Equal else
            Nothing

    ## PRIVATE
    hash : Matrix -> Number
    hash x = x.opencv_mat.hashCode

Comparable.from (_:Matrix) = Matrix_Comparator
