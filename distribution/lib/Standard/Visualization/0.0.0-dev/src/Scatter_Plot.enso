from Standard.Base import all

from Standard.Table import Table, Column

import project.Helpers

## PRIVATE

   Name of the index column that may be generated to plot against.
index_name : Text
index_name = 'index'

## PRIVATE
data_field : Text
data_field = 'data'

## PRIVATE
axis_field : Text
axis_field = 'axis'

## PRIVATE
label_field : Text
label_field = 'label'

## PRIVATE

   Represents a recognized point data field for a scatter plot visualization.
type Point_Data

    ## PRIVATE
    X

    ## PRIVATE
    Y

    ## PRIVATE
    Color

    ## PRIVATE
    Shape

    ## PRIVATE
    Label

    ## PRIVATE
    Size

    ## PRIVATE

       Returns all recognized point data fields.
    all_fields : Vector
    all_fields = [Point_Data.X, Point_Data.Y, Point_Data.Color, Point_Data.Shape, Point_Data.Label, Point_Data.Size]

    ## PRIVATE
    recognized_names : Vector
    recognized_names = Point_Data.all_fields.map _.name

    ## PRIVATE
    is_recognized : Column -> Boolean
    is_recognized self column = Point_Data.recognized_names.contains column.name

    ## PRIVATE
    name : Text
    name self = self.to_text.to_case Case.Lower

    ## PRIVATE
    fallback_column : Table -> Column ! No_Fallback_Column
    fallback_column self table = case self of
        Point_Data.X -> table.index.catch_ <| Point_Data.iota table.row_count
        Point_Data.Y ->
            x_column = Point_Data.X.lookup_in table
            candidates = table.all_columns
            is_good_enough c = c.is_numeric && c.name != x_column.name
            is_good c = is_good_enough c && (self.is_recognized c).not

            candidates.find is_good . catch_ <| candidates.find is_good_enough
        _ -> Error.throw No_Fallback_Column

    ## PRIVATE

       Returns a vector of subsequent integers beginning from 0.
    iota : Number -> Vector
    iota count =
        range = 0.up_to count
        Column.from_vector index_name range.to_vector

    ## PRIVATE
    lookup_in : Table -> Column
    lookup_in self table =
        named = table.lookup_ignore_case self.name
        named.catch_ <| self.fallback_column table

## PRIVATE
type No_Fallback_Column
    ## PRIVATE
    to_display_text : Text
    to_display_text self =
        "No fallback column found for the scatter plot."

## PRIVATE

   Generates JSON that describes points data.
Table.point_data : Table -> Vector
Table.point_data self =
    get_point_data field = field.lookup_in self . rename field.name . catch Any (_->Nothing)
    columns = Point_Data.all_fields.map get_point_data . filter (x -> x.is_nothing.not)
    (0.up_to self.row_count).to_vector.map <| row_n->
        pairs = columns.map column->
            value = column.at row_n . catch_ Nothing
            [column.name, value]
        JS_Object.from_pairs pairs

## PRIVATE

   Generates JSON that describes plot axes.
Table.axes : Table -> JS_Object
Table.axes self =
    describe_axis field =
        col_name = field.lookup_in self . name
        label = JS_Object.from_pairs [[label_field, col_name]]
        [field.name, label]
    x_axis = describe_axis Point_Data.X
    y_axis = describe_axis Point_Data.Y
    is_valid axis_pair =
        label = axis_pair.at 1
        label.is_valid && (self.all_columns.length > 0)
    axes_obj = JS_Object.from_pairs <| [x_axis, y_axis].filter is_valid
    if axes_obj.length > 0 then axes_obj else Nothing

## PRIVATE
Vector.point_data : Vector -> Vector
Vector.point_data self  =
    self.map_with_index i-> elem-> JS_Object.from_pairs [[Point_Data.X.name, i], [Point_Data.Y.name, elem]]

## PRIVATE
bound_data bounds data = case bounds of
    Nothing -> data
    _ ->
        min_x = bounds.at 0
        min_y = bounds.at 1
        max_x = bounds.at 2
        max_y = bounds.at 3

        data.filter <| datum->
            x = datum.get "x"
            y = datum.get "y"

            min_x<=x && x<=max_x && min_y<=y && y<=max_y

type Extreme
    Value min_x max_x min_y max_y

## PRIVATE
limit_data limit data = case limit of
    Nothing -> data
    _ -> if ((data.length <= limit) || (data.length == 0)) then data else
        x datum = datum.get "x"
        y datum = datum.get "y"

        update_extreme current idx point =
            new_min_x = if x current.min_x.second > x point then [idx, point] else current.min_x
            new_min_y = if y current.min_y.second > y point then [idx, point] else current.min_y
            new_max_x = if x current.max_x.second < x point then [idx, point] else current.max_x
            new_max_y = if y current.max_y.second < y point then [idx, point] else current.max_y
            Extreme.Value new_min_x new_max_x new_min_y new_max_y

        first = [0, data.first]
        bounds = case data.fold_with_index (Extreme.Value first first first first) update_extreme of
            Extreme.Value min_x max_x min_y max_y ->  [min_x, max_x, min_y, max_y]
            _ -> []
        extreme = Map.from_vector bounds . values

        if limit <= extreme.length then extreme.take (First limit) else
            extreme + data.take (Index_Sub_Range.Sample (limit - extreme.length))

## PRIVATE
json_from_table : Table -> [Int]|Nothing -> Int|Nothing -> Text
json_from_table table bounds limit =
    data = table.point_data |> bound_data bounds |> limit_data limit
    axes = table.axes
    JS_Object.from_pairs [[data_field, data], [axis_field, axes]] . to_json

## PRIVATE
json_from_vector : Vector Any -> [Int]|Nothing -> Int|Nothing -> Text
json_from_vector vec bounds limit =
    data = vec.point_data |> bound_data bounds |> limit_data limit
    JS_Object.from_pairs [[data_field, data], [axis_field, Nothing]] . to_json

## PRIVATE

   Default preprocessor for the scatter-plot visualization.

   Generates JSON text describing the scatter-plot visualization.

   Arguments:
   - value: the value to be visualized.
process_to_json_text : Any -> Integer | Nothing -> Integer | Nothing -> Text
process_to_json_text value bounds=Nothing limit=Nothing =
    json = case value of
        _ : Column -> json_from_table  value.to_table bounds limit
        _ : Table  -> json_from_table  value bounds limit
        _ : Vector -> json_from_vector value bounds limit
        _          -> json_from_vector value.to_vector bounds limit

    ## Workaround so that the JS String is converted to a Text
       https://www.pivotaltracker.com/story/show/184061302
    "" + json
