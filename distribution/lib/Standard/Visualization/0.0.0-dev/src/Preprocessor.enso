from Standard.Base import all
import project.Helpers

## PRIVATE
   Default visualization preprocessor.
default_preprocessor x =
    result = x.to_default_visualization_data
    case result.is_error of
        True -> Helpers.truncate x.to_display_text . to_json
        False -> result


## PRIVATE

   Lazy visualization preprocessor.
lazy_preprocessor x = x.to_lazy_visualization_data


## PRIVATE
   Error visualization preprocessor.
error_preprocessor x =
    ok = JS_Object.from_pairs [['message', '']] . to_json
    result = x.map_error err->
        message = err.to_display_text
        stack_trace = x.get_stack_trace_text.if_nothing "" . split '\n'
        truncated_message = Helpers.truncate message
        full_message = truncated_message + if stack_trace.length > 0 then " (" + stack_trace.at 0 . trim +")" else ""
        JS_Object.from_pairs [['kind', 'Dataflow'], ['message', full_message]] . to_json

    if result.is_error then result.catch else ok
