from Standard.Base import all
import Standard.Base.Data.Array_Proxy.Array_Proxy
from Standard.Base.Data.Json import render

from Standard.Table import Table, Column
import Standard.Table.Data.Row.Row

import project.Id.Id
from project.Text import get_lazy_visualization_text_window
import project.Table as Table_Visualization

## PRIVATE
   Specifies that the builtin JSON visualization should be used for any type,
   unless specified otherwise.
Any.default_visualization self = Id.json

## PRIVATE
   Returns a Text used to display this value in the IDE.

   The particular representation is left unspecified and subject to change in
   the future. The current implementation uses JSON serialization as the
   default.

   Types defining their own versions of this method should ensure that the
   result is reasonably small and that the operation is quick to compute.

   > Example
     Converting the number `2` into visualization data.

         2.to_default_visualization_data
Any.to_default_visualization_data : Text
Any.to_default_visualization_data self = self.to_json

## PRIVATE

   Returns the given value if this is not an error. Propagates error otherwise.

   Arguments:
   - val: a value that will be evaluated and returned if `self` is an error.
Any.when_valid : Any -> Any
Any.when_valid self ~val = self.map_valid (_-> val)

## PRIVATE

   Checks if the value is not an error.
Any.is_valid : Any
Any.is_valid self = self.is_error.not

## PRIVATE

   Maps over non-error value.

   Arguments:
   - f: a function that will be used to generate return value from a non-error
        `self` value.
Any.map_valid : Any -> Any
Any.map_valid self f = f self

## PRIVATE

   Recovers from the error by returning the parameter value.

   The error contents will be ignored.

   Arguments:
   - val: a value that will be evaluated and returned if `self` is an error.
Any.catch_ : Any -> Any
Any.catch_ self ~val = self.catch Any (_-> val)

## PRIVATE
   Returns a display representation of the dataflow error on which it is called.

   > Example
     Displaying a dataflow error.

         import Standard.Examples

         example_display = Examples.throw_error.to_default_visualization_data
Error.to_default_visualization_data : Text
Error.to_default_visualization_data self = self.catch . to_default_visualization_data

## PRIVATE

   Returns the given value if this is not an error. Propagates error otherwise.

   Arguments:
   - val: a value that will be evaluated and returned if `self` is an error.
Error.when_valid : Any -> Any
Error.when_valid self ~val = self.map_valid (_-> val)

## PRIVATE

   Checks if the value is not an error.
Error.is_valid : Any
Error.is_valid self = self.is_error.not

## PRIVATE

   Maps over non-error value.

   Arguments:
   - _: a function that will be used to generate return value from a non-error
        `self` value.
Error.map_valid : Any -> Any
Error.map_valid self f =
    const self f

## PRIVATE

   Recovers from the error by returning the parameter value.

   The error contents will be ignored.

   Arguments:
   - val: a value that will be evaluated and returned if `self` is an error.
Error.catch_ : Any -> Any
Error.catch_ self ~val = self.catch Any (_-> val)

## PRIVATE

   Guides the visualization system to display the most suitable graphical
   representation for this table.
Vector.default_visualization : Id
Vector.default_visualization self = Id.table

## PRIVATE

   Transform the vector into text for displaying as part of its default
   visualization.
Vector.to_default_visualization_data : Text
Vector.to_default_visualization_data self = render_vector self

## PRIVATE
   Internal function to convert a Vector to a JSON string.
render_vector object depth=0 max_depth=5 max_length=100 =
    case object of
        _ : Vector -> if depth == max_depth then "[...]" else
            result = object.take max_length . map (elem-> if elem.is_error then elem.to_json else render_vector elem (depth+1) max_depth max_length)
            "[" + result.join ", " + "]"
        _ : Array ->
            proxy = Array_Proxy.new object.length object.at
            @Tail_Call render_vector (Vector.from_polyglot_array proxy) depth max_depth max_length
        _ : JS_Object -> render object depth max_depth max_length
        _ -> object.to_default_visualization_data

## PRIVATE

   Guides the visualization system to display the most suitable graphical
   representation for this table.
Array.default_visualization : Id
Array.default_visualization self = Id.table

## PRIVATE

   Returns a Text used to display this value in the IDE.

   The particular representation is left unspecified and subject to change in
   the future. The current implementation uses JSON serialization as the
   default.

   > Example
     Converting an array to its default visualization representation.

         [1, 2, 3, 4].to_array.to_default_visualization_data
Array.to_default_visualization_data : Text
Array.to_default_visualization_data self =
    Vector.from_polyglot_array self . to_default_visualization_data

## PRIVATE

   Looks for a column by a given name.

   Unlike `Table.at` looks into index columns and name comparison is case-insensitive.

   Arguments:
   - text: the case-insensitive name of the searched column.
Table.lookup_ignore_case : Text -> Column ! Nothing
Table.lookup_ignore_case self name =
    self.columns.find if_missing=(Error.throw Nothing) <| col->
        col.name.equals_ignore_case name

## PRIVATE

   Guides the visualization system to display the most suitable graphical
   representation for this table.
Table.default_visualization : Id
Table.default_visualization self =
    cols = self.columns.map .name . map name-> name.to_case Case.Lower
    if cols.contains "latitude" && cols.contains "longitude" then Id.geo_map else
        if cols.contains "x" && cols.contains "y" then Id.scatter_plot else
            Id.table

## PRIVATE

   Returns a Text used to display this table in the IDE by default.

   Returns a JSON object containing useful metadata and previews of column
   values.
Table.to_default_visualization_data : Text
Table.to_default_visualization_data self =
    max_size = 10
    row_count = ['number_of_rows', self.row_count]
    cols = self.columns.map c->
        name = c.name
        items = c.to_vector.take (First max_size)
        JS_Object.from_pairs [['name', name], ['data', items]]
    JS_Object.from_pairs [row_count, ['columns', cols]] . to_text

## PRIVATE

   Guides the visualization system to display the most suitable graphical
   representation for this Column.
Column.default_visualization : Id
Column.default_visualization self = Id.table

## PRIVATE

   Checks if the column stores numbers.
Column.is_numeric : Boolean
Column.is_numeric self =
    self.value_type.is_numeric

## PRIVATE
   Returns the data requested to render a lazy view of the default visualization. Decides
   whether to return a simplified version of the lazy data format.
make_lazy_visualization_data : Text -> Vector Integer -> Vector Integer -> Integer -> Text
make_lazy_visualization_data text text_window_position text_window_size chunk_size =
    min_length_for_laziness = chunk_size * (text_window_size.first) * (text_window_size.second)
    if text.length < min_length_for_laziness then text else
        get_lazy_visualization_text_window text text_window_position text_window_size chunk_size

## PRIVATE
   Returns the data requested to render a lazy view of the default visualization.
Any.to_lazy_visualization_data : Vector Integer -> Vector Integer -> Integer -> Text
Any.to_lazy_visualization_data self text_window_position text_window_size chunk_size =
    ## Workaround so that the JS String is converted to a Text
       https://www.pivotaltracker.com/story/show/184061302
    "" + make_lazy_visualization_data self.to_default_visualization_data text_window_position text_window_size chunk_size

## PRIVATE
   Returns the data requested to render a lazy view of the default visualization.
Text.to_default_visualization_data : Text
Text.to_default_visualization_data self =
    self.to_lazy_visualization_data [0,0] [10,10] 20

## PRIVATE
   Returns the data requested to render a lazy view of the default visualization.
Text.to_lazy_visualization_data : Vector Integer -> Vector Integer -> Integer -> Text
Text.to_lazy_visualization_data self text_window_position text_window_size chunk_size =
    min_length_for_laziness = chunk_size * (text_window_size.first) * (text_window_size.second)
    if self.length < min_length_for_laziness then "" + self.to_json else
        ## Workaround so that the JS String is converted to a Text
               https://www.pivotaltracker.com/story/show/184061302
        "" + get_lazy_visualization_text_window self text_window_position text_window_size chunk_size

## PRIVATE
   Shows a JSON serialization of a truncated version of this column, for the
   benefit of visualization in the IDE.
Column.to_default_visualization_data : Text
Column.to_default_visualization_data self =
    size = ['length', self.length]
    name = ['name', self.name]
    max_data = 100
    data = ['data', self.to_vector.take (First max_data)]
    JS_Object.from_pairs [size, name, data] . to_text

## PRIVATE
   Guides the visualization system to display the most suitable graphical
   representation for this Row.
Row.default_visualization : Id
Row.default_visualization self = Id.table

## PRIVATE
   Returns a Text used to display this table in the IDE by default.

   Returns a JSON object containing useful metadata and previews of column
   values.
Row.to_default_visualization_data : Text
Row.to_default_visualization_data self =
    self.to_vector.to_default_visualization_data

## PRIVATE
   Returns the data requested to render a lazy view of the default visualization.
Table.to_lazy_visualization_data : Vector Integer ->  Vector Integer -> Vector Integer -> Integer -> Text
Table.to_lazy_visualization_data self table_cell_position text_window_position text_window_size chunk_size =
    Table_Visualization.get_lazy_visualization_data self table_cell_position text_window_position text_window_size chunk_size
