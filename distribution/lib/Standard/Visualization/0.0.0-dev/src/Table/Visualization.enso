from Standard.Base import all

import Standard.Table.Data.Table.Table as Dataframe_Table
import Standard.Table.Data.Column.Column as Dataframe_Column
import Standard.Database.Data.Table.Table as Database_Table
import Standard.Database.Data.Column.Column as Database_Column

import project.Helpers

# TODO add an initial offset to fully support lazy visualizations

## PRIVATE

   Prepares a table or column for visualization.

   Arguments:
   - x: The table to prepare for visualisation.
   - max_rows: The maximum number of rows to display.

   In case of Database backed data, it materializes a fragment of the data.
prepare_visualization : Any -> Integer -> Text
prepare_visualization y max_rows=1000 = Helpers.recover_errors <|
    x = Warning.set y []
    case x of
        _ : Dataframe_Table ->
            dataframe = x.take (First max_rows)
            all_rows_count = x.row_count
            included_rows = dataframe.row_count
            index = Dataframe_Column.from_vector "#" (Vector.new included_rows i->i)

            make_json dataframe [index] all_rows_count

        _ : Database_Table ->
            df = x.read max_rows
            all_rows_count = x.row_count

            make_json df [] all_rows_count

        # We display columns as 1-column tables.
        _ : Dataframe_Column ->
            prepare_visualization x.to_table max_rows
        _ : Database_Column ->
            prepare_visualization x.to_table max_rows

        # TODO [RW] Should we truncate Vectors?
        # We also visualize Vectors and arrays
        _ : Vector ->
            truncated = x.take (First max_rows)
            JS_Object.from_pairs [["json", truncated], ["all_rows_count", x.length]] . to_text
        _ : Array ->
            prepare_visualization (Vector.from_polyglot_array x) max_rows

        # Serialize Maps
        _ : Map ->
            map_vector = Warning.clear (x.to_vector.take max_rows)
            header = ["header", ["key", "value"]]
            data = ["data", [map_vector.map .first, map_vector.map .second]]
            all_rows = ["all_rows_count", x.size]
            JS_Object.from_pairs [header, data, all_rows] . to_text

        # Anything else will be visualized with the JSON or matrix visualization
        _ ->
            JS_Object.from_pairs [["json", x]] . to_text

## PRIVATE
   Creates a JSON representation for the visualizations.

   Arguments:
   - dataframe: the dataframe containing (possibly just a fragment of) the data
     to display.
   - indices: a vector of dataframe columns that should be displayed as indices;
     it can be empty, they should have the same amount of rows as the
     `dataframe`.
   - all_rows_count: the number of all rows in the underlying data, useful if
     only a fragment is displayed.
make_json : (Dataframe_Table | Database_Table) -> Vector Dataframe_Column -> Integer -> Text
make_json dataframe indices all_rows_count =
    get_vector c = Warning.set c.to_vector []
    columns     = dataframe.columns
    header      = ["header", columns.map .name]
    data        = ["data",   columns.map get_vector]
    all_rows    = ["all_rows_count", all_rows_count]
    ixes        = ["indices", indices.map get_vector]
    ixes_header = ["indices_header", indices.map .name]
    pairs       = [header, data, all_rows, ixes, ixes_header]
    JS_Object.from_pairs pairs . to_text
