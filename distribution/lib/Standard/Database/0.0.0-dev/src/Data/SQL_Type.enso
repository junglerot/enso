from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

import project.Data.Column.Column

polyglot java import java.sql.ResultSetMetaData
polyglot java import java.sql.Types

## PRIVATE
   Represents an internal SQL data-type.
type SQL_Type
    ## PRIVATE
       Represents an internal SQL data-type.

       Arguments:
       - typeid: a numerical type id, as defined in `java.sql.Types`.
       - name: a database-specific type name, used for pretty printing.
       - precision: For character types, specifies their length.
         See `ResultSetMetaData.getPrecision`.
       - scale: The scale for fixed precision numeric types. Not applicable for
         other types, so it's value is undefined.
         See `ResultSetMetaData.getScale`.
       - nullable: Specifies if the given column is nullable. May be `Nothing`
         if that is unknown / irrelevant for the type.
         ToDo: the precise meaning of this will be revised with #5872.
    Value (typeid : Integer) (name : Text) (precision : Nothing | Integer = Nothing) (scale : Nothing | Integer = Nothing) (nullable : Boolean | Nothing = Nothing)

    ## PRIVATE
       ADVANCED
       The SQL type representing a null value.
    null : SQL_Type
    null = SQL_Type.Value Types.NULL "NULL"

    ## PRIVATE
       Constructs a `SQL_Type` from a `ResultSetMetaData` object.
    from_metadata metadata ix =
        typeid = metadata.getColumnType ix
        typename = metadata.getColumnTypeName ix
        precision = case metadata.getPrecision ix of
            0 -> Nothing
            p : Integer -> p
        scale = metadata.getScale ix
        effective_scale = if precision.is_nothing && (scale == 0) then Nothing else scale
        nullable_id = metadata.isNullable ix
        nullable = if nullable_id == ResultSetMetaData.columnNoNulls then False else
            if nullable_id == ResultSetMetaData.columnNullable then True else
                Nothing
        SQL_Type.Value typeid typename precision effective_scale nullable
