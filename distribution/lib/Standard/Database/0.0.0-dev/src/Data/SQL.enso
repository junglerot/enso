from Standard.Base import all
import Standard.Base.Runtime.State

import Standard.Table.Internal.Vector_Builder.Vector_Builder

import project.Data.SQL_Type.SQL_Type
import project.Data.SQL_Statement.SQL_Statement

## UNSTABLE

   A fragment of a SQL query.

   It can either be a SQL_Fragment.Code_Part that represents raw SQL code or
   SQL_Fragment.Interpolation which represents an object that will be
   interpolated into the query.
type SQL_Fragment
    ## UNSTABLE

       A SQL fragment that represents raw SQL code.

       Arguments:
       - code: A fragment of SQL code.
    Code_Part code:Text

    ## UNSTABLE

       A SQL fragment that represents an object which will be interpolated into
       the query.

       Arguments:
       - object: A value that will be interpolated into the query.
    Interpolation object:Any

type Builder
    ## Creates a Builder representing and empty code fragment.
    empty : Builder
    empty = Builder.Value (Vector_Builder.empty)

    ## Creates a Builder representing a code fragment containing the specified raw
       code.

       Arguments:
       - text: The raw SQL code.
    code : Text -> Builder
    code text =
        vec = if text.is_empty then [] else [SQL_Fragment.Code_Part text]
        Builder.Value (Vector_Builder.from_vector vec)

    ## Creates a Builder representing an interpolation of the given object.

       Arguments:
       - object: The object to be interpolated into the query as if it has the type
         given by `sql_type`.
    interpolation : Any -> Builder
    interpolation object = Builder.Value (Vector_Builder.from_vector [SQL_Fragment.Interpolation object])

    ## Joins a vector of code fragments with the provided separator.

       Arguments:
       - separator: The separator to use when joining the code fragments.
       - statements: The SQL statements to join using `separator`.
    join : Builder | Text -> Vector Builder -> Builder
    join separator statements =
        sep = case separator of
            Builder.Value _ -> separator
            _ -> Builder.code separator

        if statements.length == 0 then Builder.empty else
            (1.up_to statements.length . fold (statements.at 0) acc-> i-> acc ++ sep ++ statements.at i)

    ## PRIVATE

       A Builder for SQL queries.

       Arguments:
       - fragments: A builder that contains fragments of SQL code.

       It can be used to concatenate parts of SQL code in O(1) time and at the
       end build the actual query in linear time.
    Value (fragments:(Vector_Builder SQL_Fragment))

    ## UNSTABLE

       Concatenates two code fragments.

       Arguments:
       - other: The code fragment to append to `self`.
    ++ : Builder -> Builder
    ++ self other = case other of
        text : Text -> if text == "" then self else Builder.Value (self.fragments ++ (Builder.code text).fragments)
        _ -> Builder.Value (self.fragments ++ other.fragments)

    ## UNSTABLE

       Checks if the builder represents an empty code fragment.
    is_empty : Boolean
    is_empty self = self.fragments.is_empty

    ## UNSTABLE

       Builds a SQL statement.
    build : SQL_Statement
    build self =
        fragments = optimize_fragments self.fragments.build
        SQL_Statement.Value fragments

    ## UNSTABLE

       Wraps the code fragment in parentheses.
    paren : Builder
    paren self = Builder.code "(" ++ self ++ ")"

    ## UNSTABLE

       If the fragment is non empty, prepends the specified prefix to it.

       Arguments:
       - prefix: The prefix to append if the fragment is present.

       Empty fragments are unaffected.
    prefix_if_present : Text | Builder -> Builder
    prefix_if_present self prefix =
        pref = case prefix of
            _ : Builder -> prefix
            _ -> Builder.code prefix
        if self.is_empty then self else pref++self

## PRIVATE

   Merges neighboring code fragments to create a more compact representation of
   the same code.

   Arguments:
   - fragments: The fragments to be merged together.
optimize_fragments : Vector SQL_Fragment -> Vector SQL_Fragment
optimize_fragments fragments =
    builder = Vector.new_builder
    go elem =
        last_part = State.get SQL_Fragment.Code_Part
        case elem of
            SQL_Fragment.Code_Part code ->
                new_part = case last_part of
                    Nothing -> SQL_Fragment.Code_Part code
                    SQL_Fragment.Code_Part other -> SQL_Fragment.Code_Part other+code
                State.put SQL_Fragment.Code_Part new_part
            SQL_Fragment.Interpolation _ ->
                case last_part of
                    Nothing -> Nothing
                    SQL_Fragment.Code_Part _ ->
                        builder.append last_part
                        State.put SQL_Fragment.Code_Part Nothing
                builder.append elem
    State.run SQL_Fragment.Code_Part Nothing <|
        fragments.each go
        last_part = State.get SQL_Fragment.Code_Part
        case last_part of
            Nothing -> Nothing
            SQL_Fragment.Code_Part _ -> builder.append last_part
    builder.to_vector
