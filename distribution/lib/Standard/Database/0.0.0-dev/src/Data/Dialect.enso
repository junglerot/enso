from Standard.Base import all
import Standard.Base.Errors.Unimplemented.Unimplemented

import Standard.Table.Internal.Problem_Builder.Problem_Builder
from Standard.Table import Aggregate_Column, Join_Kind, Value_Type

import project.Connection.Connection.Connection
import project.Data.Column.Column
import project.Data.SQL.Builder
import project.Data.SQL_Statement.SQL_Statement
import project.Data.SQL_Type.SQL_Type
import project.Data.Table.Table
import project.Internal.Column_Fetcher.Column_Fetcher
import project.Internal.Error_Mapper.Error_Mapper
import project.Internal.IR.Context.Context
import project.Internal.IR.From_Spec.From_Spec
import project.Internal.IR.Internal_Column.Internal_Column
import project.Internal.IR.Order_Descriptor.Order_Descriptor
import project.Internal.IR.Query.Query
import project.Internal.IR.SQL_Expression.SQL_Expression
import project.Internal.Postgres.Postgres_Dialect
import project.Internal.Replace_Params.Replace_Params
import project.Internal.SQL_Type_Mapping.SQL_Type_Mapping
import project.Internal.SQL_Type_Reference.SQL_Type_Reference
import project.Internal.SQLite.SQLite_Dialect
import project.Internal.Statement_Setter.Statement_Setter
from project.Errors import SQL_Error, Unsupported_Database_Operation
from project.Internal.Result_Set import result_set_to_table

## PRIVATE

   Represents a specific SQL dialect.

   It encapsulates dialect-specific code generation details allowing us to
   support differing SQL dialects.
type Dialect
    ## PRIVATE
       Name of the dialect.
    name : Text
    name self = Unimplemented.throw "This is an interface only."

    ## PRIVATE
       A function which generates SQL code from the internal representation
       according to the specific dialect.
    generate_sql : Query -> SQL_Statement
    generate_sql self query =
        _ = [query]
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Prepares an ordering descriptor.

       One of the purposes of this method is to verify if the expected ordering
       settings are supported by the given database backend.

       Arguments:
       - internal_column: the column to order by.
       - sort_direction: the direction of the ordering.
       - text_ordering: If provided, specifies that the column should be treated
         as text values according to the provided ordering. For non-text types,
         it should be set to `Nothing`.
    prepare_order_descriptor : Internal_Column -> Sort_Direction -> Nothing | Text_Ordering -> Order_Descriptor
    prepare_order_descriptor self internal_column sort_direction text_ordering =
        _ = [internal_column, sort_direction, text_ordering]
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Prepares a distinct operation.
    prepare_distinct : Table -> Vector -> Case_Sensitivity -> Problem_Builder -> Table
    prepare_distinct self table key_columns case_sensitivity problem_builder =
        _ = [table, key_columns, case_sensitivity, problem_builder]
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       A heuristic used by `Connection.query` to determine if a given text looks
       like a SQL query for the given dialect or is rather a table name.
    is_probably_a_query : Text -> Boolean
    is_probably_a_query self text =
        _ = [text]
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Returns the mapping between SQL types of this dialect and Enso
       `Value_Type`.
    get_type_mapping : SQL_Type_Mapping
    get_type_mapping self =
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Creates a `Column_Fetcher` used to fetch data from a result set and build
       an in-memory column from it, based on the given column type.
    make_column_fetcher_for_type : SQL_Type -> Column_Fetcher
    make_column_fetcher_for_type self sql_type =
        _ = sql_type
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Returns a helper object that handles the logic of setting values in a
       prepared statement.

       This object may provide custom logic for handling dialect-specific
       handling of some types.
    get_statement_setter : Statement_Setter
    get_statement_setter self =
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Builds an SQL expression that casts the given expression to the given
       target type.

       Arguments:
       - column: the input column to transform.
       - target_type: the target type.
       - infer_result_type_from_database_callback: A callback that can be used
         to infer the type of the newly built expression from the Database. It
         should be used by default, unless an override is chosen.
    make_cast : Internal_Column -> SQL_Type -> (SQL_Expression -> SQL_Type_Reference) -> Internal_Column
    make_cast self column target_type infer_result_type_from_database_callback =
        _ = [column, target_type, infer_result_type_from_database_callback]
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Specifies if the `fetch_columns` operation needs to execute the query to
       get the column types.

       In most backends, the `getMetaData` may be called on a
       `PreparedStatement` directly, to infer column types without actually
       executing the query. In some however, like SQLite, this is insufficient
       and will yield incorrect results, so the query needs to be executed (even
       though the full results may not need to be streamed).
    needs_execute_query_for_type_inference : Boolean
    needs_execute_query_for_type_inference self =
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Specifies if the Database distinguishes a seprarate `NaN` value for
       floating point columns. Some databases will not be able to distinguish
       NaN from NULL.
    supports_separate_nan : Boolean
    supports_separate_nan self =
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Specifies whether the Database ROUND() function supports negative
       decimal places.
    supports_negative_round_decimal_places : Boolean
    supports_negative_round_decimal_places self =
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Specifies whether round() can take a decimal_places argument for floating point values.
    rounding_decimal_places_not_allowed_for_floats : Boolean
    rounding_decimal_places_not_allowed_for_floats self =
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Performs any transformations on a column resulting from unifying other
       columns.

       These transformations depend on the dialect. They can be used to align
       the result types, for example.
    adapt_unified_column : Internal_Column -> Value_Type -> (SQL_Expression -> SQL_Type_Reference) -> Internal_Column
    adapt_unified_column self column approximate_result_type infer_result_type_from_database_callback =
        _ = [column, approximate_result_type, infer_result_type_from_database_callback]
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Prepares a query that can be used to fetch the type of an expression in
       the provided context.

       This method may modify the context to optimize the query while preserving
       the types. For example, in most databases, it is fine to add
       `WHERE FALSE` to the query - ensuring that the engine will not do any
       actual work, but the resulting type will still be the same. There are
       exceptions though, like SQLite, where the best we can do is add
       `LIMIT 1`.
    prepare_fetch_types_query : SQL_Expression -> Context -> SQL_Statement
    prepare_fetch_types_query self expression context =
        _ = [expression, context]
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Checks if the given aggregate is supported.

       Should raise an appropriate dataflow error if not, or just return `True`.
    check_aggregate_support : Aggregate_Column -> Boolean ! Unsupported_Database_Operation
    check_aggregate_support self aggregate =
        _ = aggregate
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Checks if an operation is supported by the dialect.
    is_supported : Text -> Boolean
    is_supported self operation =
        _ = operation
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Returns a helper for mapping database-specific SQL errors into our common
       error types.
    get_error_mapper : Error_Mapper
    get_error_mapper self =
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       The default table types to use when listing tables.
    default_table_types : Vector Text
    default_table_types self =
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       The dialect-dependent strategy to get the Primary Key for a given table.

       Returns `Nothing` if the key is not defined.
    fetch_primary_key : Connection -> Text -> Vector Text ! Nothing
    fetch_primary_key self connection table_name =
        _ = [connection, table_name]
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Prepares metadata for an operation taking a date/time period and checks
       if the given period is supported.
    prepare_metadata_for_period : Date_Period | Time_Period -> Value_Type -> Any
    prepare_metadata_for_period self period operation_input_type =
        _ = [period, operation_input_type]
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Returns true if the `replace` parameters are supported by this backend.
    if_replace_params_supports : Replace_Params -> Any -> Any
    if_replace_params_supports self replace_params ~action =
        _ = [replace_params, action]
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Determines the value type to use when uploading the given column to the
       Database.

       This will usually just be `column.value_type`, but it allows the database
       to do custom fallback handling for datatypes that are not supported.
    value_type_for_upload_of_existing_column : Column -> Value_Type
    value_type_for_upload_of_existing_column self column =
        _ = column
        Unimplemented.throw "This is an interface only."

## PRIVATE

   The dialect of SQLite databases.
sqlite : Dialect
sqlite = SQLite_Dialect.sqlite

## PRIVATE

   The dialect of PostgreSQL databases.
postgres : Dialect
postgres = Postgres_Dialect.postgres

## PRIVATE
default_fetch_types_query dialect expression context =
    empty_context = context.add_where_filters [SQL_Expression.Literal "FALSE"]
    dialect.generate_sql (Query.Select [["typed_column", expression]] empty_context)

## PRIVATE
   Default implementation relying on DatabaseMetaData.
default_fetch_primary_key connection table_name =
    connection.jdbc_connection.with_metadata metadata->
        rs = metadata.getPrimaryKeys Nothing Nothing table_name
        keys_table = result_set_to_table rs connection.dialect.make_column_fetcher_for_type
        # The names of the columns are sometimes lowercase and sometimes uppercase, so we do a case insensitive select first.
        selected = keys_table.select_columns ["COLUMN_NAME", "KEY_SEQ"] case_sensitivity=Case_Sensitivity.Insensitive reorder=True
        key_column_names = selected.order_by 1 . at 0 . to_vector
        if key_column_names.is_empty then Nothing else key_column_names
