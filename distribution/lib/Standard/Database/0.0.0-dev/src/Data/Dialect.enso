from Standard.Base import all
import Standard.Base.Error.Unimplemented.Unimplemented

from Standard.Table import Aggregate_Column, Join_Kind

import project.Connection.Connection.Connection
import project.Data.SQL_Statement.SQL_Statement
import project.Data.SQL_Type.SQL_Type
import project.Data.Table.Table
import project.Internal.IR.From_Spec.From_Spec
import project.Internal.IR.Internal_Column.Internal_Column
import project.Internal.IR.Order_Descriptor.Order_Descriptor
import project.Internal.IR.Query.Query
import project.Internal.Postgres.Postgres_Dialect
import project.Internal.Redshift.Redshift_Dialect
import project.Internal.SQLite.SQLite_Dialect

## PRIVATE

   Represents a specific SQL dialect.

   It encapsulates dialect-specific code generation details allowing us to
   support differing SQL dialects.
type Dialect
    ## PRIVATE
       Name of the dialect.
    name : Text
    name self = Unimplemented.throw "This is an interface only."

    ## PRIVATE
       A function which generates SQL code from the internal representation
       according to the specific dialect.
    generate_sql : Query -> SQL_Statement
    generate_sql self = Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Deduces the result type for an aggregation operation.

       The provided aggregate is assumed to contain only already resolved columns.
       You may need to transform it with `resolve_aggregate` first.
    resolve_target_sql_type : Aggregate_Column -> SQL_Type
    resolve_target_sql_type self = Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Prepares an ordering descriptor.

       One of the purposes of this method is to verify if the expected ordering
       settings are supported by the given database backend.
    prepare_order_descriptor : Internal_Column -> Sort_Direction -> Text_Ordering -> Order_Descriptor
    prepare_order_descriptor self = Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Prepares a join operation, returning a new table instance encapsulating a
       proper query.
    prepare_join : Connection -> Join_Kind -> Text -> From_Spec -> From_Spec -> Vector -> Vector -> Vector -> Table
    prepare_join self =
        Unimplemented.throw "This is an interface only."

## PRIVATE

   The dialect of SQLite databases.
sqlite : Dialect
sqlite = SQLite_Dialect.sqlite

## PRIVATE

   The dialect of PostgreSQL databases.
postgres : Dialect
postgres = Postgres_Dialect.postgres

## PRIVATE

   The dialect of Redshift databases.
redshift : Dialect
redshift = Redshift_Dialect.redshift
