from Standard.Base import all

from Standard.Table import Sort_Column, Sort_Column_Selector
import Standard.Table.Data.Value_Type.Value_Type
import Standard.Table.Data.Column.Column as Materialized_Column

import project.Data.SQL_Statement.SQL_Statement
import project.Data.SQL_Type.SQL_Type
import project.Data.Table.Integrity_Error
import project.Internal.Helpers
import project.Internal.IR.Context.Context
import project.Internal.IR.Expression.Expression
import project.Internal.IR.Internal_Column.Internal_Column
import project.Internal.IR.Query.Query

from project.Data.Table import Table, freshen_columns

from project.Errors import Unsupported_Database_Operation_Error, Unsupported_Database_Operation_Error_Data

type Column

    ## UNSTABLE
       PRIVATE

       Represents a single column backed by a database.

       Arguments:
       - name: The name of the column.
       - connection: The connection with which the column is associated.
       - expression: The expressions to apply to the column.
       - context: The SQl context in which the column exists.

       These columns may come from the Table or can be created by combining
       other columns with operators. Expressions created in this way may be
       materialized or used to apply filters, groupings etc. to tables from
       which they come. Combined expressions must come from the same context -
       they must both have the same filtering, grouping etc. rules applied to be
       able to be combined.
    Value name:Text connection:Connection sql_type:SQL_Type expression:Expression context:Context

    ## UNSTABLE

       Returns a text containing an ASCII-art table displaying this data.

       Arguments:
         - show_rows: the number of initial rows that should be displayed.
         - format_terminal: whether ANSI-terminal formatting should be used
    display : Integer -> Boolean -> Text
    display self show_rows=10 format_terminal=False =
        self.to_table.display show_rows format_terminal

    ## UNSTABLE

       Prints an ASCII-art table with this data to the standard output.

       Arguments:
         - show_rows: the number of initial rows that should be displayed.
    print : Nothing
    print self show_rows=10 =
        IO.println (self.display show_rows format_terminal=True)
        IO.println ''

    ## UNSTABLE

       Converts this column to JSON.
    to_json : Json
    to_json self = self.to_sql.to_json

    ## UNSTABLE

       Converts this column into a single-column table.
    to_table : Table
    to_table self =
        Table.Value self.name self.connection [self.as_internal] self.context

    ## UNSTABLE

       Returns a materialized dataframe containing rows of this table.

       Arguments:
       - max_rows: specifies a maximum amount of rows to fetch; if not set, all
         available rows are fetched.
    read : (Nothing | Integer) -> Materialized_Column
    read self max_rows=Nothing =
        self.to_table.read max_rows . at self.name

    ## UNSTABLE

       Returns a vector containing all the elements in this column.
    to_vector : Vector Any
    to_vector self =
        ## We remove the index to avoid fetching index data that will not be
           used anyway when constructing the raw Vector.
        without_ix = self.to_table.set_index []
        without_ix . read  . at self.name . to_vector

    ## UNSTABLE TODO this is a very early prototype that will be revisited later
       This implementation is really just so that we can use the types in
       `filter`, it does not provide even a decent approximation of the true
       type in many cases. It will be improved when the types work is
       implemented.
    value_type : Value_Type
    value_type self =
        if self.sql_type.is_definitely_boolean then Value_Type.Boolean else
            if self.sql_type.is_definitely_text then Value_Type.Char else
                ## TODO we could return integers here too but then we should
                   check how many bits there are - and this is out of scope for
                   this prototype especially as the method for checking the type
                   is likely to change so this code would likely be thrown away.
                   So we just fall back to unsupported (abusing it slightly).
                Value_Type.Unsupported_Data_Type self.sql_type.name
    ## UNSTABLE

       Returns an SQL statement that will be used for materializing this column.
    to_sql : SQL_Statement
    to_sql self = self.to_table.to_sql

    ## PRIVATE
       Sets up an operation of arbitrary arity.

       Arguments:
       - op_kind: The kind of the operation
       - operands: A vector of additional operation arguments (the column itself
         is always passed as the first argument).
       - new_type: The type of the SQL column that results from applying the
         operator. If not specified, the type of this column is used.
       - operand_types: The SQL types of the additional arguments. They are used
         if additional arguments are constants (and if not provided, the type of
         this column is used). If the other argument is a column, its type is
         used.
    make_op self op_kind operands new_type=Nothing operand_types=Nothing =
        prepare_operand operand operand_type = case operand of
            other_column : Column ->
                if Helpers.check_integrity self other_column then other_column.expression else
                    Error.throw <| Unsupported_Database_Operation_Error_Data "Cannot use columns coming from different contexts in one expression without a join."
            constant ->
                actual_operand_type = operand_type.if_nothing self.sql_type
                Expression.Constant actual_operand_type constant
        actual_operand_types = operand_types.if_nothing (Vector.fill operands.length Nothing)
        expressions = operands.zip actual_operand_types prepare_operand

        actual_new_type = new_type.if_nothing self.sql_type
        new_expr = Expression.Operation op_kind ([self.expression] + expressions)
        Column.Value self.name self.connection actual_new_type new_expr self.context

    ## PRIVATE

       Creates a binary operation with given kind and operand.

       Arguments:
       - op_kind: The kind of binary operator.
       - operand: The right operand to the binary operator.
       - new_type: The type of the SQL column that results from applying the
         operator.
       - operand_type: The SQL type of the operand.

       If not specified, the `new_type` is the same as the current one.
       `operand_type` is only relevant if the operand is not a column, it
       defaults to the current type if not provided.
    make_binary_op : Text -> Text -> (Column | Any) -> (SQL_Type | Nothing) -> (SQL_Type | Nothing) -> Column
    make_binary_op self op_kind operand new_type=Nothing operand_type=Nothing =
        self.make_op op_kind [operand] new_type [operand_type]

    ## PRIVATE

       Helper for implementing unary operators.

       Arguments:
       - op_kind: The kind of the unary operator.
       - new_type: The type of the SQL column that results from applying the
         operator.
    make_unary_op : Text -> Text -> (SQL_Type | Nothing) -> Column
    make_unary_op self op_kind new_type=Nothing = self.make_op op_kind [] new_type

    ## UNSTABLE

       Efficiently joins two tables based on either the index or a key column.

       Arguments:
       - other: the table being the right operand of this join operation.
       - on: the column(s) or expression(s) of `self` that should be used as
         the join key. If this argument is not provided, the index of `self`
         will be used.
       - drop_unmatched: whether the rows of `self` without corresponding
         matches in `other` should be dropped from the result.
       - left_suffix: a suffix that should be added to the columns of `self`
         when there's a name conflict with a column of `other`.
       - right_suffix: a suffix that should be added to the columns of `other`
         when there's a name conflict with a column of `self`.

       The resulting table contains rows of `self` extended with rows of
       `other` with matching indexes. If the index in `other` is not unique,
       the corresponding rows of `self` will be duplicated in the result.
    join : Table | Column -> Nothing | Text | Column | Vector (Text | Column) -> Boolean -> Text -> Text -> Table
    join self other on=Nothing drop_unmatched=False left_suffix='_left' right_suffix='_right' =
        self.to_table.join other on drop_unmatched left_suffix right_suffix

    ## UNSTABLE

       Sums the values in this column.
    sum : Any
    sum self = self.compute_aggregate "SUM"

    ## UNSTABLE

       Computes the maximum element of this column.
    max : Any
    max self = self.compute_aggregate "MAX"

    ## UNSTABLE

       Computes the minimum element of this column.
    min : Any
    min self = self.compute_aggregate "MIN"

    ## UNSTABLE

       Computes the mean of non-missing elements of this column.
    mean : Any
    mean self = self.compute_aggregate "AVG"

    ## PRIVATE

       Computes an aggregate operator.

       Arguments:
       - op_name: The name of the operator to compute.
    compute_aggregate : Text
    compute_aggregate self op_name =
        agg = make_aggregate self op_name
        agg.to_vector . at 0

    ## UNSTABLE

       Returns the length of this column.
    length : Integer
    length self = self.to_table.row_count

    ## UNSTABLE

       Returns the number of missing items in this column.
    count_missing : Integer
    count_missing self =
        self.to_table.filter 0 Filter_Condition.Is_Nothing . row_count

    ## UNSTABLE

       Returns the number of non-null items in this column.
    count : Integer
    count self =
        self.to_table.filter 0 Filter_Condition.Not_Nothing . row_count

    ## UNSTABLE

       Element-wise equality comparison.

       Arguments:
       - other: The other column to compare pairwise with.

       Returns a column with results of comparing this column's elements against
       `other`.  If `other` is a column, the comparison is performed pairwise
       between corresponding elements of `self` and `other`.
    == : Column | Any -> Column
    == self other = self.make_binary_op "=" other new_type=SQL_Type.boolean

    ## UNSTABLE

       Element-wise non-equality comparison.

       Arguments:
       - other: The other column to compare pairwise with.

       Returns a column with results of comparing this column's elements against
       `other`.  If `other` is a column, the comparison is performed pairwise
       between corresponding elements of `self` and `other`.
    != : Column | Any -> Column
    != self other = self.make_binary_op "!=" other new_type=SQL_Type.boolean

    ## UNSTABLE

       Element-wise order comparison.

       Arguments:
       - other: The other column to compare pairwise with.

       Returns a column with results of comparing this column's elements against
       `other`.  If `other` is a column, the comparison is performed pairwise
       between corresponding elements of `self` and `other`.
    >= : Column | Any -> Column
    >= self other = self.make_binary_op ">=" other new_type=SQL_Type.boolean

    ## UNSTABLE

       Element-wise order comparison.

       Arguments:
       - other: The other column to compare pairwise with.

       Returns a column with results of comparing this column's elements against
       `other`.  If `other` is a column, the comparison is performed pairwise
       between corresponding elements of `self` and `other`.
    <= : Column | Any -> Column
    <= self other = self.make_binary_op "<=" other new_type=SQL_Type.boolean

    ## UNSTABLE

       Element-wise order comparison.

       Arguments:
       - other: The other column to compare pairwise with.

       Returns a column with results of comparing this column's elements against
       `other`.  If `other` is a column, the comparison is performed pairwise
       between corresponding elements of `self` and `other`.
    > : Column | Any -> Column
    > self other = self.make_binary_op ">" other new_type=SQL_Type.boolean

    ## UNSTABLE

       Element-wise order comparison.

       Arguments:
       - other: The other column to compare pairwise with.

       Returns a column with results of comparing this column's elements against
       `other`.  If `other` is a column, the comparison is performed pairwise
       between corresponding elements of `self` and `other`.
    < : Column | Any -> Column
    < self other = self.make_binary_op "<" other new_type=SQL_Type.boolean

    ## Element-wise inclusive bounds check.

       Arguments:
       - lower: The lower bound to compare elements of `self` against. If
         `lower` is a column, the comparison is performed pairwise between
         corresponding elements of `self` and `lower`.
       - upper: The upper bound to compare elements of `self` against. If
         `upper` is a column, the comparison is performed pairwise between
         corresponding elements of `self` and `upper`.

       Returns a column with boolean values indicating whether values of this
       column fit between the lower and upper bounds (both ends inclusive).
    between : (Column | Any) -> (Column | Any) -> Column
    between self lower upper =
        self.make_op "BETWEEN" [lower, upper] new_type=SQL_Type.boolean

    ## UNSTABLE

       Element-wise addition.

       Arguments:
       - other: The other column to add to this column.

       Returns a column containing the result of adding `other` to each element
       of `self`.  If `other` is a column, the operation is performed pairwise
       between corresponding elements of `self` and `other`.
    + : Column | Any -> Column
    + self other = self.make_binary_op "+" other

    ## UNSTABLE

       Element-wise subtraction.

       Arguments:
       - other: The other column to subtract from this column.

       Returns a column containing the result of subtracting `other` from each
       element of `self`.  If `other` is a column, the operation is performed
       pairwise between corresponding elements of `self` and `other`.
    - : Column | Any -> Column
    - self other = self.make_binary_op "-" other

    ## UNSTABLE

       Element-wise multiplication.

       Arguments:
       - other: The other column to multiply `self` by.

       Returns a column containing the result of multiplying `other` by each
       element of `self`.  If `other` is a column, the operation is performed
       pairwise between corresponding elements of `self` and `other`.
    * : Column | Any -> Column
    * self other = self.make_binary_op "*" other

    ## UNSTABLE

       Element-wise division.

       Arguments:
       - other: The other column to divide `self` column by.

       Returns a column containing the result of dividing each element of `self`
       by `other`.  If `other` is a column, the operation is performed pairwise
       between corresponding elements of `self` and `other`.
    / : Column | Any -> Column
    / self other = self.make_binary_op "/" other

    ## Element-wise modulus.

       Arguments:
       - other: The value to modulo `self` against. If `other` is a column, the
         modulus is performed pairwise between corresponding elements of `self`
         and `other`.

       Returns a column with results of modulus this column's elements against
       `other`.

       > Example
         Modulus of two columns against each other.

             import Standard.Examples

             example_mod = Examples.integer_column % Examples.decimal_column

       > Example
         Modulus of a column with a number.

             import Standard.Examples

             example_mod = Examples.integer_column % 3
    % : Column | Any -> Column
    % self other = self.make_binary_op "%" other

    ## UNSTABLE

       Element-wise boolean conjunction.

       Arguments:
       - other: The other column to compute the conjunction with.

       Returns a column containing the result of performing the boolean `and` on
       `other` and each element of `self`.  If `other` is a column, the
       operation is performed pairwise between corresponding elements of `self`
       and `other`.
    && : Column | Any -> Column
    && self other = self.make_binary_op "AND" other

    ## UNSTABLE

       Element-wise boolean disjunction.

       Arguments:
       - other: The other column to compute the disjunction with.

       Returns a column containing the result of performing the boolean `or` on
       `other` and each element of `self`.  If `other` is a column, the
       operation is performed pairwise between corresponding elements of `self`
       and `other`.
    || : Column | Any -> Column
    || self other = self.make_binary_op "OR" other

    ## UNSTABLE

       Boolean negation of each element in this column.
    not : Column
    not self = self.make_unary_op "NOT"

    ## UNSTABLE
       Replaces `True` values with `when_true` and `False` with `when_false`.
       Only meant for use with boolean columns.

       TODO: Currently `when_true` and `when_false` need to be a single value.
       In the future the API will also support row-based IIF if they are columns.
    iif : Any -> Any -> Column
    iif self when_true when_false =
        ## TODO we should adjust new_type based on types when_true and
           when_false, but this relies on the Value Types design which is still
           in progress. This function has status of an internal prototype for
           now, so we just rely on a simplified handling. Once Value Types are
           properly implemented, this should be accordingly extended for the
           full implementation of IIF. We will need to handle when_true and
           when_false being either columns or regular values and rely on a
           mapping of Enso base types to SQL types, and a rule for extracting a
           common type.
        approximate_type x = case x of
            _ : Integer -> SQL_Type.integer
            _ : Decimal -> SQL_Type.real
            _ : Text -> SQL_Type.text
            _ : Boolean -> SQL_Type.boolean
            _ -> Error.throw (Illegal_Argument_Error_Data "Unsupported type.")
        left_type = approximate_type when_true
        right_type = approximate_type when_false
        if left_type != right_type then Error.throw (Illegal_Argument_Error_Data "when_true and when_false types do not match") else
            self.make_op "IIF" [when_true, when_false] new_type=left_type


    ## UNSTABLE

       Returns a column of booleans, with `True` items at the positions where
       this column contains a `Nothing`.
    is_missing : Column
    is_missing self = self.make_unary_op "IS_NULL" new_type=SQL_Type.boolean

    ## UNSTABLE
       Returns a column of booleans, with `True` items at the positions where
       this column contains a NaN. This is only applicable to double columns.
    is_nan : Column
    is_nan self = self.make_unary_op "IS_NAN" new_type=SQL_Type.boolean

    ## PRIVATE
       Returns a column of booleans, with `True` items at the positions where
       this column contains an empty string or `Nothing`.
    is_empty : Column
    is_empty self = self.make_unary_op "IS_EMPTY" new_type=SQL_Type.boolean

    ## PRIVATE
       Returns a column of booleans with `True` at the positions where this
       column contains a blank value.

       Arguments:
       - treat_nans_as_blank: If `True`, then `Number.nan` is considered as
         blank.

       ? Blank values
         Blank values are `Nothing`, `""` and depending on setting `Number.nan`.
    is_blank : Boolean -> Boolean -> Column
    is_blank self treat_nans_as_blank=False =
        is_blank = case self.sql_type.is_definitely_text of
            True -> self.is_empty
            False -> self.is_missing
        case treat_nans_as_blank && self.sql_type.is_definitely_double of
            True -> is_blank || self.is_nan
            False -> is_blank

    ## UNSTABLE

       Returns a new column where missing values have been replaced with the
       provided default.
    fill_missing : Any -> Column
    fill_missing self default = self.make_binary_op "FILL_NULL" default

    ## UNSTABLE

       Returns the same column with changed name.

       Arguments:
       - new_name: The name to rename `self` column to.
    rename : Text -> Column
    rename self new_name = case Helpers.ensure_name_is_sane new_name of
        True ->
            is_used_in_index = self.context.meta_index.exists i-> i.name == new_name
            case is_used_in_index of
                True -> Error.throw <| Illegal_State_Error_Data "Cannot rename the column to "+new_name+", because it has an index with the same name."
                False ->
                    Column.Value new_name self.connection self.sql_type self.expression self.context

    ## UNSTABLE

       Sorts the column according to the specified rules.

       Arguments:
         - order: Specifies the default sort order for this operation.
         - missing_last: Specifies the default placement of missing values when
           compared to non-missing ones. Note thet this argument is independent
           from `order`, i.e. missing values will always be sorted according to
           this rule, ignoring the ascending / descending setting.

       > Example
         Sorting `column` in ascending order.
             column.sort

       > Example
         Sorting `column` in descending order.
             column.sort order=Sort_Direction.Descending
    sort : Sort_Direction -> Column
    sort self order=Sort_Direction.Ascending =
        self.to_table.order_by (Sort_Column_Selector.By_Column [Sort_Column.Column self order]) . at self.name

    ## UNSTABLE
       Creates a new Column with the specified range of rows from the input
       Column.

       Arguments:
       - range: The selection of rows from the table to return.
    take : (Index_Sub_Range | Range) -> Column
    take self range=(First 1) =
        _ = range
        msg = "`Column.take` is not yet implemented."
        Error.throw (Unsupported_Database_Operation_Error_Data msg)

    ## UNSTABLE
       Creates a new Column from the input with the specified range of rows
       removed.

       Arguments:
       - range: The selection of rows from the table to remove.
    drop : (Index_Sub_Range | Range) -> Column
    drop self range=(First 1) =
        _ = range
        msg = "`Column.drop` is not yet implemented."
        Error.throw (Unsupported_Database_Operation_Error_Data msg)

    ## UNSTABLE

       Checks for each element of the column if it starts with `other`.

       Arguments:
       - other: A column or text to check for each item in `self`.

       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `self` and `other`.  If the argument is a
       missing value (a Nothing or a column with missing values), the behaviour
       on these missing values is vendor specific.
    starts_with : Column | Text -> Column
    starts_with self other = self.make_binary_op "starts_with" other new_type=SQL_Type.boolean

    ## UNSTABLE

       Checks for each element of the column if it ends with `other`.

       Arguments:
       - other: A column ot text to check for each item in `self`.

       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `self` and `other`.  If the argument is a
       missing value (a Nothing or a column with missing values), the behaviour
       on these missing values is vendor specific.
    ends_with : Column | Text -> Column
    ends_with self other = self.make_binary_op "ends_with" other new_type=SQL_Type.boolean

    ## UNSTABLE

       Checks for each element of the column if it contains `other`.

       Arguments:
       - other: A column ot text to check for each item in `self`.

       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `self` and `other`.  If the argument is a
       missing value (a Nothing or a column with missing values), the behaviour
       on these missing values is vendor specific.
    contains : Column | Text -> Column
    contains self other = self.make_binary_op "contains" other new_type=SQL_Type.boolean

    ## Checks for each element of the column if it matches an SQL-like pattern.

       Arguments:
       - pattern: The pattern to match `self` against. If it is a column, the
         operation is performed pairwise between corresponding elements of
         `self` and that column. The pattern is an SQL-like pattern, where
         `%` matches any sequence of characters and `_` matches any single
         character.

       > Example
         Check if elements of a column start with 'F' and end with a dot.

             import Standard.Examples

             example_contains = Examples.text_column_1.like "F%."
    like : Column | Text -> Column
    like self pattern = self.make_binary_op "LIKE" pattern new_type=SQL_Type.boolean

    ## Checks for each element of the column if it is contained within the
       provided vector or column.

       Arguments:
       - vector: A vector of elements or another column. The resulting column
         will contain true at the positions where the corresponding element of
         `self` is contained in `vector`.

       > Example
         Check if elements of a column are contained in a provided vector.

             import Standard.Examples

             example_contains = Examples.text_column_1.is_in [1, 2, 5]
    is_in : Column | Vector -> Column
    is_in self vector = case vector of
        _ : Vector.Vector ->
            ## This is slightly hacky - we don't provide operand types as we want to
               allow any type to get through and currently we do not have a mapping
               from Enso types to SQL types (it may be available in the future). So
               we just rely on Nothing resolving to the current column type. That
               type may not always match the operands, but the current
               implementation uses this type only for two purposes: generated SQL
               visualization (so the color will be consistent with the column type
               and not the value type - that can be confusing, we probably want to
               fix it later) and setting up the query - but at the set up this only
               applies to adding nulls - setting any other object does not check the
               type at this level anyway.
            partitioned = vector.partition .is_nothing
            nulls = partitioned.first
            non_nulls = partitioned.second
            ## Since SQL `NULL IN (NULL)` yields `NULL`, we need to handle this case
               separately. So we handle all non-null values using `IS_IN` and then
               `OR` that with a null check (if the vector contained any nulls to
               begin with). The implementation also ensures that even
               `NULL IN (...)` is coalesced to False, so that negation works as
               expected.
            is_in_not_null = self.make_op "IS_IN" operands=non_nulls new_type=SQL_Type.boolean
            case nulls.not_empty of
                True -> is_in_not_null || self.is_missing
                False -> is_in_not_null
        column : Column -> if Helpers.check_connection self column . not then (Error.throw (Integrity_Error.Error "Column "+column.name)) else
            ## We slightly abuse the expression syntax putting a Query as one of
               the sub-expressions. Once type-checking is added, we may need to
               amend the signature of `Expression.Operation` to account for
               this. Also, unfortunately as `NULL IN (...)` is `NULL` in SQL, we
               need to do separate handling of nulls - we check if the target
               column has any nulls and if so, we will do `IS NULL` checks for
               our columns too. That is because, we want the containment check
               for `NULL` to work the same way as for any other value.
            in_subquery = Query.Select [Pair_Data column.name column.expression] column.context
            has_nulls_expression = Expression.Operation "BOOL_OR" [column.is_missing.expression]
            has_nulls_subquery = Query.Select [Pair_Data "has_nulls" has_nulls_expression] column.context
            new_type = SQL_Type.boolean
            new_expr = Expression.Operation "IS_IN_COLUMN" [self.expression, in_subquery, has_nulls_subquery]
            Column.Value self.name self.connection new_type new_expr self.context

    ## PRIVATE
    as_internal : Internal_Column
    as_internal self = Internal_Column.Value self.name self.sql_type self.expression

    ## Provides a simplified text representation for display in the REPL and errors.
    to_text : Text
    to_text self = "(Database Column "+self.name.to_text+")"

## PRIVATE

   A helper method for creating an aggregated column by applying some
   operation.

   Arguments:
   - column: The column to aggregate.
   - operation: The name of the aggregation operation.
   - name_suffix: The suffix to apply to the name of the aggregate column.
   - new_type: The SQL type of the result column.
make_aggregate : Column -> Text -> Text -> SQL_Type -> Column
make_aggregate column operation name_suffix="_agg" new_type=Nothing =
    actual_new_type = new_type.if_nothing column.sql_type
    expr = Expression.Operation operation [column.expression]
    case Helpers.ensure_name_is_sane name_suffix of
        True ->
            new_name = column.name + name_suffix
            lift_aggregate new_name column.connection actual_new_type expr column.context

## PRIVATE

   A helper function that lifts an aggregate query into a subquery to ensure
   correctness of further processing.

   Argument:
   - new_name: The new name for the aggregate column.
   - connection: The connection with which the aggregate is associated.
   - expected_type: The expected SQL type of the column.
   - expr: The expression for the query.
   - context: The context in which the query exists.
lift_aggregate : Text -> Connection -> SQL_Type -> Expression -> Context -> Column
lift_aggregate new_name connection expected_type expr context =
    # TODO [RW] This is a simple workaround for #1643 - we always wrap the
    # aggregate into a subquery, thus making it safe to use it everywhere. A
    # more complex solution may be adopted at some point.
    ixes = freshen_columns [new_name] context.meta_index
    col = Internal_Column.Value new_name expected_type expr
    setup = context.as_subquery new_name+"_sub" [[col], ixes]
    subquery = setup.first
    cols = setup.second
    new_col = cols.first.first
    new_ixes = cols.second
    new_ctx = Context.for_subquery subquery . set_index new_ixes
    Column.Value new_name connection new_col.sql_type new_col.expression new_ctx

