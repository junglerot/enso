from Standard.Base import all

import Standard.Database.Data.Sql

## PRIVATE
   Arguments:
   - make_raw_concat_expr: a function which takes two expressions - a (possibly
     processed) column expression and a separator and returns a SQL expression
     which concatenates the expressions with separators.
   - make_contains_expr: a function which takes two expressions - a string to
     search in and a substring to search for and returns an expression which is
     true if the string contains the substring.
   - has_quote: specifies whether it should expect an additional SQL argument
     containing a quote character.
   - args: the processed SQL arguments from the generator.

   It takes 4 or 5 SQL arguments depending on `has_quote`.
   The SQL arguments are following:
   - the column expression to concatenate,
   - the separator to use when joining the expressions,
   - a prefix to prepend,
   - a suffix to append,
   - a quote character to use to escape separator if it is present inside of a
     column expression; it should be provided only if `has_quote` is `True` and
     must not be empty then. If the quote character occurs in the expression, it
     is escaped by doubling each occurrence.
make_concat make_raw_concat_expr make_contains_expr has_quote args =
    expected_args = if has_quote then 5 else 4
    if args.length != expected_args then Error.throw (Illegal_State_Error "Unexpected number of arguments for the concat operation.") else
        expr = args.at 0
        separator = args.at 1
        prefix = args.at 2
        suffix = args.at 3
        append = Sql.code " || "
        possibly_quoted = case has_quote of
            True ->
                quote = args.at 4
                includes_separator = separator ++ Sql.code " != '' AND " ++ make_contains_expr expr separator
                ## We use the assumption that `has_quote` is True iff `quote` is not empty.
                includes_quote = make_contains_expr expr quote
                is_empty = expr ++ Sql.code " = ''"
                needs_quoting = includes_separator.paren ++ Sql.code " OR " ++ includes_quote.paren ++ Sql.code " OR " ++ is_empty.paren
                escaped = Sql.code "replace(" ++ expr ++ Sql.code ", " ++ quote ++ Sql.code ", " ++ quote ++ append ++ quote ++ Sql.code ")"
                quoted = quote ++ append ++ escaped ++ append ++ quote
                Sql.code "CASE WHEN " ++ needs_quoting ++ Sql.code " THEN " ++ quoted ++ Sql.code " ELSE " ++ expr ++ Sql.code " END"
            False -> expr
        transformed_expr = Sql.code "CASE WHEN " ++ expr ++ Sql.code " IS NULL THEN '' ELSE " ++ possibly_quoted.paren ++ Sql.code " END"
        concatenated = make_raw_concat_expr transformed_expr separator
        prefix.paren ++ append ++ concatenated ++ append ++ suffix.paren
