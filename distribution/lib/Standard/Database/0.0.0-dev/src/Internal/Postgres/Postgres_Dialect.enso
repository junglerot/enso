from Standard.Base import all hiding First, Last
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State
import Standard.Base.Errors.Unimplemented.Unimplemented

import Standard.Table.Data.Aggregate_Column.Aggregate_Column
import Standard.Table.Internal.Naming_Helpers.Naming_Helpers
import Standard.Table.Internal.Problem_Builder.Problem_Builder
from Standard.Table.Data.Aggregate_Column.Aggregate_Column import all

import project.Connection.Connection.Connection
import project.Data.SQL.Builder
import project.Data.SQL_Statement.SQL_Statement
import project.Data.SQL_Type.SQL_Type
import project.Data.Table.Table
import project.Internal.Base_Generator
import project.Internal.Column_Fetcher.Column_Fetcher
import project.Internal.Column_Fetcher as Column_Fetcher_Module
import project.Internal.Common.Database_Distinct_Helper
import project.Internal.Common.Database_Join_Helper
import project.Internal.IR.Context.Context
import project.Internal.IR.From_Spec.From_Spec
import project.Internal.IR.SQL_Expression.SQL_Expression
import project.Internal.IR.Internal_Column.Internal_Column
import project.Internal.IR.Order_Descriptor.Order_Descriptor
import project.Internal.IR.Nulls_Order.Nulls_Order
import project.Internal.IR.SQL_Join_Kind.SQL_Join_Kind
import project.Internal.IR.Query.Query
import project.Internal.Postgres.Postgres_Type_Mapping.Postgres_Type_Mapping
import project.Internal.SQL_Type_Mapping.SQL_Type_Mapping
import project.Internal.Statement_Setter.Statement_Setter
from project.Errors import Unsupported_Database_Operation

polyglot java import org.enso.database.JDBCUtils

## PRIVATE

   The dialect of PostgreSQL databases.
postgres : Postgres_Dialect
postgres =
    Postgres_Dialect.Value make_internal_generator_dialect

## PRIVATE

   The dialect of PostgreSQL databases.
type Postgres_Dialect
    ## PRIVATE

       The dialect of PostgreSQL databases.
    Value internal_generator_dialect

    ## PRIVATE
       Name of the dialect.
    name : Text
    name self = "PostgreSQL"

    ## PRIVATE
    to_text self = "Postgres_Dialect"

    ## PRIVATE
       A function which generates SQL code from the internal representation
       according to the specific dialect.
    generate_sql : Query -> SQL_Statement
    generate_sql self query =
        Base_Generator.generate_query self.internal_generator_dialect query . build

    ## PRIVATE
       Prepares an ordering descriptor.

       One of the purposes of this method is to verify if the expected ordering
       settings are supported by the given database backend.

       Arguments:
       - internal_column: the column to order by.
       - sort_direction: the direction of the ordering.
       - text_ordering: If provided, specifies that the column should be treated
         as text values according to the provided ordering. For non-text types,
         it should be set to `Nothing`.
    prepare_order_descriptor : Internal_Column -> Sort_Direction -> Nothing | Text_Ordering -> Order_Descriptor
    prepare_order_descriptor self internal_column sort_direction text_ordering =
        make_order_descriptor internal_column sort_direction text_ordering

    ## PRIVATE
       Prepares a join operation, returning a new table instance encapsulating a
       proper query.
    prepare_join : Connection -> SQL_Join_Kind -> Text -> From_Spec -> From_Spec -> Vector -> Vector -> Vector -> Table
    prepare_join self connection join_kind new_table_name left_subquery right_subquery on_expressions where_expressions columns_to_select =
        Database_Join_Helper.default_prepare_join connection join_kind new_table_name left_subquery right_subquery on_expressions where_expressions columns_to_select

    ## PRIVATE
       Prepares a distinct operation.
    prepare_distinct : Table -> Vector -> Case_Sensitivity -> Problem_Builder -> Table
    prepare_distinct self table key_columns case_sensitivity problem_builder =
        setup = table.context.as_subquery table.name+"_inner" [table.internal_columns]
        new_columns = setup.new_columns.first
        column_mapping = Map.from_vector <| new_columns.map c-> [c.name, c]
        new_key_columns = key_columns.map c-> column_mapping.at c.name
        type_mapping = self.get_type_mapping
        distinct_expressions = new_key_columns.map column->
            value_type = type_mapping.sql_type_to_value_type column.sql_type_reference.get
            Database_Distinct_Helper.make_distinct_expression case_sensitivity problem_builder column value_type
        new_context = Context.for_subquery setup.subquery . set_distinct_on distinct_expressions
        table.updated_context_and_columns new_context new_columns subquery=True

    ## PRIVATE
       A heuristic used by `Connection.query` to determine if a given text looks
       like a SQL query for the given dialect or is rather a table name.
    is_probably_a_query : Text -> Boolean
    is_probably_a_query self text =
        (text.contains "SELECT ") || (text.contains "EXEC ")

    ## PRIVATE
       Returns an utility that allows ensuring column names are valid for the
       given backend.
    get_naming_helpers : Naming_Helpers
    get_naming_helpers self = Naming_Helpers

    ## PRIVATE
       Returns the mapping between SQL types of this dialect and Enso
       `Value_Type`.
    get_type_mapping : SQL_Type_Mapping
    get_type_mapping self = Postgres_Type_Mapping

    ## PRIVATE
       Creates a `Column_Fetcher` used to fetch data from a result set and build
       an in-memory column from it, based on the given column type.
    make_column_fetcher_for_type : SQL_Type -> Column_Fetcher
    make_column_fetcher_for_type self sql_type =
        type_mapping = self.get_type_mapping
        value_type = type_mapping.sql_type_to_value_type sql_type
        Column_Fetcher_Module.default_fetcher_for_value_type value_type

    ## PRIVATE
    get_statement_setter : Statement_Setter
    get_statement_setter self = postgres_statement_setter

    ## PRIVATE
    check_aggregate_support : Aggregate_Column -> Boolean ! Unsupported_Database_Operation
    check_aggregate_support self aggregate =
        _ = aggregate
        True

## PRIVATE
make_internal_generator_dialect =
    cases = [["LOWER", Base_Generator.make_function "LOWER"], ["UPPER", Base_Generator.make_function "UPPER"]]
    text = [starts_with, contains, ends_with, agg_shortest, agg_longest, make_case_sensitive]+concat_ops+cases
    counts = [agg_count_is_null, agg_count_empty, agg_count_not_empty, ["COUNT_DISTINCT", agg_count_distinct], ["COUNT_DISTINCT_INCLUDE_NULL", agg_count_distinct_include_null]]
    arith_extensions = [is_nan, decimal_div, mod_op,  ["ROW_MIN", Base_Generator.make_function "LEAST"], ["ROW_MAX", Base_Generator.make_function "GREATEST"]]
    bool = [bool_or]

    stddev_pop = ["STDDEV_POP", Base_Generator.make_function "stddev_pop"]
    stddev_samp = ["STDDEV_SAMP", Base_Generator.make_function "stddev_samp"]
    stats = [agg_median, agg_mode, agg_percentile, stddev_pop, stddev_samp]
    my_mappings = text + counts + stats + first_last_aggregators + arith_extensions + bool
    Base_Generator.base_dialect . extend_with my_mappings

## PRIVATE
agg_count_is_null = Base_Generator.lift_unary_op "COUNT_IS_NULL" arg->
    Builder.code "COUNT(CASE WHEN " ++ arg.paren ++ " IS NULL THEN 1 END)"

## PRIVATE
agg_count_empty = Base_Generator.lift_unary_op "COUNT_EMPTY" arg->
    Builder.code "COUNT(CASE WHEN (" ++ arg.paren ++ " IS NULL) OR (" ++ arg.paren ++ " = '') THEN 1 END)"

## PRIVATE
agg_count_not_empty = Base_Generator.lift_unary_op "COUNT_NOT_EMPTY" arg->
    Builder.code "COUNT(CASE WHEN (" ++ arg.paren ++ " IS NOT NULL) AND (" ++ arg.paren ++ " != '') THEN 1 END)"

## PRIVATE
agg_median = Base_Generator.lift_unary_op "MEDIAN" arg->
    median = Builder.code "percentile_cont(0.5) WITHIN GROUP (ORDER BY " ++ arg ++ ")"
    ## TODO Technically, this check may not be necessary if the input column has
       type INTEGER, because it is impossible to represent a NaN in that type.
       However, currently the column type inference is not tested well-enough to
       rely on this, so leaving an uniform approach regardless of type. This
       could be revisited when further work on column types takes place.
       See issue: https://www.pivotaltracker.com/story/show/180854759
    has_nan = Builder.code "bool_or(" ++ arg ++ " = double precision 'NaN')"
    Builder.code "CASE WHEN " ++ has_nan ++ " THEN 'NaN' ELSE " ++ median ++ " END"

## PRIVATE
agg_mode = Base_Generator.lift_unary_op "MODE" arg->
    Builder.code "mode() WITHIN GROUP (ORDER BY " ++ arg ++ ")"

## PRIVATE
agg_percentile = Base_Generator.lift_binary_op "PERCENTILE" p-> expr->
    percentile = Builder.code "percentile_cont(" ++ p ++ ") WITHIN GROUP (ORDER BY " ++ expr ++ ")"
    ## TODO Technically, this check may not be necessary if the input column has
       type INTEGER, because it is impossible to represent a NaN in that type.
       However, currently the column type inference is not tested well-enough to
       rely on this, so leaving an uniform approach regardless of type. This
       could be revisited when further work on column types takes place.
       See issue: https://www.pivotaltracker.com/story/show/180854759
    has_nan = Builder.code "bool_or(" ++ expr ++ " = double precision 'NaN')"
    Builder.code "CASE WHEN " ++ has_nan ++ " THEN 'NaN' ELSE " ++ percentile ++ " END"

## PRIVATE
   These are written in a not most-efficient way, but a way that makes them
   compatible with other group-by aggregations out-of-the-box. In the future, we
   may want to consider some alternative solutions.
first_last_aggregators =
    first = make_first_aggregator reverse=False ignore_null=False
    first_not_null = make_first_aggregator reverse=False ignore_null=True
    last = make_first_aggregator reverse=True ignore_null=False
    last_not_null = make_first_aggregator reverse=True ignore_null=True
    [["FIRST", first], ["FIRST_NOT_NULL", first_not_null], ["LAST", last], ["LAST_NOT_NULL", last_not_null]]

## PRIVATE
make_first_aggregator reverse ignore_null args =
    if args.length < 2 then Error.throw (Illegal_State.Error "Insufficient number of arguments for the operation.") else
        result_expr = args.first
        order_bys = args.drop 1

        filter_clause = if ignore_null.not then "" else
            Builder.code " FILTER (WHERE " ++ result_expr.paren ++ " IS NOT NULL)"
        order_clause =
            Builder.code " ORDER BY " ++ Builder.join "," order_bys
        index_expr = case reverse of
            True -> if ignore_null.not then "COUNT(*)" else
                Builder.code "COUNT(" ++ result_expr ++ ")"
            False -> "1"

        Builder.code "(array_agg(" ++ result_expr.paren ++ order_clause ++ ")" ++ filter_clause ++ ")[" ++ index_expr ++ "]"

## PRIVATE
agg_shortest = Base_Generator.lift_unary_op "SHORTEST" arg->
     order_clause =
         Builder.code " ORDER BY char_length(" ++ arg ++ ") ASC NULLS LAST"
     Builder.code "(array_agg(" ++ arg.paren ++ order_clause ++ "))[1]"

## PRIVATE
agg_longest = Base_Generator.lift_unary_op "LONGEST" arg->
     order_clause =
         Builder.code " ORDER BY char_length(" ++ arg ++ ") DESC NULLS LAST"
     Builder.code "(array_agg(" ++ arg.paren ++ order_clause ++ "))[1]"

## PRIVATE
concat_ops =
    make_raw_concat_expr expr separator =
        Builder.code "string_agg(" ++ expr ++ ", " ++ separator ++ ")"
    concat = Base_Generator.make_concat make_raw_concat_expr make_contains_expr
    [["CONCAT", concat (has_quote=False)], ["CONCAT_QUOTE_IF_NEEDED", concat (has_quote=True)]]


## PRIVATE
agg_count_distinct args = if args.is_empty then (Error.throw (Illegal_Argument.Error "COUNT_DISTINCT requires at least one argument.")) else
    case args.length == 1 of
        True ->
            ## A single null value will be skipped.
            Builder.code "COUNT(DISTINCT " ++ args.first ++ ")"
        False ->
            ## A tuple of nulls is not a null, so it will not be skipped - but
               we want to ignore all-null columns. So we manually filter them
               out.
            count = Builder.code "COUNT(DISTINCT (" ++ Builder.join ", " args ++ "))"
            are_nulls = args.map arg-> arg.paren ++ " IS NULL"
            all_nulls_filter = Builder.code " FILTER (WHERE NOT (" ++ Builder.join " AND " are_nulls ++ "))"
            (count ++ all_nulls_filter).paren

## PRIVATE
agg_count_distinct_include_null args =
    ## If we always count as tuples, then even null fields are counted.
    Builder.code "COUNT(DISTINCT (" ++ Builder.join ", " args ++ ", 0))"

## PRIVATE
starts_with = Base_Generator.lift_binary_op "starts_with" str-> sub->
    res = Builder.code "starts_with(" ++ str ++ "," ++ sub ++ ")"
    res.paren

## PRIVATE
ends_with = Base_Generator.lift_binary_op "ends_with" str-> sub->
    res = str ++ " LIKE CONCAT('%', " ++ sub ++ ")"
    res.paren

## PRIVATE
make_case_sensitive = Base_Generator.lift_unary_op "MAKE_CASE_SENSITIVE" arg->
    Builder.code "((" ++ arg ++ ') COLLATE "ucs_basic")'

## PRIVATE
make_contains_expr expr substring =
    Builder.code "position(" ++ substring ++ " in " ++ expr ++ ") > 0"

## PRIVATE
contains = Base_Generator.lift_binary_op "contains" make_contains_expr

## PRIVATE
make_order_descriptor internal_column sort_direction text_ordering =
    nulls = case sort_direction of
        Sort_Direction.Ascending -> Nulls_Order.First
        Sort_Direction.Descending -> Nulls_Order.Last
    case text_ordering of
        Nothing ->
            Order_Descriptor.Value internal_column.expression sort_direction nulls_order=nulls collation=Nothing
        _ ->
            ## In the future we can modify this error to suggest using a custom defined collation.
            if text_ordering.sort_digits_as_numbers then Error.throw (Unsupported_Database_Operation.Error "Natural ordering is currently not supported. You may need to materialize the Table to perform this operation.") else
                case text_ordering.case_sensitivity of
                    Case_Sensitivity.Default ->
                        Order_Descriptor.Value internal_column.expression sort_direction nulls_order=nulls collation=Nothing
                    Case_Sensitivity.Sensitive ->
                        Order_Descriptor.Value internal_column.expression sort_direction nulls_order=nulls collation="ucs_basic"
                    Case_Sensitivity.Insensitive locale -> case locale == Locale.default of
                        False ->
                            Error.throw (Unsupported_Database_Operation.Error "Case insensitive ordering with custom locale is currently not supported. You may need to materialize the Table to perform this operation.")
                        True ->
                            upper = SQL_Expression.Operation "UPPER" [internal_column.expression]
                            folded_expression = SQL_Expression.Operation "LOWER" [upper]
                            Order_Descriptor.Value folded_expression sort_direction nulls_order=nulls collation=Nothing

## PRIVATE
is_nan = Base_Generator.lift_unary_op "IS_NAN" arg->
    (arg ++ " = double precision 'NaN'").paren

## PRIVATE
bool_or = Base_Generator.lift_unary_op "BOOL_OR" arg->
    Builder.code "bool_or(" ++ arg ++ ")"

## PRIVATE
decimal_div = Base_Generator.lift_binary_op "/" x-> y->
    Builder.code "CAST(" ++ x ++ " AS double precision) / CAST(" ++ y ++ " AS double precision)"

## PRIVATE
mod_op = Base_Generator.lift_binary_op "mod" x-> y->
    x ++ " - FLOOR(CAST(" ++ x ++ " AS double precision) / CAST(" ++ y ++ " AS double precision)) * " ++ y

## PRIVATE
postgres_statement_setter : Statement_Setter
postgres_statement_setter =
    default = Statement_Setter.default
    fill_hole stmt i value = case value of
        # TODO [RW] Postgres date handling #6115
        _ : Date_Time ->
            stmt.setTimestamp i (JDBCUtils.getTimestamp value)
        # _ : Date ->
        # _ : Time_Of_Day ->
        _ -> default.fill_hole stmt i value
    Statement_Setter.Value fill_hole
