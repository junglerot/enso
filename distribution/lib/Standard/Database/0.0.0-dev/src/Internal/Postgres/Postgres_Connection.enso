from Standard.Base import all
import Standard.Base.Errors.Illegal_State.Illegal_State

from Standard.Base.Metadata.Widget import Single_Choice
from Standard.Base.Metadata.Choice import Option
import Standard.Base.Metadata.Display

import Standard.Table.Data.Table.Table as Materialized_Table
import Standard.Table.Data.Type.Value_Type.Value_Type

import project.Connection.Connection.Connection
import project.Data.Column_Description.Column_Description
import project.Data.Dialect
import project.Data.SQL_Query.SQL_Query
import project.Data.SQL_Statement.SQL_Statement
import project.Data.SQL_Type.SQL_Type
import project.Data.Table.Table as Database_Table
import project.Internal.IR.Query.Query
import project.Internal.JDBC_Connection
import project.Internal.SQL_Type_Reference.SQL_Type_Reference

from project.Connection.Connection import make_table_types_selector, make_schema_selector, make_table_name_selector, make_structure_creator
from project.Errors import SQL_Error, Table_Not_Found, Table_Already_Exists
from project.Internal.Result_Set import read_column
from project.Internal.Upload_Table import first_column_name_in_structure

type Postgres_Connection

    ## PRIVATE

       A Postgres database connection.

       Arguments:
       - connection: the underlying connection.
       - make_new: a function that returns a new connection.
    Value connection make_new

    ## Closes the connection releasing the underlying database resources
       immediately instead of waiting for them to be automatically released.

       The connection is not usable afterwards.
    close : Nothing
    close self = self.connection.close

    ## Returns the list of databases (or catalogs) for the connection.
    databases : [Text]
    databases self =
        self.connection.jdbc_connection.with_connection connection->
            result_set = connection.createStatement.executeQuery "select datname from pg_database where datname not in ('template0', 'template1')"
            read_column result_set "datname"

    ## Returns the name of the current database (or catalog).
    database : Text
    database self = self.connection.database

    ## Returns a new Connection with the specified database set as default.

       Arguments:
        - database: The name of the database to connect to.
    @database (self-> Single_Choice display=Display.Always values=(self.databases . map d-> Option d d.pretty))
    set_database : Text -> Connection ! SQL_Error
    set_database self database =
        if database == self.database then self else
            self.make_new database Nothing

    ## Returns the list of schemas for the connection within the current database (or catalog).
    schemas : Vector Text
    schemas self = self.connection.schemas

    ## Returns the name of the current schema.
    schema : Text
    schema self = self.connection.schema

    ## Returns a new Connection with the specified schema set as default.

       Arguments:
        - schema: The name of the schema to connect to.
    @schema make_schema_selector
    set_schema : Text -> Connection ! SQL_Error
    set_schema self schema =
        if schema == self.schema then self else
            self.make_new Nothing schema

    ## Gets a list of the table types.
    table_types : Vector Text
    table_types self = self.connection.table_types

    ## Returns a materialized Table of all the matching views and tables.

       ? Temporary Tables

         Note that the temporary tables may be created in a different schema
         than the current one, so take this into account when filtering by schema.

       Arguments:
       - name_like: The table name pattern to search for. Supports SQL wildcards (`%`, `_`). Defaults to `Nothing` which
         means all tables are selected.
       - database: The database name to search in (default is current database).
       - schema: The schema name to search in (defaults to `Nothing`, meaning all
         schemas are searched).
       - types: The table types to search for. The list of possible values can
         be obtained using the `table_types` method. Defaults to a set of most
         commonly used table types, ignoring internal system tables or indices.
       - all_fields: Return all the fields in the metadata table.
    @types make_table_types_selector
    @schema make_schema_selector
    tables : Text -> Text -> Text -> Vector -> Boolean -> Materialized_Table
    tables self name_like=Nothing database=self.database schema=Nothing types=self.dialect.default_table_types all_fields=False =
        self.connection.tables name_like database schema types all_fields

    ## Set up a query returning a Table object, which can be used to work with
       data within the database or load it into memory.

       Arguments:
       - query: name of the table or sql statement to query.
         If supplied as `Text`, the name is checked against the `tables` list to
         determine if it is a table or a query.
       - alias: optionally specify a friendly alias for the query.

       ! Error Conditions

         - If provided with a `Raw_SQL` query or `Text` that looks like a query, if
           any SQL error occurs when executing the query, a `SQL_Error` error is
           raised.
         - If provided with a `Table_Name` or a text short-hand and the table is
           not found, a `Table_Not_Found` error is raised.
    @query make_table_name_selector
    query : Text | SQL_Query -> Text -> Database_Table ! Table_Not_Found
    query self query alias="" = self.connection.query query alias

    ## Execute the query and load the results into memory as a Table.

       Arguments:
       - query: name of the table or sql statement to query.
         If supplied as `Text`, the name is checked against the `tables` list to determine if it is a table or a query.
       - limit: the maximum number of rows to return.

       ? Side Effects

         Note that the `read` method is running without restrictions when the
         output context is disabled, but it can technically cause side effects,
         if it is provided with a DML query. Usually it is preferred to use
         `execute_update` for DML queries, or if they are supposed to return
         results, the `read` should be wrapped in an execution context check.
    @query make_table_name_selector
    read : Text | SQL_Query -> Integer | Nothing -> Materialized_Table ! Table_Not_Found
    read self query limit=Nothing = self.connection.read query limit

    ## Creates a new empty table in the database and returns a query referencing
       the new table.

       Arguments:
       - table_name: the name of the table to create.
       - structure: the structure of the table, provided as either an existing
         `Table` (no data will be copied) or a `Vector` of `Column_Description`.
       - primary_key: the names of the columns to use as the primary key. The
         first column from the table is used by default. If it is set to
         `Nothing` or an empty vector, no primary key will be created.
       - temporary: if set to `True`, the table will be temporary, meaning that
         it will be dropped once the `connection` is closed. Defaults to
         `False`.
       - allow_existing: Defaults to `False`, meaning that if the table with the
         provided name already exists, an error will be raised. If set to `True`,
         the existing table will be returned instead. Note that the existing
         table is not guaranteed to have the same structure as the one provided.
       - on_problems: the behavior to use when encountering non-fatal problems.
         Defaults to reporting them as warning.

       ! Error Conditions

         - If a table with the given name already exists, then a
           `Table_Already_Exists` error is raised.
         - If a column type is not supported and is coerced to a similar
           supported type, an `Inexact_Type_Coercion` problem is reported
           according to the `on_problems` setting.
         - If a column type is not supported and there is no replacement (e.g.
           native Enso types), an `Unsupported_Type` error is raised.
         - If the provided primary key columns are not present in table
           structure provided, `Missing_Input_Columns` error is raised.
         - An `SQL_Error` may be reported if there is a failure on the database
           side.

       ? Dry Run if Output disabled

         If performing output actions is disabled, only a dry run is performed
         and no permanent changes occur. The operation will test for errors
         (like missing columns) and if successful, return a temporary table with
         a `Dry_Run_Operation` warning attached.
    @structure make_structure_creator
    create_table : Text  -> Vector Column_Description | Database_Table | Materialized_Table -> Vector Text | Nothing -> Boolean -> Boolean -> Problem_Behavior -> Database_Table ! Table_Already_Exists
    create_table self (table_name : Text) (structure : Vector Column_Description | Database_Table | Materialized_Table) (primary_key : (Vector Text | Nothing) = [first_column_name_in_structure structure]) (temporary : Boolean = False) (allow_existing : Boolean = False) (on_problems:Problem_Behavior = Problem_Behavior.Report_Warning) =
        self.connection.create_table table_name structure primary_key temporary allow_existing on_problems

    ## ADVANCED

       Executes a raw update query. If the query was inserting, updating or
       deleting rows, the number of affected rows is returned; otherwise it
       returns 0 for other types of queries (like creating or altering tables).

       Arguments:
       - query: either raw SQL code as Text or an instance of SQL_Statement
         representing the query to execute.
    execute_update : Text | SQL_Statement -> Integer
    execute_update self query =
        self.connection.execute_update query

    ## PRIVATE
       Access the dialect.
    dialect self = self.connection.dialect

    ## PRIVATE
       Access the underlying JDBC connection.
    jdbc_connection self = self.connection.jdbc_connection

    ## PRIVATE
       Drops a table.

       Arguments:
       - table_name: the name of the table to drop.
       - if_exists: if set to `True`, the operation will not fail if the table
         does not exist. Defaults to `False`.
    drop_table : Text -> Boolean -> Nothing
    drop_table self table_name if_exists=False =
        self.connection.drop_table table_name if_exists

    ## PRIVATE
       Returns the base `Connection` instance.

       Used, so that all internal helper functions do not need to be replicated
       on the 'subclasses'.
    base_connection : Connection
    base_connection self = self.connection

## PRIVATE

   Creates a Postgres connection based on a URL, properties and a dialect.

   Arguments:
   - url: The URL to connect to.
   - properties: A vector of properties for the connection.
   - make_new: a function that returns a new connection.
create : Text -> Vector -> (Text -> Text -> Postgres_Connection) -> Postgres_Connection
create url properties make_new =
    jdbc_connection = JDBC_Connection.create url properties
    Postgres_Connection.Value (Connection.new jdbc_connection Dialect.postgres) make_new
