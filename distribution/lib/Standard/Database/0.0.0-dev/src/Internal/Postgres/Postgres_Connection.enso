from Standard.Base import all
import Standard.Base.Error.Illegal_State.Illegal_State

from Standard.Base.Metadata.Widget import Single_Choice
from Standard.Base.Metadata.Choice import Option
import Standard.Base.Metadata.Display

import Standard.Table.Data.Table.Table as Materialized_Table

import project.Connection.Connection.Connection
import project.Data.Dialect
import project.Data.SQL_Query.SQL_Query
import project.Data.SQL_Statement.SQL_Statement
import project.Data.SQL_Type.SQL_Type
import project.Data.Table.Table as Database_Table
import project.Internal.JDBC_Connection

from project.Internal.Result_Set import read_column

from project.Errors import SQL_Error

type Postgres_Connection

    ## PRIVATE

       A Postgres database connection.

       Arguments:
       - connection: the underlying connection.
       - make_new: a function that returns a new connection.
    Value connection make_new

    ## Closes the connection releasing the underlying database resources
       immediately instead of waiting for them to be automatically released.

       The connection is not usable afterwards.
    close : Nothing
    close self = self.connection.close

    ## Returns the list of databases (or catalogs) for the connection.
    databases : [Text]
    databases self =
        self.connection.jdbc_connection.with_connection connection->
            result_set = connection.createStatement.executeQuery "select datname from pg_database where datname not in ('template0', 'template1')"
            read_column result_set "datname"

    ## Returns the name of the current database (or catalog).
    database : Text
    database self = self.connection.database

    ## Returns a new Connection with the specified database set as default.

       Arguments:
        - database: The name of the database to connect to.
    @database (self-> Single_Choice display=Display.Always values=(self.databases . map d-> Option d d.pretty))
    set_database : Text -> Connection ! SQL_Error
    set_database self database =
        if database == self.database then self else
            self.make_new database Nothing

    ## Returns the list of schemas for the connection within the current database (or catalog).
    schemas : Vector Text
    schemas self = self.connection.schemas

    ## Returns the name of the current schema.
    schema : Text
    schema self = self.connection.schema

    ## Returns a new Connection with the specified schema set as default.

       Arguments:
        - schema: The name of the schema to connect to.
    @schema (self-> Single_Choice display=Display.Always values=(self.schemas . map s-> Option s s.pretty))
    set_schema : Text -> Connection ! SQL_Error
    set_schema self schema =
        if schema == self.schema then self else
            self.make_new Nothing schema

    ## Gets a list of the table types.
    table_types : Vector Text
    table_types self = self.connection.table_types

    ## Returns a materialised Table of all the matching views and tables.

       Arguments:
       - name_like: The table name pattern to search for. Support SQL wildcards (`%`, `_`).
       - database: The database name to search in (default is current database).
       - schema: The schema name to search in (defaults to current schema).
       - types: The table types to search for. The list of values can be obtained using the `table_types` method.
       - all_fields: Return all the fields in the metadata table.
    @types (self-> Single_Choice values=(self.table_types.map t-> Option t t.pretty))
    tables : Text -> Text -> Text -> Vector -> Boolean -> Materialized_Table
    tables self name_like=Nothing database=self.database schema=self.schema types=Nothing all_fields=False =
        self.connection.tables name_like database schema types all_fields

    ## Set up a query returning a Table object, which can be used to work with data within the database or load it into memory.

       Arguments:
       - query: name of the table or sql statement to query.
         If supplied as `Text`, the name is checked against the `tables` list to determine if it is a table or a query.
       - alias: optionally specify a friendly alias for the query.
    @query (self-> Single_Choice display=Display.Always values=(self.tables.at "Name" . to_vector . map t-> Option t t.pretty))
    query : Text | SQL_Query -> Text -> Database_Table
    query self query alias="" = self.connection.query query alias

    ## Execute the query and load the results into memory as a Table.

       Arguments:
       - query: name of the table or sql statement to query.
         If supplied as `Text`, the name is checked against the `tables` list to determine if it is a table or a query.
       - limit: the maximum number of rows to return.
    @query (self-> Single_Choice display=Display.Always values=(self.tables.at "Name" . to_vector . map t-> Option t t.pretty))
    read : Text | SQL_Query -> Integer | Nothing -> Materialized_Table
    read self query limit=Nothing = self.connection.read query limit

    ## PRIVATE
       Internal read function for a statement with optional types.

       Arguments:
       - statement: SQL_Statement to execute.
       - expected_types: Optional vector of expected types for each column.
    read_statement : SQL_Statement -> (Nothing | Vector SQL_Type) -> Materialized_Table
    read_statement self statement expected_types=Nothing =
        self.connection.read_statement statement expected_types

    ## PRIVATE
       Internal read function for a statement with optional types returning just last row.

       Arguments:
       - statement: SQL_Statement to execute.
       - expected_types: Optional vector of expected types for each column.
    read_last_row : SQL_Statement -> (Nothing | Vector SQL_Type) -> Materialized_Table
    read_last_row self statement expected_types=Nothing =
        self.connection.read_last_row statement expected_types

    ## ADVANCED

       Executes a raw update query. If the query was inserting, updating or
       deleting rows, the number of affected rows is returned; otherwise it
       returns 0 for other types of queries (like creating or altering tables).

       Arguments:
       - query: either raw SQL code as Text or an instance of SQL_Statement
         representing the query to execute.
    execute_update : Text | SQL_Statement -> Integer
    execute_update self query =
        self.connection.execute_update query

    ## PRIVATE
       UNSTABLE
       This is a prototype function used in our test suites. It may change.

       It creates a new table in the database with the given name (will fail if
       the table already existed), inserts the contents of the provided
       in-memory table and returns a handle to the newly created table.

       Arguments:
       - name: The name of the table to create.
       - table: An In-Memory table specifying the contents to upload. Schema of
         the created database table is based on the column types of this table.
       - temporary: Specifies whether the table should be marked as temporary. A
         temporary table will be dropped after the connection closes and will
         usually not be visible to other connections.
       - batch_size: Specifies how many rows should be uploaded in a single
         batch.
    upload_table : Text -> Materialized_Table -> Boolean -> Integer -> Database_Table
    upload_table self name table temporary=True batch_size=1000 = Panic.recover Illegal_State.Error <|
        self.connection.upload_table name table temporary batch_size

## PRIVATE

   Creates a Postgres connection based on a URL, properties and a dialect.

   Arguments:
   - url: The URL to connect to.
   - properties: A vector of properties for the connection.
       - make_new: a function that returns a new connection.
create : Text -> Vector -> (Text -> Text -> Postgres_Connection) -> Postgres_Connection
create url properties make_new =
    jdbc_connection = JDBC_Connection.create url properties
    Postgres_Connection.Value (Connection.Value jdbc_connection Dialect.postgres) make_new
