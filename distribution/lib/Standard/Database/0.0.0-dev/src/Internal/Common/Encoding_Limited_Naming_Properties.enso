from Standard.Base import all
import Standard.Base.Errors.Encoding_Error.Encoding_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State

from Standard.Table.Errors import Name_Too_Long

## PRIVATE
   A `Naming_Properties` implementation which sets the size limit based on the
   size of a string encoded in a particular encoding, in bytes.
type Encoding_Limited_Naming_Properties
    ## PRIVATE
    Instance (encoding : Encoding) (limit : Integer)

    ## PRIVATE
    encoded_size : Text -> Integer
    encoded_size self name =
        r = name.bytes encoding=self.encoding on_problems=Problem_Behavior.Report_Error . length
        r.catch Encoding_Error error->
            Panic.throw (Illegal_Argument.Error "The name ["+name.to_display_text+"] contains characters that could not be encoded in the database server-size encoding "+self.encoding.to_display_text+"." cause=error)

    ## PRIVATE
    truncate : Text -> Integer -> Text
    truncate self name size =
        ## I assume that `self.encoded_size` is a homomorphism
           from text with concatenation to integers with addition.
           I.e. for every a and b, `self.encoded_size (a + b) == self.encoded_size a + self.encoded_size b`.
        clusters = name.characters
        if clusters.is_empty then name else
            cluster_sizes = clusters.map self.encoded_size
            # We see how many clusters we can fit until we exceed the size.
            last_cluster_that_still_fits = cluster_sizes.running_fold 0 (+) . last_index_of (<= size)
            case last_cluster_that_still_fits of
                # In the very rare edge case where even the first grapheme cluster cannot fit, we have to just return an empty string.
                Nothing -> ""
                _ ->
                    truncated = name.take (last_cluster_that_still_fits + 1)
                    # Verify the assumption from above.
                    truncated_length = self.encoded_size truncated
                    if truncated_length > size then
                        Panic.throw (Illegal_State.Error "Unexpected: The encoding size behaves unexpectedly. This is a bug in the Database library.")
                    truncated

    ## PRIVATE
    size_limit : Integer | Nothing
    size_limit self = self.limit

    ## PRIVATE
    raise_name_too_long_error : Text -> Text -> Nothing ! Name_Too_Long
    raise_name_too_long_error self entity_kind name =
        grapheme_length = name.length
        encoded_length = self.encoded_size name
        extra_message = case grapheme_length == encoded_length of
            ## If we are using only simple characters that map 1-1 to the target
               encoding (e.g. ASCII), then we can ignore the complexity of
               different encodings in the message.
            True ->
                " The length limit is "+self.size_limit.to_text+", but the name was "+encoded_length.to_text+" characters long."
            ## But if the length mapping is not exact, we need to be clear to
               the user.
            False ->
                " The length limit is "+self.size_limit.to_text+" bytes, but the name, consisting of "+grapheme_length.to_text+" characters, took "+encoded_length.to_text+" bytes to encode in the database encoding ("+self.encoding.to_display_text+")."
        Error.throw (Name_Too_Long.Error entity_kind name extra_message)
