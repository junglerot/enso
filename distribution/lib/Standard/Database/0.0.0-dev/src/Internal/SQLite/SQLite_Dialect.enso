from Standard.Base import all hiding First, Last

from Standard.Table.Data.Aggregate_Column import all
import Standard.Database.Data.SQL
from Standard.Database.Data.SQL import SQL_Type, Statement, code
import Standard.Database.Data.Dialect
import Standard.Database.Internal.Base_Generator
import Standard.Database.Internal.IR
from Standard.Database.Errors import Unsupported_Database_Operation_Error_Data

## PRIVATE

   The dialect of SQLite databases.
sqlite : Dialect
sqlite =
    SQLite_Dialect_Data make_internal_generator_dialect

# TODO Dubious constructor export
from project.Internal.SQLite.SQLite_Dialect.SQLite_Dialect import all
from project.Internal.SQLite.SQLite_Dialect.SQLite_Dialect export all

## PRIVATE

   The dialect of SQLite databases.
type SQLite_Dialect
    ## PRIVATE

       The dialect of SQLite databases.
    SQLite_Dialect_Data internal_generator_dialect

    ## PRIVATE
       Name of the dialect.
    name : Text
    name self = "SQLite"

    ## PRIVATE
       A function which generates SQL code from the internal representation
       according to the specific dialect.
    generate_sql : Query -> Statement
    generate_sql self query =
        Base_Generator.generate_query self.internal_generator_dialect query . build

    ## PRIVATE
       Deduces the result type for an aggregation operation.

       The provided aggregate is assumed to contain only already resolved columns.
       You may need to transform it with `resolve_aggregate` first.
    resolve_target_sql_type : Aggregate_Column -> SQL_Type
    resolve_target_sql_type self aggregate = resolve_target_sql_type aggregate

    ## PRIVATE
       Prepares an ordering descriptor.

       One of the purposes of this method is to verify if the expected ordering
       settings are supported by the given database backend.
    prepare_order_descriptor : IR.Internal_Column -> Sort_Direction -> Text_Ordering -> IR.Order_Descriptor
    prepare_order_descriptor self internal_column sort_direction text_ordering = case internal_column.sql_type.is_likely_text of
        True ->
            if text_ordering.sort_digits_as_numbers then Error.throw (Unsupported_Database_Operation_Error_Data "Natural ordering is not supported by the SQLite backend. You may need to materialize the Table to perform this operation.") else
                case text_ordering.case_sensitivity of
                    Nothing ->
                        IR.Order_Descriptor_Data internal_column.expression sort_direction collation=Nothing
                    Case_Sensitivity.Sensitive ->
                        IR.Order_Descriptor_Data internal_column.expression sort_direction collation="BINARY"
                    Case_Sensitivity.Insensitive locale -> case locale == Locale.default of
                        False ->
                            Error.throw (Unsupported_Database_Operation_Error_Data "Case insensitive ordering with custom locale is not supported by the SQLite backend. You may need to materialize the Table to perform this operation.")
                        True ->
                            IR.Order_Descriptor_Data internal_column.expression sort_direction collation="NOCASE"
        False ->
            IR.Order_Descriptor_Data internal_column.expression sort_direction collation=Nothing

## PRIVATE
make_internal_generator_dialect =
    text = [starts_with, contains, ends_with]+concat_ops
    counts = [agg_count_is_null, agg_count_empty, agg_count_not_empty, ["COUNT_DISTINCT", agg_count_distinct], ["COUNT_DISTINCT_INCLUDE_NULL", agg_count_distinct_include_null]]
    stats = [agg_stddev_pop, agg_stddev_samp]
    my_mappings = text + counts + stats
    Base_Generator.base_dialect . extend_with my_mappings

## PRIVATE
   The provided aggregate is assumed to contain only already resolved columns.
   You may need to transform it with `resolve_aggregate` first.
resolve_target_sql_type aggregate = case aggregate of
    Group_By c _ -> c.sql_type
    Count _ -> SQL_Type.integer
    Count_Distinct columns _ _ ->
        if columns.length == 1 then SQL_Type.integer else
            unsupported "Count_Distinct on multiple columns"
    Count_Not_Nothing _ _ -> SQL_Type.integer
    Count_Nothing _ _ -> SQL_Type.integer
    Count_Not_Empty _ _ -> SQL_Type.integer
    Count_Empty _ _ -> SQL_Type.integer
    Percentile _ _ _ -> unsupported "Percentile"
    Mode _ _ -> unsupported "Mode"
    First _ _ _ _ -> unsupported "First"
    Last _ _ _ _ -> unsupported "Last"
    Maximum c _ -> c.sql_type
    Minimum c _ -> c.sql_type
    Shortest _ _ -> unsupported "Shortest"
    Longest _ _ -> unsupported "Longest"
    Standard_Deviation _ _ _ -> SQL_Type.real
    Concatenate _ _ _ _ _ _ -> SQL_Type.text
    Sum c _ -> c.sql_type
    Average _ _ -> SQL_Type.real
    Median _ _ -> unsupported "Median"

## PRIVATE
unsupported name =
    Error.throw (Unsupported_Database_Operation_Error_Data name+" is not supported by SQLite backend. You may need to materialize the table and perform the operation in-memory.")

## PRIVATE
agg_count_is_null = Base_Generator.lift_unary_op "COUNT_IS_NULL" arg->
    code "COALESCE(SUM(" ++ arg.paren ++ " IS NULL), 0)"

## PRIVATE
agg_count_empty = Base_Generator.lift_unary_op "COUNT_EMPTY" arg->
    code "COALESCE(SUM((" ++ arg.paren ++ " IS NULL) OR (" ++ arg.paren ++ " == '')), 0)"

## PRIVATE
agg_count_not_empty = Base_Generator.lift_unary_op "COUNT_NOT_EMPTY" arg->
    code "COALESCE(SUM((" ++ arg.paren ++ " IS NOT NULL) AND (" ++ arg.paren ++ " != '')), 0)"

## PRIVATE
agg_stddev_pop = Base_Generator.lift_unary_op "STDDEV_POP" arg->
    sum_of_squares = code "SUM(" ++ arg.paren ++ "*" ++ arg.paren ++ ")"
    square_of_sums = code "SUM(" ++ arg ++ ") * SUM(" ++ arg ++ ")"
    n = code "CAST(COUNT(" ++ arg ++ ") AS REAL)"
    var = code "(" ++ sum_of_squares ++ " - (" ++ square_of_sums ++ " / " ++ n ++ ")) / " ++ n
    code "SQRT(" ++ var ++ ")"

## PRIVATE
agg_stddev_samp = Base_Generator.lift_unary_op "STDDEV_SAMP" arg->
    sum_of_squares = code "SUM(" ++ arg.paren ++ "*" ++ arg.paren ++ ")"
    square_of_sums = code "SUM(" ++ arg ++ ") * SUM(" ++ arg ++ ")"
    n = code "CAST(COUNT(" ++ arg ++ ") AS REAL)"
    var = code "(" ++ sum_of_squares ++ " - (" ++ square_of_sums ++ " / " ++ n ++ ")) / (" ++ n ++ " - 1)"
    code "SQRT(" ++ var ++ ")"

## PRIVATE
   This is a prototype that doesn't work correctly. Left for reference for
   future implementation.
first_last_aggregators =
    first_value = "first_value"
    first = window_aggregate first_value ignore_null=False
    first_not_null = window_aggregate first_value ignore_null=True
    last_value = "last_value"
    last = window_aggregate last_value ignore_null=False
    last_not_null = window_aggregate last_value ignore_null=True
    [["FIRST", first], ["FIRST_NOT_NULL", first_not_null], ["LAST", last], ["LAST_NOT_NULL", last_not_null]]

## PRIVATE
window_aggregate window_type ignore_null args =
    if args.length < 2 then Error.throw (Illegal_State_Error_Data "Insufficient number of arguments for the operation.") else
        result_expr = args.head
        order_exprs = args.tail

        filter_clause = if ignore_null.not then code "" else
            code " FILTER (WHERE " ++ result_expr.paren ++ " IS NOT NULL)"

        code window_type+"(" ++ result_expr ++ ")" ++ filter_clause ++ " OVER (ORDER BY " ++ SQL.join "," order_exprs ++ ")"

## PRIVATE
concat_ops =
    make_raw_concat_expr expr separator =
        code "group_concat(" ++ expr ++ ", " ++ separator ++ ")"
    concat = Base_Generator.make_concat make_raw_concat_expr make_contains_expr
    [["CONCAT", concat (has_quote=False)], ["CONCAT_QUOTE_IF_NEEDED", concat (has_quote=True)]]


## PRIVATE
agg_count_distinct args = case args.length == 1 of
    True -> code "COUNT(DISTINCT (" ++ args.first ++ "))"
    False -> Error.throw (Illegal_Argument_Error_Data "COUNT_DISTINCT supports only single arguments in SQLite.")

## PRIVATE
agg_count_distinct_include_null args = case args.length == 1 of
    True ->
        arg = args.first
        count = code "COUNT(DISTINCT " ++ arg ++ ")"
        all_nulls_case = code "CASE WHEN COUNT(CASE WHEN " ++ arg ++ "IS NULL THEN 1 END) > 0 THEN 1 ELSE 0 END"
        count ++ " + " ++ all_nulls_case
    False -> Error.throw (Illegal_Argument_Error_Data "COUNT_DISTINCT supports only single arguments in SQLite.")

## PRIVATE
starts_with = Base_Generator.lift_binary_op "starts_with" str-> sub->
    res = str ++ " LIKE (" ++ sub ++ " || '%')"
    res.paren

## PRIVATE
ends_with = Base_Generator.lift_binary_op "ends_with" str-> sub->
    res = str ++ " LIKE ('%' || " ++ sub ++ ")"
    res.paren

## PRIVATE
make_contains_expr expr substring =
    code "instr(" ++ expr ++ ", " ++ substring ++ ") > 0"

## PRIVATE
contains = Base_Generator.lift_binary_op "contains" make_contains_expr
