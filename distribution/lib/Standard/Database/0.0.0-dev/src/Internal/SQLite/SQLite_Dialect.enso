from Standard.Base import all hiding First, Last
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State
import Standard.Base.Runtime.Ref.Ref

import Standard.Table.Internal.Problem_Builder.Problem_Builder
from Standard.Table import Aggregate_Column, Value_Type
from Standard.Table.Data.Aggregate_Column.Aggregate_Column import all

import project.Connection.Connection.Connection
import project.Data.Column.Column
import project.Data.Dialect
import project.Data.SQL.Builder
import project.Data.SQL_Statement.SQL_Statement
import project.Data.SQL_Type.SQL_Type
import project.Data.Table.Table
import project.Internal.Base_Generator
import project.Internal.Column_Fetcher as Column_Fetcher_Module
import project.Internal.Column_Fetcher.Column_Fetcher
import project.Internal.Common.Database_Distinct_Helper
import project.Internal.Common.Database_Join_Helper
import project.Internal.Error_Mapper.Error_Mapper
import project.Internal.IR.Context.Context
import project.Internal.IR.From_Spec.From_Spec
import project.Internal.IR.Internal_Column.Internal_Column
import project.Internal.IR.Order_Descriptor.Order_Descriptor
import project.Internal.IR.Query.Query
import project.Internal.IR.SQL_Expression.SQL_Expression
import project.Internal.IR.SQL_Join_Kind.SQL_Join_Kind
import project.Internal.Replace_Params.Replace_Params
import project.Internal.SQL_Type_Mapping.SQL_Type_Mapping
import project.Internal.SQL_Type_Reference.SQL_Type_Reference
import project.Internal.SQLite.SQLite_Error_Mapper.SQLite_Error_Mapper
import project.Internal.SQLite.SQLite_Type_Mapping.SQLite_Type_Mapping
import project.Internal.Statement_Setter.Statement_Setter
from project.Errors import SQL_Error, Unsupported_Database_Operation

## PRIVATE

   The dialect of SQLite databases.
sqlite : SQLite_Dialect
sqlite =
    SQLite_Dialect.Value make_internal_generator_dialect

## PRIVATE

   The dialect of SQLite databases.
type SQLite_Dialect
    ## PRIVATE

       The dialect of SQLite databases.
    Value internal_generator_dialect

    ## PRIVATE
       Name of the dialect.
    name : Text
    name self = "SQLite"

    ## PRIVATE
    to_text self = "SQLite_Dialect"

    ## PRIVATE
       A function which generates SQL code from the internal representation
       according to the specific dialect.
    generate_sql : Query -> SQL_Statement
    generate_sql self query =
        Base_Generator.generate_query self.internal_generator_dialect query . build

    ## PRIVATE
       Wraps and possibly escapes the identifier so that it can be used in a
       generated query regardless of what characters it contains.
       The quotes used will depend on the dialect.
    wrap_identifier : Text -> Text
    wrap_identifier self identifier =
        self.internal_generator_dialect.wrap_identifier_raw identifier

    ## PRIVATE
       Prepares an ordering descriptor.

       One of the purposes of this method is to verify if the expected ordering
       settings are supported by the given database backend.

       Arguments:
       - internal_column: the column to order by.
       - sort_direction: the direction of the ordering.
       - text_ordering: If provided, specifies that the column should be treated
         as text values according to the provided ordering. For non-text types,
         it should be set to `Nothing`.
    prepare_order_descriptor : Internal_Column -> Sort_Direction -> Nothing | Text_Ordering -> Order_Descriptor
    prepare_order_descriptor self internal_column sort_direction text_ordering = case text_ordering of
        Nothing ->
            Order_Descriptor.Value internal_column.expression sort_direction collation=Nothing
        _ ->
            if text_ordering.sort_digits_as_numbers then Error.throw (Unsupported_Database_Operation.Error "Natural ordering is not supported by the SQLite backend. You may need to materialize the Table to perform this operation.") else
                case text_ordering.case_sensitivity of
                    Case_Sensitivity.Default ->
                        Order_Descriptor.Value internal_column.expression sort_direction collation=Nothing
                    Case_Sensitivity.Sensitive ->
                        Order_Descriptor.Value internal_column.expression sort_direction collation="BINARY"
                    Case_Sensitivity.Insensitive locale -> case locale == Locale.default of
                        False ->
                            Error.throw (Unsupported_Database_Operation.Error "Case insensitive ordering with custom locale is not supported by the SQLite backend. You may need to materialize the Table to perform this operation.")
                        True ->
                            Order_Descriptor.Value internal_column.expression sort_direction collation="NOCASE"

    ## PRIVATE
       Prepares a distinct operation.
    prepare_distinct : Table -> Vector -> Case_Sensitivity -> Problem_Builder -> Table
    prepare_distinct self table key_columns case_sensitivity problem_builder =
        table_name_deduplicator = table.connection.base_connection.table_naming_helper.create_unique_name_strategy
        table_name_deduplicator.mark_used table.name
        inner_table_alias = table_name_deduplicator.make_unique table.name+"_inner"
        setup = table.context.as_subquery inner_table_alias [table.internal_columns]
        new_columns = setup.new_columns.first
        column_mapping = Map.from_vector <| new_columns.map c-> [c.name, c]
        new_key_columns = key_columns.map c-> column_mapping.at c.name
        type_mapping = self.get_type_mapping
        distinct_expressions = new_key_columns.map column->
            value_type = type_mapping.sql_type_to_value_type column.sql_type_reference.get
            Database_Distinct_Helper.make_distinct_expression case_sensitivity problem_builder column value_type
        new_context = Context.for_subquery setup.subquery . set_groups distinct_expressions
        table.updated_context_and_columns new_context new_columns subquery=True

    ## PRIVATE
       A heuristic used by `Connection.query` to determine if a given text looks
       like a SQL query for the given dialect or is rather a table name.
    is_probably_a_query : Text -> Boolean
    is_probably_a_query self text =
        (text.contains "SELECT ") || (text.contains "EXEC ")

    ## PRIVATE
       Returns the mapping between SQL types of this dialect and Enso
       `Value_Type`.
    get_type_mapping : SQL_Type_Mapping
    get_type_mapping self = SQLite_Type_Mapping

    ## PRIVATE
       Creates a `Column_Fetcher` used to fetch data from a result set and build
       an in-memory column from it, based on the given column type.
    make_column_fetcher_for_type : SQL_Type -> Column_Fetcher
    make_column_fetcher_for_type self sql_type =
        type_mapping = self.get_type_mapping
        value_type = type_mapping.sql_type_to_value_type sql_type
        Column_Fetcher_Module.default_fetcher_for_value_type value_type

    ## PRIVATE
    get_statement_setter : Statement_Setter
    get_statement_setter self = Statement_Setter.default

    ## PRIVATE
    make_cast : Internal_Column -> SQL_Type -> (SQL_Expression -> SQL_Type_Reference) -> Internal_Column
    make_cast self column target_type infer_result_type_from_database_callback =
        _ = [infer_result_type_from_database_callback]
        mapping = self.get_type_mapping
        target_value_type = mapping.sql_type_to_value_type target_type
        custom_cast = make_custom_cast column target_value_type mapping
        new_expression = custom_cast.if_nothing <|
            self.make_cast_expression column target_type
        new_sql_type_reference = SQL_Type_Reference.from_constant target_type
        Internal_Column.Value column.name new_sql_type_reference new_expression

    ## PRIVATE
    make_cast_expression self column target_type =
        mapping = self.get_type_mapping
        sql_type_text = mapping.sql_type_to_text target_type
        SQL_Expression.Operation "CAST" [column.expression, SQL_Expression.Literal sql_type_text]

    ## PRIVATE
    needs_execute_query_for_type_inference : Boolean
    needs_execute_query_for_type_inference self = True

    ## PRIVATE
    supports_separate_nan : Boolean
    supports_separate_nan self = False

    ## PRIVATE
    supports_negative_round_decimal_places : Boolean
    supports_negative_round_decimal_places self = False

    ## PRIVATE
    rounding_decimal_places_not_allowed_for_floats : Boolean
    rounding_decimal_places_not_allowed_for_floats self = False

    ## PRIVATE
       SQLite allows mixed type columns, but we want our columns to be uniform.
       So after unifying columns with mixed types, we add a cast to ensure that.
    adapt_unified_column : Internal_Column -> Value_Type -> (SQL_Expression -> SQL_Type_Reference) -> Internal_Column
    adapt_unified_column self column approximate_result_type infer_result_type_from_database_callback =
        _ = infer_result_type_from_database_callback
        # TODO [RW] This may be revisited with #6281.
        case approximate_result_type of
            Nothing -> column
            _ ->
                sql_type = self.get_type_mapping.value_type_to_sql approximate_result_type Problem_Behavior.Ignore
                new_expression = self.make_cast_expression column sql_type
                new_sql_type_reference = SQL_Type_Reference.from_constant sql_type
                Internal_Column.Value column.name new_sql_type_reference new_expression

    ## PRIVATE
    prepare_fetch_types_query : SQL_Expression -> Context -> SQL_Statement
    prepare_fetch_types_query self expression context =
        _ = [expression, context]
        Panic.throw (Illegal_State.Error "Type inference by asking the Database for the expected types is not supported in SQLite since it tended to give wrong results. This should have never been called - if it was - that is a bug in the Database library.")

    ## PRIVATE
    check_aggregate_support : Aggregate_Column -> Boolean ! Unsupported_Database_Operation
    check_aggregate_support self aggregate = case aggregate of
        Group_By _ _ -> True
        Count _ -> True
        Count_Distinct columns _ _ ->
            if columns.length == 1 then True else
                unsupported "Count_Distinct on multiple columns"
        Count_Not_Nothing _ _ -> True
        Count_Nothing _ _ -> True
        Count_Not_Empty _ _ -> True
        Count_Empty _ _ -> True
        Percentile _ _ _ -> unsupported "Percentile"
        Mode _ _ -> unsupported "Mode"
        First _ _ _ _ -> unsupported "First"
        Last _ _ _ _ -> unsupported "Last"
        Maximum _ _ -> True
        Minimum _ _ -> True
        Shortest _ _ -> unsupported "Shortest"
        Longest _ _ -> unsupported "Longest"
        Standard_Deviation _ _ _ -> True
        Concatenate _ _ _ _ _ _ -> True
        Sum _ _ -> True
        Average _ _ -> True
        Median _ _ -> unsupported "Median"

    ## PRIVATE
       Checks if an operation is supported by the dialect.
    is_supported : Text -> Boolean
    is_supported self operation =
        self.internal_generator_dialect.is_supported operation

    ## PRIVATE
       The default table types to use when listing tables.
    default_table_types : Vector Text
    default_table_types self =
        ["TABLE", "VIEW", "GLOBAL TEMPORARY"]

    ## PRIVATE
    get_error_mapper : Error_Mapper
    get_error_mapper self = SQLite_Error_Mapper

    ## PRIVATE
       The dialect-dependent strategy to get the Primary Key for a given table.

       Returns `Nothing` if the key is not defined.

       Custom handling is required, because the default DatabaseMetaData
       implementation does not correctly handle temporary tables.
    fetch_primary_key : Connection -> Text -> Vector Text ! Nothing
    fetch_primary_key self connection table_name =
        wrapped_name = self.internal_generator_dialect.wrap_identifier table_name
        query = Builder.code "pragma table_info(" ++ wrapped_name ++ ")"
        info_table = connection.read_statement query.build
        ## The `pk` field is non-zero if the columns is part of the primary key.
           The column value indicates the position in the key.
           See: https://www.sqlite.org/pragma.html#pragma_table_info
        v = info_table.filter "pk" (>0) . order_by "pk" . at "name" . to_vector
        if v.is_empty then Nothing else v

    ## PRIVATE
       Prepares metadata for an operation taking a date/time period and checks
       if the given period is supported.
    prepare_metadata_for_period : Date_Period | Time_Period -> Value_Type -> Any
    prepare_metadata_for_period self period operation_input_type =
        _ = [period, operation_input_type]
        Error.throw (Unsupported_Database_Operation.Error "SQLite backend does not support date/time operations.")

    ## PRIVATE
       Returns true if the `replace` parameters are suppoerted by this backend.
    if_replace_params_supports : Replace_Params -> Any -> Any
    if_replace_params_supports self replace_params ~action =
        if supported_replace_params.contains replace_params then action else replace_params.throw_unsupported "SQLite"

    ## PRIVATE
    value_type_for_upload_of_existing_column : Column -> Value_Type
    value_type_for_upload_of_existing_column self column = column.value_type

## PRIVATE
make_internal_generator_dialect =
    text = [starts_with, contains, ends_with, make_case_sensitive, ["REPLACE", replace]]+concat_ops+trim_ops
    counts = [agg_count_is_null, agg_count_empty, agg_count_not_empty, ["COUNT_DISTINCT", agg_count_distinct], ["COUNT_DISTINCT_INCLUDE_NULL", agg_count_distinct_include_null]]
    stats = [agg_stddev_pop, agg_stddev_samp]
    arith_extensions = [is_inf, floating_point_div, mod_op]

    bool = [bool_or]
    my_mappings = text + counts + stats + arith_extensions + bool
    Base_Generator.base_dialect . extend_with my_mappings

## PRIVATE
unsupported name =
    Error.throw (Unsupported_Database_Operation.Error name+" is not supported by SQLite backend. You may need to materialize the table and perform the operation in-memory.")

## PRIVATE
agg_count_is_null = Base_Generator.lift_unary_op "COUNT_IS_NULL" arg->
    Builder.code "COALESCE(SUM(" ++ arg.paren ++ " IS NULL), 0)"

## PRIVATE
agg_count_empty = Base_Generator.lift_unary_op "COUNT_EMPTY" arg->
    Builder.code "COALESCE(SUM((" ++ arg.paren ++ " IS NULL) OR (" ++ arg.paren ++ " == '')), 0)"

## PRIVATE
agg_count_not_empty = Base_Generator.lift_unary_op "COUNT_NOT_EMPTY" arg->
    Builder.code "COALESCE(SUM((" ++ arg.paren ++ " IS NOT NULL) AND (" ++ arg.paren ++ " != '')), 0)"

## PRIVATE
agg_stddev_pop = Base_Generator.lift_unary_op "STDDEV_POP" arg->
    sum_of_squares = Builder.code "SUM(" ++ arg.paren ++ "*" ++ arg.paren ++ ")"
    square_of_sums = Builder.code "SUM(" ++ arg ++ ") * SUM(" ++ arg ++ ")"
    n = Builder.code "CAST(COUNT(" ++ arg ++ ") AS REAL)"
    var = Builder.code "(" ++ sum_of_squares ++ " - (" ++ square_of_sums ++ " / " ++ n ++ ")) / " ++ n
    Builder.code "SQRT(" ++ var ++ ")"

## PRIVATE
agg_stddev_samp = Base_Generator.lift_unary_op "STDDEV_SAMP" arg->
    sum_of_squares = Builder.code "SUM(" ++ arg.paren ++ "*" ++ arg.paren ++ ")"
    square_of_sums = Builder.code "SUM(" ++ arg ++ ") * SUM(" ++ arg ++ ")"
    n = Builder.code "CAST(COUNT(" ++ arg ++ ") AS REAL)"
    var = Builder.code "(" ++ sum_of_squares ++ " - (" ++ square_of_sums ++ " / " ++ n ++ ")) / (" ++ n ++ " - 1)"
    Builder.code "SQRT(" ++ var ++ ")"

## PRIVATE
   This is a prototype that doesn't work correctly. Left for reference for
   future implementation.
first_last_aggregators =
    first_value = "first_value"
    first = window_aggregate first_value ignore_null=False
    first_not_null = window_aggregate first_value ignore_null=True
    last_value = "last_value"
    last = window_aggregate last_value ignore_null=False
    last_not_null = window_aggregate last_value ignore_null=True
    [["FIRST", first], ["FIRST_NOT_NULL", first_not_null], ["LAST", last], ["LAST_NOT_NULL", last_not_null]]

## PRIVATE
window_aggregate window_type ignore_null args =
    if args.length < 2 then Error.throw (Illegal_State.Error "Insufficient number of arguments for the operation.") else
        result_expr = args.first
        order_exprs = args.drop 1

        filter_clause = if ignore_null.not then Builder.code "" else
            Builder.code " FILTER (WHERE " ++ result_expr.paren ++ " IS NOT NULL)"

        Builder.code window_type+"(" ++ result_expr ++ ")" ++ filter_clause ++ " OVER (ORDER BY " ++ Builder.join "," order_exprs ++ ")"

## PRIVATE
concat_ops =
    make_raw_concat_expr expr separator =
        Builder.code "group_concat(" ++ expr ++ ", " ++ separator ++ ")"
    concat = Base_Generator.make_concat make_raw_concat_expr make_contains_expr
    [["CONCAT", concat (has_quote=False)], ["CONCAT_QUOTE_IF_NEEDED", concat (has_quote=True)]]

## PRIVATE
trim_ops =
    whitespace = "' ' || CHAR(9) || CHAR(10) || CHAR(13)"
    make_fn fn_name = Base_Generator.lift_binary_op fn_name input-> chars-> case chars of
            Nothing -> Builder.code fn_name+"(" ++ input ++ ", " ++ whitespace ++ ")"
            _ ->
                case chars.is_constant of
                    True ->
                        const = chars.fragments.vec.first.object
                        if const.is_nothing || const.is_empty then Builder.code fn_name+"(" ++ input ++ ", " ++ whitespace ++ ")" else
                            Builder.code fn_name+"(" ++ input ++ ", " ++ chars ++ ")"
                    False ->
                        Builder.code "CASE WHEN " ++ chars ++ " IS NULL OR " ++ chars ++ " == '' THEN " ++ fn_name ++ "(" ++ input ++ ") ELSE " ++ fn_name ++ "(" ++ input ++ ", " ++ chars ++ ") END"
    [make_fn "TRIM", make_fn "LTRIM", make_fn "RTRIM"]


## PRIVATE
is_inf = Base_Generator.lift_unary_op "IS_INF" arg->
    (arg ++ " in (9e999, -9e999)").paren

## PRIVATE
agg_count_distinct args = case args.length == 1 of
    True -> Builder.code "COUNT(DISTINCT (" ++ args.first ++ "))"
    False -> Error.throw (Illegal_Argument.Error "COUNT_DISTINCT supports only single arguments in SQLite.")

## PRIVATE
agg_count_distinct_include_null args = case args.length == 1 of
    True ->
        arg = args.first
        count = Builder.code "COUNT(DISTINCT " ++ arg ++ ")"
        all_nulls_case = Builder.code "CASE WHEN COUNT(CASE WHEN " ++ arg ++ "IS NULL THEN 1 END) > 0 THEN 1 ELSE 0 END"
        count ++ " + " ++ all_nulls_case
    False -> Error.throw (Illegal_Argument.Error "COUNT_DISTINCT supports only single arguments in SQLite.")

## PRIVATE
starts_with = Base_Generator.lift_binary_op "starts_with" str-> sub->
    res = str ++ " GLOB (" ++ sub ++ " || '*')"
    res.paren

## PRIVATE
ends_with = Base_Generator.lift_binary_op "ends_with" str-> sub->
    res = str ++ " GLOB ('*' || " ++ sub ++ ")"
    res.paren

## PRIVATE
make_case_sensitive = Base_Generator.lift_unary_op "MAKE_CASE_SENSITIVE" arg->
    Builder.code "((" ++ arg ++ ") COLLATE BINARY)"

## PRIVATE
make_contains_expr expr substring =
    Builder.code "instr(" ++ expr ++ ", " ++ substring ++ ") > 0"

## PRIVATE
contains = Base_Generator.lift_binary_op "contains" make_contains_expr

## PRIVATE
bool_or = Base_Generator.lift_unary_op "BOOL_OR" arg->
    Builder.code "max(" ++ arg ++ ")"

## PRIVATE
floating_point_div = Base_Generator.lift_binary_op "/" x-> y->
    Builder.code "CAST(" ++ x ++ " AS REAL) / CAST(" ++ y ++ " AS REAL)"

## PRIVATE
mod_op = Base_Generator.lift_binary_op "mod" x-> y->
    x ++ " - FLOOR(CAST(" ++ x ++ " AS REAL) / CAST(" ++ y ++ " AS REAL)) * " ++ y

## PRIVATE
supported_replace_params : Set Replace_Params
supported_replace_params =
    e = [Replace_Params.Value Text Case_Sensitivity.Default False, Replace_Params.Value Text Case_Sensitivity.Sensitive False, Replace_Params.Value Text Case_Sensitivity.Default True, Replace_Params.Value Text Case_Sensitivity.Sensitive True, Replace_Params.Value Text Case_Sensitivity.Insensitive True]
    Set.from_vector e

## PRIVATE
replace : Vector Builder -> Any -> Builder
replace args metadata =
    input = args.at 0
    pattern = args.at 1
    replacement = args.at 2

    replace_params = metadata.at 1

    expression = case replace_params.input_type == Text || replace_params.input_type == Column of
        True ->
            ## To use REGEXP_REPLACE on a non-regex, we have to escape it.
            case replace_params.only_first of
                False -> case replace_params.case_sensitivity of
                    Case_Sensitivity.Insensitive _ -> Nothing
                    _ ->
                        Builder.code "REPLACE(" ++ input ++ ", " ++ pattern ++ ", " ++ replacement ++ ")"
                True -> case replace_params.case_sensitivity of
                    Case_Sensitivity.Insensitive _ ->
                        replace_only_first False input pattern replacement
                    _ ->
                        replace_only_first True input pattern replacement
        False -> Nothing
    case expression of
        Nothing -> replace_params.throw_unsupported "SQLite"
        _ -> expression

## PRIVATE
replace_only_first case_sensitive t p r =
    search_string = if case_sensitive then t else
        Builder.code "LOWER(" ++ t ++ ")"
    instr = Builder.code "INSTR(" ++ search_string ++ ", " ++ p ++ ")"
    prefix = Builder.code "SUBSTR(" ++ t ++ ", 1," ++ instr ++ "-1)"
    suffix = Builder.code "SUBSTR(" ++ t ++ "," ++ instr ++ "+LENGTH(" ++ p ++ "))"
    concatenation = prefix ++ " || " ++ r ++ " || " ++ suffix
    Builder.code "CASE WHEN " ++ instr ++ "= 0 THEN " ++ t ++ " ELSE " ++ concatenation ++ "END"

## PRIVATE
   It will return `Nothing` if the type does not require custom logic.
make_custom_cast column target_value_type type_mapping =
    result = Ref.new Nothing
    column_type =
        type_mapping.sql_type_to_value_type column.sql_type_reference.get
    if target_value_type.is_text && (column_type == Value_Type.Boolean) then
        expr = SQL_Expression.Operation "IIF" [column.expression, SQL_Expression.Literal "'true'", SQL_Expression.Literal "'false'"]
        result.put expr

    if (target_value_type == Value_Type.Boolean) && column_type.is_text then
        lower = SQL_Expression.Operation "FOLD_CASE" [column.expression]
        is_true = SQL_Expression.Operation "==" [lower, SQL_Expression.Literal "'true'"]
        is_false = SQL_Expression.Operation "==" [lower, SQL_Expression.Literal "'false'"]
        expr = SQL_Expression.Operation "CASE" [is_true, SQL_Expression.Literal "TRUE", is_false, SQL_Expression.Literal "FALSE", SQL_Expression.Literal "NULL"]
        result.put expr

    result.get
