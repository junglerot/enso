from Standard.Base import all
import Standard.Base.Errors.Illegal_State.Illegal_State

from Standard.Base.Metadata.Widget import Single_Choice
from Standard.Base.Metadata.Choice import Option
import Standard.Base.Metadata.Display

import Standard.Table.Data.Table.Table as Materialized_Table

import project.Connection.Connection.Connection
import project.Data.SQL_Query.SQL_Query
import project.Data.SQL_Statement.SQL_Statement
import project.Data.SQL_Type.SQL_Type
import project.Data.Dialect
import project.Data.Table.Table as Database_Table
import project.Internal.IR.Query.Query
import project.Internal.JDBC_Connection
import project.Internal.SQL_Type_Reference.SQL_Type_Reference

from project.Connection.Connection import make_table_types_selector, make_schema_selector, make_table_name_selector
from project.Errors import SQL_Error

type SQLite_Connection
    ## PRIVATE

       A SQLite database connection.

       Arguments:
       - connection: the underlying connection.
    Value connection

    ## Closes the connection releasing the underlying database resources
       immediately instead of waiting for them to be automatically released.

       The connection is not usable afterwards.
    close : Nothing
    close self = self.connection.close

    ## Returns the list of databases (or catalogs) for the connection.
    databases : Vector Text
    databases self = [Nothing]

    ## Returns the name of the current database (or catalog).
    database : Text
    database self = self.connection.database

    ## Returns a new Connection with the specified database set as default.

       Arguments:
        - database: The name of the database to connect to.
    @database (Single_Choice display=Display.Always values=[Option 'Nothing'])
    set_database : Text -> Connection ! SQL_Error
    set_database self database =
        if database == self.database then self else
            SQL_Error.throw_sql_error "Changing database is not supported."

    ## Returns the list of schemas for the connection within the current database (or catalog).
    schemas : Vector Text
    schemas self = [Nothing]

    ## Returns the name of the current schema.
    schema : Text
    schema self = self.connection.schema

    ## Returns a new Connection with the specified schema set as default.

       Arguments:
        - schema: The name of the schema to connect to.
    @schema (Single_Choice display=Display.Always values=[Option 'Nothing'])
    set_schema : Text -> Connection ! SQL_Error
    set_schema self schema =
        if schema == self.schema then self else
            SQL_Error.throw_sql_error "Changing schema is not supported."

    ## Gets a list of the table types
    table_types : Vector Text
    table_types self = self.connection.table_types

    ## Returns a materialized Table of all the matching views and tables.

       ? Temporary Tables

         Note that the temporary tables may be created in a different schema
         than the current one, so take this into account when filtering by schema.

       Arguments:
       - name_like: The table name pattern to search for. Supports SQL wildcards (`%`, `_`). Defaults to `Nothing` which
         means all tables are selected.
       - database: The database name to search in (default is current database).
       - schema: The schema name to search in (defaults to `Nothing`, meaning all
         schemas are searched).
       - types: The table types to search for. The list of possible values can
         be obtained using the `table_types` method. Defaults to a set of most
         commonly used table types, ignoring internal system tables or indices.
       - all_fields: Return all the fields in the metadata table.
    @types make_table_types_selector
    @schema make_schema_selector
    tables : Text -> Text -> Text -> Vector -> Boolean -> Materialized_Table
    tables self name_like=Nothing database=self.database schema=Nothing types=self.dialect.default_table_types all_fields=False =
        self.connection.tables name_like database schema types all_fields

    ## Set up a query returning a Table object, which can be used to work with data within the database or load it into memory.

       Arguments:
       - query: name of the table or sql statement to query.
         If supplied as `Text`, the name is checked against the `tables` list to determine if it is a table or a query.
       - alias: optionally specify a friendly alias for the query.
    @query make_table_name_selector
    query : Text | SQL_Query -> Text -> Database_Table
    query self query alias="" = self.connection.query query alias

    ## Execute the query and load the results into memory as a Table.

       Arguments:
       - query: name of the table or sql statement to query.
         If supplied as `Text`, the name is checked against the `tables` list to determine if it is a table or a query.
       - limit: the maximum number of rows to return.
    @query make_table_name_selector
    read : Text | SQL_Query -> Integer | Nothing -> Materialized_Table
    read self query limit=Nothing = self.connection.read query limit

    ## ADVANCED

       Executes a raw update query. If the query was inserting, updating or
       deleting rows, the number of affected rows is returned; otherwise it
       returns 0 for other types of queries (like creating or altering tables).

       Arguments:
       - query: either raw SQL code as Text or an instance of SQL_Statement
         representing the query to execute.
    execute_update : Text | SQL_Statement -> Integer
    execute_update self query =
        self.connection.execute_update query

    ## PRIVATE
       Access the dialect.
    dialect self = self.connection.dialect

    ## PRIVATE
       Access the underlying JDBC connection.
    jdbc_connection self = self.connection.jdbc_connection

    ## PRIVATE
    drop_table : Text -> Nothing
    drop_table self table_name =
        self.connection.drop_table table_name

## PRIVATE

   Creates a SQLite connection based on a JDBC URL and properties.

   Arguments:
   - url: The URL to connect to.
   - properties: A vector of properties for the connection.
create : Text -> Vector -> SQLite_Connection
create url properties =
    jdbc_connection = JDBC_Connection.create url properties
    SQLite_Connection.Value (Connection.Value jdbc_connection Dialect.sqlite)
