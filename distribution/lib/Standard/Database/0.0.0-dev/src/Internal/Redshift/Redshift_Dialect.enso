from Standard.Base import all

import Standard.Table.Internal.Naming_Helpers.Naming_Helpers
from Standard.Table import Aggregate_Column

import project.Connection.Connection.Connection
import project.Data.Dialect
import project.Data.SQL_Statement.SQL_Statement
import project.Data.SQL_Type.SQL_Type
import project.Data.Table.Table
import project.Internal.Base_Generator
import project.Internal.Column_Fetcher.Column_Fetcher
import project.Internal.Column_Fetcher as Column_Fetcher_Module
import project.Internal.IR.Context.Context
import project.Internal.IR.From_Spec.From_Spec
import project.Internal.IR.Internal_Column.Internal_Column
import project.Internal.IR.SQL_Expression.SQL_Expression
import project.Internal.IR.SQL_Join_Kind.SQL_Join_Kind
import project.Internal.IR.Order_Descriptor.Order_Descriptor
import project.Internal.IR.Query.Query
import project.Internal.Postgres.Postgres_Dialect
import project.Internal.Common.Database_Join_Helper
import project.Internal.Postgres.Postgres_Type_Mapping.Postgres_Type_Mapping
import project.Internal.SQL_Type_Mapping.SQL_Type_Mapping
import project.Internal.SQL_Type_Reference.SQL_Type_Reference
import project.Internal.Statement_Setter.Statement_Setter
from project.Errors import Unsupported_Database_Operation

## PRIVATE

   The dialect for Redshift connections.
redshift : Redshift_Dialect
redshift =
    Redshift_Dialect.Value Postgres_Dialect.make_internal_generator_dialect

## PRIVATE

   The dialect for Redshift connections.
type Redshift_Dialect
    ## PRIVATE

       The dialect for Redshift connections.
    Value internal_generator_dialect

    ## PRIVATE
       Name of the dialect.
    name : Text
    name self = "redshift"

    ## PRIVATE
    to_text self = "Redshift_Dialect"

    ## PRIVATE
       A function which generates SQL code from the internal representation
       according to the specific dialect.
    generate_sql : Query -> SQL_Statement
    generate_sql self query =
        Base_Generator.generate_query self.internal_generator_dialect query . build

    ## PRIVATE
       Prepares an ordering descriptor.

       One of the purposes of this method is to verify if the expected ordering
       settings are supported by the given database backend.

       Arguments:
       - internal_column: the column to order by.
       - sort_direction: the direction of the ordering.
       - text_ordering: If provided, specifies that the column should be treated
         as text values according to the provided ordering. For non-text types,
         it should be set to `Nothing`.
    prepare_order_descriptor : Internal_Column -> Sort_Direction -> Nothing | Text_Ordering -> Order_Descriptor
    prepare_order_descriptor self internal_column sort_direction text_ordering =
        Postgres_Dialect.make_order_descriptor internal_column sort_direction text_ordering

    ## PRIVATE
       Prepares a join operation, returning a new table instance encapsulating a
       proper query.
    prepare_join : Connection -> SQL_Join_Kind -> Text -> From_Spec -> From_Spec -> Vector -> Vector -> Vector -> Table
    prepare_join self connection join_kind new_table_name left_subquery right_subquery on_expressions where_expressions columns_to_select =
        Database_Join_Helper.default_prepare_join connection join_kind new_table_name left_subquery right_subquery on_expressions where_expressions columns_to_select

    ## PRIVATE
       A heuristic used by `Connection.query` to determine if a given text looks
       like a SQL query for the given dialect or is rather a table name.
    is_probably_a_query : Text -> Boolean
    is_probably_a_query self text =
        (text.contains "SELECT ") || (text.contains "EXEC ")

    ## PRIVATE
       Returns an utility that allows ensuring column names are valid for the
       given backend.
    get_naming_helpers : Naming_Helpers
    get_naming_helpers self = Naming_Helpers

    ## PRIVATE
       Returns the mapping between SQL types of this dialect and Enso
       `Value_Type`.
    get_type_mapping : SQL_Type_Mapping
    get_type_mapping self = Postgres_Type_Mapping

    ## PRIVATE
       Creates a `Column_Fetcher` used to fetch data from a result set and build
       an in-memory column from it, based on the given column type.
    make_column_fetcher_for_type : SQL_Type -> Column_Fetcher
    make_column_fetcher_for_type self sql_type =
        type_mapping = self.get_type_mapping
        value_type = type_mapping.sql_type_to_value_type sql_type
        Column_Fetcher_Module.default_fetcher_for_value_type value_type

    ## PRIVATE
    get_statement_setter : Statement_Setter
    get_statement_setter self = Postgres_Dialect.postgres_statement_setter

    ## PRIVATE
    make_cast : Internal_Column -> SQL_Type -> (SQL_Expression -> SQL_Type_Reference) -> Internal_Column
    make_cast self column target_type infer_result_type_from_database_callback =
        mapping = self.get_type_mapping
        sql_type_text = mapping.sql_type_to_text target_type
        new_expression = SQL_Expression.Operation "CAST" [column.expression, SQL_Expression.Literal sql_type_text]
        new_sql_type_reference = infer_result_type_from_database_callback new_expression
        Internal_Column.Value column.name new_sql_type_reference new_expression

    ## PRIVATE
    needs_execute_query_for_type_inference : Boolean
    needs_execute_query_for_type_inference self = False

    ## PRIVATE
    cast_after_union : Boolean
    cast_after_union self = False

    ## PRIVATE
    prepare_fetch_types_query : SQL_Expression -> Context -> SQL_Statement
    prepare_fetch_types_query self expression context =
        Dialect.default_fetch_types_query self expression context

    ## PRIVATE
    check_aggregate_support : Aggregate_Column -> Boolean ! Unsupported_Database_Operation
    check_aggregate_support self aggregate =
        _ = aggregate
        True
