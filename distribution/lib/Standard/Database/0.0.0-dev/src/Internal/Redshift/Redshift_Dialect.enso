from Standard.Base import all

from Standard.Table import Aggregate_Column

import project.Data.SQL_Statement.SQL_Statement
import project.Data.SQL_Type.SQL_Type
import project.Internal.Base_Generator
import project.Internal.IR.Internal_Column.Internal_Column
import project.Internal.IR.Order_Descriptor.Order_Descriptor
import project.Internal.Postgres.Postgres_Dialect


## PRIVATE

   The dialect for Redshift connections.
redshift : Redshift_Dialect
redshift =
    Redshift_Dialect.Value Postgres_Dialect.make_internal_generator_dialect

## PRIVATE

   The dialect for Redshift connections.
type Redshift_Dialect
    ## PRIVATE

       The dialect for Redshift connections.
    Value internal_generator_dialect

    ## PRIVATE
       Name of the dialect.
    name : Text
    name self = "redshift"

    ## PRIVATE
       A function which generates SQL code from the internal representation
       according to the specific dialect.
    generate_sql : Query -> SQL_Statement
    generate_sql self query =
        Base_Generator.generate_query self.internal_generator_dialect query . build

    ## PRIVATE
       Deduces the result type for an aggregation operation.

       The provided aggregate is assumed to contain only already resolved columns.
       You may need to transform it with `resolve_aggregate` first.
    resolve_target_sql_type : Aggregate_Column -> SQL_Type
    resolve_target_sql_type self aggregate =
        Postgres_Dialect.resolve_target_sql_type aggregate

    ## PRIVATE
       Prepares an ordering descriptor.

       One of the purposes of this method is to verify if the expected ordering
       settings are supported by the given database backend.
    prepare_order_descriptor : Internal_Column -> Sort_Direction -> Text_Ordering -> Order_Descriptor
    prepare_order_descriptor self internal_column sort_direction text_ordering =
        Postgres_Dialect.make_order_descriptor internal_column sort_direction text_ordering
