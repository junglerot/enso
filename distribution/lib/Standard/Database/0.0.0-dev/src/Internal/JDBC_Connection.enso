from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State
import Standard.Base.Errors.Unimplemented.Unimplemented
import Standard.Base.Runtime.Context
import Standard.Base.Runtime.Managed_Resource.Managed_Resource

import Standard.Table.Data.Table.Table as Materialized_Table
import Standard.Table.Data.Type.Value_Type.Value_Type

import project.Data.SQL_Statement.SQL_Statement
import project.Data.SQL_Type.SQL_Type
import project.Data.Table.Table as Database_Table
import project.Internal.Column_Fetcher as Column_Fetcher_Module
import project.Internal.In_Transaction.In_Transaction
import project.Internal.SQL_Warning_Helper
import project.Internal.Statement_Setter.Statement_Setter
from project.Errors import SQL_Error, SQL_Timeout
from project.Internal.Result_Set import result_set_to_table

polyglot java import java.sql.Connection
polyglot java import java.sql.DatabaseMetaData
polyglot java import java.sql.PreparedStatement
polyglot java import java.sql.SQLException
polyglot java import java.sql.SQLTimeoutException
polyglot java import org.enso.base.enso_cloud.EnsoKeyValuePair
polyglot java import org.enso.database.dryrun.OperationSynchronizer
polyglot java import org.enso.database.JDBCProxy

type JDBC_Connection
    ## PRIVATE
       Arguments:
       - connection_resource: a `Managed_Resource` containing the Java
         Connection instance.
       - operation_synchronizer: a helper for synchronizing access to the underlying Connection.
    Value connection_resource operation_synchronizer

    ## PRIVATE
       Runs the provided action ensuring that no other thread is working with
       this Connection concurrently.
    synchronized self ~action =
        # We save and restore context information. This is a workaround for bug #7117.
        restore_context context =
            saved_setting = context.is_enabled
            ~action ->
                case saved_setting of
                    True -> context.with_enabled action
                    False -> context.with_disabled action
        restore_output = restore_context Context.Output
        restore_input = restore_context Context.Input
        callback _ =
            restore_input <|
                restore_output <|
                    action
        self.operation_synchronizer.runSynchronizedAction callback

    ## PRIVATE
       Closes the connection releasing the underlying database resources
       immediately instead of waiting for them to be automatically released.

       The connection is not usable afterwards.
    close : Nothing
    close self = self.synchronized <|
        self.connection_resource . finalize

    ## PRIVATE

       Open the connection to the database, then run the action wrapping any
       SQL errors.
    with_connection : (Connection -> Any) -> Any
    with_connection self action = self.synchronized <|
        self.connection_resource.with action

    ## PRIVATE
       Runs the provided callback only if no thread is currently inside a
       `synchronized` critical section (including the current thread).
    run_maintenance_action_if_possible : (Nothing -> Any) -> Nothing
    run_maintenance_action_if_possible self callback =
        self.operation_synchronizer.runMaintenanceActionIfPossible callback

    ## PRIVATE

       Open the connection to the database, then run the action passing the
       database's metadata wrapping any SQL errors.
    with_metadata : (DatabaseMetaData -> Any) -> Any
    with_metadata self ~action = handle_sql_errors <| self.with_connection connection->
        metadata = connection.getMetaData
        action metadata

    ## PRIVATE

       Runs the provided action with a prepared statement, adding contextual
       information to any thrown SQL errors.

       Arguments:
       - query: The query to prepare. It may be either a raw SQL statement or a
         `SQL_Statement`.
       - statement_setter: A strategy for filling holes in the prepared
         statement.
       - action: The action to run with the prepared statement.
       - skip_log: If `True`, the query will not be logged even with logging
         enabled. This is used to avoid logging a query that is not really run
         (e.g. `ensure_query_has_no_holes` which prepares a statement but does
         not execute it).
    with_prepared_statement : Text  | SQL_Statement -> Statement_Setter -> (PreparedStatement -> Any) -> Boolean -> Any
    with_prepared_statement self query statement_setter action skip_log=False = self.synchronized <|
        prepare template values = self.with_connection java_connection->
            stmt = java_connection.prepareStatement template
            handle_illegal_state caught_panic =
                Error.throw (Illegal_Argument.Error caught_panic.payload.message)
            handle_any caught_panic =
                stmt.close
                Panic.throw caught_panic
            result = Panic.catch Illegal_State handler=handle_illegal_state <|
                Panic.catch Any handler=handle_any <|
                    set_statement_values stmt statement_setter values
            result.if_not_error <|
                stmt

        go template values =
            handle_sql_errors related_query=template <|
                if skip_log.not then log_sql_if_enabled self template
                Managed_Resource.bracket (prepare template values) .close action

        case query of
            _ : Text -> go query []
            SQL_Statement.Value _ ->
                compiled = query.prepare
                go compiled.first compiled.second

    ## PRIVATE
       Given a prepared statement, gets the column names and types for the
       result set.
    raw_fetch_columns : Text | SQL_Statement -> Boolean -> Statement_Setter -> Any
    raw_fetch_columns self statement execute_query statement_setter =
        self.with_prepared_statement statement statement_setter stmt->
            metadata = case execute_query of
                True ->
                    rs = stmt.executeQuery
                    SQL_Warning_Helper.process_warnings rs <|
                        rs.getMetaData
                False ->
                    stmt.getMetaData

            resolve_column ix =
                name = metadata.getColumnLabel ix+1
                sql_type = SQL_Type.from_metadata metadata ix+1
                [name, sql_type]

            columns = Vector.new metadata.getColumnCount resolve_column
            SQL_Warning_Helper.process_warnings stmt <|
                columns

    ## PRIVATE
       Reads a raw SQL statement, using a very simple dialect-agnostic type
       mapping.

       It may be used for accessing simple database metadata. It should never be
       used for proper queries.
    raw_read_statement : Text -> Materialized_Table
    raw_read_statement self raw_sql =
        self.with_prepared_statement raw_sql Statement_Setter.null stmt->
            log_sql_if_enabled self stmt.toString
            rs = stmt.executeQuery
            make_fallback_fetcher _ =
                Column_Fetcher_Module.fallback_fetcher
            table = result_set_to_table rs make_fallback_fetcher
            SQL_Warning_Helper.process_warnings stmt <|
                table

    ## PRIVATE
       Checks that the query has no holes, and if it does, throws an error.
    ensure_query_has_no_holes : Text -> Nothing ! Illegal_Argument
    ensure_query_has_no_holes self raw_sql =
        self.with_prepared_statement raw_sql Statement_Setter.null skip_log=True stmt->
            ## We cannot run this check on every query, because in some
              backends (e.g. Postgres) running `getParameterMetaData`
              seems to trigger logic for figuring out types of the holes.
              In some of our generated queries, the driver is unable to
              figure out the types and fails with an exception.
            expected_parameter_count = stmt.getParameterMetaData.getParameterCount
            if expected_parameter_count != 0 then
                Error.throw <| Illegal_Argument.Error 'The provided raw SQL query should not contain any holes ("?").'

    ## PRIVATE
       Runs the following action with auto-commit turned off on this connection
       and returns the result.

       Afterwards, the auto-commit setting is reverted to the state before
       running this function (so if it was off before, this method may not
       change anything).
    run_without_autocommit : Any -> Any
    run_without_autocommit self ~action = handle_sql_errors <|
        # The whole block is already `synchronized` by `with_connection`.
        self.with_connection java_connection->
            default_autocommit = java_connection.getAutoCommit
            Managed_Resource.bracket (java_connection.setAutoCommit False) (_ -> java_connection.setAutoCommit default_autocommit) _->
                action

    ## PRIVATE
       Performs the given action within a transaction.
       Once the action is completed, the transaction is committed.
       If a panic or dataflow error escapes from the action, the transaction is
       rolled-back and closed.
       If the rollback fails and panics, the panic related to the rollback will
       take precedence over the original panic that caused that rollback.
    run_within_transaction : Any -> Any
    run_within_transaction self ~action =
        if In_Transaction.is_in_transaction then
            Panic.throw (Illegal_State.Error "`run_within_transaction` is executed within an existing transaction. Nesting transactions is not allowed as its semantics are unclear.")
        self.run_without_autocommit <|
            self.with_connection java_connection->
                handle_panic caught_panic =
                    java_connection.rollback
                    Panic.throw caught_panic
                result = Panic.catch Any handler=handle_panic <|
                    In_Transaction.mark_running_in_transaction action
                case result.is_error of
                    True -> java_connection.rollback
                    False -> java_connection.commit
                result

    ## PRIVATE
       Insert rows from an in-memory table using a prepared query template in
       batches for efficiency.

       It is the caller's responsibility to call this method from within a
       transaction to ensure consistency.
    batch_insert : Text -> Statement_Setter -> Materialized_Table -> Integer -> Vector Value_Type | Nothing -> Integer | Nothing -> Nothing
    batch_insert self insert_template statement_setter table batch_size expected_type_hints=Nothing row_limit=Nothing =
        In_Transaction.ensure_in_transaction <| self.with_connection java_connection-> handle_sql_errors related_query=insert_template <|
            Managed_Resource.bracket (java_connection.prepareStatement insert_template) .close stmt->
                log_sql_if_enabled self insert_template
                table_row_count = table.row_count
                num_rows = case row_limit of
                    Nothing -> table_row_count
                    limit : Integer -> Math.min table_row_count limit
                columns = table.columns
                check_rows updates_array expected_size =
                    updates = Vector.from_polyglot_array updates_array
                    if updates.length != expected_size then Panic.throw <| Illegal_State.Error "The batch update unexpectedly affected "+updates.length.to_text+" rows instead of "+expected_size.to_text+"." else
                        updates.each affected_rows->
                            if affected_rows != 1 then
                                Panic.throw <| Illegal_State.Error "A single update within the batch unexpectedly affected "+affected_rows.to_text+" rows."
                0.up_to num_rows . each row_id->
                    values = columns.map col-> col.at row_id
                    set_statement_values stmt statement_setter values expected_type_hints=expected_type_hints
                    stmt.addBatch
                    if (row_id+1 % batch_size) == 0 then check_rows stmt.executeBatch batch_size
                if (num_rows % batch_size) != 0 then check_rows stmt.executeBatch (num_rows % batch_size)

## PRIVATE

   Creates a JDBC connection based on a URL and optionally username and
   password.

   Arguments:
   - url: The URL to connect to.
   - properties: A vector of properties for the connection.
create : Text -> Vector -> JDBC_Connection
create url properties = handle_sql_errors <|
    java_props = properties.map pair-> case pair.second of
        Nothing -> EnsoKeyValuePair.ofNothing pair.first
        _ : Enso_Secret -> EnsoKeyValuePair.ofSecret pair.first pair.second.id
        _ : Text -> EnsoKeyValuePair.ofText pair.first pair.second
    java_connection = JDBCProxy.getConnection url java_props

    resource = Managed_Resource.register java_connection close_connection
    synchronizer = OperationSynchronizer.new
    JDBC_Connection.Value resource synchronizer

## PRIVATE

   This cannot be a closure due to limitations of Managed_Resource.

   Arguments:
   - connection: The connection to close.
close_connection : Connection -> Nothing
close_connection connection =
    connection.close

## PRIVATE

   Executes `action` and returns its result, catching any panics and if they are
   coming from JDBC, wraps them with our own error types and returns as regular
   data-flow errors.

   Arguments:
   - action: The computation to execute. This computation may throw SQL errors.
handle_sql_errors : Any -> (Text | Nothing) -> Any ! (SQL_Error | SQL_Timeout)
handle_sql_errors ~action related_query=Nothing =
    Panic.catch SQLException action caught_panic->
        case caught_panic.payload of
            exc : SQLTimeoutException -> Error.throw (SQL_Timeout.Error exc related_query)
            exc -> Error.throw (SQL_Error.Error exc related_query)

## PRIVATE
   Uses the provided `Statement_Setter` strategy to fill holes in a
   provided `PreparedStatement`.

   A list of expected value types can be passed as `expected_type_hints` to add
   these hints to the `Statement_Setter` to customize the behaviour for some
   specific target value types.
set_statement_values : PreparedStatement -> Statement_Setter -> Vector -> Vector Value_Type | Nothing -> Nothing
set_statement_values stmt statement_setter values expected_type_hints=Nothing =
    values.each_with_index ix-> value->
        type_hint = case expected_type_hints of
            Nothing -> Nothing
            hints : Vector -> hints.at ix
        statement_setter.fill_hole stmt (ix + 1) type_hint value

## PRIVATE
   A helper that logs performed SQL queries/statements to a file, if an
   environment variable is set.
log_sql_if_enabled : JDBC_Connection -> Text -> Nothing
log_sql_if_enabled jdbc_connection ~query_text =
    case Environment.get "ENSO_SQL_LOG_PATH" of
        Nothing -> Nothing
        path -> if path.is_empty then Nothing else
            timestamp = Date_Time.now.format "yyyy-MM-dd HH:mm:ss zzzzz"
            db_id = jdbc_connection.with_metadata .getDatabaseProductName
            # E.g. 2023-10-09 11:27:08 +02:00 [SQLite] SELECT * FROM "test"
            log_line = timestamp + " [" + db_id + "] " + query_text + '\n'
            Context.Output.with_enabled <|
                log_line.write path on_existing_file=Existing_File_Behavior.Append
