from Standard.Base import all hiding First, Last
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

import Standard.Table.Data.Aggregate_Column.Aggregate_Column
from Standard.Table.Data.Aggregate_Column.Aggregate_Column import all

import project.Data.Dialect.Dialect
import project.Data.SQL_Type.SQL_Type
import project.Data.Table.Table
import project.Internal.IR.SQL_Expression.SQL_Expression
import project.Internal.IR.Internal_Column.Internal_Column

from project.Errors import Unsupported_Database_Operation

## PRIVATE
   Creates an `Internal_Column` that computes the specified statistic.
   It returns a dataflow error if the given operation is not supported.

   The provided `aggregate` is assumed to contain only already resolved columns.
   You may need to transform it with `resolve_aggregate` first.
make_aggregate_column : Table -> Aggregate_Column -> Text -> Internal_Column
make_aggregate_column table aggregate new_name =
    sql_type = table.connection.dialect.resolve_target_sql_type aggregate
    expression = make_expression aggregate table.connection.dialect
    Internal_Column.Value new_name sql_type expression

## PRIVATE
   Creates an Internal Representation of the expression that computes a
   requested statistic.
make_expression : Aggregate_Column -> Dialect -> SQL_Expression
make_expression aggregate dialect =
    is_non_empty_selector v = v.is_nothing.not && v.not_empty
    case aggregate of
        Group_By c _ -> c.expression
        Count _ -> SQL_Expression.Operation "COUNT_ROWS" []
        Count_Distinct columns _ ignore_nothing -> if columns.is_empty then Error.throw (Illegal_Argument.Error "Count_Distinct must have at least one column.") else
            case ignore_nothing of
                True -> SQL_Expression.Operation "COUNT_DISTINCT" (columns.map .expression)
                False -> SQL_Expression.Operation "COUNT_DISTINCT_INCLUDE_NULL" (columns.map .expression)
        Count_Not_Nothing c _ -> SQL_Expression.Operation "COUNT" [c.expression]
        Count_Nothing c _ -> SQL_Expression.Operation "COUNT_IS_NULL" [c.expression]
        Count_Not_Empty c _ -> SQL_Expression.Operation "COUNT_NOT_EMPTY" [c.expression]
        Count_Empty c _ -> SQL_Expression.Operation "COUNT_EMPTY" [c.expression]
        Percentile p c _ -> SQL_Expression.Operation "PERCENTILE" [SQL_Expression.Constant SQL_Type.double p, c.expression]
        Mode c _ -> SQL_Expression.Operation "MODE" [c.expression]
        First c _ ignore_nothing order_by -> case is_non_empty_selector order_by of
            False -> Error.throw (Unsupported_Database_Operation.Error "`First` aggregation requires at least one `order_by` column.")
            True ->
                order_bys = order_by.map c-> dialect.prepare_order_descriptor c.column.as_internal c.direction Text_Ordering.Default
                case ignore_nothing of
                    False -> SQL_Expression.Operation "FIRST" [c.expression]+order_bys
                    True -> SQL_Expression.Operation "FIRST_NOT_NULL" [c.expression]+order_bys
        Last c _ ignore_nothing order_by -> case is_non_empty_selector order_by of
            False -> Error.throw (Unsupported_Database_Operation.Error "`Last` aggregation requires at least one `order_by` column.")
            True ->
                order_bys = order_by.map c-> dialect.prepare_order_descriptor c.column.as_internal c.direction Text_Ordering.Default
                case ignore_nothing of
                    False -> SQL_Expression.Operation "LAST" [c.expression]+order_bys
                    True -> SQL_Expression.Operation "LAST_NOT_NULL" [c.expression]+order_bys
        Maximum c _ -> SQL_Expression.Operation "MAX" [c.expression]
        Minimum c _ -> SQL_Expression.Operation "MIN" [c.expression]
        Shortest c _ -> SQL_Expression.Operation "SHORTEST" [c.expression]
        Longest c _ -> SQL_Expression.Operation "LONGEST" [c.expression]
        Standard_Deviation c _ population -> case population of
            True -> SQL_Expression.Operation "STDDEV_POP" [c.expression]
            False -> SQL_Expression.Operation "STDDEV_SAMP" [c.expression]
        Concatenate c _ separator prefix suffix quote_char ->
            base_args = [c.expression, SQL_Expression.Constant SQL_Type.text separator, SQL_Expression.Constant SQL_Type.text prefix, SQL_Expression.Constant SQL_Type.text suffix]
            case quote_char.is_empty of
                True -> SQL_Expression.Operation "CONCAT" base_args
                False -> SQL_Expression.Operation "CONCAT_QUOTE_IF_NEEDED" base_args+[SQL_Expression.Constant SQL_Type.text quote_char]
        Sum c _ -> SQL_Expression.Operation "SUM" [c.expression]
        Average c _ -> SQL_Expression.Operation "AVG" [c.expression]
        Median c _ -> SQL_Expression.Operation "MEDIAN" [c.expression]
