from Standard.Base import all
import Standard.Base.Errors.Illegal_State.Illegal_State

import project.Data.SQL.Builder
import project.Internal.IR.Context.Context
import project.Internal.IR.SQL_Expression.SQL_Expression
import project.Internal.IR.From_Spec.From_Spec
import project.Internal.IR.SQL_Join_Kind.SQL_Join_Kind
import project.Internal.IR.Order_Descriptor.Order_Descriptor
import project.Internal.IR.Nulls_Order.Nulls_Order
import project.Internal.IR.Query.Query

from project.Errors import Unsupported_Database_Operation

type Internal_Dialect

    ## PRIVATE

       An internal representation of a SQL dialect.

       Arguments:
       - operation_map: The mapping which maps operation names to their
         implementations; each implementation is a function which takes SQL
         builders for the arguments and should return a builder yielding the
         whole operation.
       - wrap_identifier: A function that converts an arbitrary supported
         identifier name in such a way that it can be used in the query; that
         usually consists of wrapping the name in quotes and escaping any quotes
         within it.
    Value (operation_map:(Map Text (Vector (Builder->Builder)))) (wrap_identifier:(Text->Builder))

    ## PRIVATE

       Creates a copy of the dialect that supports additional operations or
       overrides existing ones.

       # extend_with : Vector [Text, Vector Builder -> Builder] -> Internal_Dialect
    extend_with : Vector Any -> Internal_Dialect
    extend_with self mappings =
        new_map = mappings.fold self.operation_map (m -> el -> m.insert (el.at 0) (el.at 1))
        Internal_Dialect.Value new_map self.wrap_identifier

## PRIVATE

   A helper function to create a binary operator.

   Arguments:
   - name: The name of the binary operator.
make_binary_op : Text -> (Vector Builder -> Builder)
make_binary_op name =
    arguments ->
        case arguments.length == 2 of
            True ->
                op = " " + name + " "
                ((arguments.at 0) ++ op ++ (arguments.at 1)).paren
            False ->
                Error.throw <| Illegal_State.Error ("Invalid amount of arguments for operation " + name)

## PRIVATE

   A helper function to create a unary operator.

   Arguments:
   - name: The name of the unary operator.
make_unary_op : Text -> (Vector Builder -> Builder)
make_unary_op name =
    arguments ->
        case arguments.length == 1 of
            True ->
                (Builder.code name+" ")++(arguments.at 0) . paren
            False ->
                Error.throw <| Illegal_State.Error ("Invalid amount of arguments for operation " + name)

## PRIVATE

   A helper function to create an unary operation from a function.

   Arguments:
   - name: Name of the operation, used for error reporting.
   - function: A function taking exactly one argument: the generated SQL code
     for the argument of the operation, and returning the generated SQL code for
     the whole operation.
lift_unary_op : Text -> (Builder -> Builder) -> [Text, (Vector Builder -> Builder)]
lift_unary_op name function =
    generator = arguments -> case arguments.length == 1 of
        False -> Error.throw <| Illegal_State.Error ("Invalid amount of arguments for operation " + name + ".")
        True -> function (arguments.at 0)
    [name, generator]

## PRIVATE

   A helper function to create a binary operation from a function.

   Arguments:
   - name: Name of the operation, used for error reporting.
   - function: A function taking exactly two arguments: the generated SQL code
     for the argument of the operation, and returning the generated SQL code for
     the whole operation.
lift_binary_op : Text -> (Builder -> Builder -> Builder) -> [Text, (Vector Builder -> Builder)]
lift_binary_op name function =
    generator = arguments -> case arguments.length == 2 of
        False -> Error.throw <| Illegal_State.Error ("Invalid amount of arguments for operation " + name + ".")
        True -> function (arguments.at 0) (arguments.at 1)
    [name, generator]

## PRIVATE

   A helper function to create a unary operator which is added to the right of
   the expression.

   Arguments:
   - name: The name of the unary operator.
make_right_unary_op : Text -> (Vector Builder -> Builder)
make_right_unary_op name =
    arguments ->
        case arguments.length == 1 of
            True ->
                (arguments.at 0)++(" " + name) . paren
            False ->
                Error.throw ("Invalid amount of arguments for operation " + name)

## PRIVATE

   A helper function to create a functional operation.

   Arguments:
   - name: The name of the function.
make_function : Text -> (Vector Builder -> Builder)
make_function name =
    arguments ->
        (Builder.code name) ++ (Builder.join ", " arguments . paren)

## PRIVATE

   A helper function to create an operation that takes no arguments.

   Arguments:
   - sql_code: The SQL code for the constant.
make_constant : Text -> (Vector Builder -> Builder)
make_constant sql_code =
    arguments ->
        if arguments.not_empty then Error.throw <| Illegal_State.Error "No arguments were expected" else
            Builder.code sql_code

## PRIVATE

   Wraps the identifier name in quotes and escapes any quotes within the name
   with double-quote.

   Arguments:
   - identifier: The identifier to wrap and escape.

   This is the simplest way of escaping identifiers that should work across most
   dialects.
wrap_in_quotes : Text -> Builder
wrap_in_quotes identifier =
    escaped = identifier.replace '"' '""'
    Builder.code '"'+escaped+'"'

## PRIVATE

   The base SQL dialect that is shared between most SQL implementations.

   It is a base to help creating concrete dialects. It can be extended or
   completely overridden.
base_dialect =
    bin = name -> [name, make_binary_op name]
    unary = name -> [name, make_unary_op name]
    fun = name -> [name, make_function name]

    arith = [["ADD_NUMBER", make_binary_op "+"], ["ADD_TEXT", make_binary_op "||"], bin "-", bin "*", bin "/", bin "%", ["mod", make_function "MOD"], ["^", make_function "POWER"]]
    logic = [bin "AND", bin "OR", unary "NOT", ["IIF", make_iif], ["TRUE", make_constant "TRUE"], ["FALSE", make_constant "FALSE"]]
    eq = lift_binary_op "==" make_equals
    neq = lift_binary_op "!=" make_not_equals
    compare = [eq, neq, bin "<", bin ">", bin "<=", bin ">=", ["BETWEEN", make_between]]
    functions = [["COALESCE", make_function "COALESCE"], ["ROW_MIN", make_function "MIN"], ["ROW_MAX", make_function "MAX"]]
    agg = [fun "MAX", fun "MIN", fun "AVG", fun "SUM"]
    counts = [fun "COUNT", ["COUNT_ROWS", make_constant "COUNT(*)"]]
    text = [is_empty, bin "LIKE", simple_equals_ignore_case, fold_case, make_case_sensitive]
    nulls = [["IS_NULL", make_right_unary_op "IS NULL"], ["FILL_NULL", make_function "COALESCE"]]
    contains = [["IS_IN", make_is_in], ["IS_IN_COLUMN", make_is_in_column]]
    base_map = Map.from_vector (arith + logic + compare + functions + agg + counts + text + nulls + contains)
    Internal_Dialect.Value base_map wrap_in_quotes

## PRIVATE
is_empty = lift_unary_op "IS_EMPTY" arg->
    is_null = (arg ++ " IS NULL").paren
    is_empty = (arg ++ " = ''").paren
    (is_null ++ " OR " ++ is_empty).paren

## PRIVATE
make_iif : Vector Builder -> Builder
make_iif arguments = case arguments.length of
    3 ->
        expr = arguments.at 0
        when_true = arguments.at 1
        when_false = arguments.at 2
        (Builder.code "CASE WHEN" ++ expr ++ " THEN " ++ when_true ++ " WHEN " ++ expr ++ " IS NULL THEN NULL ELSE " ++ when_false ++ " END").paren
    _ ->
        Error.throw <| Illegal_State.Error ("Invalid amount of arguments for operation IIF")

## PRIVATE
make_between : Vector Builder -> Builder
make_between arguments = case arguments.length of
    3 ->
        expr = arguments.at 0
        lower = arguments.at 1
        upper = arguments.at 2
        (expr ++ " BETWEEN " ++ lower ++ " AND " ++ upper).paren
    _ ->
        Error.throw <| Illegal_State.Error ("Invalid amount of arguments for operation BETWEEN")

## PRIVATE
make_is_in : Vector Builder -> Builder
make_is_in arguments = case arguments.length of
    0 -> Error.throw <| Illegal_State.Error ("The operation IS_IN requires at least one argument.")
    ## If only the self argument is provided, no value will ever be in the empty list, so we just short circuit to false.
       `IN ()` would be more meaningful, but it is a syntax error.
    1 -> Builder.code 'FALSE' . paren
    _ ->
        expr = arguments.first
        list = arguments.drop 1
        is_in = expr ++ " IN (" ++ (Builder.join ", " list) ++ ")"
        ## We ensure that even `NULL IN (...)` is coalesced to False, so that
           negation will work as expected.
        Builder.code "COALESCE(" ++ is_in ++ ", FALSE)"

## PRIVATE
make_is_in_column : Vector Builder -> Builder
make_is_in_column arguments = case arguments.length of
    3 ->
        expr = arguments.at 0
        in_query = arguments.at 1
        has_nulls_query = arguments.at 2
        is_in = Builder.code "COALESCE(" ++ expr ++ " IN (" ++ in_query ++ "), FALSE)"
        has_nulls = has_nulls_query.paren ++ " = TRUE"
        Builder.code "CASE WHEN " ++ expr ++ " IS NULL THEN " ++ has_nulls ++ " ELSE " ++ is_in ++ " END"
    _ -> Error.throw <| Illegal_State.Error ("The operation IS_IN_COLUMN requires at exactly 3 arguments: the expression, the IN subquery, the subquery checking for nulls.")

## PRIVATE

   Builds code for an expression.

   Arguments:
   - dialect: The SQL dialect in which the expression is being generated.
   - expr: The expression to generate SQL code for.
generate_expression : Internal_Dialect -> SQL_Expression | Order_Descriptor | Query -> Builder
generate_expression dialect expr = case expr of
    SQL_Expression.Column origin name ->
        dialect.wrap_identifier origin ++ '.' ++ dialect.wrap_identifier name
    SQL_Expression.Constant sql_type value -> Builder.interpolation sql_type value
    SQL_Expression.Operation kind arguments ->
        op = dialect.operation_map.get kind (Error.throw <| Unsupported_Database_Operation.Error kind)
        parsed_args = arguments.map (generate_expression dialect)
        op parsed_args
    query : Query -> generate_query dialect query
    descriptor : Order_Descriptor -> generate_order dialect descriptor

## PRIVATE

   Adds an alias for the expression, applicable for expressions that represent
   columns or sub-queries.

   Arguments:
   - dialect: The dialect for which to add the alias.
   - name: The name of the alias.
alias : Internal_Dialect -> Text -> Builder
alias dialect name =
    wrapped = dialect.wrap_identifier name
    Builder.code " AS " ++ wrapped

## PRIVATE

   Builds code for the FROM clause.

   Arguments:
   - dialect: The SQL dialect for which the code is generated.
   - from_spec: A description of the FROM clause.
generate_from_part : Internal_Dialect -> From_Spec -> Builder
generate_from_part dialect from_spec = case from_spec of
    From_Spec.Table name as_name ->
        dialect.wrap_identifier name ++ alias dialect as_name
    From_Spec.Query raw_sql as_name ->
        Builder.code raw_sql . paren ++ alias dialect as_name
    From_Spec.Join kind left_spec right_spec on ->
        left = generate_from_part dialect left_spec
        right = generate_from_part dialect right_spec
        ons = Builder.join " AND " (on.map (generate_expression dialect)) . prefix_if_present " ON "
        left ++ (" " + kind.to_sql + " ") ++ right ++ ons
    From_Spec.Sub_Query columns context as_name ->
        sub = generate_query dialect (Query.Select columns context)
        sub.paren ++ alias dialect as_name

## PRIVATE
fold_case = lift_unary_op "FOLD_CASE" arg->
    Builder.code "LOWER(UPPER(" ++ arg ++ "))"

## PRIVATE
make_case_sensitive = lift_unary_op "MAKE_CASE_SENSITIVE" _->
    Error.throw <| Unsupported_Database_Operation.Error ("Case sensitive operations are not currently supported by this connection.")

## PRIVATE
simple_equals_ignore_case = Base_Generator.lift_binary_op "equals_ignore_case" a-> b->
    Builder.code "LOWER(UPPER(" ++ a ++ ")) = LOWER(UPPER(" ++ b ++ "))"

## PRIVATE
make_equals a b =
    a.paren ++ " = " ++ b.paren

## PRIVATE
make_not_equals a b =
    a.paren ++ " != " ++ b.paren

## PRIVATE

   Builds code for an ordering.

   Arguments:
   - dialect: The SQL dialect for which the code is generated.
   - order_descriptor: A description of the ORDER clause.
generate_order : Internal_Dialect -> Order_Descriptor -> Builder
generate_order dialect order_descriptor =
    order_suffix = case order_descriptor.direction of
        Sort_Direction.Ascending -> " ASC"
        Sort_Direction.Descending -> " DESC"
    nulls_suffix = case order_descriptor.nulls_order of
        Nothing -> ""
        Nulls_Order.First -> " NULLS FIRST"
        Nulls_Order.Last -> " NULLS LAST"
    collation = case order_descriptor.collation of
        Nothing -> ""
        collation_name -> ' COLLATE "' + collation_name + '"'
    base_expression = generate_expression dialect order_descriptor.expression
    base_expression ++ collation ++ order_suffix ++ nulls_suffix


## PRIVATE

   Generates SQL code corresponding to a SELECT statement.

   Arguments:
   - dialect: The SQL dialect for which the code is being generated.
   - ctx: A description of the SELECT clause.
generate_select_context : Internal_Dialect -> Context -> Builder
generate_select_context dialect ctx =
    gen_exprs exprs = exprs.map (generate_expression dialect)
    from_part = generate_from_part dialect ctx.from_spec
    where_part = (Builder.join " AND " (gen_exprs ctx.where_filters)) . prefix_if_present " WHERE "
    group_part = (Builder.join ", " (gen_exprs ctx.groups)) . prefix_if_present " GROUP BY "
    limit_part = case ctx.limit of
        Nothing -> ""
        _ : Integer -> " LIMIT " + ctx.limit.to_text

    orders = ctx.orders.map (generate_order dialect)
    order_part = (Builder.join ", " orders) . prefix_if_present " ORDER BY "
    (Builder.code " FROM ") ++ from_part ++ where_part ++ group_part ++ order_part ++ limit_part

## PRIVATE

   Generates the SQL code corresponding to an INSERT query.

   Arguments:
   - dialect: The SQL dialect for which the code is being generated.
   - table_name: The name of the table into which the values are being inserted.
   - pairs: The values to insert into the table, consisting of pairs of key, and
     expression returning a value.
generate_insert_query : Internal_Dialect -> Text -> Vector Any -> Builder
generate_insert_query dialect table_name pairs =
    names = Builder.join ", " <| pairs.map (.first >> dialect.wrap_identifier)
    values = Builder.join ", " <| pairs.map (.second >> generate_expression dialect)
    into = dialect.wrap_identifier table_name

    Builder.code "INSERT INTO " ++ into ++ " (" ++ names ++ ") VALUES (" ++ values ++ ")"

## PRIVATE

   Builds code for a whole query.

   Arguments:
   - dialect: The SQL dialect for which the code is being generated.
   - query: An IR describing the query.
generate_query : Internal_Dialect -> Query -> Builder
generate_query dialect query = case query of
    Query.Select columns ctx ->
        gen_column pair = (generate_expression dialect pair.second) ++ alias dialect pair.first
        cols = case columns of
            Nothing -> Builder.code "*"
            _ -> Builder.join ", " (columns.map gen_column)
        prefix = case ctx.distinct_on of
            Nothing -> Builder.code ""
            expressions : Vector ->
                # TODO I just realised this does not make sense in other backends than Postgres, so we should probably fail in such cases; probably rewrite into a generic modifier? or a transform?
                generated = Builder.join ", " (expressions.map (generate_expression dialect))
                Builder.code "DISTINCT ON (" ++ generated ++ ") "
        Builder.code "SELECT " ++ prefix ++ cols ++ generate_select_context dialect ctx
    Query.Insert table_name pairs ->
        generate_insert_query dialect table_name pairs
    _ -> Error.throw <| Unsupported_Database_Operation.Error "Unsupported query type."

## PRIVATE
   Arguments:
   - make_raw_concat_expr: a function which takes two expressions - a (possibly
     processed) column expression and a separator and returns a SQL expression
     which concatenates the expressions with separators.
   - make_contains_expr: a function which takes two expressions - a string to
     search in and a substring to search for and returns an expression which is
     true if the string contains the substring.
   - has_quote: specifies whether it should expect an additional SQL argument
     containing a quote character.
   - args: the processed SQL arguments from the generator.

   It takes 4 or 5 SQL arguments depending on `has_quote`.
   The SQL arguments are following:
   - the column expression to concatenate,
   - the separator to use when joining the expressions,
   - a prefix to prepend,
   - a suffix to append,
   - a quote character to use to escape separator if it is present inside of a
     column expression; it should be provided only if `has_quote` is `True` and
     must not be empty then. If the quote character occurs in the expression, it
     is escaped by doubling each occurrence.
make_concat make_raw_concat_expr make_contains_expr has_quote args =
    expected_args = if has_quote then 5 else 4
    if args.length != expected_args then Error.throw (Illegal_State.Error "Unexpected number of arguments for the concat operation.") else
        expr = args.at 0
        separator = args.at 1
        prefix = args.at 2
        suffix = args.at 3
        append = " || "
        possibly_quoted = case has_quote of
            True ->
                quote = args.at 4
                includes_separator = separator ++ " != '' AND " ++ make_contains_expr expr separator
                ## We use the assumption that `has_quote` is True iff `quote` is not empty.
                includes_quote = make_contains_expr expr quote
                is_empty = expr ++ " = ''"
                needs_quoting = includes_separator.paren ++ " OR " ++ includes_quote.paren ++ " OR " ++ is_empty.paren
                escaped = Builder.code "replace(" ++ expr ++ ", " ++ quote ++ ", " ++ quote ++ append ++ quote ++ ")"
                quoted = quote ++ append ++ escaped ++ append ++ quote
                Builder.code "CASE WHEN " ++ needs_quoting ++ " THEN " ++ quoted ++ " ELSE " ++ expr ++ " END"
            False -> expr
        transformed_expr = Builder.code "CASE WHEN " ++ expr ++ " IS NULL THEN '' ELSE " ++ possibly_quoted.paren ++ " END"
        concatenated = make_raw_concat_expr transformed_expr separator
        prefix.paren ++ append ++ concatenated ++ append ++ suffix.paren
