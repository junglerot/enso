from Standard.Base import all

import project.Internal.IR.Expression.Expression
import project.Internal.IR.From_Spec.From_Spec
import project.Internal.IR.Internal_Column.Internal_Column
import project.Internal.IR.Order_Descriptor.Order_Descriptor

## PRIVATE

   A context associated with an SQL query.
type Context
    ## PRIVATE

       Creates a query context that just fetches data from a table, without any
       additional processing.

       Arguments:
       - table_name: The name of the table for which the context is being created.
       - alias: An alias name to use for table within the query.
    for_table : Text -> Text -> Context
    for_table table_name alias=table_name =
        Context.Value (From_Spec.From_Table table_name alias) [] [] [] [] Nothing

    ## PRIVATE

       Creates a query context that runs a raw SQL query.

       Arguments:
       - raw_sql: The name of the table for which the context is being created.
       - alias: An alias name to use for table within the query.
    for_query : Text -> Text -> Context
    for_query raw_sql alias =
        Context.Value (From_Spec.From_Query raw_sql alias) [] [] [] [] Nothing

    ## PRIVATE

       Creates a Context from a Sub_Query.

       Arguments:
       - subquery: The subquery to lift into a context.
    for_subquery : Sub_Query -> Context
    for_subquery subquery =
        Context.Value subquery [] [] [] [] Nothing

    ## PRIVATE

       A context associated with an SQL query.

       The expressions can only be computed in a context which specifies from where
       their columns come and set filters and other settings for processing the
       query.

        Arguments:
       - from_spec: the sources for the query, see `From_Spec` for more
         details.
       - where_filters: a list of expressions for filtering - only the rows
         for which these expressions evaluate to true are included in the
         result.
       - orders: a list of ordering expressions, for each entry an ORDER BY
         clause is added.
       - groups: a list of grouping expressions, for each entry a GROUP BY is
         added, the resulting query can then directly include only the
         grouped-by columns or aggregate expressions.
       - meta_index: a list of internal columns to use for joining or grouping.
       - limit: an optional maximum number of elements that the equery should
         return.
    Value (from_spec : From_Spec) (where_filters : Vector Expression) (orders : Vector Order_Descriptor) (groups : Vector Expression) (meta_index : Vector Internal_Column) (limit : Nothing | Integer)

    ## PRIVATE

       Returns a copy of the context with changed `meta_index`.

       Arguments:
       - new_index: The new index to set in the query.
    set_index : Vector Internal_Column -> Context
    set_index self new_index =
        Context.Value self.from_spec self.where_filters self.orders self.groups new_index self.limit

    ## PRIVATE

       Returns a copy of the context with changed `where_filters`.

       Arguments:
       - new_filters: The new filters to set in the query.
    set_where_filters : Vector Expression -> Context
    set_where_filters self new_filters =
        Context.Value self.from_spec new_filters self.orders self.groups self.meta_index self.limit

    ## PRIVATE

       Returns a copy of the context with changed `orders`.

       Arguments:
       - new_orders: The new ordering clauses to set in the query.
    set_orders : Vector Order_Descriptor -> Context
    set_orders self new_orders =
        Context.Value self.from_spec self.where_filters new_orders self.groups self.meta_index self.limit

    ## PRIVATE

       Returns a copy of the context with added `orders`.

       The orderings are modified in such a way that the newly added ordering
       takes precedence, but if any orderings were already present they are also
       taken into account to break ties within the new ordering.

       In practice this means, that the old orderings are preserved, but the new
       ones are added to the beginning of the list so that they take precedence.

       Arguments:
       - new_orders: The new ordering clauses to add to the query.
    add_orders : Vector Order_Descriptor -> Context
    add_orders self new_orders =
        Context.Value self.from_spec self.where_filters new_orders+self.orders self.groups self.meta_index self.limit

    ## PRIVATE

       Returns a copy of the context with changed `groups`.

       Arguments:
       - new_groups: The new grouping clauses to set in the query.
    set_groups : Vector Expression -> Context
    set_groups self new_groups =
        Context.Value self.from_spec self.where_filters self.orders new_groups self.meta_index self.limit

    ## PRIVATE

       Returns a copy of the context with changed `limit`.

       Arguments:
       - new_limit: The new limit clauses to set in the query.
    set_limit : (Nothing | Integer) -> Context
    set_limit self new_limit =
       Context.Value self.from_spec self.where_filters self.orders self.groups self.meta_index new_limit

    ## PRIVATE

       'Lifts' this context into a subquery, so that the original context (with all filters etc.) is
       encapsulated within the subquery and all external references passed as the second argument,
       refer directly to that subquery.

       It takes a list of lists of columns that should be included in that subquery (this can for
       example the list of regular columns, the list of indices etc.)
       It assumes that columns on these lists all have unique names.

       It returns a new context and the lists transformed in such a way that each column corresponds
       to one from the original list but it is valid in the new context.

       This is useful as a preprocessing step between combining queries, for example in a join.
    # as_subquery : Text -> Vector (Vector Internal_Column) -> [From_Spec.Sub_Query, Vector (Vector Internal_Column)]
    as_subquery : Text -> Vector Any -> Vector
    as_subquery self alias column_lists =
        rewrite_internal_column : Internal_Column -> Internal_Column
        rewrite_internal_column column =
            Internal_Column.Value column.name column.sql_type (Expression.Column alias column.name)

        new_columns = column_lists.map columns->
            columns.map rewrite_internal_column

        encapsulated_columns = column_lists.flat_map columns->
            columns.map column-> [column.name, column.expression]
        new_from = From_Spec.Sub_Query encapsulated_columns self alias

        [new_from, new_columns]
