from Standard.Base import all

import project.Internal.IR.Context.Context
import project.Internal.IR.Query.Query
import project.Internal.IR.SQL_Expression.SQL_Expression
import project.Internal.IR.SQL_Join_Kind.SQL_Join_Kind

## PRIVATE

   Used as part of the context, specifies the sources of the query.
type From_Spec
    ## PRIVATE

       A query source that takes data directly from a table in the
       database.

       Arguments:
       - table_name: the full name identifying the table in the database.
       - alias: the name upon which the table can be referred to in other
         parts of the query, this is especially useful for example in
         self-joins, allowing to differentiate between different instances of
         the same table.
       - internal_temporary_keep_alive_reference: a reference that can be used
         to track the lifetime of a temporary dry-run table. Once this context
         is garbage collected, the temporary table may be dropped.
         See `Hidden_Table_Registry` for more details.
    Table (table_name : Text) (alias : Text) internal_temporary_keep_alive_reference=Nothing

    ## PRIVATE

       A query source that holds a raw SQL statement.

       Arguments:
       - raw_sql: the raw SQL code of a query used as a source for this table.
       - alias: the name upon which the table can be referred to in other
         parts of the query, this is especially useful for example in
         self-joins, allowing to differentiate between different instances of
         the same table.
    Query (raw_sql : Text) (alias : Text)

    ## PRIVATE

       A query source that performs a join operation on two sources.

       Arguments:
       - kind: the kind of the join.
       - left_spec: the left data source to be joined
       - right_spec: the right data source to be joined
       - on: a list of expressions that will be used as join conditions, these
         are usually be equalities between expressions from the left and right
         sources.
    Join (kind : SQL_Join_Kind) (left_spec : From_Spec) (right_spec : From_Spec) (on : Vector SQL_Expression)

    ## PRIVATE

       A query source that performs a union operation on multiple sources.

       This maps to the SQL operation `UNION ALL`, keeping any duplicate rows.

       Arguments:
       - queries: the list of queries to be unioned. Eachn query shold have the
         same number of columns, as these will be merged by position. Ideally,
         corresponding columns should have the same names too, as the outer
         query will be referring to columns of the union by names of the columns
         from the first query.
       - alias: the name for the consolidated query, to be used by column
         references, referring to columns of the union.
    Union (queries : Vector Query) (alias : Text)

    ## PRIVATE

       A query source consisting of a sub-query.

       Arguments:
       - columns: a list of pairs; each first element is the alias for the
         column created in the sub-query and the second element is the
         expression to be computed.
       - context: the context for the sub-query.
       - alias: the name upon which the results of this sub-query can be
         referred to in other parts of the query.
    Sub_Query (columns : Vector (Pair Text SQL_Expression)) (context : Context) (alias : Text)


## PRIVATE
type From_Spec_Comparator
    ## PRIVATE
       Special handling to ignore the alias and internal temporary keep alive
       reference when comparing two `From_Spec.Table` values.
    compare x y = case x of
        From_Spec.Table table_name _ _ -> case y of
            From_Spec.Table other_table_name _ _ ->
                if table_name == other_table_name then Ordering.Equal else Nothing
            _ -> Nothing
        _ -> Default_Comparator.compare x y

    ## PRIVATE
    hash x = case x of
        From_Spec.Table table_name _ _ ->
            Default_Comparator.hash table_name
        _ -> Default_Comparator.hash x

Comparable.from (_ : From_Spec) = From_Spec_Comparator
