from Standard.Base import all

import Standard.Table.Data.Table.Table as Materialized_Table

import project.Data.SQL_Type.SQL_Type
import project.Internal.Column_Fetcher.Column_Fetcher
from project.Internal.SQL_Warning_Helper import extract_warnings_into_builder

polyglot java import java.sql.ResultSet

## PRIVATE
   Read a single column from a ResultSet into a Vector
read_column : ResultSet -> Text -> Vector
read_column result_set column_name =
    # TODO use fetcher
    if result_set.isClosed then [] else
        index = result_set.findColumn column_name

        builder = Vector.new_builder
        go has_next = if has_next.not then Nothing else
            builder.append (result_set.getObject index)
            @Tail_Call go result_set.next

        go result_set.next
        builder.to_vector

## PRIVATE
   Converts a ResultSet into a Materialized_Table.
result_set_to_table : ResultSet -> (SQL_Type -> Column_Fetcher) -> (Vector (SQL_Type | Nothing) | Nothing) -> Boolean -> Materialized_Table
result_set_to_table result_set make_column_fetcher type_overrides=Nothing last_row_only=False =
    metadata = result_set.getMetaData
    ncols = metadata.getColumnCount
    column_names = Vector.new ncols ix-> metadata.getColumnName ix+1
    metadata_types = Vector.new ncols ix-> SQL_Type.from_metadata metadata ix+1
    column_types = case type_overrides of
        Nothing -> metadata_types
        _ : Vector ->
            effective_types = type_overrides.zip metadata_types overridden_type-> metadata_type->
                case overridden_type of
                    Nothing -> metadata_type
                    _       -> overridden_type
            effective_types
    column_fetchers = column_types.map make_column_fetcher
    initial_size = 10
    column_builders = column_fetchers.map fetcher->
        fetcher.make_builder initial_size
    fetchers_and_builders = column_fetchers.zip column_builders
    warnings_builder = Vector.new_builder
    case last_row_only of
        True ->
            ## Not using the `ResultSet.last` as not supported by all connection types.
            go has_next current = case has_next.not of
                True ->
                    if current.is_nothing then Nothing else
                        column_builders.each_with_index ix-> builder-> builder.append (current.at ix)
                        Nothing
                False ->
                    values = column_fetchers.map_with_index ix-> fetcher-> fetcher.fetch_value result_set ix+1
                    extract_warnings_into_builder warnings_builder result_set
                    @Tail_Call go result_set.next values
            go result_set.next Nothing
        False ->
            go has_next = if has_next.not then Nothing else
                fetchers_and_builders.each_with_index ix-> pair->
                    fetcher = pair.first
                    builder = pair.second
                    value = fetcher.fetch_value result_set ix+1
                    builder.append value
                extract_warnings_into_builder warnings_builder result_set
                @Tail_Call go result_set.next
            go result_set.next
    Problem_Behavior.Report_Warning.attach_problems_before warnings_builder.to_vector <|
        columns = column_builders.zip column_names builder-> name->
            builder.make_column name
        Materialized_Table.new columns
