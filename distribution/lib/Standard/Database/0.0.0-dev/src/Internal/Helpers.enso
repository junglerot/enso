from Standard.Base import all

import project.Data.Table.Table
import project.Data.Column.Column
import project.Internal.IR.Internal_Column.Internal_Column

from project.Errors import Unsupported_Name, Unsupported_Database_Operation

polyglot java import java.util.regex.Pattern

## PRIVATE

   Checks if the two tables or columns have the same context and use the same
   connection.

   Arguments:
   - entity1: The entity to check against the second.
   - entity2: The entity to check against the first.

   To combine different objects they need to satisfy this requirement, otherwise
   the combination would be ill-formed.
check_integrity : (Table | Column) -> (Table | Column) -> Boolean
check_integrity entity1 entity2 =
    ctx = entity1.context == entity2.context
    ctx && (check_connection entity1 entity2)

## PRIVATE

   Checks if the two tables or columns use the same connection.

   Arguments:
   - entity1: The entity to check against the second.
   - entity2: The entity to check against the first.
check_connection : (Table | Column) -> (Table | Column) -> Boolean
check_connection entity1 entity2 =
    Meta.is_same_object entity1.connection entity2.connection

## PRIVATE

   A helper function simplifying argument handling.

   Arguments:
   - x: A value that may or may not be a vector.

   It always returns a vector, if the argument was already a vector, it is kept
   as-is, otherwise it is wrapped in a singleton vector.
unify_vector_singleton : (Any | Vector Any) -> Vector.Vector Any
unify_vector_singleton x = case x of
    _ : Vector -> x
    _ -> [x]

## PRIVATE

   This is used to check if the new name is safe for use in SQL queries.

   Arguments:
   - name: The name to check for safety.

   In a future version we will decouple the internal SQL-safe names from the
   external names shown to the user, but as a temporary solution we only allow
   SQL-safe names for columns.

   # TODO [RW] better name handling in Tables (#1513)
ensure_name_is_sane : Text -> Boolean ! Unsupported_Name
ensure_name_is_sane name =
    is_safe =
        Pattern.matches "[A-Za-z_0-9]+" name
    if is_safe then True else
        Error.throw <| Unsupported_Name.Error (name + " is not a valid name for a column. Please use english letters, numbers and underscore only.")

## PRIVATE
assume_default_locale : Locale -> Any -> Any ! Unsupported_Database_Operation
assume_default_locale locale ~action =
    case locale == Locale.default of
        True -> action
        False ->
            msg = "Custom locales are not supported for operations in the Database backend. If you want to use them, you need to materialize the table first."
            Error.throw (Unsupported_Database_Operation.Error msg)

## PRIVATE

   Transforms the vector of columns, changing names of each column to the
   corresponding name from the second vector.

   Arguments:
   - columns: A vector of columns to rename.
   - new_names: The new names for the columns.
rename_internal_columns : Vector Internal_Column -> Vector Text -> Vector Internal_Column
rename_internal_columns columns new_names =
    columns.zip new_names col-> name->
        col.rename name
