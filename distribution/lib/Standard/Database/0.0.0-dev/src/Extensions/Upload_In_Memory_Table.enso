from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

import Standard.Table.Data.Table.Table
import Standard.Table.Internal.Widget_Helpers
from Standard.Table.Errors import all

import project.Connection.Connection.Connection
import project.Data.Table.Table as Database_Table
import project.Data.Update_Action.Update_Action
from project.Errors import all
from project.Internal.Upload_Table import all

## GROUP Standard.Base.Output
   Creates a new database table from this in-memory table.

   Arguments:
   - connection: the database connection to use. The table will be created in
     the database and schema associated with this connection.
   - table_name: the name of the table to create.
   - primary_key: the names of the columns to use as the primary key. The first
     column from the table is used by default. If it is set to `Nothing` or an
     empty vector, no primary key will be created.
   - temporary: if set to `True`, the table will be temporary, meaning that it
     will be dropped once the `connection` is closed. Defaults to `False`.
   - on_problems: the behavior to use when encountering non-fatal problems.
     Defaults to reporting them as warning.

   ! Error Conditions

     - If a table with the given name already exists, then a
       `Table_Already_Exists` error is raised.
     - If a column type is not supported and is coerced to a similar supported
       type, an `Inexact_Type_Coercion` problem is reported according to the
       `on_problems` setting.
     - If a column type is not supported and there is no replacement (e.g.
       native Enso types), an `Unsupported_Type` error is raised.
     - If the provided primary key columns are not present in the source table,
       `Missing_Input_Columns` error is raised.
     - If the selected primary key columns are not unique, a
       `Non_Unique_Primary_Key` error is raised.
     - An `SQL_Error` may be reported if there is a failure on the database
       side.

     If an error has been raised, the table is not created (that may not always
     apply to `SQL_Error`).

   ? Dry Run if Output disabled

     If performing output actions is disabled, only a dry run is performed and
     no permanent changes occur. The operation checks for errors like missing
     columns, and returns a temporary table containing a sample of the input
     with a `Dry_Run_Operation` warning attached.

     More expensive checks, like clashing keys are checked only on the sample of
     rows, so errors may still occur when the output action is enabled.
@primary_key Widget_Helpers.make_column_name_vector_selector
Table.select_into_database_table : Connection -> Text -> Vector Text | Nothing -> Boolean -> Problem_Behavior -> Database_Table ! Table_Already_Exists | Inexact_Type_Coercion | Missing_Input_Columns | Non_Unique_Primary_Key | SQL_Error | Illegal_Argument
Table.select_into_database_table self connection (table_name : Text) primary_key=[self.columns.first.name] temporary=False on_problems=Problem_Behavior.Report_Warning =
    select_into_table_implementation self connection table_name primary_key temporary on_problems

## GROUP Standard.Base.Output
   Updates the target table with the contents of this table.

   Arguments:
   - target_table: the target table to update. It must be a database table.
   - update_action: specifies the update strategy - how to handle existing new
     and missing rows.
   - key_columns: the names of the columns to use identify correlate rows from
     the source table with rows in the target table. This key is used to
     determine if a row from the source table exists in the target or is a new
     one.
   - error_on_missing_columns: if set to `False` (the default), any columns
     missing from the source table will be left unchanged or initialized with
     the default value if inserting. If a missing column has no default value,
     this will trigger a `SQL_Error`. If set to `True`, any columns missing from
     the source will cause an error.
    - on_problems: the behavior to use when encountering non-fatal problems.

   ! Error Conditions

     - If `key_columns` are not present in either the source or target tables, a
       `Missing_Input_Columns` error is raised.
     - If the target table does not exist, a `Table_Not_Found` error is raised.
     - If `error_on_missing_columns` is set to `True` and a column is missing
       from the source table, a `Missing_Input_Columns` error is raised.
     - If the source table contains columns that are not present in the target
       table, an `Unmatched_Columns` error is raised.
     - If a column in the source table has a type that cannot be trivially
       widened to the corresponding column in the target table, a
       `Column_Type_Mismatch` error is raised. If the types do not match but can
       be widened, an `Inexact_Type_Coercion` is reported.
     - If `update_action` is `Insert` and a row with the same key already exists
       in the target table, a `Rows_Already_Present` error is raised.
     - If the `update_action` is `Update` and some rows in the source have no
       corresponding rows in the target table, a `Unmatched_Rows` error is
       raised.
     - If the source table contains multiple rows for the same key, a
       `Non_Unique_Primary_Key` error is raised.
     - If a row in the source table matches multiple rows in the target table, a
       `Multiple_Target_Rows_Matched_For_Update` error is raised.
     - If another database error occurs, an `SQL_Error` is raised.

     If any error was raised, the data in the target table is not modified.

   ? Type Widening

     Smaller types can be widened to a larger type, for example 32-bit integer
     column can be widened to a 64-bit integer column, but not vice versa
     (because larger numbers could not fit the smaller type and the type of the
     column in the target table cannot be changed).

   ? Dry Run if Output disabled

     If performing output actions is disabled, only a dry run is performed and
     no permanent changes occur. The operation checks for errors like missing
     columns or mismatched types and if successful, returns the target table
     unchanged with a `Dry_Run_Operation` warning attached.

     More expensive checks, like clashing keys or unmatched rows are checked
     only on a sample of rows, so errors may still occur when the output action
     is enabled.
Table.update_rows : Database_Table | Table -> Update_Action -> Vector Text | Nothing -> Boolean -> Problem_Behavior -> Database_Table ! Table_Not_Found | Unmatched_Columns | Missing_Input_Columns | Column_Type_Mismatch | SQL_Error | Illegal_Argument
Table.update_rows self (source_table : Database_Table | Table) (update_action : Update_Action = Update_Action.Update_Or_Insert) (key_columns : Vector | Nothing = Nothing) (error_on_missing_columns : Boolean = False) (on_problems : Problem_Behavior = Problem_Behavior.Report_Warning) =
    _ = [source_table, update_action, key_columns, error_on_missing_columns, on_problems]
    Error.throw (Illegal_Argument.Error "Table.update_rows modifies the underlying table, so it is only supported for Database tables - in-memory tables are immutable.")

## GROUP Standard.Base.Output
   Removes rows from a database table.

   It returns the count of the rows that have been deleted.

   This operation will only work if this table is a 'trivial' table reference,
   like returned by `Connection.query`, so it corresponds directly to a table
   existing in a Database. If the target table is transformed in any way, this
   correspondence is lost and the update operation cannot be performed on such a
   transformed object.

   Arguments:
   - key_values_to_delete: a table that contains the values of the primary key
     columns of the rows to delete. The table must have all columns specified as
     `key_columns`. Any other columns are ignored.
   - key_columns: the names of the columns that are used to correlate rows from
     `key_values_to_delete` with rows in the target table. Defaults to the
     primary key of the target table. If no primary key is set, this argument is
     required.
   - allow_duplicate_matches: specifies if the key values are expected to match
     more than one row each. Defaults to `False`, meaning that if a key value
     matches more than one row, an error will be reported and no rows will be
     deleted. This setting is meant to prevent additional deletion of too many
     rows.

   > Example

     Remove students that have graduated from the `students` table.

         students.delete_rows graduated_students key_columns=["student_id"]

   ! Error Conditions

     - If the provided primary key columns are not present in the source or
       target table, `Missing_Input_Columns` error is raised.
     - If `allow_duplicate_matches` is set to `False` (the default) and a key
       value matches more than one row,
       a `Multiple_Target_Rows_Matched_For_Update` error is raised.
     - An `SQL_Error` may be reported if there is a failure on the database
       side.

     If an error has been raised, the table is not modified (that may not always
     apply to `SQL_Error`).

     Note that it is possible for a row in `key_values_to_delete` to have no
     corresponding rows in the target table. That does not cause any error. This
     can be detected by checking the returned count of deleted rows.

   ? Dry Run if Output disabled

     If performing output actions is disabled, only a dry run is performed and
     no permanent changes occur. The operation checks for errors like missing
     columns, and returns the count of rows that would have been deleted by this
     operation, with a `Dry_Run_Operation` warning attached.
@key_columns Widget_Helpers.make_column_name_vector_selector
Table.delete_rows : Table | Database_Table -> Vector Text | Nothing -> Boolean -> Integer ! Missing_Input_Columns | SQL_Error
Table.delete_rows self (key_values_to_delete : Table | Database_Table) (key_columns=[]) (allow_duplicate_matches : Boolean = False) =
    _ = [key_values_to_delete, key_columns, allow_duplicate_matches]
    Error.throw (Illegal_Argument.Error "Table.delete_rows modifies the underlying table, so it is only supported for Database tables - in-memory tables are immutable. If you want to create a copy of this table with some rows removed based on a key from another table, you can use a Left Exclusive join, e.g. `table.join key_values_to_delete join_kind=Join_Kind.Left_Exclusive on=key_columns`.")
