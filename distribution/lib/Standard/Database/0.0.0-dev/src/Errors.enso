from Standard.Base import all

polyglot java import java.sql.SQLException

## Indicates that a requested operation is not supported, for example because a
   particular database backend does not support it.
type Unsupported_Database_Operation
    ## PRIVATE
    Error message

    ## PRIVATE
       Convert the SQL error to a textual representation.
    to_text : Text
    to_text self =
        "Unsupported database operation: " + self.message

    ## PRIVATE
       Pretty print the error.
    to_display_text : Text
    to_display_text self =
        "Unsupported database operation: " + self.message

type SQL_Error
    ## PRIVATE
       Indicates an error with executing a query, update or connecting to the
       database.

       Arguments:
       - java_exception: The underlying exception.
       - related_query (optional): A string representation of a query that this
         error is related to.
    Error java_exception related_query=Nothing

    ## PRIVATE
       Convert the SQL error to a textual representation.
    to_text : Text
    to_text self =
        query = if self.related_query.is_nothing.not then " [Query was: " + self.related_query + "]" else ""
        "There was an SQL error: " + self.java_exception.getMessage.to_text + "." + query

    ## PRIVATE
       Pretty print the SQL error.
    to_display_text : Text
    to_display_text self = self.to_text

    ## PRIVATE
       Throws an error as if a SQL Exception was thrown.
    throw_sql_error : Text -> SQL_Error
    throw_sql_error message =
        Error.throw (SQL_Error.Error (SQLException.new message))

type SQL_Timeout
    ## PRIVATE

       Indicates that an operation has timed out.

       Arguments:
       - java_exception: The underlying exception.
       - related_query (optional): A string representation of a query that this
         error is related to.
    Error java_exception related_query=Nothing

    ## PRIVATE
       Convert the timeout error to a textual representation.
    to_text : Text
    to_text self =
        query = if self.related_query.is_nothing.not then " [Query was: " + query + "]" else ""
        "The SQL connection timed out: " + self.java_exception.getMessage + "." + query

    ## PRIVATE
       Pretty print the timeout error.
    to_display_text : Text
    to_display_text self = self.to_text


## Signals that a name for a column or table is not supported.

   Arguments:
   - text: The name that is not supported.

   Currently the names can only include ASCII letters, numbers and the
   underscore. This is a temporary limitation simplifying name handling. It will
   be removed in a future version.
type Unsupported_Name
    ## PRIVATE
    Error text

    ## PRIVATE
       Creates a human-readable representation of the unsupported name error.
    to_text : Text
    to_text self =
        "The name " + self.text + " is not currently supported by the Database library."

    ## PRIVATE
       Pretty print the unsupported name error.
    to_display_text : Text
    to_display_text self = self.to_text


type Integrity_Error
    ## PRIVATE
       Signalizes that an operation tried using objects coming from different
       contexts.

       To use columns from different tables, you must first join them.
    Error object_description

    ## PRIVATE

       Creates a human-readable representation of the integrity error.
    to_text : Text
    to_text self = self.object_description + " comes from a different context."

    ## PRIVATE
       Pretty print the integrity error.
    to_display_text : Text
    to_display_text self = self.to_text

type Table_Not_Found
    ## PRIVATE
       Indicates that a table was not found in the database.

       Arguments:
       - table_name: The name of the table that was not found.
       - related_query_error: The error that was thrown when the query looking
         for the table was executed.
       - treated_as_query: Whether the table name was treated as a raw query
         string.
       - extra_message: An extra message to append.
    Error (name:Text) (related_query_error:SQL_Error|Nothing) (treated_as_query:Boolean) (extra_message:Text)

    ## PRIVATE
       Pretty print the table not found error.
    to_display_text : Text
    to_display_text self =
        base_repr = case self.treated_as_query of
            True -> "The name " + self.name + " was treated as a query, but the query failed with the following error: " + self.related_query_error.to_display_text + "; if you want to force to use that as a table name, wrap it in `SQL_Query.Table_Name`."
            False -> "Table " + self.name + " was not found in the database."
        base_repr + self.extra_message

    ## PRIVATE
       Creates a copy of this error with a changed `extra_message`.
    with_changed_extra_message : Table_Not_Found
    with_changed_extra_message self new_extra_message =
        Table_Not_Found.Error self.name self.related_query_error self.treated_as_query new_extra_message

type Table_Already_Exists
    ## PRIVATE
       Indicates that a table already exists in the database.

       Arguments:
       - table_name: The name of the table that already exists.
    Error table_name:Text

    ## PRIVATE
       Pretty print the table already exists error.
    to_display_text : Text
    to_display_text self = "Table " + self.table_name.pretty + " already exists in the database."

type Non_Unique_Primary_Key
    ## PRIVATE
       Indicates that the columns selected for the primary key do not uniquely
       identify rows in the table.

       Arguments:
       - primary_key: The primary key that is not unique.
       - clashing_primary_key: The values of an example key that corresponds to
         more than one row.
       - clashing_example_row_count: The number of rows that correspond to the
         example key.
    Error (primary_key : Vector Text) (clashing_primary_key : Vector Any) (clashing_example_row_count : Integer)

    ## PRIVATE
       Pretty print the non-unique primary key error.
    to_display_text : Text
    to_display_text self =
        "The primary key " + self.primary_key.to_display_text + " is not unique. The key "+self.clashing_primary_key.to_display_text+" corresponds to "+self.clashing_example_row_count.to_text+" rows."

type Unmatched_Rows
    ## PRIVATE
       Indicates that the `Update` operation encountered input rows that did not
       have any matching rows in the target table.
    Error (count : Integer)

    ## PRIVATE
       Pretty print the rows already present error.
    to_display_text : Text
    to_display_text self =
        "The `Update` operation encountered " + self.count.to_text + " input rows that did not have any matching rows in the target table. The operation has been rolled back. Consider `Update_Or_Insert` if you want to insert rows that do not match any existing rows."

type Rows_Already_Present
    ## PRIVATE
       Indicates that the `Insert` operation encountered input rows that already
       had matching rows in the target table.
    Error (count : Integer)

    ## PRIVATE
       Pretty print the rows already present error.
    to_display_text : Text
    to_display_text self =
        "The `Insert` operation encountered " + self.count.to_text + " input rows that already had matching rows in the target table. The operation has been rolled back."

type Multiple_Target_Rows_Matched_For_Update
    ## PRIVATE
       Indicates that the source table had rows matching multiple rows in the
       target table by the specified key.
    Error (example_key : Vector Any) (example_count : Integer)

    ## PRIVATE
       Pretty print the multiple target rows matched for update error.
    to_display_text : Text
    to_display_text self =
        "The update operation encountered input rows that matched multiple rows in the target table (for example, the key " + self.example_key.to_display_text + " matched " + self.example_count.to_text + " rows). The operation has been rolled back. You may need to use a more specific key for matching."
