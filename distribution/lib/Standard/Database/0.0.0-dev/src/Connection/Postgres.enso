from Standard.Base import all

from Standard.Base.Data.Numbers import Parse_Error

import Standard.Database.Data.Dialect
import Standard.Database.Connection.Connection
from Standard.Database.Connection.Credentials import Credentials
import Standard.Database.Connection.Connection_Options
import Standard.Database.Connection.SSL_Mode
from Standard.Database.Connection.SSL_Mode import all
import Standard.Database.Connection.Client_Certificate
import Standard.Database.Internal.Postgres.Pgpass

polyglot java import org.postgresql.Driver

type Postgres
    ## Connect to a PostgreSQL database.

       Arguments:
       - host: The hostname of the database server (defaults to localhost).
       - port: The port of the database server (defaults to 5432).
       - database: The database to connect to. If empty, the default database will be used.
       - credentials: The credentials to use for the connection (defaults to PGPass or No Authentication).
       - use_ssl: Whether to use SSL (defaults to `Prefer`).
       - client_cert: The client certificate to use or `Nothing` if not needed.
    type Postgres (host:Text=default_postgres_host) (port:Integer=default_postgres_port) (database:Text=default_postgres_database) (credentials:(Credentials|Nothing)=Nothing) (use_ssl:SSL_Mode=Prefer) (client_cert:(Client_Certificate|Nothing)=Nothing)

    ## Build the Connection resource.

       Arguments:
       - options: Overrides for the connection properties.
    connect : Connection_Options
    connect self options =
        if Driver.isRegistered.not then Driver.register

        properties = options.merge self.jdbc_properties
        Connection.create_jdbc_connection self.jdbc_url properties self.dialect

    ## Provides the jdbc url for the connection.
    jdbc_url : Text
    jdbc_url self =
        'jdbc:postgresql://' + self.host + ':' + self.port.to_text + (if self.database == '' then '' else '/' + self.database)

    ## Provides the properties for the connection.
    jdbc_properties : [Pair Text Text]
    jdbc_properties self =
        credentials = case self.credentials of
            Nothing ->
                env_user = Environment.get "PGUSER"
                env_password = Environment.get "PGPASSWORD"
                case Pair env_user env_password of
                    Pair Nothing Nothing ->
                        Pgpass.read self.host self.port self.database
                    Pair Nothing _ ->
                        Error.throw (Illegal_State_Error "PGPASSWORD is set, but PGUSER is not.")
                    Pair username Nothing ->
                        Pgpass.read self.host self.port self.database username
                    Pair username password ->
                        [Pair 'user' username, Pair 'password' password]
            Credentials username password ->
                [Pair 'user' username, Pair 'password' password]

        ssl_properties = ssl_mode_to_jdbc_properties self.use_ssl

        cert_properties = if self.client_cert.is_nothing then [] else
            self.client_cert.properties

        credentials + ssl_properties + cert_properties

    ## Provides the dialect needed for creating SQL statements.
    dialect : Dialect
    dialect self = Dialect.postgres

## PRIVATE
   Given an `SSL_Mode`, create the JDBC properties to secure a Postgres-based
   connection.
ssl_mode_to_jdbc_properties : SSL_Mode -> [Pair Text Text]
ssl_mode_to_jdbc_properties use_ssl = case use_ssl of
    Disable -> []
    Prefer -> [Pair 'sslmode' 'prefer']
    Require -> [Pair 'sslmode' 'require']
    Verify_CA cert_file ->
        if cert_file.is_nothing then [Pair 'sslmode' 'verify-ca'] else
            [Pair 'sslmode' 'verify-ca', Pair 'sslrootcert' (File.new cert_file).absolute.path]
    Full_Verification cert_file ->
        if cert_file.is_nothing then [Pair 'sslmode' 'verify-full'] else
            [Pair 'sslmode' 'verify-full', Pair 'sslrootcert' (File.new cert_file).absolute.path]

## PRIVATE
default_postgres_host = Environment.get_or_else "PGHOST" "localhost"

## PRIVATE
default_postgres_port =
    hardcoded_port = 5432
    case Environment.get "PGPORT" of
        Nothing -> hardcoded_port
        port -> Integer.parse port . catch Parse_Error (_->hardcoded_port)

## PRIVATE
default_postgres_database = Environment.get_or_else "PGDATABASE" ""
