from Standard.Base import all
import Standard.Base.Data.Numbers.Number_Parse_Error
import Standard.Base.Errors.Illegal_State.Illegal_State

import project.Connection.Client_Certificate.Client_Certificate
import project.Connection.Connection_Options.Connection_Options
import project.Connection.Credentials.Credentials
import project.Connection.SSL_Mode.SSL_Mode
import project.Internal.Postgres.Postgres_Connection
import project.Internal.Postgres.Pgpass

polyglot java import org.postgresql.Driver

type Postgres_Details
    ## Connect to a PostgreSQL database.

       Arguments:
       - host: The hostname of the database server (defaults to localhost).
       - port: The port of the database server (defaults to 5432).
       - database: The database to connect to. By default, it will use the
         database provided in `PGDATABASE` environment variable, or if that is
         not defined, it will fall back to a default database name: `postgres`.
       - schema: The schema to connect to. If empty, the default schema will be
         used.
       - credentials: The credentials to use for the connection (defaults to
         PGPass or No Authentication).
       - use_ssl: Whether to use SSL (defaults to `SSL_Mode.Prefer`).
       - client_cert: The client certificate to use or `Nothing` if not needed.
    Postgres (host:Text=default_postgres_host) (port:Integer=default_postgres_port) (database:Text=default_postgres_database) (schema:Text="") (credentials:(Credentials|Nothing)=Nothing) (use_ssl:SSL_Mode=SSL_Mode.Prefer) (client_cert:(Client_Certificate|Nothing)=Nothing)

    ## PRIVATE
       Build the Connection resource.

       Arguments:
       - options: Overrides for the connection properties.
    connect : Connection_Options -> Postgres_Connection.Postgres_Connection
    connect self options =
        if Driver.isRegistered.not then Driver.register

        properties = options.merge self.jdbc_properties

        ## Cannot use default argument values as gets in an infinite loop if you do.
        make_new database schema =
            Postgres_Details.Postgres self.host self.port (database.if_nothing self.database) (schema.if_nothing self.schema) self.credentials self.use_ssl self.client_cert . connect options

        Postgres_Connection.create self.jdbc_url properties make_new

    ## PRIVATE
       Provides the jdbc url for the connection.
    jdbc_url : Text
    jdbc_url self =
        'jdbc:postgresql://' + self.host + ':' + self.port.to_text + (if self.database == '' then '' else '/' + self.database)

    ## PRIVATE
       Provides the properties for the connection.
    jdbc_properties : [Pair Text Text]
    jdbc_properties self =
        credentials = case self.credentials of
            Nothing ->
                env_user = Environment.get "PGUSER"
                env_password = Environment.get "PGPASSWORD"
                case (Pair.new env_user env_password) of
                    Pair.Value Nothing Nothing ->
                        Pgpass.read self.host self.port self.database
                    Pair.Value Nothing _ ->
                        Error.throw (Illegal_State.Error "PGPASSWORD is set, but PGUSER is not.")
                    Pair.Value username Nothing ->
                        Pgpass.read self.host self.port self.database username
                    Pair.Value username password ->
                        [Pair.new 'user' username, Pair.new 'password' password]
            Credentials.Username_And_Password username password ->
                [Pair.new 'user' username, Pair.new 'password' password]

        ssl_properties = ssl_mode_to_jdbc_properties self.use_ssl

        cert_properties = if self.client_cert.is_nothing then [] else
            self.client_cert.properties

        (if self.schema == '' then [] else [Pair.new 'currentSchema' self.schema]) + credentials + ssl_properties + cert_properties

## PRIVATE
   Given an `SSL_Mode`, create the JDBC properties to secure a Postgres-based
   connection.
ssl_mode_to_jdbc_properties : SSL_Mode -> [Pair Text Text]
ssl_mode_to_jdbc_properties use_ssl = case use_ssl of
    SSL_Mode.Disable -> []
    SSL_Mode.Prefer -> [Pair.new 'sslmode' 'prefer']
    SSL_Mode.Require -> [Pair.new 'sslmode' 'require']
    SSL_Mode.Verify_CA cert_file ->
        if cert_file.is_nothing then [Pair.new 'sslmode' 'verify-ca'] else
            [Pair.new 'sslmode' 'verify-ca', Pair.new 'sslrootcert' (File.new cert_file).absolute.path]
    SSL_Mode.Full_Verification cert_file ->
        if cert_file.is_nothing then [Pair.new 'sslmode' 'verify-full'] else
            [Pair.new 'sslmode' 'verify-full', Pair.new 'sslrootcert' (File.new cert_file).absolute.path]

## PRIVATE
default_postgres_host = Environment.get "PGHOST" "localhost"

## PRIVATE
default_postgres_port =
    hardcoded_port = 5432
    case Environment.get "PGPORT" of
        Nothing -> hardcoded_port
        port -> Integer.parse port . catch Number_Parse_Error (_->hardcoded_port)

## PRIVATE
default_postgres_database = Environment.get "PGDATABASE" "postgres"
