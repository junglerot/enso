from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State
import Standard.Base.Runtime.Managed_Resource.Managed_Resource

import Standard.Base.Metadata.Widget
from Standard.Base.Metadata.Widget import Single_Choice, Vector_Editor
from Standard.Base.Metadata.Choice import Option
import Standard.Base.Metadata.Display

import Standard.Table.Data.Table.Table as Materialized_Table
import Standard.Table.Data.Type.Value_Type.Value_Type

import project.Data.Column_Description.Column_Description
import project.Data.SQL_Query.SQL_Query
import project.Data.SQL_Statement.SQL_Statement
import project.Data.SQL_Type.SQL_Type
import project.Data.Table.Table as Database_Table
import project.Data.Table as Database_Table_Module
import project.Internal.IR.Context.Context
import project.Internal.IR.SQL_Expression.SQL_Expression
import project.Internal.IR.Query.Query
import project.Internal.SQL_Type_Reference.SQL_Type_Reference
import project.Internal.Statement_Setter.Statement_Setter

from project.Internal.Result_Set import read_column, result_set_to_table
from project.Internal.JDBC_Connection import handle_sql_errors
from project.Errors import SQL_Error, Table_Not_Found, Table_Already_Exists
from project.Internal.Upload_Table import create_table_structure

polyglot java import java.lang.UnsupportedOperationException
polyglot java import java.util.UUID

type Connection
    ## PRIVATE

       A Database connection using a JDBC driver.

       Arguments:
       - jdbc_connection: the resource managing the underlying JDBC
         connection.
       - dialect: the dialect associated with the database we are connected to.
    Value jdbc_connection dialect

    ## PRIVATE
       Closes the connection releasing the underlying database resources
       immediately instead of waiting for them to be automatically released.

       The connection is not usable afterwards.
    close : Nothing
    close self = self.jdbc_connection.close


    ## PRIVATE
       Returns the list of databases (or catalogs) for the connection.
    databases : Vector Text
    databases self =
        self.jdbc_connection.with_metadata metadata->
            read_column metadata.getCatalogs "TABLE_CAT"

    ## PRIVATE
       Returns the name of the current database (or catalog).
    database : Text
    database self =
        self.jdbc_connection.with_connection connection->connection.getCatalog

    ## PRIVATE
       Returns a new Connection with the specified database set as default.

       Arguments:
        - database: The name of the database to connect to.
    set_database : Text -> Connection ! SQL_Error
    set_database self database =
        if database == self.database then self else
            SQL_Error.throw_sql_error "Changing database is not supported."

    ## PRIVATE
       Returns the list of schemas for the connection within the current database (or catalog).
    schemas : Vector Text
    schemas self =
        self.jdbc_connection.with_metadata metadata->
            read_column metadata.getSchemas "TABLE_SCHEM"

    ## PRIVATE
       Returns the name of the current schema.
    schema : Text
    schema self =
        self.jdbc_connection.with_connection .getSchema

    ## PRIVATE
       Returns a new Connection with the specified schema set as default.

       Arguments:
        - schema: The name of the schema to connect to.
    set_schema : Text -> Connection ! SQL_Error
    set_schema self schema =
        if schema == self.schema then self else
            SQL_Error.throw_sql_error "Changing schema is not supported."

    ## PRIVATE
       Gets a list of the table types
    table_types : [Text]
    table_types self =
        self.jdbc_connection.with_metadata metadata->
            read_column metadata.getTableTypes "TABLE_TYPE"

    ## Returns a materialized Table of all the matching views and tables.

       ? Temporary Tables

         Note that the temporary tables may be created in a different schema
         than the current one, so take this into account when filtering by schema.

       Arguments:
       - name_like: The table name pattern to search for. Supports SQL wildcards (`%`, `_`). Defaults to `Nothing` which
         means all tables are selected.
       - database: The database name to search in (default is current database).
       - schema: The schema name to search in (defaults to `Nothing`, meaning all
         schemas are searched).
       - types: The table types to search for. The list of possible values can
         be obtained using the `table_types` method. Defaults to a set of most
         commonly used table types, ignoring internal system tables or indices.
       - all_fields: Return all the fields in the metadata table.
    @types make_table_types_selector
    @schema make_schema_selector
    tables : Text -> Text -> Text -> Vector Text | Text | Nothing -> Boolean -> Materialized_Table
    tables self name_like=Nothing database=self.database schema=Nothing types=self.dialect.default_table_types all_fields=False =
        types_vector = case types of
            Nothing -> Nothing
            _ : Vector -> types
            _ -> [types]
        name_map = Map.from_vector [["TABLE_CAT", "Database"], ["TABLE_SCHEM", "Schema"], ["TABLE_NAME", "Name"], ["TABLE_TYPE", "Type"], ["REMARKS", "Description"], ["TYPE_CAT", "Type Database"], ["TYPE_SCHEM", "Type Schema"], ["TYPE_NAME", "Type Name"]]
        self.jdbc_connection.with_metadata metadata->
            table = Managed_Resource.bracket (metadata.getTables database schema name_like types_vector) .close result_set->
                result_set_to_table result_set self.dialect.make_column_fetcher_for_type
            renamed = table.rename_columns name_map
            if all_fields then renamed else
                renamed.select_columns ["Database", "Schema", "Name", "Type", "Description"]

    ## PRIVATE
       Set up a query returning a Table object, which can be used to work with
       data within the database or load it into memory.

       Arguments:
       - query: name of the table or sql statement to query.
         If supplied as `Text`, the name is checked against the `tables` list to
         determine if it is a table or a query.
       - alias: optionally specify a friendly alias for the query.

       ! Error Conditions

         - If provided with a `Raw_SQL` query or `Text` that looks like a query, if
           any SQL error occurs when executing the query, a `SQL_Error` error is
           raised.
         - If provided with a `Table_Name` or a text short-hand and the table is
           not found, a `Table_Not_Found` error is raised.
    @query make_table_name_selector
    query : Text | SQL_Query -> Text -> Database_Table ! Table_Not_Found | SQL_Error
    query self query alias="" = case query of
        _ : Text ->
            result = self.query alias=alias <|
                if (all_known_table_names self).contains query then (SQL_Query.Table_Name query) else
                    SQL_Query.Raw_SQL query
            result.catch SQL_Error sql_error->
                case self.dialect.is_probably_a_query query of
                    True -> result
                    False ->
                        Error.throw (Table_Not_Found.Error query sql_error treated_as_query=True extra_message="")
        SQL_Query.Raw_SQL raw_sql -> handle_sql_errors <|
            self.jdbc_connection.ensure_query_has_no_holes raw_sql . if_not_error <|
                columns = self.fetch_columns raw_sql Statement_Setter.null
                name = if alias == "" then (UUID.randomUUID.to_text) else alias
                ctx = Context.for_query raw_sql name
                Database_Table_Module.make_table self name columns ctx
        SQL_Query.Table_Name name ->
            result = handle_sql_errors <|
                ctx = Context.for_table name (if alias == "" then name else alias)
                statement = self.dialect.generate_sql (Query.Select Nothing ctx)
                statement_setter = self.dialect.get_statement_setter
                columns = self.fetch_columns statement statement_setter
                Database_Table_Module.make_table self name columns ctx
            result.catch SQL_Error sql_error->
                Error.throw (Table_Not_Found.Error name sql_error treated_as_query=False extra_message="")

    ## PRIVATE
       Execute the query and load the results into memory as a Table.

       Arguments:
       - query: name of the table or sql statement to query.
         If supplied as `Text`, the name is checked against the `tables` list to determine if it is a table or a query.
       - limit: the maximum number of rows to return.
    @query make_table_name_selector
    read : Text | SQL_Query -> Integer | Nothing -> Materialized_Table ! Table_Not_Found
    read self query limit=Nothing =
        self.query query . read max_rows=limit

    ## PRIVATE
       Creates a new empty table in the database and returns a query referencing
       the new table.

       Arguments:
       - table_name: the name of the table to create. If not provided, a random
         name will be generated for temporary tables. If `temporary=False`, then
         a name must be provided.
       - structure: the structure of the table, provided as either an existing
         `Table` (no data will be copied) or a `Vector` of `Column_Description`.
       - primary_key: the names of the columns to use as the primary key. The
         first column from the table is used by default. If it is set to
         `Nothing` or an empty vector, no primary key will be created.
       - temporary: if set to `True`, the table will be temporary, meaning that
         it will be dropped once the `connection` is closed. Defaults to
         `False`.
       - allow_existing: Defaults to `False`, meaning that if the table with the
         provided name already exists, an error will be raised. If set to `True`,
         the existing table will be returned instead. Note that the existing
         table is not guaranteed to have the same structure as the one provided.
       - on_problems: the behavior to use when encountering non-fatal problems.
         Defaults to reporting them as warning.

       ! Error Conditions

         - If a table with the given name already exists, then a
           `Table_Already_Exists` error is raised.
         - If a column type is not supported and is coerced to a similar
           supported type, an `Inexact_Type_Coercion` problem is reported
           according to the `on_problems` setting.
         - If a column type is not supported and there is no replacement (e.g.
           native Enso types), an `Unsupported_Type` error is raised.
         - If the provided primary key columns are not present in table
           structure provided, `Missing_Input_Columns` error is raised.
         - An `SQL_Error` may be reported if there is a failure on the database
           side.
    @structure make_structure_creator
    create_table : Text | Nothing -> Vector Column_Description | Database_Table | Materialized_Table -> Vector Text | Nothing -> Boolean -> Boolean -> Problem_Behavior -> Database_Table ! Table_Already_Exists
    create_table self (table_name : Text | Nothing = Nothing) (structure : Vector Column_Description | Database_Table | Materialized_Table) (primary_key : (Vector Text | Nothing) = [first_column_in_structure structure]) (temporary : Boolean = False) (allow_existing : Boolean = False) (on_problems:Problem_Behavior = Problem_Behavior.Report_Warning) =
        created_table_name = create_table_structure self table_name structure primary_key temporary allow_existing on_problems
        self.query (SQL_Query.Table_Name created_table_name)

    ## PRIVATE
       Internal read function for a statement with optional types.

       Arguments:
       - statement: SQL_Statement to execute.
       - column_type_suggestions: A vector of SQL type references that can act
         as suggested column types. By default, the overrides are respected and
         types that should be computed by the database are passed as `Nothing`
         to ensure that default `ResultSet` metadata is used for these columns.
       - last_row_only: If set true, only the last row of the query is fetched.
         Defaults to false.
    read_statement : SQL_Statement -> (Nothing | Vector SQL_Type_Reference) -> Boolean -> Materialized_Table
    read_statement self statement column_type_suggestions=Nothing last_row_only=False =
        type_overrides = self.dialect.get_type_mapping.prepare_type_overrides column_type_suggestions
        statement_setter = self.dialect.get_statement_setter
        self.jdbc_connection.with_prepared_statement statement statement_setter stmt->
            result_set_to_table stmt.executeQuery self.dialect.make_column_fetcher_for_type type_overrides last_row_only

    ## PRIVATE
       Given a prepared statement, gets the column names and types for the
       result set.
    fetch_columns : Text | SQL_Statement -> Statement_Setter -> Any
    fetch_columns self statement statement_setter =
        needs_execute_query = self.dialect.needs_execute_query_for_type_inference
        self.jdbc_connection.raw_fetch_columns statement needs_execute_query statement_setter

    ## PRIVATE
       ADVANCED

       Executes a raw update query. If the query was inserting, updating or
       deleting rows, the number of affected rows is returned; otherwise it
       returns 0 for other types of queries (like creating or altering tables).

       Arguments:
       - query: either raw SQL code as Text or an instance of SQL_Statement
         representing the query to execute.
    execute_update : Text | SQL_Statement -> Integer
    execute_update self query =
        statement_setter = self.dialect.get_statement_setter
        self.jdbc_connection.with_prepared_statement query statement_setter stmt->
            Panic.catch UnsupportedOperationException stmt.executeLargeUpdate _->
                stmt.executeUpdate

    ## PRIVATE
    drop_table : Text -> Nothing
    drop_table self table_name =
        self.execute_update (self.dialect.generate_sql (Query.Drop_Table table_name))

## PRIVATE
make_table_types_selector : Connection -> Widget
make_table_types_selector connection =
    Single_Choice values=(connection.table_types.map t-> Option t t.pretty)

## PRIVATE
make_schema_selector : Connection -> Widget
make_schema_selector connection =
    schemas_without_nothing = connection.schemas.filter Filter_Condition.Not_Nothing
    Single_Choice values=(schemas_without_nothing.map t-> Option t t.pretty)+[Option "any schema" "Nothing"]

## PRIVATE
all_known_table_names connection =
    tables = connection.tables name_like=Nothing database=connection.database schema=Nothing types=Nothing all_fields=False
    tables.at "Name" . to_vector

## PRIVATE
make_table_name_selector : Connection -> Widget
make_table_name_selector connection =
    tables_to_display = connection.tables.at "Name" . to_vector
    Single_Choice display=Display.Always values=(tables_to_display.map t-> Option t t.pretty)

## PRIVATE
make_structure_creator : Widget
make_structure_creator =
    item_editor = Single_Choice display=Display.Always values=[Option "new column" "(Column_Description.Value)"]
    Vector_Editor item_editor=item_editor item_default=item_editor.values.first.value display=Display.Always

## PRIVATE
first_column_in_structure structure = case structure of
    _ : Vector -> structure.first.name
    _ -> structure.column_names.first
