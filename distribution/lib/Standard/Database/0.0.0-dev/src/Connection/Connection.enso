from Standard.Base import all
import Standard.Base.Errors.Common.Dry_Run_Operation
import Standard.Base.Errors.Common.Forbidden_Operation
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Metadata.Display
import Standard.Base.Metadata.Widget
import Standard.Base.Runtime.Context as Execution_Context
import Standard.Base.Runtime.Managed_Resource.Managed_Resource
import Standard.Base.Runtime.Ref.Ref
from Standard.Base.Metadata.Choice import Option
from Standard.Base.Metadata.Widget import Single_Choice, Vector_Editor

import Standard.Table.Data.Table.Table as Materialized_Table
import Standard.Table.Data.Type.Value_Type.Value_Type
import Standard.Table.Internal.Column_Naming_Helper.Column_Naming_Helper

import project.Data.Column_Description.Column_Description
import project.Data.Dialect.Dialect
import project.Data.SQL_Query.SQL_Query
import project.Data.SQL_Statement.SQL_Statement
import project.Data.SQL_Type.SQL_Type
import project.Data.Table as Database_Table_Module
import project.Data.Table.Table as Database_Table
import project.Internal.Connection.Entity_Naming_Properties.Entity_Naming_Properties
import project.Internal.Hidden_Table_Registry
import project.Internal.IR.Context.Context
import project.Internal.IR.Query.Query
import project.Internal.IR.SQL_Expression.SQL_Expression
import project.Internal.SQL_Type_Reference.SQL_Type_Reference
import project.Internal.SQL_Warning_Helper
import project.Internal.Statement_Setter.Statement_Setter
import project.Internal.Table_Naming_Helper.Table_Naming_Helper
from project.Errors import SQL_Error, Table_Already_Exists, Table_Not_Found
from project.Internal.JDBC_Connection import handle_sql_errors, JDBC_Connection
from project.Internal.Result_Set import read_column, result_set_to_table
from project.Internal.Upload_Table import create_table_implementation, first_column_name_in_structure

polyglot java import java.lang.UnsupportedOperationException
polyglot java import java.util.UUID

type Connection
    ## PRIVATE

       A Database connection using a JDBC driver.

       Arguments:
       - jdbc_connection: the resource managing the underlying JDBC
         connection.
       - dialect: the dialect associated with the database we are connected to.
       - entity_naming_properties: a helper allowing to manage properties of
         entity naming rules of the given backend.
       - supports_large_update: whether the connection should try to use
         `executeLargeUpdate`. Set to `True` by default and if the operation
         fails with `UnsupportedOperationException`, it is updated to be
         `False`.
       - hidden_table_registry: a registry of hidden tables that are not
         shown to the user, but are used internally by the dry-run system.
    Value jdbc_connection dialect (entity_naming_properties : Entity_Naming_Properties) (supports_large_update : Ref Boolean) (hidden_table_registry : Hidden_Table_Registry.Hidden_Table_Registry)

    ## PRIVATE
       Constructs a new Connection.

       Arguments:
       - jdbc_connection: the resource managing the underlying JDBC
         connection.
       - dialect: the dialect associated with the database we are connected to.
       - try_large_update: whether the connection should try to use
         `executeLargeUpdate`.
    new : JDBC_Connection -> Dialect -> Entity_Naming_Properties -> Boolean -> Connection
    new jdbc_connection dialect entity_naming_properties try_large_update=True =
        registry = Hidden_Table_Registry.new
        Connection.Value jdbc_connection dialect entity_naming_properties (Ref.new try_large_update) registry

    ## PRIVATE
       Closes the connection releasing the underlying database resources
       immediately instead of waiting for them to be automatically released.

       The connection is not usable afterwards.
    close : Nothing
    close self = self.jdbc_connection.close


    ## PRIVATE
       Returns the list of databases (or catalogs) for the connection.
    databases : Vector Text
    databases self =
        self.jdbc_connection.with_metadata metadata->
            read_column metadata.getCatalogs "TABLE_CAT"

    ## PRIVATE
       Returns the name of the current database (or catalog).
    database : Text
    database self =
        self.jdbc_connection.with_connection connection->connection.getCatalog

    ## PRIVATE
       Returns a new Connection with the specified database set as default.

       Arguments:
        - database: The name of the database to connect to.
    set_database : Text -> Connection ! SQL_Error
    set_database self database =
        if database == self.database then self else
            SQL_Error.throw_sql_error "Changing database is not supported."

    ## PRIVATE
       Returns the list of schemas for the connection within the current database (or catalog).
    schemas : Vector Text
    schemas self =
        self.jdbc_connection.with_metadata metadata->
            read_column metadata.getSchemas "TABLE_SCHEM"

    ## PRIVATE
       Returns the name of the current schema.
    schema : Text
    schema self =
        self.jdbc_connection.with_connection .getSchema

    ## PRIVATE
       Returns a new Connection with the specified schema set as default.

       Arguments:
        - schema: The name of the schema to connect to.
    set_schema : Text -> Connection ! SQL_Error
    set_schema self schema =
        if schema == self.schema then self else
            SQL_Error.throw_sql_error "Changing schema is not supported."

    ## PRIVATE
       Gets a list of the table types
    table_types : Vector Text
    table_types self =
        self.jdbc_connection.with_metadata metadata->
            read_column metadata.getTableTypes "TABLE_TYPE"

    ## GROUP Standard.Base.Metadata
       Returns a materialized Table of all the matching views and tables.

       ? Temporary Tables

         Note that the temporary tables may be created in a different schema
         than the current one, so take this into account when filtering by schema.

       Arguments:
       - name_like: The table name pattern to search for. Supports SQL wildcards (`%`, `_`). Defaults to `Nothing` which
         means all tables are selected.
       - database: The database name to search in (default is current database).
       - schema: The schema name to search in (defaults to `Nothing`, meaning all
         schemas are searched).
       - types: The table types to search for. The list of possible values can
         be obtained using the `table_types` method. Defaults to a set of most
         commonly used table types, ignoring internal system tables or indices.
       - all_fields: Return all the fields in the metadata table.
    @types make_table_types_selector
    @schema make_schema_selector
    tables : Text -> Text -> Text -> Vector Text | Text | Nothing -> Boolean -> Materialized_Table
    tables self name_like=Nothing database=self.database schema=Nothing types=self.dialect.default_table_types all_fields=False =
        self.get_tables_advanced name_like=name_like database=database schema=schema types=types all_fields=all_fields include_hidden=False

    ## PRIVATE
       A helper that allows to access all tables in a database, including hidden
       ones.

       Later, once nodes can have expandable arguments, we can merge this with
       `tables`, marking the `include_hidden` argument as expandable.
    get_tables_advanced self name_like=Nothing database=self.database schema=Nothing types=self.dialect.default_table_types all_fields=False include_hidden=False =
        self.maybe_run_maintenance
        types_vector = case types of
            Nothing -> Nothing
            _ : Vector -> types
            _ -> [types]
        name_map = Map.from_vector [["TABLE_CAT", "Database"], ["TABLE_SCHEM", "Schema"], ["TABLE_NAME", "Name"], ["TABLE_TYPE", "Type"], ["REMARKS", "Description"], ["TYPE_CAT", "Type Database"], ["TYPE_SCHEM", "Type Schema"], ["TYPE_NAME", "Type Name"]]
        result = self.jdbc_connection.with_metadata metadata->
            table = Managed_Resource.bracket (metadata.getTables database schema name_like types_vector) .close result_set->
                result_set_to_table result_set self.dialect.make_column_fetcher_for_type
            renamed = table.rename_columns name_map
            if all_fields then renamed else
                renamed.select_columns ["Database", "Schema", "Name", "Type", "Description"]
        case include_hidden of
            True -> result
            False ->
                hidden_tables = self.hidden_table_registry.list_hidden_tables
                result.filter "Name" (Filter_Condition.Not_In hidden_tables)

    ## PRIVATE
       Checks if the table with the given name exists in the database.
    table_exists : Text -> Boolean
    table_exists self table_name =
        # We fetch tables whose name is like the requested `table_name`.
        tables = self.get_tables_advanced name_like=table_name database=self.database schema=Nothing types=Nothing all_fields=False include_hidden=True
        ## If the name contains special patterns, this may match more than the
           desired table so instead of an `not_empty` check, we check if the
           exact name is contained.
        tables.at "Name" . to_vector . contains table_name

    ## PRIVATE
       Set up a query returning a Table object, which can be used to work with
       data within the database or load it into memory.

       Arguments:
       - query: name of the table or sql statement to query.
         If supplied as `Text`, the name is checked against the `tables` list to
         determine if it is a table or a query.
       - alias: optionally specify a friendly alias for the query.

       ! Error Conditions

         - If provided with a `Raw_SQL` query or `Text` that looks like a query, if
           any SQL error occurs when executing the query, a `SQL_Error` error is
           raised.
         - If provided with a `Table_Name` or a text short-hand and the table is
           not found, a `Table_Not_Found` error is raised.
    @query make_table_name_selector
    query : Text | SQL_Query -> Text -> Database_Table ! Table_Not_Found | SQL_Error
    query self query alias="" = case query of
        _ : Text ->
            result = self.query alias=alias <|
                if self.table_exists query then (SQL_Query.Table_Name query) else
                    SQL_Query.Raw_SQL query
            result.catch SQL_Error sql_error->
                case self.dialect.is_probably_a_query query of
                    True -> result
                    False ->
                        Error.throw (Table_Not_Found.Error query sql_error treated_as_query=True extra_message="")
        SQL_Query.Raw_SQL raw_sql -> handle_sql_errors <| alias.if_not_error <|
            self.jdbc_connection.ensure_query_has_no_holes raw_sql . if_not_error <|
                columns = self.fetch_columns raw_sql Statement_Setter.null
                name = if alias == "" then (UUID.randomUUID.to_text) else alias
                ctx = Context.for_query raw_sql name
                ## Any problems are treated as errors - e.g. if the query
                   contains clashing column names, it may very likely lead to
                   data corruption. Our renaming mechanism is used to fix issues
                   with existing tables with problematic names, but that
                   mechanism will only provide a false-sense of security in case
                   of a query, whereas a query like `SELECT 1 AS "A", 2 AS "A"`
                   will actually result in both columns `A` and `A 1` containing
                   the value 1; and value 2 being lost. That is why such queries
                   must fail.
                r = Database_Table_Module.make_table self name columns ctx on_problems=Problem_Behavior.Report_Error
                r.catch Any error->
                    Error.throw (Illegal_Argument.Error "The provided custom SQL query is invalid and may suffer data corruption when being processed, especially if it contains aliased column names, it may not be interpreted correctly. Please ensure the names are unique. The original error was: "+error.to_display_text cause=error)
        SQL_Query.Table_Name name ->
            case self.table_naming_helper.is_table_name_valid name of
                True -> make_table_for_name self name alias
                False ->
                    Error.throw (Table_Not_Found.Error name related_query_error=Nothing treated_as_query=False extra_message="")


    ## PRIVATE
       Execute the query and load the results into memory as a Table.

       Arguments:
       - query: name of the table or sql statement to query.
         If supplied as `Text`, the name is checked against the `tables` list to determine if it is a table or a query.
       - limit: the maximum number of rows to return.

       ? Side Effects

         Note that the `read` method is running without restrictions when the
         output context is disabled, but it can technically cause side effects,
         if it is provided with a DML query. Usually it is preferred to use
         `execute_update` for DML queries, or if they are supposed to return
         results, the `read` should be wrapped in an execution context check.
    @query make_table_name_selector
    read : Text | SQL_Query -> Integer | Nothing -> Materialized_Table ! Table_Not_Found
    read self query limit=Nothing =
        self.query query . read max_rows=limit

    ## PRIVATE
       Creates a new empty table in the database and returns a query referencing
       the new table.

       Arguments:
       - table_name: the name of the table to create.
       - structure: the structure of the table, provided as either an existing
         `Table` (no data will be copied) or a `Vector` of `Column_Description`.
       - primary_key: the names of the columns to use as the primary key. The
         first column from the table is used by default. If it is set to
         `Nothing` or an empty vector, no primary key will be created.
       - temporary: if set to `True`, the table will be temporary, meaning that
         it will be dropped once the `connection` is closed. Defaults to
         `False`.
       - allow_existing: Defaults to `False`, meaning that if the table with the
         provided name already exists, an error will be raised. If set to `True`,
         the existing table will be returned instead. Note that the existing
         table is not guaranteed to have the same structure as the one provided.
       - on_problems: the behavior to use when encountering non-fatal problems.
         Defaults to reporting them as warning.

       ! Error Conditions

         - If a table with the given name already exists, then a
           `Table_Already_Exists` error is raised.
         - If a column type is not supported and is coerced to a similar
           supported type, an `Inexact_Type_Coercion` problem is reported
           according to the `on_problems` setting.
         - If a column type is not supported and there is no replacement (e.g.
           native Enso types), an `Unsupported_Type` error is raised.
         - If the provided primary key columns are not present in table
           structure provided, `Missing_Input_Columns` error is raised.
         - An `SQL_Error` may be reported if there is a failure on the database
           side.

       ? Dry Run if Output disabled

         If performing output actions is disabled, only a dry run is performed
         and no permanent changes occur. The operation will test for errors
         (like missing columns) and if successful, return a temporary table with
         a `Dry_Run_Operation` warning attached.
    @structure make_structure_creator
    create_table : Text  -> Vector Column_Description | Database_Table | Materialized_Table -> Vector Text | Nothing -> Boolean -> Boolean -> Problem_Behavior -> Database_Table ! Table_Already_Exists
    create_table self (table_name : Text) (structure : Vector Column_Description | Database_Table | Materialized_Table) (primary_key : (Vector Text | Nothing) = [first_column_name_in_structure structure]) (temporary : Boolean = False) (allow_existing : Boolean = False) (on_problems:Problem_Behavior = Problem_Behavior.Report_Warning) =
        create_table_implementation self table_name structure primary_key temporary allow_existing on_problems

    ## PRIVATE
       Internal read function for a statement with optional types.

       Arguments:
       - statement: SQL_Statement to execute.
       - column_type_suggestions: A vector of SQL type references that can act
         as suggested column types. By default, the overrides are respected and
         types that should be computed by the database are passed as `Nothing`
         to ensure that default `ResultSet` metadata is used for these columns.
       - last_row_only: If set true, only the last row of the query is fetched.
         Defaults to false.
    read_statement : SQL_Statement -> (Nothing | Vector SQL_Type_Reference) -> Boolean -> Materialized_Table
    read_statement self statement column_type_suggestions=Nothing last_row_only=False =
        type_overrides = self.dialect.get_type_mapping.prepare_type_overrides column_type_suggestions
        statement_setter = self.dialect.get_statement_setter
        self.jdbc_connection.with_prepared_statement statement statement_setter stmt->
            rs = stmt.executeQuery
            SQL_Warning_Helper.process_warnings stmt <|
                result_set_to_table rs self.dialect.make_column_fetcher_for_type type_overrides last_row_only

    ## PRIVATE
       Given a prepared statement, gets the column names and types for the
       result set.
    fetch_columns : Text | SQL_Statement -> Statement_Setter -> Any
    fetch_columns self statement statement_setter =
        needs_execute_query = self.dialect.needs_execute_query_for_type_inference
        self.jdbc_connection.raw_fetch_columns statement needs_execute_query statement_setter

    ## PRIVATE
       ADVANCED

       Executes a raw update query. If the query was inserting, updating or
       deleting rows, the number of affected rows is returned; otherwise it
       returns 0 for other types of queries (like creating or altering tables).

       Arguments:
       - query: either raw SQL code as Text or an instance of SQL_Statement
         representing the query to execute.
    execute_update : Text | SQL_Statement -> Integer
    execute_update self query =
        if Execution_Context.Output.is_enabled.not then Error.throw (Forbidden_Operation.Error "Executing update queries is forbidden as the Output context is disabled.") else
            statement_setter = self.dialect.get_statement_setter
            self.jdbc_connection.with_prepared_statement query statement_setter stmt->
                result = case self.supports_large_update.get of
                    True -> Panic.catch UnsupportedOperationException stmt.executeLargeUpdate _->
                        self.supports_large_update.put False
                        stmt.executeUpdate
                    False -> stmt.executeUpdate
                SQL_Warning_Helper.process_warnings stmt <|
                    result

    ## PRIVATE
       Drops a table.

       Arguments:
       - table_name: the name of the table to drop.
       - if_exists: if set to `True`, the operation will not fail if the table
         does not exist. Defaults to `False`.
    drop_table : Text -> Boolean -> Nothing
    drop_table self table_name if_exists=False =
        self.execute_update (self.dialect.generate_sql (Query.Drop_Table table_name if_exists))

    ## PRIVATE
       Removes all rows from a table.

       Arguments:
       - table_name: the name of the table to truncate.
    truncate_table : Text -> Nothing ! Table_Not_Found
    truncate_table self table_name =
        ensure_exists = self.query (SQL_Query.Table_Name table_name)
        ensure_exists.if_not_error <|
            self.execute_update (self.dialect.generate_sql (Query.Truncate_Table table_name))

    ## PRIVATE
       Returns the base `Connection` instance.

       Used, so that all internal helper functions do not need to be replicated
       on the 'subclasses'.
    base_connection : Connection
    base_connection self = self

    ## PRIVATE
       If no thread (including the current one) is currently running operations
       on the connection, maintenance will be performed.

       Currently, this consists of removing dry run tables that are no longer
       used.

       This method should be run by most database operations to ensure that
       unused tables are cleaned at some point.

       All errors are swallowed and not propagated, so it is safe to call this
       method wherever. There is no point of calling this method inside of
       critical sections as then it will not do anything.
    maybe_run_maintenance self =
        callback _ =
            Hidden_Table_Registry.run_maintenance_table_cleanup self
        self.jdbc_connection.run_maintenance_action_if_possible callback

    ## PRIVATE
       Returns a helper for checking and generating table names.
    table_naming_helper : Table_Naming_Helper
    table_naming_helper self = Table_Naming_Helper.Value self

    ## PRIVATE
       Returns a helper for checking and generating column names.
    column_naming_helper : Column_Naming_Helper
    column_naming_helper self =
        column_naming_properties = self.entity_naming_properties.for_column_names
        generated_column_naming_properties = self.entity_naming_properties.for_generated_column_names
        Column_Naming_Helper.Value column_naming_properties generated_column_naming_properties

    ## PRIVATE
       Creates a Table reference that refers to a table with the given name.

       Once all references to the table with this name are destroyed, the table
       will be marked for removal and dropped at the next maintenance.
    internal_allocate_dry_run_table : Text -> Database_Table
    internal_allocate_dry_run_table self table_name =
        ref = self.hidden_table_registry.make_reference table_name
        make_table_for_name self table_name table_name ref

## PRIVATE
make_table_types_selector : Connection -> Widget
make_table_types_selector connection =
    Single_Choice values=(connection.table_types.map t-> Option t t.pretty)

## PRIVATE
make_schema_selector : Connection -> Widget
make_schema_selector connection =
    schemas_without_nothing = connection.schemas.filter Filter_Condition.Not_Nothing
    Single_Choice values=(schemas_without_nothing.map t-> Option t t.pretty)+[Option "any schema" "Nothing"]

## PRIVATE
make_table_name_selector : Connection -> Widget
make_table_name_selector connection =
    tables_to_display = connection.tables.at "Name" . to_vector
    Single_Choice display=Display.Always values=(tables_to_display.map t-> Option t t.pretty)

## PRIVATE
make_structure_creator : Widget
make_structure_creator =
    item_editor = Single_Choice display=Display.Always values=[Option "new column" "(Column_Description.Value)"]
    Vector_Editor item_editor=item_editor item_default=item_editor.values.first.value display=Display.Always

## PRIVATE
make_table_for_name connection name alias internal_temporary_keep_alive_reference=Nothing =
    result = handle_sql_errors <|
        ctx = Context.for_table name (if alias == "" then name else alias) internal_temporary_keep_alive_reference
        statement = connection.dialect.generate_sql (Query.Select Nothing ctx)
        statement_setter = connection.dialect.get_statement_setter
        columns = connection.fetch_columns statement statement_setter
        ## In case of accessing an existing table, we assume that column names
           are distinguishable by the backend, so any issues that are caught
           only affect Enso columns, and just renaming Enso columns is enough to
           fix that - so we are good with just attaching the problems as a
           warning. We do not want to fail, as we do want to allow the user to
           access any table already present in the database.
        Database_Table_Module.make_table connection name columns ctx on_problems=Problem_Behavior.Report_Warning
    result.catch SQL_Error sql_error->
        Error.throw (Table_Not_Found.Error name sql_error treated_as_query=False extra_message="")
