package org.enso.syntax.text.spec

import org.enso.flexer
import org.enso.flexer.State
import org.enso.syntax.text.AST

import scala.annotation.tailrec

final class __Parser__ extends flexer.Parser[AST.Module] {

  final object Word {
    def onFirstWord(word: String => AST.Ident): Unit =
      logger.trace_ {
        onFirstWord(word(currentMatch))
      }

    def onFirstWord(ast: AST.Ident): Unit =
      logger.trace {
        result.app(ast)
        state.begin(SEEN_FIRST_WORD)
      }

    def onSpacedWord(word: String => AST.Ident): Unit =
      logger.trace_ {
        onSpacedWord(word(currentMatch.stripLeading()))
      }

    def onSpacedWord(ast: AST.Ident): Unit =
      logger.trace {
        result.app(ast)
      }

    def onNoErrSuffixFirstWord(): Unit =
      logger.trace {
        submit()
      }

    def onNoErrSuffix(): Unit =
      logger.trace {
        onNoErrSuffixFirstWord()
        state.end()
      }

    def onErrSuffixFirstWord(): Unit =
      logger.trace {
        val ast = AST.Invalid.Unrecognized(currentMatch)
        result.app(ast)
      }

    def onErrSuffix(): Unit =
      logger.trace {
        onNoErrSuffixFirstWord()
        state.end()
      }

    def submit(): Unit = logger.trace {}

    val SEEN_FIRST_WORD: State = state.define("Inside Word")
  }

  final object result {

    var current: Option[AST]     = None
    var stack: List[Option[AST]] = Nil

    def push(): Unit =
      logger.trace {
        logger.log(s"Pushed: $current")
        stack +:= current
        current = None
      }

    def pop(): Unit =
      logger.trace {
        current = stack.head
        stack   = stack.tail
        logger.log(s"New result: ${current.map(_.show()).getOrElse("None")}")
      }

    def app(fn: String => AST): Unit =
      app(fn(currentMatch))

    def app(ast: AST): Unit =
      logger.trace {
        current = Some(current match {
          case None    => ast
          case Some(r) => AST.App.Prefix(r, ast)
        })
      }

    def last(): Option[AST] = {
      @tailrec
      def go(ast: AST): AST =
        ast match {
          case AST.App.Prefix.any(t) => go(t.arg)
          case t                     => t
        }
      current.map(go)
    }
  }

  override def getResult() =
    result.current.flatMap {
      case AST.Module.any(mod) => Some(mod)
      case _                   => None
    }

  stateDefs.update(0, nextState0)

  def nextState0(state: Int): Int =
    state match {
      case 0 => state0_0
      case 1 => state0_1
      case 2 => state0_2
      case 3 => state0_3
      case 4 => state0_4
      case 5 => state0_5
      case 6 => state0_6
    }

  def state0_0 =
    reader.charCode match {
      case -1 => 1
      case (0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 |
          15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 |
          29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 |
          43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 |
          57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 |
          71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 |
          85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96) =>
        2
      case 97 => 3
      case 98 => 4
      case (99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 |
          110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 |
          121 | 122 | 123 | 124 | 125 | 126 | 127 | 128 | 129 | 130 | 131 |
          132 | 133 | 134 | 135 | 136 | 137 | 138 | 139 | 140 | 141 | 142 |
          143 | 144 | 145 | 146 | 147 | 148 | 149 | 150 | 151 | 152 | 153 |
          154 | 155 | 156 | 157 | 158 | 159 | 160 | 161 | 162 | 163 | 164 |
          165 | 166 | 167 | 168 | 169 | 170 | 171 | 172 | 173 | 174 | 175 |
          176 | 177 | 178 | 179 | 180 | 181 | 182 | 183 | 184 | 185 | 186 |
          187 | 188 | 189 | 190 | 191 | 192 | 193 | 194 | 195 | 196 | 197 |
          198 | 199 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 |
          209 | 210 | 211 | 212 | 213 | 214 | 215 | 216 | 217 | 218 | 219 |
          220 | 221 | 222 | 223 | 224 | 225 | 226 | 227 | 228 | 229 | 230 |
          231 | 232 | 233 | 234 | 235 | 236 | 237 | 238 | 239 | 240 | 241 |
          242 | 243 | 244 | 245 | 246 | 247 | 248 | 249 | 250 | 251 | 252 |
          253 | 254 | 255) =>
        2
      case (charCode @ _) =>
        if (charCode.<=(-2))
          -2
        else
          2
    }

  def state0_1 = state.call(group0_rule2)

  def state0_2 = state.call(group0_rule3)

  def state0_3 =
    reader.charCode match {
      case (-1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |
          14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 |
          28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 |
          42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 |
          56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 |
          70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 |
          84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96) =>
        state.call(group0_rule0)
      case 97 => 5
      case (98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 |
          109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 |
          120 | 121 | 122 | 123 | 124 | 125 | 126 | 127 | 128 | 129 | 130 |
          131 | 132 | 133 | 134 | 135 | 136 | 137 | 138 | 139 | 140 | 141 |
          142 | 143 | 144 | 145 | 146 | 147 | 148 | 149 | 150 | 151 | 152 |
          153 | 154 | 155 | 156 | 157 | 158 | 159 | 160 | 161 | 162 | 163 |
          164 | 165 | 166 | 167 | 168 | 169 | 170 | 171 | 172 | 173 | 174 |
          175 | 176 | 177 | 178 | 179 | 180 | 181 | 182 | 183 | 184 | 185 |
          186 | 187 | 188 | 189 | 190 | 191 | 192 | 193 | 194 | 195 | 196 |
          197 | 198 | 199 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 |
          208 | 209 | 210 | 211 | 212 | 213 | 214 | 215 | 216 | 217 | 218 |
          219 | 220 | 221 | 222 | 223 | 224 | 225 | 226 | 227 | 228 | 229 |
          230 | 231 | 232 | 233 | 234 | 235 | 236 | 237 | 238 | 239 | 240 |
          241 | 242 | 243 | 244 | 245 | 246 | 247 | 248 | 249 | 250 | 251 |
          252 | 253 | 254 | 255) =>
        state.call(group0_rule0)
      case (charCode @ _) =>
        if (charCode.<=(-2))
          state.call(group0_rule0)
        else
          state.call(group0_rule0)
    }

  def state0_4 =
    reader.charCode match {
      case (-1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |
          14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 |
          28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 |
          42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 |
          56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 |
          70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 |
          84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 |
          97) =>
        state.call(group0_rule1)
      case 98 => 6
      case (99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 |
          110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 |
          121 | 122 | 123 | 124 | 125 | 126 | 127 | 128 | 129 | 130 | 131 |
          132 | 133 | 134 | 135 | 136 | 137 | 138 | 139 | 140 | 141 | 142 |
          143 | 144 | 145 | 146 | 147 | 148 | 149 | 150 | 151 | 152 | 153 |
          154 | 155 | 156 | 157 | 158 | 159 | 160 | 161 | 162 | 163 | 164 |
          165 | 166 | 167 | 168 | 169 | 170 | 171 | 172 | 173 | 174 | 175 |
          176 | 177 | 178 | 179 | 180 | 181 | 182 | 183 | 184 | 185 | 186 |
          187 | 188 | 189 | 190 | 191 | 192 | 193 | 194 | 195 | 196 | 197 |
          198 | 199 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 |
          209 | 210 | 211 | 212 | 213 | 214 | 215 | 216 | 217 | 218 | 219 |
          220 | 221 | 222 | 223 | 224 | 225 | 226 | 227 | 228 | 229 | 230 |
          231 | 232 | 233 | 234 | 235 | 236 | 237 | 238 | 239 | 240 | 241 |
          242 | 243 | 244 | 245 | 246 | 247 | 248 | 249 | 250 | 251 | 252 |
          253 | 254 | 255) =>
        state.call(group0_rule1)
      case (charCode @ _) =>
        if (charCode.<=(-2))
          state.call(group0_rule1)
        else
          state.call(group0_rule1)
    }

  def state0_5 =
    reader.charCode match {
      case (-1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |
          14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 |
          28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 |
          42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 |
          56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 |
          70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 |
          84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96) =>
        state.call(group0_rule0)
      case 97 => 5
      case (98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 |
          109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 |
          120 | 121 | 122 | 123 | 124 | 125 | 126 | 127 | 128 | 129 | 130 |
          131 | 132 | 133 | 134 | 135 | 136 | 137 | 138 | 139 | 140 | 141 |
          142 | 143 | 144 | 145 | 146 | 147 | 148 | 149 | 150 | 151 | 152 |
          153 | 154 | 155 | 156 | 157 | 158 | 159 | 160 | 161 | 162 | 163 |
          164 | 165 | 166 | 167 | 168 | 169 | 170 | 171 | 172 | 173 | 174 |
          175 | 176 | 177 | 178 | 179 | 180 | 181 | 182 | 183 | 184 | 185 |
          186 | 187 | 188 | 189 | 190 | 191 | 192 | 193 | 194 | 195 | 196 |
          197 | 198 | 199 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 |
          208 | 209 | 210 | 211 | 212 | 213 | 214 | 215 | 216 | 217 | 218 |
          219 | 220 | 221 | 222 | 223 | 224 | 225 | 226 | 227 | 228 | 229 |
          230 | 231 | 232 | 233 | 234 | 235 | 236 | 237 | 238 | 239 | 240 |
          241 | 242 | 243 | 244 | 245 | 246 | 247 | 248 | 249 | 250 | 251 |
          252 | 253 | 254 | 255) =>
        state.call(group0_rule0)
      case (charCode @ _) =>
        if (charCode.<=(-2))
          state.call(group0_rule0)
        else
          state.call(group0_rule0)
    }

  def state0_6 =
    reader.charCode match {
      case (-1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |
          14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 |
          28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 |
          42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 |
          56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 |
          70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 |
          84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 |
          97) =>
        state.call(group0_rule1)
      case 98 => 6
      case (99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 |
          110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 |
          121 | 122 | 123 | 124 | 125 | 126 | 127 | 128 | 129 | 130 | 131 |
          132 | 133 | 134 | 135 | 136 | 137 | 138 | 139 | 140 | 141 | 142 |
          143 | 144 | 145 | 146 | 147 | 148 | 149 | 150 | 151 | 152 | 153 |
          154 | 155 | 156 | 157 | 158 | 159 | 160 | 161 | 162 | 163 | 164 |
          165 | 166 | 167 | 168 | 169 | 170 | 171 | 172 | 173 | 174 | 175 |
          176 | 177 | 178 | 179 | 180 | 181 | 182 | 183 | 184 | 185 | 186 |
          187 | 188 | 189 | 190 | 191 | 192 | 193 | 194 | 195 | 196 | 197 |
          198 | 199 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 |
          209 | 210 | 211 | 212 | 213 | 214 | 215 | 216 | 217 | 218 | 219 |
          220 | 221 | 222 | 223 | 224 | 225 | 226 | 227 | 228 | 229 | 230 |
          231 | 232 | 233 | 234 | 235 | 236 | 237 | 238 | 239 | 240 | 241 |
          242 | 243 | 244 | 245 | 246 | 247 | 248 | 249 | 250 | 251 | 252 |
          253 | 254 | 255) =>
        state.call(group0_rule1)
      case (charCode @ _) =>
        if (charCode.<=(-2))
          state.call(group0_rule1)
        else
          state.call(group0_rule1)
    }

  def group0_rule0() =
    Word.onFirstWord(
      ((x$1: String) => org.enso.syntax.text.AST.Var.apply(x$1))
    )

  def group0_rule1() =
    Word.onFirstWord(
      ((x$2: String) => org.enso.syntax.text.AST.Var.apply(x$2))
    )

  def group0_rule2() = Word.onNoErrSuffixFirstWord()

  def group0_rule3() = Word.onErrSuffixFirstWord()

  stateDefs.update(1, nextState1)

  def nextState1(state: Int): Int =
    state match {
      case 0 => state1_0
      case 1 => state1_1
      case 2 => state1_2
      case 3 => state1_3
      case 4 => state1_4
      case 5 => state1_5
      case 6 => state1_6
      case 7 => state1_7
    }

  def state1_0 =
    reader.charCode match {
      case -1 => 1
      case (0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 |
          15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 |
          29 | 30 | 31) =>
        2
      case 32 => 3
      case (33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 |
          46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 |
          60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 |
          74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 |
          88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 | 100 |
          101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 |
          112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 |
          123 | 124 | 125 | 126 | 127 | 128 | 129 | 130 | 131 | 132 | 133 |
          134 | 135 | 136 | 137 | 138 | 139 | 140 | 141 | 142 | 143 | 144 |
          145 | 146 | 147 | 148 | 149 | 150 | 151 | 152 | 153 | 154 | 155 |
          156 | 157 | 158 | 159 | 160 | 161 | 162 | 163 | 164 | 165 | 166 |
          167 | 168 | 169 | 170 | 171 | 172 | 173 | 174 | 175 | 176 | 177 |
          178 | 179 | 180 | 181 | 182 | 183 | 184 | 185 | 186 | 187 | 188 |
          189 | 190 | 191 | 192 | 193 | 194 | 195 | 196 | 197 | 198 | 199 |
          200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 | 209 | 210 |
          211 | 212 | 213 | 214 | 215 | 216 | 217 | 218 | 219 | 220 | 221 |
          222 | 223 | 224 | 225 | 226 | 227 | 228 | 229 | 230 | 231 | 232 |
          233 | 234 | 235 | 236 | 237 | 238 | 239 | 240 | 241 | 242 | 243 |
          244 | 245 | 246 | 247 | 248 | 249 | 250 | 251 | 252 | 253 | 254 |
          255) =>
        2
      case (charCode @ _) =>
        if (charCode.<=(-2))
          -2
        else
          2
    }

  def state1_1 = state.call(group1_rule2)

  def state1_2 = state.call(group1_rule3)

  def state1_3 =
    reader.charCode match {
      case (-1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |
          14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 |
          28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 |
          42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 |
          56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 |
          70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 |
          84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96) =>
        state.call(group1_rule3)
      case 97 => 4
      case 98 => 5
      case (99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 |
          110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 |
          121 | 122 | 123 | 124 | 125 | 126 | 127 | 128 | 129 | 130 | 131 |
          132 | 133 | 134 | 135 | 136 | 137 | 138 | 139 | 140 | 141 | 142 |
          143 | 144 | 145 | 146 | 147 | 148 | 149 | 150 | 151 | 152 | 153 |
          154 | 155 | 156 | 157 | 158 | 159 | 160 | 161 | 162 | 163 | 164 |
          165 | 166 | 167 | 168 | 169 | 170 | 171 | 172 | 173 | 174 | 175 |
          176 | 177 | 178 | 179 | 180 | 181 | 182 | 183 | 184 | 185 | 186 |
          187 | 188 | 189 | 190 | 191 | 192 | 193 | 194 | 195 | 196 | 197 |
          198 | 199 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 |
          209 | 210 | 211 | 212 | 213 | 214 | 215 | 216 | 217 | 218 | 219 |
          220 | 221 | 222 | 223 | 224 | 225 | 226 | 227 | 228 | 229 | 230 |
          231 | 232 | 233 | 234 | 235 | 236 | 237 | 238 | 239 | 240 | 241 |
          242 | 243 | 244 | 245 | 246 | 247 | 248 | 249 | 250 | 251 | 252 |
          253 | 254 | 255) =>
        state.call(group1_rule3)
      case (charCode @ _) =>
        if (charCode.<=(-2))
          state.call(group1_rule3)
        else
          state.call(group1_rule3)
    }

  def state1_4 =
    reader.charCode match {
      case (-1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |
          14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 |
          28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 |
          42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 |
          56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 |
          70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 |
          84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96) =>
        state.call(group1_rule0)
      case 97 => 6
      case (98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 |
          109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 |
          120 | 121 | 122 | 123 | 124 | 125 | 126 | 127 | 128 | 129 | 130 |
          131 | 132 | 133 | 134 | 135 | 136 | 137 | 138 | 139 | 140 | 141 |
          142 | 143 | 144 | 145 | 146 | 147 | 148 | 149 | 150 | 151 | 152 |
          153 | 154 | 155 | 156 | 157 | 158 | 159 | 160 | 161 | 162 | 163 |
          164 | 165 | 166 | 167 | 168 | 169 | 170 | 171 | 172 | 173 | 174 |
          175 | 176 | 177 | 178 | 179 | 180 | 181 | 182 | 183 | 184 | 185 |
          186 | 187 | 188 | 189 | 190 | 191 | 192 | 193 | 194 | 195 | 196 |
          197 | 198 | 199 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 |
          208 | 209 | 210 | 211 | 212 | 213 | 214 | 215 | 216 | 217 | 218 |
          219 | 220 | 221 | 222 | 223 | 224 | 225 | 226 | 227 | 228 | 229 |
          230 | 231 | 232 | 233 | 234 | 235 | 236 | 237 | 238 | 239 | 240 |
          241 | 242 | 243 | 244 | 245 | 246 | 247 | 248 | 249 | 250 | 251 |
          252 | 253 | 254 | 255) =>
        state.call(group1_rule0)
      case (charCode @ _) =>
        if (charCode.<=(-2))
          state.call(group1_rule0)
        else
          state.call(group1_rule0)
    }

  def state1_5 =
    reader.charCode match {
      case (-1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |
          14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 |
          28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 |
          42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 |
          56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 |
          70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 |
          84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 |
          97) =>
        state.call(group1_rule1)
      case 98 => 7
      case (99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 |
          110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 |
          121 | 122 | 123 | 124 | 125 | 126 | 127 | 128 | 129 | 130 | 131 |
          132 | 133 | 134 | 135 | 136 | 137 | 138 | 139 | 140 | 141 | 142 |
          143 | 144 | 145 | 146 | 147 | 148 | 149 | 150 | 151 | 152 | 153 |
          154 | 155 | 156 | 157 | 158 | 159 | 160 | 161 | 162 | 163 | 164 |
          165 | 166 | 167 | 168 | 169 | 170 | 171 | 172 | 173 | 174 | 175 |
          176 | 177 | 178 | 179 | 180 | 181 | 182 | 183 | 184 | 185 | 186 |
          187 | 188 | 189 | 190 | 191 | 192 | 193 | 194 | 195 | 196 | 197 |
          198 | 199 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 |
          209 | 210 | 211 | 212 | 213 | 214 | 215 | 216 | 217 | 218 | 219 |
          220 | 221 | 222 | 223 | 224 | 225 | 226 | 227 | 228 | 229 | 230 |
          231 | 232 | 233 | 234 | 235 | 236 | 237 | 238 | 239 | 240 | 241 |
          242 | 243 | 244 | 245 | 246 | 247 | 248 | 249 | 250 | 251 | 252 |
          253 | 254 | 255) =>
        state.call(group1_rule1)
      case (charCode @ _) =>
        if (charCode.<=(-2))
          state.call(group1_rule1)
        else
          state.call(group1_rule1)
    }

  def state1_6 =
    reader.charCode match {
      case (-1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |
          14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 |
          28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 |
          42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 |
          56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 |
          70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 |
          84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96) =>
        state.call(group1_rule0)
      case 97 => 6
      case (98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 |
          109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 |
          120 | 121 | 122 | 123 | 124 | 125 | 126 | 127 | 128 | 129 | 130 |
          131 | 132 | 133 | 134 | 135 | 136 | 137 | 138 | 139 | 140 | 141 |
          142 | 143 | 144 | 145 | 146 | 147 | 148 | 149 | 150 | 151 | 152 |
          153 | 154 | 155 | 156 | 157 | 158 | 159 | 160 | 161 | 162 | 163 |
          164 | 165 | 166 | 167 | 168 | 169 | 170 | 171 | 172 | 173 | 174 |
          175 | 176 | 177 | 178 | 179 | 180 | 181 | 182 | 183 | 184 | 185 |
          186 | 187 | 188 | 189 | 190 | 191 | 192 | 193 | 194 | 195 | 196 |
          197 | 198 | 199 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 |
          208 | 209 | 210 | 211 | 212 | 213 | 214 | 215 | 216 | 217 | 218 |
          219 | 220 | 221 | 222 | 223 | 224 | 225 | 226 | 227 | 228 | 229 |
          230 | 231 | 232 | 233 | 234 | 235 | 236 | 237 | 238 | 239 | 240 |
          241 | 242 | 243 | 244 | 245 | 246 | 247 | 248 | 249 | 250 | 251 |
          252 | 253 | 254 | 255) =>
        state.call(group1_rule0)
      case (charCode @ _) =>
        if (charCode.<=(-2))
          state.call(group1_rule0)
        else
          state.call(group1_rule0)
    }

  def state1_7 =
    reader.charCode match {
      case (-1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |
          14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 |
          28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 |
          42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 |
          56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 |
          70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 |
          84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 |
          97) =>
        state.call(group1_rule1)
      case 98 => 7
      case (99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 |
          110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 |
          121 | 122 | 123 | 124 | 125 | 126 | 127 | 128 | 129 | 130 | 131 |
          132 | 133 | 134 | 135 | 136 | 137 | 138 | 139 | 140 | 141 | 142 |
          143 | 144 | 145 | 146 | 147 | 148 | 149 | 150 | 151 | 152 | 153 |
          154 | 155 | 156 | 157 | 158 | 159 | 160 | 161 | 162 | 163 | 164 |
          165 | 166 | 167 | 168 | 169 | 170 | 171 | 172 | 173 | 174 | 175 |
          176 | 177 | 178 | 179 | 180 | 181 | 182 | 183 | 184 | 185 | 186 |
          187 | 188 | 189 | 190 | 191 | 192 | 193 | 194 | 195 | 196 | 197 |
          198 | 199 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 |
          209 | 210 | 211 | 212 | 213 | 214 | 215 | 216 | 217 | 218 | 219 |
          220 | 221 | 222 | 223 | 224 | 225 | 226 | 227 | 228 | 229 | 230 |
          231 | 232 | 233 | 234 | 235 | 236 | 237 | 238 | 239 | 240 | 241 |
          242 | 243 | 244 | 245 | 246 | 247 | 248 | 249 | 250 | 251 | 252 |
          253 | 254 | 255) =>
        state.call(group1_rule1)
      case (charCode @ _) =>
        if (charCode.<=(-2))
          state.call(group1_rule1)
        else
          state.call(group1_rule1)
    }

  def group1_rule0() =
    Word.onSpacedWord(
      ((x$3: String) => org.enso.syntax.text.AST.Var.apply(x$3))
    )

  def group1_rule1() =
    Word.onSpacedWord(
      ((x$4: String) => org.enso.syntax.text.AST.Var.apply(x$4))
    )

  def group1_rule2() = Word.onNoErrSuffix()

  def group1_rule3() = Word.onErrSuffix()
}
