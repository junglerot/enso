package org.enso.compiler.pass

import java.util.UUID

import org.enso.compiler.context.{InlineContext, ModuleContext}
import org.enso.compiler.core.IR
import org.enso.compiler.exception.CompilerError
import shapeless.=:!=

import scala.annotation.unused
import scala.reflect.ClassTag

/** A representation of a compiler pass that runs on the [[IR]] type.
  *
  * Passes that depend on the metadata of other passes should pull this metadata
  * directly from the IR, and not depend on metadata available in the context.
  *
  * Every pass should be implemented as a `case object` and should document in
  * its header the requirements it has for pass configuration and for passes
  * that must run before it.
  */
trait IRPass {

  /** An identifier for the pass. Useful for keying it in maps. */
  val key: IRPass.Identifier = IRPass.genId

  /** The type of the metadata object that the pass writes to the IR. */
  type Metadata <: IRPass.Metadata

  /** The type of configuration for the pass. */
  type Config <: IRPass.Configuration

  /** Executes the pass on the provided `ir`, and returns a possibly transformed
    * or annotated version of `ir`.
    *
    * @param ir the Enso IR to process
    * @param moduleContext a context object that contains the information needed
    *                      to process a module
    * @return `ir`, possibly having made transformations or annotations to that
    *         IR.
    */
  def runModule(ir: IR.Module, moduleContext: ModuleContext): IR.Module

  /** Executes the pass on the provided `ir`, and returns a possibly transformed
    * or annotated version of `ir` in an inline context.
    *
    * @param ir the Enso IR to process
    * @param inlineContext a context object that contains the information needed
    *                      for inline evaluation
    * @return `ir`, possibly having made transformations or annotations to that
    *         IR.
    */
  def runExpression(
    ir: IR.Expression,
    inlineContext: InlineContext
  ): IR.Expression
}
object IRPass {

  type Identifier = UUID

  /** Generates a pass identifier.
    *
    * @return a new pass identifier
    */
  def genId: Identifier = {
    UUID.randomUUID()
  }

  /** A representation of configuration for a given pass.
    *
    * Configuration must be able to be compared for equality.
    */
  trait Configuration {

    /** Whether or not the pass should write to the context. */
    var shouldWriteToContext: Boolean
  }
  object Configuration {
    case class Default() extends Configuration {
      override var shouldWriteToContext: Boolean = false
    }
  }

  /** This trait should be implemented by all metadata elements generated by
    * passes such that it can be stored in each IR node.
    */
  trait Metadata {

    /** The name of the metadata as a string. */
    val metadataName: String

    /** Casts the pass to the provided type.
      *
      * @param ev ensures that the pass type must be specified
      * @tparam T the type to cast to
      * @return `ev`, cast to `T` if it is a `T`
      */
    def as[T <: Metadata: ClassTag](
      implicit @unused ev: T =:!= Metadata
    ): Option[T] = {
      this match {
        case p: T => Some(p)
        case _    => None
      }
    }

    /** Unsafely casts the pass to the provided type.
      *
      * @param ev ensures that the pass type must be specified
      * @tparam T the type to cast to
      * @throws CompilerError if `this` is not a `T`
      * @return `this` as a `T`
      */
    @throws[CompilerError]
    def unsafeAs[T <: Metadata: ClassTag](
      implicit @unused ev: T =:!= Metadata
    ): T = {
      this
        .as[T]
        .getOrElse(
          throw new CompilerError(s"Cannot cast $this to the requested type.")
        )
    }
  }
  object Metadata {

    /** An empty metadata type for passes that do not create any metadata. */
    sealed case class Empty() extends Metadata {
      override val metadataName: String = "Empty"
    }
  }
}
